# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_molset')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_molset')
    _molset = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_molset', [dirname(__file__)])
        except ImportError:
            import _molset
            return _molset
        try:
            _mod = imp.load_module('_molset', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _molset = swig_import_helper()
    del swig_import_helper
else:
    import _molset
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _molset.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _molset.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _molset.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _molset.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _molset.SwigPyIterator_equal(self, x)

    def copy(self):
        return _molset.SwigPyIterator_copy(self)

    def next(self):
        return _molset.SwigPyIterator_next(self)

    def __next__(self):
        return _molset.SwigPyIterator___next__(self)

    def previous(self):
        return _molset.SwigPyIterator_previous(self)

    def advance(self, n):
        return _molset.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _molset.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _molset.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _molset.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _molset.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _molset.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _molset.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _molset.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _molset.ios_base_erase_event
    imbue_event = _molset.ios_base_imbue_event
    copyfmt_event = _molset.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _molset.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _molset.ios_base_flags(self, *args)

    def setf(self, *args):
        return _molset.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _molset.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _molset.ios_base_precision(self, *args)

    def width(self, *args):
        return _molset.ios_base_width(self, *args)
    if _newclass:
        sync_with_stdio = staticmethod(_molset.ios_base_sync_with_stdio)
    else:
        sync_with_stdio = _molset.ios_base_sync_with_stdio

    def imbue(self, __loc):
        return _molset.ios_base_imbue(self, __loc)

    def getloc(self):
        return _molset.ios_base_getloc(self)
    if _newclass:
        xalloc = staticmethod(_molset.ios_base_xalloc)
    else:
        xalloc = _molset.ios_base_xalloc

    def iword(self, __ix):
        return _molset.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _molset.ios_base_pword(self, __ix)
    __swig_destroy__ = _molset.delete_ios_base
    __del__ = lambda self: None
ios_base_swigregister = _molset.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _molset.cvar
ios_base.boolalpha = _molset.cvar.ios_base_boolalpha
ios_base.dec = _molset.cvar.ios_base_dec
ios_base.fixed = _molset.cvar.ios_base_fixed
ios_base.hex = _molset.cvar.ios_base_hex
ios_base.internal = _molset.cvar.ios_base_internal
ios_base.left = _molset.cvar.ios_base_left
ios_base.oct = _molset.cvar.ios_base_oct
ios_base.right = _molset.cvar.ios_base_right
ios_base.scientific = _molset.cvar.ios_base_scientific
ios_base.showbase = _molset.cvar.ios_base_showbase
ios_base.showpoint = _molset.cvar.ios_base_showpoint
ios_base.showpos = _molset.cvar.ios_base_showpos
ios_base.skipws = _molset.cvar.ios_base_skipws
ios_base.unitbuf = _molset.cvar.ios_base_unitbuf
ios_base.uppercase = _molset.cvar.ios_base_uppercase
ios_base.adjustfield = _molset.cvar.ios_base_adjustfield
ios_base.basefield = _molset.cvar.ios_base_basefield
ios_base.floatfield = _molset.cvar.ios_base_floatfield
ios_base.badbit = _molset.cvar.ios_base_badbit
ios_base.eofbit = _molset.cvar.ios_base_eofbit
ios_base.failbit = _molset.cvar.ios_base_failbit
ios_base.goodbit = _molset.cvar.ios_base_goodbit
ios_base.app = _molset.cvar.ios_base_app
ios_base.ate = _molset.cvar.ios_base_ate
ios_base.binary = _molset.cvar.ios_base_binary
ios_base.ios_base_in = _molset.cvar.ios_base_ios_base_in
ios_base.out = _molset.cvar.ios_base_out
ios_base.trunc = _molset.cvar.ios_base_trunc
ios_base.beg = _molset.cvar.ios_base_beg
ios_base.cur = _molset.cvar.ios_base_cur
ios_base.end = _molset.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
    return _molset.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _molset.ios_base_sync_with_stdio

def ios_base_xalloc():
    return _molset.ios_base_xalloc()
ios_base_xalloc = _molset.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr

    def rdstate(self):
        return _molset.ios_rdstate(self)

    def clear(self, *args):
        return _molset.ios_clear(self, *args)

    def setstate(self, __state):
        return _molset.ios_setstate(self, __state)

    def good(self):
        return _molset.ios_good(self)

    def eof(self):
        return _molset.ios_eof(self)

    def fail(self):
        return _molset.ios_fail(self)

    def bad(self):
        return _molset.ios_bad(self)

    def exceptions(self, *args):
        return _molset.ios_exceptions(self, *args)

    def __init__(self, __sb):
        this = _molset.new_ios(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ios
    __del__ = lambda self: None

    def tie(self, *args):
        return _molset.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _molset.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _molset.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _molset.ios_fill(self, *args)

    def imbue(self, __loc):
        return _molset.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _molset.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _molset.ios_widen(self, __c)
ios_swigregister = _molset.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _molset.new_ostream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ostream
    __del__ = lambda self: None

    def __lshift__(self, *args):
        return _molset.ostream___lshift__(self, *args)

    def put(self, __c):
        return _molset.ostream_put(self, __c)

    def write(self, __s, __n):
        return _molset.ostream_write(self, __s, __n)

    def flush(self):
        return _molset.ostream_flush(self)

    def tellp(self):
        return _molset.ostream_tellp(self)

    def seekp(self, *args):
        return _molset.ostream_seekp(self, *args)
ostream_swigregister = _molset.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _molset.new_istream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_istream
    __del__ = lambda self: None

    def __rshift__(self, *args):
        return _molset.istream___rshift__(self, *args)

    def gcount(self):
        return _molset.istream_gcount(self)

    def get(self, *args):
        return _molset.istream_get(self, *args)

    def getline(self, *args):
        return _molset.istream_getline(self, *args)

    def ignore(self, *args):
        return _molset.istream_ignore(self, *args)

    def peek(self):
        return _molset.istream_peek(self)

    def read(self, __s, __n):
        return _molset.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _molset.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _molset.istream_putback(self, __c)

    def unget(self):
        return _molset.istream_unget(self)

    def sync(self):
        return _molset.istream_sync(self)

    def tellg(self):
        return _molset.istream_tellg(self)

    def seekg(self, *args):
        return _molset.istream_seekg(self, *args)
istream_swigregister = _molset.istream_swigregister
istream_swigregister(istream)

class iostream(istream, ostream):
    __swig_setmethods__ = {}
    for _s in [istream, ostream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream, ostream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _molset.new_iostream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_iostream
    __del__ = lambda self: None
iostream_swigregister = _molset.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _molset.endl_cb_ptr

def endl(arg1):
    return _molset.endl(arg1)
endl = _molset.endl
ends_cb_ptr = _molset.ends_cb_ptr

def ends(arg1):
    return _molset.ends(arg1)
ends = _molset.ends
flush_cb_ptr = _molset.flush_cb_ptr

def flush(arg1):
    return _molset.flush(arg1)
flush = _molset.flush
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _molset.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _molset.IntVector___nonzero__(self)

    def __bool__(self):
        return _molset.IntVector___bool__(self)

    def __len__(self):
        return _molset.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _molset.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _molset.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _molset.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _molset.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _molset.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _molset.IntVector___setitem__(self, *args)

    def pop(self):
        return _molset.IntVector_pop(self)

    def append(self, x):
        return _molset.IntVector_append(self, x)

    def empty(self):
        return _molset.IntVector_empty(self)

    def size(self):
        return _molset.IntVector_size(self)

    def swap(self, v):
        return _molset.IntVector_swap(self, v)

    def begin(self):
        return _molset.IntVector_begin(self)

    def end(self):
        return _molset.IntVector_end(self)

    def rbegin(self):
        return _molset.IntVector_rbegin(self)

    def rend(self):
        return _molset.IntVector_rend(self)

    def clear(self):
        return _molset.IntVector_clear(self)

    def get_allocator(self):
        return _molset.IntVector_get_allocator(self)

    def pop_back(self):
        return _molset.IntVector_pop_back(self)

    def erase(self, *args):
        return _molset.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _molset.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _molset.IntVector_push_back(self, x)

    def front(self):
        return _molset.IntVector_front(self)

    def back(self):
        return _molset.IntVector_back(self)

    def assign(self, n, x):
        return _molset.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _molset.IntVector_resize(self, *args)

    def insert(self, *args):
        return _molset.IntVector_insert(self, *args)

    def reserve(self, n):
        return _molset.IntVector_reserve(self, n)

    def capacity(self):
        return _molset.IntVector_capacity(self)
    __swig_destroy__ = _molset.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _molset.IntVector_swigregister
IntVector_swigregister(IntVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _molset.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _molset.FloatVector___nonzero__(self)

    def __bool__(self):
        return _molset.FloatVector___bool__(self)

    def __len__(self):
        return _molset.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _molset.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _molset.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _molset.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _molset.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _molset.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _molset.FloatVector___setitem__(self, *args)

    def pop(self):
        return _molset.FloatVector_pop(self)

    def append(self, x):
        return _molset.FloatVector_append(self, x)

    def empty(self):
        return _molset.FloatVector_empty(self)

    def size(self):
        return _molset.FloatVector_size(self)

    def swap(self, v):
        return _molset.FloatVector_swap(self, v)

    def begin(self):
        return _molset.FloatVector_begin(self)

    def end(self):
        return _molset.FloatVector_end(self)

    def rbegin(self):
        return _molset.FloatVector_rbegin(self)

    def rend(self):
        return _molset.FloatVector_rend(self)

    def clear(self):
        return _molset.FloatVector_clear(self)

    def get_allocator(self):
        return _molset.FloatVector_get_allocator(self)

    def pop_back(self):
        return _molset.FloatVector_pop_back(self)

    def erase(self, *args):
        return _molset.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _molset.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _molset.FloatVector_push_back(self, x)

    def front(self):
        return _molset.FloatVector_front(self)

    def back(self):
        return _molset.FloatVector_back(self)

    def assign(self, n, x):
        return _molset.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _molset.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _molset.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _molset.FloatVector_reserve(self, n)

    def capacity(self):
        return _molset.FloatVector_capacity(self)
    __swig_destroy__ = _molset.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _molset.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _molset.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _molset.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _molset.DoubleVector___bool__(self)

    def __len__(self):
        return _molset.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _molset.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _molset.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _molset.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _molset.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _molset.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _molset.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _molset.DoubleVector_pop(self)

    def append(self, x):
        return _molset.DoubleVector_append(self, x)

    def empty(self):
        return _molset.DoubleVector_empty(self)

    def size(self):
        return _molset.DoubleVector_size(self)

    def swap(self, v):
        return _molset.DoubleVector_swap(self, v)

    def begin(self):
        return _molset.DoubleVector_begin(self)

    def end(self):
        return _molset.DoubleVector_end(self)

    def rbegin(self):
        return _molset.DoubleVector_rbegin(self)

    def rend(self):
        return _molset.DoubleVector_rend(self)

    def clear(self):
        return _molset.DoubleVector_clear(self)

    def get_allocator(self):
        return _molset.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _molset.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _molset.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _molset.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _molset.DoubleVector_push_back(self, x)

    def front(self):
        return _molset.DoubleVector_front(self)

    def back(self):
        return _molset.DoubleVector_back(self)

    def assign(self, n, x):
        return _molset.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _molset.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _molset.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _molset.DoubleVector_reserve(self, n)

    def capacity(self):
        return _molset.DoubleVector_capacity(self)
    __swig_destroy__ = _molset.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _molset.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _molset.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _molset.StringVector___nonzero__(self)

    def __bool__(self):
        return _molset.StringVector___bool__(self)

    def __len__(self):
        return _molset.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _molset.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _molset.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _molset.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _molset.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _molset.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _molset.StringVector___setitem__(self, *args)

    def pop(self):
        return _molset.StringVector_pop(self)

    def append(self, x):
        return _molset.StringVector_append(self, x)

    def empty(self):
        return _molset.StringVector_empty(self)

    def size(self):
        return _molset.StringVector_size(self)

    def swap(self, v):
        return _molset.StringVector_swap(self, v)

    def begin(self):
        return _molset.StringVector_begin(self)

    def end(self):
        return _molset.StringVector_end(self)

    def rbegin(self):
        return _molset.StringVector_rbegin(self)

    def rend(self):
        return _molset.StringVector_rend(self)

    def clear(self):
        return _molset.StringVector_clear(self)

    def get_allocator(self):
        return _molset.StringVector_get_allocator(self)

    def pop_back(self):
        return _molset.StringVector_pop_back(self)

    def erase(self, *args):
        return _molset.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _molset.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _molset.StringVector_push_back(self, x)

    def front(self):
        return _molset.StringVector_front(self)

    def back(self):
        return _molset.StringVector_back(self)

    def assign(self, n, x):
        return _molset.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _molset.StringVector_resize(self, *args)

    def insert(self, *args):
        return _molset.StringVector_insert(self, *args)

    def reserve(self, n):
        return _molset.StringVector_reserve(self, n)

    def capacity(self):
        return _molset.StringVector_capacity(self)
    __swig_destroy__ = _molset.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _molset.StringVector_swigregister
StringVector_swigregister(StringVector)

class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_intp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_intp
    __del__ = lambda self: None

    def assign(self, value):
        return _molset.intp_assign(self, value)

    def value(self):
        return _molset.intp_value(self)

    def cast(self):
        return _molset.intp_cast(self)
    if _newclass:
        frompointer = staticmethod(_molset.intp_frompointer)
    else:
        frompointer = _molset.intp_frompointer
intp_swigregister = _molset.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(t):
    return _molset.intp_frompointer(t)
intp_frompointer = _molset.intp_frompointer

class doublep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doublep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doublep, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_doublep()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_doublep
    __del__ = lambda self: None

    def assign(self, value):
        return _molset.doublep_assign(self, value)

    def value(self):
        return _molset.doublep_value(self)

    def cast(self):
        return _molset.doublep_cast(self)
    if _newclass:
        frompointer = staticmethod(_molset.doublep_frompointer)
    else:
        frompointer = _molset.doublep_frompointer
doublep_swigregister = _molset.doublep_swigregister
doublep_swigregister(doublep)

def doublep_frompointer(t):
    return _molset.doublep_frompointer(t)
doublep_frompointer = _molset.doublep_frompointer


def intp_to_voidp(x):
    return _molset.intp_to_voidp(x)
intp_to_voidp = _molset.intp_to_voidp

def voidp_to_intp(x):
    return _molset.voidp_to_intp(x)
voidp_to_intp = _molset.voidp_to_intp

def PredAbsOrd(x):
    return _molset.PredAbsOrd(x)
PredAbsOrd = _molset.PredAbsOrd

def PredAbsChr(x):
    return _molset.PredAbsChr(x)
PredAbsChr = _molset.PredAbsChr
class Branch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Branch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Branch, name)
    __repr__ = _swig_repr
    __swig_setmethods__["set"] = _molset.Branch_set_set
    __swig_getmethods__["set"] = _molset.Branch_set_get
    if _newclass:
        set = _swig_property(_molset.Branch_set_get, _molset.Branch_set_set)
    __swig_setmethods__["ptr"] = _molset.Branch_ptr_set
    __swig_getmethods__["ptr"] = _molset.Branch_ptr_get
    if _newclass:
        ptr = _swig_property(_molset.Branch_ptr_get, _molset.Branch_ptr_set)
    __swig_setmethods__["limit"] = _molset.Branch_limit_set
    __swig_getmethods__["limit"] = _molset.Branch_limit_get
    if _newclass:
        limit = _swig_property(_molset.Branch_limit_get, _molset.Branch_limit_set)
    __swig_setmethods__["val"] = _molset.Branch_val_set
    __swig_getmethods__["val"] = _molset.Branch_val_get
    if _newclass:
        val = _swig_property(_molset.Branch_val_get, _molset.Branch_val_set)
    __swig_setmethods__["dval"] = _molset.Branch_dval_set
    __swig_getmethods__["dval"] = _molset.Branch_dval_get
    if _newclass:
        dval = _swig_property(_molset.Branch_dval_get, _molset.Branch_dval_set)

    def __init__(self):
        this = _molset.new_Branch()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_Branch
    __del__ = lambda self: None
Branch_swigregister = _molset.Branch_swigregister
Branch_swigregister(Branch)
OpAnd = cvar.OpAnd
OpOr = cvar.OpOr
OpNot = cvar.OpNot
OpEqual = cvar.OpEqual
OpNotEq = cvar.OpNotEq
OpLess = cvar.OpLess
OpMore = cvar.OpMore
OpLessEq = cvar.OpLessEq
OpMoreEq = cvar.OpMoreEq
OpConst = cvar.OpConst
OpWithin = cvar.OpWithin
OpMember = cvar.OpMember
OpLftProp = cvar.OpLftProp
OpLftVal = cvar.OpLftVal
OpRgtProp = cvar.OpRgtProp
OpRgtVal = cvar.OpRgtVal
PropIdent = cvar.PropIdent
PropXCord = cvar.PropXCord
PropYCord = cvar.PropYCord
PropZCord = cvar.PropZCord
PropTemp = cvar.PropTemp
PropRad = cvar.PropRad
PropResId = cvar.PropResId
PropName = cvar.PropName
PropChain = cvar.PropChain
PropResName = cvar.PropResName
PropSelect = cvar.PropSelect
PropElemNo = cvar.PropElemNo
PropModel = cvar.PropModel
PropChemGroup = cvar.PropChemGroup
PropMolPtr = cvar.PropMolPtr
PropAtGroup = cvar.PropAtGroup
PredAlpha = cvar.PredAlpha
PredAmino = cvar.PredAmino
PredAT = cvar.PredAT
PredBonded = cvar.PredBonded
PredCG = cvar.PredCG
PredCystine = cvar.PredCystine
PredDNA = cvar.PredDNA
PredHelix = cvar.PredHelix
PredHetero = cvar.PredHetero
PredHydrogen = cvar.PredHydrogen
PredIon = cvar.PredIon
PredLigand = cvar.PredLigand
PredMainChain = cvar.PredMainChain
PredNucleic = cvar.PredNucleic
PredProtein = cvar.PredProtein
PredPurine = cvar.PredPurine
PredPyrimidine = cvar.PredPyrimidine
PredRNA = cvar.PredRNA
PredSelected = cvar.PredSelected
PredSheet = cvar.PredSheet
PredSidechain = cvar.PredSidechain
PredSolvent = cvar.PredSolvent
PredTurn = cvar.PredTurn
PredWater = cvar.PredWater
PredAcidic = cvar.PredAcidic
PredAcyclic = cvar.PredAcyclic
PredAliphatic = cvar.PredAliphatic
PredAromatic = cvar.PredAromatic
PredBasic = cvar.PredBasic
PredBuried = cvar.PredBuried
PredCharged = cvar.PredCharged
PredCyclic = cvar.PredCyclic
PredHydrophobic = cvar.PredHydrophobic
PredLarge = cvar.PredLarge
PredMedium = cvar.PredMedium
PredNeutral = cvar.PredNeutral
PredPolar = cvar.PredPolar
PredSmall = cvar.PredSmall
PredSurface = cvar.PredSurface

class AtomExpr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomExpr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtomExpr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_AtomExpr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomExpr
    __del__ = lambda self: None
    __swig_setmethods__["type"] = _molset.AtomExpr_type_set
    __swig_getmethods__["type"] = _molset.AtomExpr_type_get
    if _newclass:
        type = _swig_property(_molset.AtomExpr_type_get, _molset.AtomExpr_type_set)
    __swig_setmethods__["rgt"] = _molset.AtomExpr_rgt_set
    __swig_getmethods__["rgt"] = _molset.AtomExpr_rgt_get
    if _newclass:
        rgt = _swig_property(_molset.AtomExpr_rgt_get, _molset.AtomExpr_rgt_set)
    __swig_setmethods__["lft"] = _molset.AtomExpr_lft_set
    __swig_getmethods__["lft"] = _molset.AtomExpr_lft_get
    if _newclass:
        lft = _swig_property(_molset.AtomExpr_lft_get, _molset.AtomExpr_lft_set)

    def EvaluateExprFor(self, aptr):
        return _molset.AtomExpr_EvaluateExprFor(self, aptr)

    def EvaluateProperty(self, prop):
        return _molset.AtomExpr_EvaluateProperty(self, prop)
    if _newclass:
        LookUpAtGroupExpr = staticmethod(_molset.AtomExpr_LookUpAtGroupExpr)
    else:
        LookUpAtGroupExpr = _molset.AtomExpr_LookUpAtGroupExpr
    if _newclass:
        LookUpElement = staticmethod(_molset.AtomExpr_LookUpElement)
    else:
        LookUpElement = _molset.AtomExpr_LookUpElement
    if _newclass:
        ParsePrimitiveExpr = staticmethod(_molset.AtomExpr_ParsePrimitiveExpr)
    else:
        ParsePrimitiveExpr = _molset.AtomExpr_ParsePrimitiveExpr
    if _newclass:
        ParseExpression = staticmethod(_molset.AtomExpr_ParseExpression)
    else:
        ParseExpression = _molset.AtomExpr_ParseExpression
    if _newclass:
        CreateTrueExpr = staticmethod(_molset.AtomExpr_CreateTrueExpr)
    else:
        CreateTrueExpr = _molset.AtomExpr_CreateTrueExpr
    if _newclass:
        CreateFalseExpr = staticmethod(_molset.AtomExpr_CreateFalseExpr)
    else:
        CreateFalseExpr = _molset.AtomExpr_CreateFalseExpr
    if _newclass:
        IsTrueExpr = staticmethod(_molset.AtomExpr_IsTrueExpr)
    else:
        IsTrueExpr = _molset.AtomExpr_IsTrueExpr
    if _newclass:
        IsFalseExpr = staticmethod(_molset.AtomExpr_IsFalseExpr)
    else:
        IsFalseExpr = _molset.AtomExpr_IsFalseExpr
AtomExpr_swigregister = _molset.AtomExpr_swigregister
AtomExpr_swigregister(AtomExpr)

def AtomExpr_LookUpAtGroupExpr(grp_name, pmset):
    return _molset.AtomExpr_LookUpAtGroupExpr(grp_name, pmset)
AtomExpr_LookUpAtGroupExpr = _molset.AtomExpr_LookUpAtGroupExpr

def AtomExpr_LookUpElement(arg2):
    return _molset.AtomExpr_LookUpElement(arg2)
AtomExpr_LookUpElement = _molset.AtomExpr_LookUpElement

def AtomExpr_ParsePrimitiveExpr(pmset, expr_str, cr_pos):
    return _molset.AtomExpr_ParsePrimitiveExpr(pmset, expr_str, cr_pos)
AtomExpr_ParsePrimitiveExpr = _molset.AtomExpr_ParsePrimitiveExpr

def AtomExpr_ParseExpression(expr_str, pmset):
    return _molset.AtomExpr_ParseExpression(expr_str, pmset)
AtomExpr_ParseExpression = _molset.AtomExpr_ParseExpression

def AtomExpr_CreateTrueExpr():
    return _molset.AtomExpr_CreateTrueExpr()
AtomExpr_CreateTrueExpr = _molset.AtomExpr_CreateTrueExpr

def AtomExpr_CreateFalseExpr():
    return _molset.AtomExpr_CreateFalseExpr()
AtomExpr_CreateFalseExpr = _molset.AtomExpr_CreateFalseExpr

def AtomExpr_IsTrueExpr(p_expr):
    return _molset.AtomExpr_IsTrueExpr(p_expr)
AtomExpr_IsTrueExpr = _molset.AtomExpr_IsTrueExpr

def AtomExpr_IsFalseExpr(p_expr):
    return _molset.AtomExpr_IsFalseExpr(p_expr)
AtomExpr_IsFalseExpr = _molset.AtomExpr_IsFalseExpr

TRUE = _molset.TRUE
FALSE = _molset.FALSE
TNT_BASE_OFFSET = _molset.TNT_BASE_OFFSET
RUN_FOREGROUND = _molset.RUN_FOREGROUND
RUN_BACKGROUND = _molset.RUN_BACKGROUND
class dirent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dirent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dirent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["d_name"] = _molset.dirent_d_name_set
    __swig_getmethods__["d_name"] = _molset.dirent_d_name_get
    if _newclass:
        d_name = _swig_property(_molset.dirent_d_name_get, _molset.dirent_d_name_set)

    def __init__(self):
        this = _molset.new_dirent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_dirent
    __del__ = lambda self: None
dirent_swigregister = _molset.dirent_swigregister
dirent_swigregister(dirent)
SelectRad = cvar.SelectRad
PI = cvar.PI
BOHR_TO_ANG = cvar.BOHR_TO_ANG
ANG_TO_BOHR = cvar.ANG_TO_BOHR
HARTREE_TO_EV = cvar.HARTREE_TO_EV
HARTREE_TO_KT = cvar.HARTREE_TO_KT
KT_TO_KJ_PER_MOL = cvar.KT_TO_KJ_PER_MOL
HARTREE_TO_JOULES = cvar.HARTREE_TO_JOULES
AU_TO_KG = cvar.AU_TO_KG
EV_TO_KT = cvar.EV_TO_KT
AVOG_NUM = cvar.AVOG_NUM
CAL_TO_JOULES = cvar.CAL_TO_JOULES
PLANCK = cvar.PLANCK
LIGHT_SPEED_CM = cvar.LIGHT_SPEED_CM
BOLTZ = cvar.BOLTZ
R_HALF_KCAL = cvar.R_HALF_KCAL
HARTREE_TO_KCAL = cvar.HARTREE_TO_KCAL
KT_300_KCAL = cvar.KT_300_KCAL
RAD_TO_DEG = cvar.RAD_TO_DEG
DEG_TO_RAD = cvar.DEG_TO_RAD
EL_ANG_TO_DEBYE = cvar.EL_ANG_TO_DEBYE
AU_TO_DEBYE = cvar.AU_TO_DEBYE
ItemCount = cvar.ItemCount
AdvPickAtom = cvar.AdvPickAtom
AdvPickNumber = cvar.AdvPickNumber
AdvSelectCount = cvar.AdvSelectCount
AdvName = cvar.AdvName
AdvIdent = cvar.AdvIdent
AdvClass = cvar.AdvClass
AdvImage = cvar.AdvImage
AdvPickCoord = cvar.AdvPickCoord


def opendir(arg1):
    return _molset.opendir(arg1)
opendir = _molset.opendir

def closedir(arg1):
    return _molset.closedir(arg1)
closedir = _molset.closedir

def readdir(arg1):
    return _molset.readdir(arg1)
readdir = _molset.readdir

def rewinddir(arg1):
    return _molset.rewinddir(arg1)
rewinddir = _molset.rewinddir

def ErrorMessage(str):
    return _molset.ErrorMessage(str)
ErrorMessage = _molset.ErrorMessage

def PrintMessage(str):
    return _molset.PrintMessage(str)
PrintMessage = _molset.PrintMessage

def ha_copy_file(src, tgt, mode=0):
    return _molset.ha_copy_file(src, tgt, mode)
ha_copy_file = _molset.ha_copy_file

def ha_delete_file(fname):
    return _molset.ha_delete_file(fname)
ha_delete_file = _molset.ha_delete_file

def RedirectIOToConsole():
    return _molset.RedirectIOToConsole()
RedirectIOToConsole = _molset.RedirectIOToConsole

def RedirectIOToFile(fname):
    return _molset.RedirectIOToFile(fname)
RedirectIOToFile = _molset.RedirectIOToFile

def RedirectIOToMultipleFilesMPI(fname):
    return _molset.RedirectIOToMultipleFilesMPI(fname)
RedirectIOToMultipleFilesMPI = _molset.RedirectIOToMultipleFilesMPI

def write_log_(str, n):
    return _molset.write_log_(str, n)
write_log_ = _molset.write_log_

def RestoreIOToConsole():
    return _molset.RestoreIOToConsole()
RestoreIOToConsole = _molset.RestoreIOToConsole

def PrintLog(str):
    return _molset.PrintLog(str)
PrintLog = _molset.PrintLog

def ErrorInMod(module, msg):
    return _molset.ErrorInMod(module, msg)
ErrorInMod = _molset.ErrorInMod
class IntIntMap_parent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntIntMap_parent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntIntMap_parent, name)
    __repr__ = _swig_repr

    def clear(self):
        return _molset.IntIntMap_parent_clear(self)

    def count(self, ikey):
        return _molset.IntIntMap_parent_count(self, ikey)

    def size(self):
        return _molset.IntIntMap_parent_size(self)

    def empty(self):
        return _molset.IntIntMap_parent_empty(self)

    def __init__(self):
        this = _molset.new_IntIntMap_parent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_IntIntMap_parent
    __del__ = lambda self: None
IntIntMap_parent_swigregister = _molset.IntIntMap_parent_swigregister
IntIntMap_parent_swigregister(IntIntMap_parent)
path_sep = cvar.path_sep
FLOAT_E16_8 = cvar.FLOAT_E16_8
FLOAT_F12_7 = cvar.FLOAT_F12_7
FLOAT_F15_7 = cvar.FLOAT_F15_7
FLOAT_F8_3 = cvar.FLOAT_F8_3

class IntPtrMap_parent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntPtrMap_parent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntPtrMap_parent, name)
    __repr__ = _swig_repr

    def clear(self):
        return _molset.IntPtrMap_parent_clear(self)

    def count(self, ikey):
        return _molset.IntPtrMap_parent_count(self, ikey)

    def size(self):
        return _molset.IntPtrMap_parent_size(self)

    def empty(self):
        return _molset.IntPtrMap_parent_empty(self)

    def __init__(self):
        this = _molset.new_IntPtrMap_parent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_IntPtrMap_parent
    __del__ = lambda self: None
IntPtrMap_parent_swigregister = _molset.IntPtrMap_parent_swigregister
IntPtrMap_parent_swigregister(IntPtrMap_parent)

class PtrIntMap_parent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PtrIntMap_parent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PtrIntMap_parent, name)
    __repr__ = _swig_repr

    def clear(self):
        return _molset.PtrIntMap_parent_clear(self)

    def count(self, ptr):
        return _molset.PtrIntMap_parent_count(self, ptr)

    def size(self):
        return _molset.PtrIntMap_parent_size(self)

    def empty(self):
        return _molset.PtrIntMap_parent_empty(self)

    def __init__(self):
        this = _molset.new_PtrIntMap_parent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_PtrIntMap_parent
    __del__ = lambda self: None
PtrIntMap_parent_swigregister = _molset.PtrIntMap_parent_swigregister
PtrIntMap_parent_swigregister(PtrIntMap_parent)

class PtrPtrMap_parent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PtrPtrMap_parent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PtrPtrMap_parent, name)
    __repr__ = _swig_repr

    def clear(self):
        return _molset.PtrPtrMap_parent_clear(self)

    def count(self, ptr):
        return _molset.PtrPtrMap_parent_count(self, ptr)

    def size(self):
        return _molset.PtrPtrMap_parent_size(self)

    def empty(self):
        return _molset.PtrPtrMap_parent_empty(self)

    def __init__(self):
        this = _molset.new_PtrPtrMap_parent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_PtrPtrMap_parent
    __del__ = lambda self: None
PtrPtrMap_parent_swigregister = _molset.PtrPtrMap_parent_swigregister
PtrPtrMap_parent_swigregister(PtrPtrMap_parent)

class PtrDoubleMap_parent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PtrDoubleMap_parent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PtrDoubleMap_parent, name)
    __repr__ = _swig_repr

    def clear(self):
        return _molset.PtrDoubleMap_parent_clear(self)

    def count(self, ptr):
        return _molset.PtrDoubleMap_parent_count(self, ptr)

    def size(self):
        return _molset.PtrDoubleMap_parent_size(self)

    def empty(self):
        return _molset.PtrDoubleMap_parent_empty(self)

    def __init__(self):
        this = _molset.new_PtrDoubleMap_parent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_PtrDoubleMap_parent
    __del__ = lambda self: None
PtrDoubleMap_parent_swigregister = _molset.PtrDoubleMap_parent_swigregister
PtrDoubleMap_parent_swigregister(PtrDoubleMap_parent)

class IntIntMap_itr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntIntMap_itr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntIntMap_itr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_IntIntMap_itr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetKey(self):
        return _molset.IntIntMap_itr_GetKey(self)

    def GetVal(self):
        return _molset.IntIntMap_itr_GetVal(self)

    def __eq__(self, ref):
        return _molset.IntIntMap_itr___eq__(self, ref)

    def __ne__(self, ref):
        return _molset.IntIntMap_itr___ne__(self, ref)

    def next(self):
        return _molset.IntIntMap_itr_next(self)
    __swig_destroy__ = _molset.delete_IntIntMap_itr
    __del__ = lambda self: None
IntIntMap_itr_swigregister = _molset.IntIntMap_itr_swigregister
IntIntMap_itr_swigregister(IntIntMap_itr)

class IntIntMap(IntIntMap_parent):
    __swig_setmethods__ = {}
    for _s in [IntIntMap_parent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntIntMap, name, value)
    __swig_getmethods__ = {}
    for _s in [IntIntMap_parent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntIntMap, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_IntIntMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def begin(self):
        return _molset.IntIntMap_begin(self)

    def end(self):
        return _molset.IntIntMap_end(self)

    def GetVal(self, ikey):
        return _molset.IntIntMap_GetVal(self, ikey)

    def SetVal(self, ikey, val):
        return _molset.IntIntMap_SetVal(self, ikey, val)
    __swig_setmethods__["ierr"] = _molset.IntIntMap_ierr_set
    __swig_getmethods__["ierr"] = _molset.IntIntMap_ierr_get
    if _newclass:
        ierr = _swig_property(_molset.IntIntMap_ierr_get, _molset.IntIntMap_ierr_set)
    __swig_destroy__ = _molset.delete_IntIntMap
    __del__ = lambda self: None
IntIntMap_swigregister = _molset.IntIntMap_swigregister
IntIntMap_swigregister(IntIntMap)

class IntPtrMap_itr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntPtrMap_itr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntPtrMap_itr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_IntPtrMap_itr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetKey(self):
        return _molset.IntPtrMap_itr_GetKey(self)

    def GetVal(self):
        return _molset.IntPtrMap_itr_GetVal(self)

    def __eq__(self, ref):
        return _molset.IntPtrMap_itr___eq__(self, ref)

    def __ne__(self, ref):
        return _molset.IntPtrMap_itr___ne__(self, ref)

    def next(self):
        return _molset.IntPtrMap_itr_next(self)
    __swig_destroy__ = _molset.delete_IntPtrMap_itr
    __del__ = lambda self: None
IntPtrMap_itr_swigregister = _molset.IntPtrMap_itr_swigregister
IntPtrMap_itr_swigregister(IntPtrMap_itr)

class IntPtrMap(IntPtrMap_parent):
    __swig_setmethods__ = {}
    for _s in [IntPtrMap_parent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntPtrMap, name, value)
    __swig_getmethods__ = {}
    for _s in [IntPtrMap_parent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntPtrMap, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_IntPtrMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def begin(self):
        return _molset.IntPtrMap_begin(self)

    def end(self):
        return _molset.IntPtrMap_end(self)

    def GetVal(self, ikey):
        return _molset.IntPtrMap_GetVal(self, ikey)

    def SetVal(self, ikey, val):
        return _molset.IntPtrMap_SetVal(self, ikey, val)
    __swig_setmethods__["ierr"] = _molset.IntPtrMap_ierr_set
    __swig_getmethods__["ierr"] = _molset.IntPtrMap_ierr_get
    if _newclass:
        ierr = _swig_property(_molset.IntPtrMap_ierr_get, _molset.IntPtrMap_ierr_set)
    __swig_destroy__ = _molset.delete_IntPtrMap
    __del__ = lambda self: None
IntPtrMap_swigregister = _molset.IntPtrMap_swigregister
IntPtrMap_swigregister(IntPtrMap)

class PtrIntMap_itr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PtrIntMap_itr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PtrIntMap_itr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_PtrIntMap_itr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetKey(self):
        return _molset.PtrIntMap_itr_GetKey(self)

    def GetVal(self):
        return _molset.PtrIntMap_itr_GetVal(self)

    def __eq__(self, ref):
        return _molset.PtrIntMap_itr___eq__(self, ref)

    def __ne__(self, ref):
        return _molset.PtrIntMap_itr___ne__(self, ref)

    def next(self):
        return _molset.PtrIntMap_itr_next(self)
    __swig_destroy__ = _molset.delete_PtrIntMap_itr
    __del__ = lambda self: None
PtrIntMap_itr_swigregister = _molset.PtrIntMap_itr_swigregister
PtrIntMap_itr_swigregister(PtrIntMap_itr)

class PtrIntMap(PtrIntMap_parent):
    __swig_setmethods__ = {}
    for _s in [PtrIntMap_parent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PtrIntMap, name, value)
    __swig_getmethods__ = {}
    for _s in [PtrIntMap_parent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PtrIntMap, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_PtrIntMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def begin(self):
        return _molset.PtrIntMap_begin(self)

    def end(self):
        return _molset.PtrIntMap_end(self)

    def GetVal(self, ptr):
        return _molset.PtrIntMap_GetVal(self, ptr)

    def SetVal(self, ptr, val):
        return _molset.PtrIntMap_SetVal(self, ptr, val)
    __swig_setmethods__["ierr"] = _molset.PtrIntMap_ierr_set
    __swig_getmethods__["ierr"] = _molset.PtrIntMap_ierr_get
    if _newclass:
        ierr = _swig_property(_molset.PtrIntMap_ierr_get, _molset.PtrIntMap_ierr_set)
    __swig_destroy__ = _molset.delete_PtrIntMap
    __del__ = lambda self: None
PtrIntMap_swigregister = _molset.PtrIntMap_swigregister
PtrIntMap_swigregister(PtrIntMap)

class PtrPtrMap_itr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PtrPtrMap_itr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PtrPtrMap_itr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_PtrPtrMap_itr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetKey(self):
        return _molset.PtrPtrMap_itr_GetKey(self)

    def GetVal(self):
        return _molset.PtrPtrMap_itr_GetVal(self)

    def __eq__(self, ref):
        return _molset.PtrPtrMap_itr___eq__(self, ref)

    def __ne__(self, ref):
        return _molset.PtrPtrMap_itr___ne__(self, ref)

    def next(self):
        return _molset.PtrPtrMap_itr_next(self)
    __swig_destroy__ = _molset.delete_PtrPtrMap_itr
    __del__ = lambda self: None
PtrPtrMap_itr_swigregister = _molset.PtrPtrMap_itr_swigregister
PtrPtrMap_itr_swigregister(PtrPtrMap_itr)

class PtrPtrMap(PtrPtrMap_parent):
    __swig_setmethods__ = {}
    for _s in [PtrPtrMap_parent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PtrPtrMap, name, value)
    __swig_getmethods__ = {}
    for _s in [PtrPtrMap_parent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PtrPtrMap, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_PtrPtrMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def begin(self):
        return _molset.PtrPtrMap_begin(self)

    def end(self):
        return _molset.PtrPtrMap_end(self)

    def GetVal(self, ptr):
        return _molset.PtrPtrMap_GetVal(self, ptr)

    def SetVal(self, ptr, val):
        return _molset.PtrPtrMap_SetVal(self, ptr, val)
    __swig_setmethods__["ierr"] = _molset.PtrPtrMap_ierr_set
    __swig_getmethods__["ierr"] = _molset.PtrPtrMap_ierr_get
    if _newclass:
        ierr = _swig_property(_molset.PtrPtrMap_ierr_get, _molset.PtrPtrMap_ierr_set)
    __swig_destroy__ = _molset.delete_PtrPtrMap
    __del__ = lambda self: None
PtrPtrMap_swigregister = _molset.PtrPtrMap_swigregister
PtrPtrMap_swigregister(PtrPtrMap)

class PtrDoubleMap_itr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PtrDoubleMap_itr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PtrDoubleMap_itr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_PtrDoubleMap_itr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetKey(self):
        return _molset.PtrDoubleMap_itr_GetKey(self)

    def GetVal(self):
        return _molset.PtrDoubleMap_itr_GetVal(self)

    def __eq__(self, ref):
        return _molset.PtrDoubleMap_itr___eq__(self, ref)

    def __ne__(self, ref):
        return _molset.PtrDoubleMap_itr___ne__(self, ref)

    def next(self):
        return _molset.PtrDoubleMap_itr_next(self)
    __swig_destroy__ = _molset.delete_PtrDoubleMap_itr
    __del__ = lambda self: None
PtrDoubleMap_itr_swigregister = _molset.PtrDoubleMap_itr_swigregister
PtrDoubleMap_itr_swigregister(PtrDoubleMap_itr)

class PtrDoubleMap(PtrDoubleMap_parent):
    __swig_setmethods__ = {}
    for _s in [PtrDoubleMap_parent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PtrDoubleMap, name, value)
    __swig_getmethods__ = {}
    for _s in [PtrDoubleMap_parent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PtrDoubleMap, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_PtrDoubleMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def begin(self):
        return _molset.PtrDoubleMap_begin(self)

    def end(self):
        return _molset.PtrDoubleMap_end(self)

    def GetVal(self, ptr):
        return _molset.PtrDoubleMap_GetVal(self, ptr)

    def SetVal(self, ptr, val):
        return _molset.PtrDoubleMap_SetVal(self, ptr, val)
    __swig_setmethods__["ierr"] = _molset.PtrDoubleMap_ierr_set
    __swig_getmethods__["ierr"] = _molset.PtrDoubleMap_ierr_get
    if _newclass:
        ierr = _swig_property(_molset.PtrDoubleMap_ierr_get, _molset.PtrDoubleMap_ierr_set)
    __swig_destroy__ = _molset.delete_PtrDoubleMap
    __del__ = lambda self: None
PtrDoubleMap_swigregister = _molset.PtrDoubleMap_swigregister
PtrDoubleMap_swigregister(PtrDoubleMap)

class PtrSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PtrSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PtrSet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_PtrSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsMember(self, ptr):
        return _molset.PtrSet_IsMember(self, ptr)
    __swig_destroy__ = _molset.delete_PtrSet
    __del__ = lambda self: None
PtrSet_swigregister = _molset.PtrSet_swigregister
PtrSet_swigregister(PtrSet)

class VecPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_VecPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Delete(self, ptr_set):
        return _molset.VecPtr_Delete(self, ptr_set)
    __swig_destroy__ = _molset.delete_VecPtr
    __del__ = lambda self: None
VecPtr_swigregister = _molset.VecPtr_swigregister
VecPtr_swigregister(VecPtr)


def GetDirFromFileName(fname):
    return _molset.GetDirFromFileName(fname)
GetDirFromFileName = _molset.GetDirFromFileName

def GetPrefixFromFullName(fname):
    return _molset.GetPrefixFromFullName(fname)
GetPrefixFromFullName = _molset.GetPrefixFromFullName

def GetExtFromFileName(fname):
    return _molset.GetExtFromFileName(fname)
GetExtFromFileName = _molset.GetExtFromFileName

def IsFloat(str):
    return _molset.IsFloat(str)
IsFloat = _molset.IsFloat

def IsInt(str):
    return _molset.IsInt(str)
IsInt = _molset.IsInt

def ToString(ival):
    return _molset.ToString(ival)
ToString = _molset.ToString

def ToDouble(str):
    return _molset.ToDouble(str)
ToDouble = _molset.ToDouble

def StdXMLHeader():
    return _molset.StdXMLHeader()
StdXMLHeader = _molset.StdXMLHeader

def HarlemDataHeader():
    return _molset.HarlemDataHeader()
HarlemDataHeader = _molset.HarlemDataHeader

def HarlemDataFooter():
    return _molset.HarlemDataFooter()
HarlemDataFooter = _molset.HarlemDataFooter
class StrDoubleMap_itr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrDoubleMap_itr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrDoubleMap_itr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_StrDoubleMap_itr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetKey(self):
        return _molset.StrDoubleMap_itr_GetKey(self)

    def GetVal(self):
        return _molset.StrDoubleMap_itr_GetVal(self)

    def GetFirst(self):
        return _molset.StrDoubleMap_itr_GetFirst(self)

    def GetNext(self):
        return _molset.StrDoubleMap_itr_GetNext(self)
    __swig_destroy__ = _molset.delete_StrDoubleMap_itr
    __del__ = lambda self: None
StrDoubleMap_itr_swigregister = _molset.StrDoubleMap_itr_swigregister
StrDoubleMap_itr_swigregister(StrDoubleMap_itr)

class StrDoubleMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrDoubleMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrDoubleMap, name)
    __repr__ = _swig_repr

    def clear(self):
        return _molset.StrDoubleMap_clear(self)

    def size(self):
        return _molset.StrDoubleMap_size(self)

    def GetVal(self, str):
        return _molset.StrDoubleMap_GetVal(self, str)

    def SetVal(self, str, val):
        return _molset.StrDoubleMap_SetVal(self, str, val)
    __swig_setmethods__["ierr"] = _molset.StrDoubleMap_ierr_set
    __swig_getmethods__["ierr"] = _molset.StrDoubleMap_ierr_get
    if _newclass:
        ierr = _swig_property(_molset.StrDoubleMap_ierr_get, _molset.StrDoubleMap_ierr_set)

    def __init__(self):
        this = _molset.new_StrDoubleMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_StrDoubleMap
    __del__ = lambda self: None
StrDoubleMap_swigregister = _molset.StrDoubleMap_swigregister
StrDoubleMap_swigregister(StrDoubleMap)

class StrStrMap_itr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrStrMap_itr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrStrMap_itr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_StrStrMap_itr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetKey(self):
        return _molset.StrStrMap_itr_GetKey(self)

    def GetVal(self):
        return _molset.StrStrMap_itr_GetVal(self)

    def GetFirst(self):
        return _molset.StrStrMap_itr_GetFirst(self)

    def GetNext(self):
        return _molset.StrStrMap_itr_GetNext(self)
    __swig_destroy__ = _molset.delete_StrStrMap_itr
    __del__ = lambda self: None
StrStrMap_itr_swigregister = _molset.StrStrMap_itr_swigregister
StrStrMap_itr_swigregister(StrStrMap_itr)

class StrStrMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrStrMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrStrMap, name)
    __repr__ = _swig_repr

    def clear(self):
        return _molset.StrStrMap_clear(self)

    def count(self, str):
        return _molset.StrStrMap_count(self, str)

    def size(self):
        return _molset.StrStrMap_size(self)

    def GetVal(self, str):
        return _molset.StrStrMap_GetVal(self, str)

    def SetVal(self, str, val):
        return _molset.StrStrMap_SetVal(self, str, val)
    __swig_setmethods__["ierr"] = _molset.StrStrMap_ierr_set
    __swig_getmethods__["ierr"] = _molset.StrStrMap_ierr_get
    if _newclass:
        ierr = _swig_property(_molset.StrStrMap_ierr_get, _molset.StrStrMap_ierr_set)

    def __init__(self):
        this = _molset.new_StrStrMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_StrStrMap
    __del__ = lambda self: None
StrStrMap_swigregister = _molset.StrStrMap_swigregister
StrStrMap_swigregister(StrStrMap)

class StrIntMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrIntMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrIntMap, name)
    __repr__ = _swig_repr

    def clear(self):
        return _molset.StrIntMap_clear(self)

    def size(self):
        return _molset.StrIntMap_size(self)

    def count(self, str):
        return _molset.StrIntMap_count(self, str)

    def GetVal(self, str):
        return _molset.StrIntMap_GetVal(self, str)

    def SetVal(self, str, val):
        return _molset.StrIntMap_SetVal(self, str, val)
    __swig_setmethods__["ierr"] = _molset.StrIntMap_ierr_set
    __swig_getmethods__["ierr"] = _molset.StrIntMap_ierr_get
    if _newclass:
        ierr = _swig_property(_molset.StrIntMap_ierr_get, _molset.StrIntMap_ierr_set)

    def __init__(self):
        this = _molset.new_StrIntMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_StrIntMap
    __del__ = lambda self: None
StrIntMap_swigregister = _molset.StrIntMap_swigregister
StrIntMap_swigregister(StrIntMap)

class StrVec(StringVector):
    __swig_setmethods__ = {}
    for _s in [StringVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrVec, name, value)
    __swig_getmethods__ = {}
    for _s in [StringVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrVec, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_StrVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reserve(self, n):
        return _molset.StrVec_reserve(self, n)

    def resize(self, n, str):
        return _molset.StrVec_resize(self, n, str)

    def size(self):
        return _molset.StrVec_size(self)

    def push_back(self, str):
        return _molset.StrVec_push_back(self, str)

    def GetVal(self, idx):
        return _molset.StrVec_GetVal(self, idx)

    def SetVal(self, idx, val):
        return _molset.StrVec_SetVal(self, idx, val)
    __swig_destroy__ = _molset.delete_StrVec
    __del__ = lambda self: None
StrVec_swigregister = _molset.StrVec_swigregister
StrVec_swigregister(StrVec)


def stricmp_loc(str1, str2):
    return _molset.stricmp_loc(str1, str2)
stricmp_loc = _molset.stricmp_loc

def strcmp_trunc(str1, str2):
    return _molset.strcmp_trunc(str1, str2)
strcmp_trunc = _molset.strcmp_trunc

def strcpy_to_fort(str_fort, c_str, len_fort):
    return _molset.strcpy_to_fort(str_fort, c_str, len_fort)
strcpy_to_fort = _molset.strcpy_to_fort

def stricmp_trunc(str1, str2):
    return _molset.stricmp_trunc(str1, str2)
stricmp_trunc = _molset.stricmp_trunc
class HaConsts(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaConsts, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaConsts, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaConsts()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaConsts
    __del__ = lambda self: None
    __swig_setmethods__["e"] = _molset.HaConsts_e_set
    __swig_getmethods__["e"] = _molset.HaConsts_e_get
    if _newclass:
        e = _swig_property(_molset.HaConsts_e_get, _molset.HaConsts_e_set)
    __swig_setmethods__["Na"] = _molset.HaConsts_Na_set
    __swig_getmethods__["Na"] = _molset.HaConsts_Na_get
    if _newclass:
        Na = _swig_property(_molset.HaConsts_Na_get, _molset.HaConsts_Na_set)
    __swig_setmethods__["R"] = _molset.HaConsts_R_set
    __swig_getmethods__["R"] = _molset.HaConsts_R_get
    if _newclass:
        R = _swig_property(_molset.HaConsts_R_get, _molset.HaConsts_R_set)
    __swig_setmethods__["k"] = _molset.HaConsts_k_set
    __swig_getmethods__["k"] = _molset.HaConsts_k_get
    if _newclass:
        k = _swig_property(_molset.HaConsts_k_get, _molset.HaConsts_k_set)
    __swig_setmethods__["eV"] = _molset.HaConsts_eV_set
    __swig_getmethods__["eV"] = _molset.HaConsts_eV_get
    if _newclass:
        eV = _swig_property(_molset.HaConsts_eV_get, _molset.HaConsts_eV_set)
    __swig_setmethods__["a0"] = _molset.HaConsts_a0_set
    __swig_getmethods__["a0"] = _molset.HaConsts_a0_get
    if _newclass:
        a0 = _swig_property(_molset.HaConsts_a0_get, _molset.HaConsts_a0_set)
    __swig_setmethods__["Eh"] = _molset.HaConsts_Eh_set
    __swig_getmethods__["Eh"] = _molset.HaConsts_Eh_get
    if _newclass:
        Eh = _swig_property(_molset.HaConsts_Eh_get, _molset.HaConsts_Eh_set)
    __swig_setmethods__["Eh_eV"] = _molset.HaConsts_Eh_eV_set
    __swig_getmethods__["Eh_eV"] = _molset.HaConsts_Eh_eV_get
    if _newclass:
        Eh_eV = _swig_property(_molset.HaConsts_Eh_eV_get, _molset.HaConsts_Eh_eV_set)
    __swig_setmethods__["Tstd"] = _molset.HaConsts_Tstd_set
    __swig_getmethods__["Tstd"] = _molset.HaConsts_Tstd_get
    if _newclass:
        Tstd = _swig_property(_molset.HaConsts_Tstd_get, _molset.HaConsts_Tstd_set)
    __swig_setmethods__["J_to_eV"] = _molset.HaConsts_J_to_eV_set
    __swig_getmethods__["J_to_eV"] = _molset.HaConsts_J_to_eV_get
    if _newclass:
        J_to_eV = _swig_property(_molset.HaConsts_J_to_eV_get, _molset.HaConsts_J_to_eV_set)
    __swig_setmethods__["J_to_Eh"] = _molset.HaConsts_J_to_Eh_set
    __swig_getmethods__["J_to_Eh"] = _molset.HaConsts_J_to_Eh_get
    if _newclass:
        J_to_Eh = _swig_property(_molset.HaConsts_J_to_Eh_get, _molset.HaConsts_J_to_Eh_set)
    __swig_setmethods__["kT_to_J"] = _molset.HaConsts_kT_to_J_set
    __swig_getmethods__["kT_to_J"] = _molset.HaConsts_kT_to_J_get
    if _newclass:
        kT_to_J = _swig_property(_molset.HaConsts_kT_to_J_get, _molset.HaConsts_kT_to_J_set)
    __swig_setmethods__["J_to_kT"] = _molset.HaConsts_J_to_kT_set
    __swig_getmethods__["J_to_kT"] = _molset.HaConsts_J_to_kT_get
    if _newclass:
        J_to_kT = _swig_property(_molset.HaConsts_J_to_kT_get, _molset.HaConsts_J_to_kT_set)
    __swig_setmethods__["kT_to_kJ_mol"] = _molset.HaConsts_kT_to_kJ_mol_set
    __swig_getmethods__["kT_to_kJ_mol"] = _molset.HaConsts_kT_to_kJ_mol_get
    if _newclass:
        kT_to_kJ_mol = _swig_property(_molset.HaConsts_kT_to_kJ_mol_get, _molset.HaConsts_kT_to_kJ_mol_set)
    __swig_setmethods__["kJ_mol_to_kT"] = _molset.HaConsts_kJ_mol_to_kT_set
    __swig_getmethods__["kJ_mol_to_kT"] = _molset.HaConsts_kJ_mol_to_kT_get
    if _newclass:
        kJ_mol_to_kT = _swig_property(_molset.HaConsts_kJ_mol_to_kT_get, _molset.HaConsts_kJ_mol_to_kT_set)
    __swig_setmethods__["kT_to_Eh"] = _molset.HaConsts_kT_to_Eh_set
    __swig_getmethods__["kT_to_Eh"] = _molset.HaConsts_kT_to_Eh_get
    if _newclass:
        kT_to_Eh = _swig_property(_molset.HaConsts_kT_to_Eh_get, _molset.HaConsts_kT_to_Eh_set)
    __swig_setmethods__["Bohr_to_A"] = _molset.HaConsts_Bohr_to_A_set
    __swig_getmethods__["Bohr_to_A"] = _molset.HaConsts_Bohr_to_A_get
    if _newclass:
        Bohr_to_A = _swig_property(_molset.HaConsts_Bohr_to_A_get, _molset.HaConsts_Bohr_to_A_set)
    __swig_setmethods__["A_to_Bohr"] = _molset.HaConsts_A_to_Bohr_set
    __swig_getmethods__["A_to_Bohr"] = _molset.HaConsts_A_to_Bohr_get
    if _newclass:
        A_to_Bohr = _swig_property(_molset.HaConsts_A_to_Bohr_get, _molset.HaConsts_A_to_Bohr_set)
    __swig_setmethods__["ef"] = _molset.HaConsts_ef_set
    __swig_getmethods__["ef"] = _molset.HaConsts_ef_get
    if _newclass:
        ef = _swig_property(_molset.HaConsts_ef_get, _molset.HaConsts_ef_set)
    __swig_setmethods__["Naf"] = _molset.HaConsts_Naf_set
    __swig_getmethods__["Naf"] = _molset.HaConsts_Naf_get
    if _newclass:
        Naf = _swig_property(_molset.HaConsts_Naf_get, _molset.HaConsts_Naf_set)
    __swig_setmethods__["calorie_to_J"] = _molset.HaConsts_calorie_to_J_set
    __swig_getmethods__["calorie_to_J"] = _molset.HaConsts_calorie_to_J_get
    if _newclass:
        calorie_to_J = _swig_property(_molset.HaConsts_calorie_to_J_get, _molset.HaConsts_calorie_to_J_set)
    __swig_setmethods__["kT_to_kcal_mol"] = _molset.HaConsts_kT_to_kcal_mol_set
    __swig_getmethods__["kT_to_kcal_mol"] = _molset.HaConsts_kT_to_kcal_mol_get
    if _newclass:
        kT_to_kcal_mol = _swig_property(_molset.HaConsts_kT_to_kcal_mol_get, _molset.HaConsts_kT_to_kcal_mol_set)
HaConsts_swigregister = _molset.HaConsts_swigregister
HaConsts_swigregister(HaConsts)

class TiXmlCursor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TiXmlCursor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TiXmlCursor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_TiXmlCursor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self):
        return _molset.TiXmlCursor_Clear(self)
    __swig_setmethods__["row"] = _molset.TiXmlCursor_row_set
    __swig_getmethods__["row"] = _molset.TiXmlCursor_row_get
    if _newclass:
        row = _swig_property(_molset.TiXmlCursor_row_get, _molset.TiXmlCursor_row_set)
    __swig_setmethods__["col"] = _molset.TiXmlCursor_col_set
    __swig_getmethods__["col"] = _molset.TiXmlCursor_col_get
    if _newclass:
        col = _swig_property(_molset.TiXmlCursor_col_get, _molset.TiXmlCursor_col_set)
    __swig_destroy__ = _molset.delete_TiXmlCursor
    __del__ = lambda self: None
TiXmlCursor_swigregister = _molset.TiXmlCursor_swigregister
TiXmlCursor_swigregister(TiXmlCursor)
TIXML_MAJOR_VERSION = cvar.TIXML_MAJOR_VERSION
TIXML_MINOR_VERSION = cvar.TIXML_MINOR_VERSION
TIXML_PATCH_VERSION = cvar.TIXML_PATCH_VERSION

class TiXmlVisitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TiXmlVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TiXmlVisitor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_TiXmlVisitor
    __del__ = lambda self: None

    def VisitEnter(self, *args):
        return _molset.TiXmlVisitor_VisitEnter(self, *args)

    def VisitExit(self, *args):
        return _molset.TiXmlVisitor_VisitExit(self, *args)

    def Visit(self, *args):
        return _molset.TiXmlVisitor_Visit(self, *args)

    def __init__(self):
        this = _molset.new_TiXmlVisitor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
TiXmlVisitor_swigregister = _molset.TiXmlVisitor_swigregister
TiXmlVisitor_swigregister(TiXmlVisitor)

TIXML_SUCCESS = _molset.TIXML_SUCCESS
TIXML_NO_ATTRIBUTE = _molset.TIXML_NO_ATTRIBUTE
TIXML_WRONG_TYPE = _molset.TIXML_WRONG_TYPE
TIXML_ENCODING_UNKNOWN = _molset.TIXML_ENCODING_UNKNOWN
TIXML_ENCODING_UTF8 = _molset.TIXML_ENCODING_UTF8
TIXML_ENCODING_LEGACY = _molset.TIXML_ENCODING_LEGACY
class TiXmlBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TiXmlBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TiXmlBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_TiXmlBase
    __del__ = lambda self: None

    def Print(self, cfile, depth):
        return _molset.TiXmlBase_Print(self, cfile, depth)
    if _newclass:
        SetCondenseWhiteSpace = staticmethod(_molset.TiXmlBase_SetCondenseWhiteSpace)
    else:
        SetCondenseWhiteSpace = _molset.TiXmlBase_SetCondenseWhiteSpace
    if _newclass:
        IsWhiteSpaceCondensed = staticmethod(_molset.TiXmlBase_IsWhiteSpaceCondensed)
    else:
        IsWhiteSpaceCondensed = _molset.TiXmlBase_IsWhiteSpaceCondensed

    def Row(self):
        return _molset.TiXmlBase_Row(self)

    def Column(self):
        return _molset.TiXmlBase_Column(self)

    def SetUserData(self, user):
        return _molset.TiXmlBase_SetUserData(self, user)

    def GetUserData(self, *args):
        return _molset.TiXmlBase_GetUserData(self, *args)

    def Parse(self, p, data, encoding):
        return _molset.TiXmlBase_Parse(self, p, data, encoding)
    TIXML_NO_ERROR = _molset.TiXmlBase_TIXML_NO_ERROR
    TIXML_ERROR = _molset.TiXmlBase_TIXML_ERROR
    TIXML_ERROR_OPENING_FILE = _molset.TiXmlBase_TIXML_ERROR_OPENING_FILE
    TIXML_ERROR_OUT_OF_MEMORY = _molset.TiXmlBase_TIXML_ERROR_OUT_OF_MEMORY
    TIXML_ERROR_PARSING_ELEMENT = _molset.TiXmlBase_TIXML_ERROR_PARSING_ELEMENT
    TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME = _molset.TiXmlBase_TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME
    TIXML_ERROR_READING_ELEMENT_VALUE = _molset.TiXmlBase_TIXML_ERROR_READING_ELEMENT_VALUE
    TIXML_ERROR_READING_ATTRIBUTES = _molset.TiXmlBase_TIXML_ERROR_READING_ATTRIBUTES
    TIXML_ERROR_PARSING_EMPTY = _molset.TiXmlBase_TIXML_ERROR_PARSING_EMPTY
    TIXML_ERROR_READING_END_TAG = _molset.TiXmlBase_TIXML_ERROR_READING_END_TAG
    TIXML_ERROR_PARSING_UNKNOWN = _molset.TiXmlBase_TIXML_ERROR_PARSING_UNKNOWN
    TIXML_ERROR_PARSING_COMMENT = _molset.TiXmlBase_TIXML_ERROR_PARSING_COMMENT
    TIXML_ERROR_PARSING_DECLARATION = _molset.TiXmlBase_TIXML_ERROR_PARSING_DECLARATION
    TIXML_ERROR_DOCUMENT_EMPTY = _molset.TiXmlBase_TIXML_ERROR_DOCUMENT_EMPTY
    TIXML_ERROR_EMBEDDED_NULL = _molset.TiXmlBase_TIXML_ERROR_EMBEDDED_NULL
    TIXML_ERROR_PARSING_CDATA = _molset.TiXmlBase_TIXML_ERROR_PARSING_CDATA
    TIXML_ERROR_DOCUMENT_TOP_ONLY = _molset.TiXmlBase_TIXML_ERROR_DOCUMENT_TOP_ONLY
    TIXML_ERROR_STRING_COUNT = _molset.TiXmlBase_TIXML_ERROR_STRING_COUNT
TiXmlBase_swigregister = _molset.TiXmlBase_swigregister
TiXmlBase_swigregister(TiXmlBase)
TIXML_DEFAULT_ENCODING = cvar.TIXML_DEFAULT_ENCODING

def TiXmlBase_SetCondenseWhiteSpace(condense):
    return _molset.TiXmlBase_SetCondenseWhiteSpace(condense)
TiXmlBase_SetCondenseWhiteSpace = _molset.TiXmlBase_SetCondenseWhiteSpace

def TiXmlBase_IsWhiteSpaceCondensed():
    return _molset.TiXmlBase_IsWhiteSpaceCondensed()
TiXmlBase_IsWhiteSpaceCondensed = _molset.TiXmlBase_IsWhiteSpaceCondensed
TiXmlBase.utf8ByteTable = _molset.cvar.TiXmlBase_utf8ByteTable

class TiXmlNode(TiXmlBase):
    __swig_setmethods__ = {}
    for _s in [TiXmlBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TiXmlNode, name, value)
    __swig_getmethods__ = {}
    for _s in [TiXmlBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TiXmlNode, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DOCUMENT = _molset.TiXmlNode_DOCUMENT
    ELEMENT = _molset.TiXmlNode_ELEMENT
    COMMENT = _molset.TiXmlNode_COMMENT
    UNKNOWN = _molset.TiXmlNode_UNKNOWN
    TEXT = _molset.TiXmlNode_TEXT
    DECLARATION = _molset.TiXmlNode_DECLARATION
    TYPECOUNT = _molset.TiXmlNode_TYPECOUNT
    __swig_destroy__ = _molset.delete_TiXmlNode
    __del__ = lambda self: None

    def Value(self):
        return _molset.TiXmlNode_Value(self)

    def ValueStr(self):
        return _molset.TiXmlNode_ValueStr(self)

    def SetValue(self, *args):
        return _molset.TiXmlNode_SetValue(self, *args)

    def Clear(self):
        return _molset.TiXmlNode_Clear(self)

    def Parent(self, *args):
        return _molset.TiXmlNode_Parent(self, *args)

    def FirstChild(self, *args):
        return _molset.TiXmlNode_FirstChild(self, *args)

    def LastChild(self, *args):
        return _molset.TiXmlNode_LastChild(self, *args)

    def IterateChildren(self, *args):
        return _molset.TiXmlNode_IterateChildren(self, *args)

    def InsertEndChild(self, addThis):
        return _molset.TiXmlNode_InsertEndChild(self, addThis)

    def LinkEndChild(self, addThis):
        return _molset.TiXmlNode_LinkEndChild(self, addThis)

    def InsertBeforeChild(self, beforeThis, addThis):
        return _molset.TiXmlNode_InsertBeforeChild(self, beforeThis, addThis)

    def InsertAfterChild(self, afterThis, addThis):
        return _molset.TiXmlNode_InsertAfterChild(self, afterThis, addThis)

    def ReplaceChild(self, replaceThis, withThis):
        return _molset.TiXmlNode_ReplaceChild(self, replaceThis, withThis)

    def RemoveChild(self, removeThis):
        return _molset.TiXmlNode_RemoveChild(self, removeThis)

    def PreviousSibling(self, *args):
        return _molset.TiXmlNode_PreviousSibling(self, *args)

    def NextSibling(self, *args):
        return _molset.TiXmlNode_NextSibling(self, *args)

    def NextSiblingElement(self, *args):
        return _molset.TiXmlNode_NextSiblingElement(self, *args)

    def FirstChildElement(self, *args):
        return _molset.TiXmlNode_FirstChildElement(self, *args)

    def Type(self):
        return _molset.TiXmlNode_Type(self)

    def GetDocument(self, *args):
        return _molset.TiXmlNode_GetDocument(self, *args)

    def NoChildren(self):
        return _molset.TiXmlNode_NoChildren(self)

    def ToDocument(self, *args):
        return _molset.TiXmlNode_ToDocument(self, *args)

    def ToElement(self, *args):
        return _molset.TiXmlNode_ToElement(self, *args)

    def ToComment(self, *args):
        return _molset.TiXmlNode_ToComment(self, *args)

    def ToUnknown(self, *args):
        return _molset.TiXmlNode_ToUnknown(self, *args)

    def ToText(self, *args):
        return _molset.TiXmlNode_ToText(self, *args)

    def ToDeclaration(self, *args):
        return _molset.TiXmlNode_ToDeclaration(self, *args)

    def Clone(self):
        return _molset.TiXmlNode_Clone(self)

    def Accept(self, visitor):
        return _molset.TiXmlNode_Accept(self, visitor)

    def LastChildElementRecursively(self, _value):
        return _molset.TiXmlNode_LastChildElementRecursively(self, _value)
TiXmlNode_swigregister = _molset.TiXmlNode_swigregister
TiXmlNode_swigregister(TiXmlNode)

class TiXmlAttribute(TiXmlBase):
    __swig_setmethods__ = {}
    for _s in [TiXmlBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TiXmlAttribute, name, value)
    __swig_getmethods__ = {}
    for _s in [TiXmlBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TiXmlAttribute, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_TiXmlAttribute(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Name(self):
        return _molset.TiXmlAttribute_Name(self)

    def Value(self):
        return _molset.TiXmlAttribute_Value(self)

    def ValueStr(self):
        return _molset.TiXmlAttribute_ValueStr(self)

    def IntValue(self):
        return _molset.TiXmlAttribute_IntValue(self)

    def DoubleValue(self):
        return _molset.TiXmlAttribute_DoubleValue(self)

    def NameTStr(self):
        return _molset.TiXmlAttribute_NameTStr(self)

    def QueryIntValue(self, _value):
        return _molset.TiXmlAttribute_QueryIntValue(self, _value)

    def QueryDoubleValue(self, _value):
        return _molset.TiXmlAttribute_QueryDoubleValue(self, _value)

    def SetIntValue(self, _value):
        return _molset.TiXmlAttribute_SetIntValue(self, _value)

    def SetDoubleValue(self, _value):
        return _molset.TiXmlAttribute_SetDoubleValue(self, _value)

    def SetName(self, *args):
        return _molset.TiXmlAttribute_SetName(self, *args)

    def SetValue(self, *args):
        return _molset.TiXmlAttribute_SetValue(self, *args)

    def Next(self, *args):
        return _molset.TiXmlAttribute_Next(self, *args)

    def Previous(self, *args):
        return _molset.TiXmlAttribute_Previous(self, *args)

    def __eq__(self, rhs):
        return _molset.TiXmlAttribute___eq__(self, rhs)

    def __lt__(self, rhs):
        return _molset.TiXmlAttribute___lt__(self, rhs)

    def __gt__(self, rhs):
        return _molset.TiXmlAttribute___gt__(self, rhs)

    def Parse(self, p, data, encoding):
        return _molset.TiXmlAttribute_Parse(self, p, data, encoding)

    def Print(self, *args):
        return _molset.TiXmlAttribute_Print(self, *args)

    def SetDocument(self, doc):
        return _molset.TiXmlAttribute_SetDocument(self, doc)
    __swig_destroy__ = _molset.delete_TiXmlAttribute
    __del__ = lambda self: None
TiXmlAttribute_swigregister = _molset.TiXmlAttribute_swigregister
TiXmlAttribute_swigregister(TiXmlAttribute)

class TiXmlAttributeSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TiXmlAttributeSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TiXmlAttributeSet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_TiXmlAttributeSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_TiXmlAttributeSet
    __del__ = lambda self: None

    def Add(self, attribute):
        return _molset.TiXmlAttributeSet_Add(self, attribute)

    def Remove(self, attribute):
        return _molset.TiXmlAttributeSet_Remove(self, attribute)

    def First(self, *args):
        return _molset.TiXmlAttributeSet_First(self, *args)

    def Last(self, *args):
        return _molset.TiXmlAttributeSet_Last(self, *args)

    def Find(self, *args):
        return _molset.TiXmlAttributeSet_Find(self, *args)
TiXmlAttributeSet_swigregister = _molset.TiXmlAttributeSet_swigregister
TiXmlAttributeSet_swigregister(TiXmlAttributeSet)

class TiXmlElement(TiXmlNode):
    __swig_setmethods__ = {}
    for _s in [TiXmlNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TiXmlElement, name, value)
    __swig_getmethods__ = {}
    for _s in [TiXmlNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TiXmlElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_TiXmlElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_TiXmlElement
    __del__ = lambda self: None

    def CStrAttribute(self, name):
        return _molset.TiXmlElement_CStrAttribute(self, name)

    def StdStrAttribute(self, name):
        return _molset.TiXmlElement_StdStrAttribute(self, name)

    def QueryFloatAttribute(self, name, _value):
        return _molset.TiXmlElement_QueryFloatAttribute(self, name, _value)

    def Attribute(self, *args):
        return _molset.TiXmlElement_Attribute(self, *args)

    def QueryIntAttribute(self, *args):
        return _molset.TiXmlElement_QueryIntAttribute(self, *args)

    def QueryDoubleAttribute(self, *args):
        return _molset.TiXmlElement_QueryDoubleAttribute(self, *args)

    def SetAttribute(self, *args):
        return _molset.TiXmlElement_SetAttribute(self, *args)

    def RemoveAttribute(self, *args):
        return _molset.TiXmlElement_RemoveAttribute(self, *args)

    def FirstAttribute(self, *args):
        return _molset.TiXmlElement_FirstAttribute(self, *args)

    def LastAttribute(self, *args):
        return _molset.TiXmlElement_LastAttribute(self, *args)

    def GetText(self):
        return _molset.TiXmlElement_GetText(self)

    def Clone(self):
        return _molset.TiXmlElement_Clone(self)

    def Print(self, cfile, depth):
        return _molset.TiXmlElement_Print(self, cfile, depth)

    def Parse(self, p, data, encoding):
        return _molset.TiXmlElement_Parse(self, p, data, encoding)

    def ToElement(self, *args):
        return _molset.TiXmlElement_ToElement(self, *args)

    def Accept(self, visitor):
        return _molset.TiXmlElement_Accept(self, visitor)

    def SetCStrAttribute(self, name, val):
        return _molset.TiXmlElement_SetCStrAttribute(self, name, val)

    def SetStdStrAttribute(self, name, val):
        return _molset.TiXmlElement_SetStdStrAttribute(self, name, val)

    def SetBoolAttribute(self, name, val):
        return _molset.TiXmlElement_SetBoolAttribute(self, name, val)

    def SetIntAttribute(self, name, val):
        return _molset.TiXmlElement_SetIntAttribute(self, name, val)

    def SetFloatAttribute(self, *args):
        return _molset.TiXmlElement_SetFloatAttribute(self, *args)

    def SetDoubleAttribute(self, *args):
        return _molset.TiXmlElement_SetDoubleAttribute(self, *args)

    def SetStdStrIndex(self, name, val, StrList):
        return _molset.TiXmlElement_SetStdStrIndex(self, name, val, StrList)

    def SetArrOfBoolAttribute(self, name, vals, n):
        return _molset.TiXmlElement_SetArrOfBoolAttribute(self, name, vals, n)

    def SetArrOfIntAttribute(self, name, vals, n):
        return _molset.TiXmlElement_SetArrOfIntAttribute(self, name, vals, n)

    def SetArrOfFloatAttribute(self, *args):
        return _molset.TiXmlElement_SetArrOfFloatAttribute(self, *args)

    def SetArrOfDoubleAttribute(self, *args):
        return _molset.TiXmlElement_SetArrOfDoubleAttribute(self, *args)

    def GetCStrAttribute(self, name, val):
        return _molset.TiXmlElement_GetCStrAttribute(self, name, val)

    def GetStdStrAttribute(self, name, val):
        return _molset.TiXmlElement_GetStdStrAttribute(self, name, val)

    def GetBoolAttribute(self, name, val):
        return _molset.TiXmlElement_GetBoolAttribute(self, name, val)

    def GetIntAttribute(self, name, val):
        return _molset.TiXmlElement_GetIntAttribute(self, name, val)

    def GetFloatAttribute(self, name, val):
        return _molset.TiXmlElement_GetFloatAttribute(self, name, val)

    def GetDoubleAttribute(self, name, val):
        return _molset.TiXmlElement_GetDoubleAttribute(self, name, val)

    def GetStdStrIndex(self, name, val, StrList):
        return _molset.TiXmlElement_GetStdStrIndex(self, name, val, StrList)

    def GetBoolAttributeRetVal(self, name):
        return _molset.TiXmlElement_GetBoolAttributeRetVal(self, name)

    def GetIntAttributeRetVal(self, name):
        return _molset.TiXmlElement_GetIntAttributeRetVal(self, name)

    def GetFloatAttributeRetVal(self, name):
        return _molset.TiXmlElement_GetFloatAttributeRetVal(self, name)

    def GetDoubleAttributeRetVal(self, name):
        return _molset.TiXmlElement_GetDoubleAttributeRetVal(self, name)

    def GetArrOfBoolAttribute(self, name, vars, n):
        return _molset.TiXmlElement_GetArrOfBoolAttribute(self, name, vars, n)

    def GetArrOfIntAttribute(self, name, vars, n):
        return _molset.TiXmlElement_GetArrOfIntAttribute(self, name, vars, n)

    def GetArrOfFloatAttribute(self, name, vars, n):
        return _molset.TiXmlElement_GetArrOfFloatAttribute(self, name, vars, n)

    def GetArrOfDoubleAttribute(self, name, vars, n):
        return _molset.TiXmlElement_GetArrOfDoubleAttribute(self, name, vars, n)

    def GetNumOfElmOfArrAttribute(self, name):
        return _molset.TiXmlElement_GetNumOfElmOfArrAttribute(self, name)

    def GetArrOfFloatAttributeWithAllocation(self, name, vars, n):
        return _molset.TiXmlElement_GetArrOfFloatAttributeWithAllocation(self, name, vars, n)

    def GetArrOfIntAttributeWithAllocation(self, name, vars, n):
        return _molset.TiXmlElement_GetArrOfIntAttributeWithAllocation(self, name, vars, n)

    def GetArrOfStdStrAttribute(self, name, VStr):
        return _molset.TiXmlElement_GetArrOfStdStrAttribute(self, name, VStr)

    def GetArrOfIntFromText(self, vars, n):
        return _molset.TiXmlElement_GetArrOfIntFromText(self, vars, n)

    def GetArrOfFloatCoordFromText(self, x, y, z, n):
        return _molset.TiXmlElement_GetArrOfFloatCoordFromText(self, x, y, z, n)

    def GetArrOfFloatFromText(self, vars, n):
        return _molset.TiXmlElement_GetArrOfFloatFromText(self, vars, n)

    def GetTwoArrOfFloatFromText(self, vars1, vars2, n):
        return _molset.TiXmlElement_GetTwoArrOfFloatFromText(self, vars1, vars2, n)

    def GetVectorFloatElement(self, TagName, Vec):
        return _molset.TiXmlElement_GetVectorFloatElement(self, TagName, Vec)

    def GetTwoVectorFloatElement(self, TagName, Vec1, Vec2):
        return _molset.TiXmlElement_GetTwoVectorFloatElement(self, TagName, Vec1, Vec2)

    def GetNumOfElement(self, name):
        return _molset.TiXmlElement_GetNumOfElement(self, name)

    def SetHaVec_doubleElement(self, *args):
        return _molset.TiXmlElement_SetHaVec_doubleElement(self, *args)

    def GetHaVec_doubleElement(self, TagName, Vec):
        return _molset.TiXmlElement_GetHaVec_doubleElement(self, TagName, Vec)

    def SetHaMat_doubleElement(self, *args):
        return _molset.TiXmlElement_SetHaMat_doubleElement(self, *args)

    def GetHaMat_doubleElement(self, TagName, Mat):
        return _molset.TiXmlElement_GetHaMat_doubleElement(self, TagName, Mat)

    def SetVectorStringElement(self, TagName, Vec):
        return _molset.TiXmlElement_SetVectorStringElement(self, TagName, Vec)

    def GetVectorStringElement(self, TagName, Vec):
        return _molset.TiXmlElement_GetVectorStringElement(self, TagName, Vec)
TiXmlElement_swigregister = _molset.TiXmlElement_swigregister
TiXmlElement_swigregister(TiXmlElement)

class TiXmlComment(TiXmlNode):
    __swig_setmethods__ = {}
    for _s in [TiXmlNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TiXmlComment, name, value)
    __swig_getmethods__ = {}
    for _s in [TiXmlNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TiXmlComment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_TiXmlComment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_TiXmlComment
    __del__ = lambda self: None

    def Clone(self):
        return _molset.TiXmlComment_Clone(self)

    def Print(self, cfile, depth):
        return _molset.TiXmlComment_Print(self, cfile, depth)

    def Parse(self, p, data, encoding):
        return _molset.TiXmlComment_Parse(self, p, data, encoding)

    def ToComment(self, *args):
        return _molset.TiXmlComment_ToComment(self, *args)

    def Accept(self, visitor):
        return _molset.TiXmlComment_Accept(self, visitor)
TiXmlComment_swigregister = _molset.TiXmlComment_swigregister
TiXmlComment_swigregister(TiXmlComment)

class TiXmlText(TiXmlNode):
    __swig_setmethods__ = {}
    for _s in [TiXmlNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TiXmlText, name, value)
    __swig_getmethods__ = {}
    for _s in [TiXmlNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TiXmlText, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_TiXmlText
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _molset.new_TiXmlText(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Print(self, cfile, depth):
        return _molset.TiXmlText_Print(self, cfile, depth)

    def CDATA(self):
        return _molset.TiXmlText_CDATA(self)

    def SetCDATA(self, _cdata):
        return _molset.TiXmlText_SetCDATA(self, _cdata)

    def Parse(self, p, data, encoding):
        return _molset.TiXmlText_Parse(self, p, data, encoding)

    def ToText(self, *args):
        return _molset.TiXmlText_ToText(self, *args)

    def Accept(self, content):
        return _molset.TiXmlText_Accept(self, content)
TiXmlText_swigregister = _molset.TiXmlText_swigregister
TiXmlText_swigregister(TiXmlText)

class TiXmlDeclaration(TiXmlNode):
    __swig_setmethods__ = {}
    for _s in [TiXmlNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TiXmlDeclaration, name, value)
    __swig_getmethods__ = {}
    for _s in [TiXmlNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TiXmlDeclaration, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_TiXmlDeclaration(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_TiXmlDeclaration
    __del__ = lambda self: None

    def Version(self):
        return _molset.TiXmlDeclaration_Version(self)

    def Encoding(self):
        return _molset.TiXmlDeclaration_Encoding(self)

    def Standalone(self):
        return _molset.TiXmlDeclaration_Standalone(self)

    def Clone(self):
        return _molset.TiXmlDeclaration_Clone(self)

    def Print(self, *args):
        return _molset.TiXmlDeclaration_Print(self, *args)

    def Parse(self, p, data, encoding):
        return _molset.TiXmlDeclaration_Parse(self, p, data, encoding)

    def ToDeclaration(self, *args):
        return _molset.TiXmlDeclaration_ToDeclaration(self, *args)

    def Accept(self, visitor):
        return _molset.TiXmlDeclaration_Accept(self, visitor)
TiXmlDeclaration_swigregister = _molset.TiXmlDeclaration_swigregister
TiXmlDeclaration_swigregister(TiXmlDeclaration)

class TiXmlUnknown(TiXmlNode):
    __swig_setmethods__ = {}
    for _s in [TiXmlNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TiXmlUnknown, name, value)
    __swig_getmethods__ = {}
    for _s in [TiXmlNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TiXmlUnknown, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_TiXmlUnknown
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _molset.new_TiXmlUnknown(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clone(self):
        return _molset.TiXmlUnknown_Clone(self)

    def Print(self, cfile, depth):
        return _molset.TiXmlUnknown_Print(self, cfile, depth)

    def Parse(self, p, data, encoding):
        return _molset.TiXmlUnknown_Parse(self, p, data, encoding)

    def ToUnknown(self, *args):
        return _molset.TiXmlUnknown_ToUnknown(self, *args)

    def Accept(self, content):
        return _molset.TiXmlUnknown_Accept(self, content)
TiXmlUnknown_swigregister = _molset.TiXmlUnknown_swigregister
TiXmlUnknown_swigregister(TiXmlUnknown)

class TiXmlDocument(TiXmlNode):
    __swig_setmethods__ = {}
    for _s in [TiXmlNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TiXmlDocument, name, value)
    __swig_getmethods__ = {}
    for _s in [TiXmlNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TiXmlDocument, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_TiXmlDocument(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_TiXmlDocument
    __del__ = lambda self: None

    def LoadFile(self, *args):
        return _molset.TiXmlDocument_LoadFile(self, *args)

    def SaveFile(self, *args):
        return _molset.TiXmlDocument_SaveFile(self, *args)

    def Parse(self, *args):
        return _molset.TiXmlDocument_Parse(self, *args)

    def RootElement(self, *args):
        return _molset.TiXmlDocument_RootElement(self, *args)

    def Error(self):
        return _molset.TiXmlDocument_Error(self)

    def ErrorDesc(self):
        return _molset.TiXmlDocument_ErrorDesc(self)

    def ErrorId(self):
        return _molset.TiXmlDocument_ErrorId(self)

    def ErrorRow(self):
        return _molset.TiXmlDocument_ErrorRow(self)

    def ErrorCol(self):
        return _molset.TiXmlDocument_ErrorCol(self)

    def SetTabSize(self, _tabsize):
        return _molset.TiXmlDocument_SetTabSize(self, _tabsize)

    def TabSize(self):
        return _molset.TiXmlDocument_TabSize(self)

    def ClearError(self):
        return _molset.TiXmlDocument_ClearError(self)

    def Print(self, *args):
        return _molset.TiXmlDocument_Print(self, *args)

    def SetError(self, err, errorLocation, prevData, encoding):
        return _molset.TiXmlDocument_SetError(self, err, errorLocation, prevData, encoding)

    def ToDocument(self, *args):
        return _molset.TiXmlDocument_ToDocument(self, *args)

    def Accept(self, content):
        return _molset.TiXmlDocument_Accept(self, content)
TiXmlDocument_swigregister = _molset.TiXmlDocument_swigregister
TiXmlDocument_swigregister(TiXmlDocument)

class TiXmlHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TiXmlHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TiXmlHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_TiXmlHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FirstChild(self, *args):
        return _molset.TiXmlHandle_FirstChild(self, *args)

    def FirstChildElement(self, *args):
        return _molset.TiXmlHandle_FirstChildElement(self, *args)

    def Child(self, *args):
        return _molset.TiXmlHandle_Child(self, *args)

    def ChildElement(self, *args):
        return _molset.TiXmlHandle_ChildElement(self, *args)

    def ToNode(self):
        return _molset.TiXmlHandle_ToNode(self)

    def ToElement(self):
        return _molset.TiXmlHandle_ToElement(self)

    def ToText(self):
        return _molset.TiXmlHandle_ToText(self)

    def ToUnknown(self):
        return _molset.TiXmlHandle_ToUnknown(self)

    def Node(self):
        return _molset.TiXmlHandle_Node(self)

    def Element(self):
        return _molset.TiXmlHandle_Element(self)

    def Text(self):
        return _molset.TiXmlHandle_Text(self)

    def Unknown(self):
        return _molset.TiXmlHandle_Unknown(self)
    __swig_destroy__ = _molset.delete_TiXmlHandle
    __del__ = lambda self: None
TiXmlHandle_swigregister = _molset.TiXmlHandle_swigregister
TiXmlHandle_swigregister(TiXmlHandle)

class TiXmlPrinter(TiXmlVisitor):
    __swig_setmethods__ = {}
    for _s in [TiXmlVisitor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TiXmlPrinter, name, value)
    __swig_getmethods__ = {}
    for _s in [TiXmlVisitor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TiXmlPrinter, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_TiXmlPrinter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VisitEnter(self, *args):
        return _molset.TiXmlPrinter_VisitEnter(self, *args)

    def VisitExit(self, *args):
        return _molset.TiXmlPrinter_VisitExit(self, *args)

    def Visit(self, *args):
        return _molset.TiXmlPrinter_Visit(self, *args)

    def SetIndent(self, _indent):
        return _molset.TiXmlPrinter_SetIndent(self, _indent)

    def Indent(self):
        return _molset.TiXmlPrinter_Indent(self)

    def SetLineBreak(self, _lineBreak):
        return _molset.TiXmlPrinter_SetLineBreak(self, _lineBreak)

    def LineBreak(self):
        return _molset.TiXmlPrinter_LineBreak(self)

    def SetStreamPrinting(self):
        return _molset.TiXmlPrinter_SetStreamPrinting(self)

    def CStr(self):
        return _molset.TiXmlPrinter_CStr(self)

    def Size(self):
        return _molset.TiXmlPrinter_Size(self)

    def Str(self):
        return _molset.TiXmlPrinter_Str(self)
    __swig_destroy__ = _molset.delete_TiXmlPrinter
    __del__ = lambda self: None
TiXmlPrinter_swigregister = _molset.TiXmlPrinter_swigregister
TiXmlPrinter_swigregister(TiXmlPrinter)


def BldXmlEltFromCstr(Cstr):
    return _molset.BldXmlEltFromCstr(Cstr)
BldXmlEltFromCstr = _molset.BldXmlEltFromCstr
class HaAutoTreeObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaAutoTreeObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaAutoTreeObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_HaAutoTreeObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaAutoTreeObject
    __del__ = lambda self: None

    def Clear(self):
        return _molset.HaAutoTreeObject_Clear(self)
    if _newclass:
        Create = staticmethod(_molset.HaAutoTreeObject_Create)
    else:
        Create = _molset.HaAutoTreeObject_Create

    def Save(self, filename):
        return _molset.HaAutoTreeObject_Save(self, filename)

    def Load(self, filename):
        return _molset.HaAutoTreeObject_Load(self, filename)

    def SetObject(self, Elt):
        return _molset.HaAutoTreeObject_SetObject(self, Elt)

    def GetObject(self):
        return _molset.HaAutoTreeObject_GetObject(self)

    def AddChild(self, Obj, Position=-1):
        return _molset.HaAutoTreeObject_AddChild(self, Obj, Position)

    def AppendChild(self, Elt):
        return _molset.HaAutoTreeObject_AppendChild(self, Elt)

    def Print(self, *args):
        return _molset.HaAutoTreeObject_Print(self, *args)

    def SetPreviousSibling(self, Obj):
        return _molset.HaAutoTreeObject_SetPreviousSibling(self, Obj)

    def SetNextSibling(self, Obj):
        return _molset.HaAutoTreeObject_SetNextSibling(self, Obj)

    def GetPreviousSibling(self):
        return _molset.HaAutoTreeObject_GetPreviousSibling(self)

    def GetNextSibling(self):
        return _molset.HaAutoTreeObject_GetNextSibling(self)

    def GetParentObject(self):
        return _molset.HaAutoTreeObject_GetParentObject(self)

    def CreateChild(self, Tag, Position=-1):
        return _molset.HaAutoTreeObject_CreateChild(self, Tag, Position)

    def GetChild(self, Tag, recursevly=False):
        return _molset.HaAutoTreeObject_GetChild(self, Tag, recursevly)

    def GetFirstChild(self, *args):
        return _molset.HaAutoTreeObject_GetFirstChild(self, *args)

    def GetChildList(self, *args):
        return _molset.HaAutoTreeObject_GetChildList(self, *args)

    def GetTagName(self):
        return _molset.HaAutoTreeObject_GetTagName(self)
    __swig_setmethods__["Children"] = _molset.HaAutoTreeObject_Children_set
    __swig_getmethods__["Children"] = _molset.HaAutoTreeObject_Children_get
    if _newclass:
        Children = _swig_property(_molset.HaAutoTreeObject_Children_get, _molset.HaAutoTreeObject_Children_set)
HaAutoTreeObject_swigregister = _molset.HaAutoTreeObject_swigregister
HaAutoTreeObject_swigregister(HaAutoTreeObject)

def HaAutoTreeObject_Create(*args):
    return _molset.HaAutoTreeObject_Create(*args)
HaAutoTreeObject_Create = _molset.HaAutoTreeObject_Create

class HaXML(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaXML, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaXML, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaXML()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaXML
    __del__ = lambda self: None
    if _newclass:
        ReplaceCommaWithSpace = staticmethod(_molset.HaXML_ReplaceCommaWithSpace)
    else:
        ReplaceCommaWithSpace = _molset.HaXML_ReplaceCommaWithSpace
    if _newclass:
        GetBool = staticmethod(_molset.HaXML_GetBool)
    else:
        GetBool = _molset.HaXML_GetBool
    if _newclass:
        SetAtribute = staticmethod(_molset.HaXML_SetAtribute)
    else:
        SetAtribute = _molset.HaXML_SetAtribute
    if _newclass:
        SetAtributeV = staticmethod(_molset.HaXML_SetAtributeV)
    else:
        SetAtributeV = _molset.HaXML_SetAtributeV
    if _newclass:
        SetTableElement = staticmethod(_molset.HaXML_SetTableElement)
    else:
        SetTableElement = _molset.HaXML_SetTableElement
    if _newclass:
        SetText = staticmethod(_molset.HaXML_SetText)
    else:
        SetText = _molset.HaXML_SetText
    if _newclass:
        GetAtribute = staticmethod(_molset.HaXML_GetAtribute)
    else:
        GetAtribute = _molset.HaXML_GetAtribute
    if _newclass:
        GetAtributeV = staticmethod(_molset.HaXML_GetAtributeV)
    else:
        GetAtributeV = _molset.HaXML_GetAtributeV
    if _newclass:
        GetVVIntElement = staticmethod(_molset.HaXML_GetVVIntElement)
    else:
        GetVVIntElement = _molset.HaXML_GetVVIntElement
    if _newclass:
        SetElement = staticmethod(_molset.HaXML_SetElement)
    else:
        SetElement = _molset.HaXML_SetElement
    if _newclass:
        GetElement = staticmethod(_molset.HaXML_GetElement)
    else:
        GetElement = _molset.HaXML_GetElement
    if _newclass:
        GetTableElement = staticmethod(_molset.HaXML_GetTableElement)
    else:
        GetTableElement = _molset.HaXML_GetTableElement
    if _newclass:
        GetText = staticmethod(_molset.HaXML_GetText)
    else:
        GetText = _molset.HaXML_GetText
    if _newclass:
        GetStrIndex = staticmethod(_molset.HaXML_GetStrIndex)
    else:
        GetStrIndex = _molset.HaXML_GetStrIndex
    if _newclass:
        GetStrByIndex = staticmethod(_molset.HaXML_GetStrByIndex)
    else:
        GetStrByIndex = _molset.HaXML_GetStrByIndex
HaXML_swigregister = _molset.HaXML_swigregister
HaXML_swigregister(HaXML)

def HaXML_ReplaceCommaWithSpace(str):
    return _molset.HaXML_ReplaceCommaWithSpace(str)
HaXML_ReplaceCommaWithSpace = _molset.HaXML_ReplaceCommaWithSpace

def HaXML_GetBool(cstr, b):
    return _molset.HaXML_GetBool(cstr, b)
HaXML_GetBool = _molset.HaXML_GetBool

def HaXML_SetAtribute(*args):
    return _molset.HaXML_SetAtribute(*args)
HaXML_SetAtribute = _molset.HaXML_SetAtribute

def HaXML_SetAtributeV(*args):
    return _molset.HaXML_SetAtributeV(*args)
HaXML_SetAtributeV = _molset.HaXML_SetAtributeV

def HaXML_SetTableElement(Elt, TagName, Format, note, n):
    return _molset.HaXML_SetTableElement(Elt, TagName, Format, note, n)
HaXML_SetTableElement = _molset.HaXML_SetTableElement

def HaXML_SetText(Elt, Vec):
    return _molset.HaXML_SetText(Elt, Vec)
HaXML_SetText = _molset.HaXML_SetText

def HaXML_GetAtribute(*args):
    return _molset.HaXML_GetAtribute(*args)
HaXML_GetAtribute = _molset.HaXML_GetAtribute

def HaXML_GetAtributeV(*args):
    return _molset.HaXML_GetAtributeV(*args)
HaXML_GetAtributeV = _molset.HaXML_GetAtributeV

def HaXML_GetVVIntElement(Elt, TagName, VVec):
    return _molset.HaXML_GetVVIntElement(Elt, TagName, VVec)
HaXML_GetVVIntElement = _molset.HaXML_GetVVIntElement

def HaXML_SetElement(*args):
    return _molset.HaXML_SetElement(*args)
HaXML_SetElement = _molset.HaXML_SetElement

def HaXML_GetElement(*args):
    return _molset.HaXML_GetElement(*args)
HaXML_GetElement = _molset.HaXML_GetElement

def HaXML_GetTableElement(Elt, TagName):
    return _molset.HaXML_GetTableElement(Elt, TagName)
HaXML_GetTableElement = _molset.HaXML_GetTableElement

def HaXML_GetText(Elt, Vec):
    return _molset.HaXML_GetText(Elt, Vec)
HaXML_GetText = _molset.HaXML_GetText

def HaXML_GetStrIndex(StrList, StrToComp):
    return _molset.HaXML_GetStrIndex(StrList, StrToComp)
HaXML_GetStrIndex = _molset.HaXML_GetStrIndex

def HaXML_GetStrByIndex(StrList, Index):
    return _molset.HaXML_GetStrByIndex(StrList, Index)
HaXML_GetStrByIndex = _molset.HaXML_GetStrByIndex


def HaWriteMapGZ(filename, header, fmap, gridsize, coef, Comments):
    return _molset.HaWriteMapGZ(filename, header, fmap, gridsize, coef, Comments)
HaWriteMapGZ = _molset.HaWriteMapGZ

def HaReadMapGZ(filename, pheader, pfmap, gridsize, coef):
    return _molset.HaReadMapGZ(filename, pheader, pfmap, gridsize, coef)
HaReadMapGZ = _molset.HaReadMapGZ
class HaObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaObject
    __del__ = lambda self: None

    def Clear(self):
        return _molset.HaObject_Clear(self)

    def SetDefaultValues(self, p_ctxt=None):
        return _molset.HaObject_SetDefaultValues(self, p_ctxt)

    def SaveXML(self, Elt, p_ctxt=None):
        return _molset.HaObject_SaveXML(self, Elt, p_ctxt)

    def LoadXML(self, Elt, p_ctxt=None):
        return _molset.HaObject_LoadXML(self, Elt, p_ctxt)

    def SetName(self, name_new):
        return _molset.HaObject_SetName(self, name_new)

    def GetName(self):
        return _molset.HaObject_GetName(self)

    def GetCStrName(self):
        return _molset.HaObject_GetCStrName(self)

    def GetStdStrName(self):
        return _molset.HaObject_GetStdStrName(self)
HaObject_swigregister = _molset.HaObject_swigregister
HaObject_swigregister(HaObject)

class HaContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaContext, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaContext()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaContext
    __del__ = lambda self: None

    def GetPrimaryOption(self):
        return _molset.HaContext_GetPrimaryOption(self)

    def SetPrimaryOption(self, option_primary_new):
        return _molset.HaContext_SetPrimaryOption(self, option_primary_new)
HaContext_swigregister = _molset.HaContext_swigregister
HaContext_swigregister(HaContext)

class std_vector_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vector_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, std_vector_double, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _molset.std_vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _molset.std_vector_double___nonzero__(self)

    def __bool__(self):
        return _molset.std_vector_double___bool__(self)

    def __len__(self):
        return _molset.std_vector_double___len__(self)

    def __getslice__(self, i, j):
        return _molset.std_vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _molset.std_vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _molset.std_vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _molset.std_vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _molset.std_vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _molset.std_vector_double___setitem__(self, *args)

    def pop(self):
        return _molset.std_vector_double_pop(self)

    def append(self, x):
        return _molset.std_vector_double_append(self, x)

    def empty(self):
        return _molset.std_vector_double_empty(self)

    def size(self):
        return _molset.std_vector_double_size(self)

    def swap(self, v):
        return _molset.std_vector_double_swap(self, v)

    def begin(self):
        return _molset.std_vector_double_begin(self)

    def end(self):
        return _molset.std_vector_double_end(self)

    def rbegin(self):
        return _molset.std_vector_double_rbegin(self)

    def rend(self):
        return _molset.std_vector_double_rend(self)

    def clear(self):
        return _molset.std_vector_double_clear(self)

    def get_allocator(self):
        return _molset.std_vector_double_get_allocator(self)

    def pop_back(self):
        return _molset.std_vector_double_pop_back(self)

    def erase(self, *args):
        return _molset.std_vector_double_erase(self, *args)

    def __init__(self, *args):
        this = _molset.new_std_vector_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _molset.std_vector_double_push_back(self, x)

    def front(self):
        return _molset.std_vector_double_front(self)

    def back(self):
        return _molset.std_vector_double_back(self)

    def assign(self, n, x):
        return _molset.std_vector_double_assign(self, n, x)

    def resize(self, *args):
        return _molset.std_vector_double_resize(self, *args)

    def insert(self, *args):
        return _molset.std_vector_double_insert(self, *args)

    def reserve(self, n):
        return _molset.std_vector_double_reserve(self, n)

    def capacity(self):
        return _molset.std_vector_double_capacity(self)
    __swig_destroy__ = _molset.delete_std_vector_double
    __del__ = lambda self: None
std_vector_double_swigregister = _molset.std_vector_double_swigregister
std_vector_double_swigregister(std_vector_double)

class std_vector_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vector_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, std_vector_int, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _molset.std_vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _molset.std_vector_int___nonzero__(self)

    def __bool__(self):
        return _molset.std_vector_int___bool__(self)

    def __len__(self):
        return _molset.std_vector_int___len__(self)

    def __getslice__(self, i, j):
        return _molset.std_vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _molset.std_vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _molset.std_vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _molset.std_vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        return _molset.std_vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        return _molset.std_vector_int___setitem__(self, *args)

    def pop(self):
        return _molset.std_vector_int_pop(self)

    def append(self, x):
        return _molset.std_vector_int_append(self, x)

    def empty(self):
        return _molset.std_vector_int_empty(self)

    def size(self):
        return _molset.std_vector_int_size(self)

    def swap(self, v):
        return _molset.std_vector_int_swap(self, v)

    def begin(self):
        return _molset.std_vector_int_begin(self)

    def end(self):
        return _molset.std_vector_int_end(self)

    def rbegin(self):
        return _molset.std_vector_int_rbegin(self)

    def rend(self):
        return _molset.std_vector_int_rend(self)

    def clear(self):
        return _molset.std_vector_int_clear(self)

    def get_allocator(self):
        return _molset.std_vector_int_get_allocator(self)

    def pop_back(self):
        return _molset.std_vector_int_pop_back(self)

    def erase(self, *args):
        return _molset.std_vector_int_erase(self, *args)

    def __init__(self, *args):
        this = _molset.new_std_vector_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _molset.std_vector_int_push_back(self, x)

    def front(self):
        return _molset.std_vector_int_front(self)

    def back(self):
        return _molset.std_vector_int_back(self)

    def assign(self, n, x):
        return _molset.std_vector_int_assign(self, n, x)

    def resize(self, *args):
        return _molset.std_vector_int_resize(self, *args)

    def insert(self, *args):
        return _molset.std_vector_int_insert(self, *args)

    def reserve(self, n):
        return _molset.std_vector_int_reserve(self, n)

    def capacity(self):
        return _molset.std_vector_int_capacity(self)
    __swig_destroy__ = _molset.delete_std_vector_int
    __del__ = lambda self: None
std_vector_int_swigregister = _molset.std_vector_int_swigregister
std_vector_int_swigregister(std_vector_int)

class HaVec_int_parent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaVec_int_parent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaVec_int_parent, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def newsize(self, size):
        return _molset.HaVec_int_parent_newsize(self, size)

    def begin(self):
        return _molset.HaVec_int_parent_begin(self)

    def end(self):
        return _molset.HaVec_int_parent_end(self)

    def size(self):
        return _molset.HaVec_int_parent_size(self)

    def GetVal(self, i):
        return _molset.HaVec_int_parent_GetVal(self, i)

    def SetVal(self, i, new_val):
        return _molset.HaVec_int_parent_SetVal(self, i, new_val)

    def GetVal_idx0(self, i):
        return _molset.HaVec_int_parent_GetVal_idx0(self, i)

    def SetVal_idx0(self, i, new_val):
        return _molset.HaVec_int_parent_SetVal_idx0(self, i, new_val)
    __swig_destroy__ = _molset.delete_HaVec_int_parent
    __del__ = lambda self: None
HaVec_int_parent_swigregister = _molset.HaVec_int_parent_swigregister
HaVec_int_parent_swigregister(HaVec_int_parent)

class HaVec_float_parent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaVec_float_parent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaVec_float_parent, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaVec_float_parent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def newsize(self, size):
        return _molset.HaVec_float_parent_newsize(self, size)

    def begin(self):
        return _molset.HaVec_float_parent_begin(self)

    def end(self):
        return _molset.HaVec_float_parent_end(self)

    def size(self):
        return _molset.HaVec_float_parent_size(self)

    def GetVal(self, i):
        return _molset.HaVec_float_parent_GetVal(self, i)

    def SetVal(self, i, new_val):
        return _molset.HaVec_float_parent_SetVal(self, i, new_val)

    def GetVal_idx0(self, i):
        return _molset.HaVec_float_parent_GetVal_idx0(self, i)

    def SetVal_idx0(self, i, new_val):
        return _molset.HaVec_float_parent_SetVal_idx0(self, i, new_val)
    __swig_destroy__ = _molset.delete_HaVec_float_parent
    __del__ = lambda self: None
HaVec_float_parent_swigregister = _molset.HaVec_float_parent_swigregister
HaVec_float_parent_swigregister(HaVec_float_parent)

class HaVec_double_parent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaVec_double_parent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaVec_double_parent, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaVec_double_parent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def newsize(self, size):
        return _molset.HaVec_double_parent_newsize(self, size)

    def begin(self):
        return _molset.HaVec_double_parent_begin(self)

    def end(self):
        return _molset.HaVec_double_parent_end(self)

    def r0(self, *args):
        return _molset.HaVec_double_parent_r0(self, *args)

    def r1(self, *args):
        return _molset.HaVec_double_parent_r1(self, *args)

    def size(self):
        return _molset.HaVec_double_parent_size(self)

    def GetVal(self, i):
        return _molset.HaVec_double_parent_GetVal(self, i)

    def SetVal(self, i, new_val):
        return _molset.HaVec_double_parent_SetVal(self, i, new_val)

    def GetVal_idx0(self, i):
        return _molset.HaVec_double_parent_GetVal_idx0(self, i)

    def SetVal_idx0(self, i, new_val):
        return _molset.HaVec_double_parent_SetVal_idx0(self, i, new_val)
    __swig_destroy__ = _molset.delete_HaVec_double_parent
    __del__ = lambda self: None
HaVec_double_parent_swigregister = _molset.HaVec_double_parent_swigregister
HaVec_double_parent_swigregister(HaVec_double_parent)

class HaVec_int(HaVec_int_parent):
    __swig_setmethods__ = {}
    for _s in [HaVec_int_parent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaVec_int, name, value)
    __swig_getmethods__ = {}
    for _s in [HaVec_int_parent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaVec_int, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_HaVec_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaVec_int
    __del__ = lambda self: None
HaVec_int_swigregister = _molset.HaVec_int_swigregister
HaVec_int_swigregister(HaVec_int)

class HaVec_double(HaVec_double_parent):
    __swig_setmethods__ = {}
    for _s in [HaVec_double_parent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaVec_double, name, value)
    __swig_getmethods__ = {}
    for _s in [HaVec_double_parent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaVec_double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_HaVec_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaVec_double
    __del__ = lambda self: None
HaVec_double_swigregister = _molset.HaVec_double_swigregister
HaVec_double_swigregister(HaVec_double)

class HaVec_float(HaVec_float_parent):
    __swig_setmethods__ = {}
    for _s in [HaVec_float_parent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaVec_float, name, value)
    __swig_getmethods__ = {}
    for _s in [HaVec_float_parent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaVec_float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_HaVec_float(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaVec_float
    __del__ = lambda self: None
HaVec_float_swigregister = _molset.HaVec_float_swigregister
HaVec_float_swigregister(HaVec_float)

class HaHist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaHist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaHist, name)
    __repr__ = _swig_repr

    def __init__(self, min, max, binsize):
        this = _molset.new_HaHist(min, max, binsize)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaHist
    __del__ = lambda self: None
    __swig_setmethods__["rleft"] = _molset.HaHist_rleft_set
    __swig_getmethods__["rleft"] = _molset.HaHist_rleft_get
    if _newclass:
        rleft = _swig_property(_molset.HaHist_rleft_get, _molset.HaHist_rleft_set)
    __swig_setmethods__["rcenter"] = _molset.HaHist_rcenter_set
    __swig_getmethods__["rcenter"] = _molset.HaHist_rcenter_get
    if _newclass:
        rcenter = _swig_property(_molset.HaHist_rcenter_get, _molset.HaHist_rcenter_set)
    __swig_setmethods__["ibins"] = _molset.HaHist_ibins_set
    __swig_getmethods__["ibins"] = _molset.HaHist_ibins_get
    if _newclass:
        ibins = _swig_property(_molset.HaHist_ibins_get, _molset.HaHist_ibins_set)
    __swig_setmethods__["dbins"] = _molset.HaHist_dbins_set
    __swig_getmethods__["dbins"] = _molset.HaHist_dbins_get
    if _newclass:
        dbins = _swig_property(_molset.HaHist_dbins_get, _molset.HaHist_dbins_set)

    def PutToIBins(self, val):
        return _molset.HaHist_PutToIBins(self, val)
HaHist_swigregister = _molset.HaHist_swigregister
HaHist_swigregister(HaHist)

class HaMat_double_parent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaMat_double_parent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaMat_double_parent, name)
    __repr__ = _swig_repr

    def reserve(self, M, N):
        return _molset.HaMat_double_parent_reserve(self, M, N)

    def newsize(self, M, N):
        return _molset.HaMat_double_parent_newsize(self, M, N)

    def resize(self, M, N):
        return _molset.HaMat_double_parent_resize(self, M, N)

    def GetVal(self, i, j):
        return _molset.HaMat_double_parent_GetVal(self, i, j)

    def SetVal(self, i, j, new_val):
        return _molset.HaMat_double_parent_SetVal(self, i, j, new_val)

    def GetVal_idx0(self, i, j):
        return _molset.HaMat_double_parent_GetVal_idx0(self, i, j)

    def SetVal_idx0(self, i, j, new_val):
        return _molset.HaMat_double_parent_SetVal_idx0(self, i, j, new_val)

    def r0(self, *args):
        return _molset.HaMat_double_parent_r0(self, *args)

    def r1(self, *args):
        return _molset.HaMat_double_parent_r1(self, *args)

    def dim(self, d):
        return _molset.HaMat_double_parent_dim(self, d)

    def num_rows(self):
        return _molset.HaMat_double_parent_num_rows(self)

    def num_cols(self):
        return _molset.HaMat_double_parent_num_cols(self)

    def begin(self):
        return _molset.HaMat_double_parent_begin(self)

    def end(self):
        return _molset.HaMat_double_parent_end(self)

    def __init__(self):
        this = _molset.new_HaMat_double_parent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaMat_double_parent
    __del__ = lambda self: None
HaMat_double_parent_swigregister = _molset.HaMat_double_parent_swigregister
HaMat_double_parent_swigregister(HaMat_double_parent)

class HaMat_double(HaMat_double_parent):
    __swig_setmethods__ = {}
    for _s in [HaMat_double_parent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaMat_double, name, value)
    __swig_getmethods__ = {}
    for _s in [HaMat_double_parent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaMat_double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_HaMat_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_from(self, ipack_mat):
        return _molset.HaMat_double_set_from(self, ipack_mat)

    def SetFromStr(self, str):
        return _molset.HaMat_double_SetFromStr(self, str)
    if _newclass:
        mat_inverse = staticmethod(_molset.HaMat_double_mat_inverse)
    else:
        mat_inverse = _molset.HaMat_double_mat_inverse
    if _newclass:
        mat_transpose = staticmethod(_molset.HaMat_double_mat_transpose)
    else:
        mat_transpose = _molset.HaMat_double_mat_transpose
    if _newclass:
        mat_sdiag = staticmethod(_molset.HaMat_double_mat_sdiag)
    else:
        mat_sdiag = _molset.HaMat_double_mat_sdiag

    def SqRoot(self, isign=1):
        return _molset.HaMat_double_SqRoot(self, isign)
    if _newclass:
        solv_lin_syst_1 = staticmethod(_molset.HaMat_double_solv_lin_syst_1)
    else:
        solv_lin_syst_1 = _molset.HaMat_double_solv_lin_syst_1
    if _newclass:
        DiagMat = staticmethod(_molset.HaMat_double_DiagMat)
    else:
        DiagMat = _molset.HaMat_double_DiagMat
    if _newclass:
        PrintSymmMat = staticmethod(_molset.HaMat_double_PrintSymmMat)
    else:
        PrintSymmMat = _molset.HaMat_double_PrintSymmMat

    def AddXml(self, *args):
        return _molset.HaMat_double_AddXml(self, *args)

    def LoadXml(self, mat_element, option=0):
        return _molset.HaMat_double_LoadXml(self, mat_element, option)
    __swig_destroy__ = _molset.delete_HaMat_double
    __del__ = lambda self: None
HaMat_double_swigregister = _molset.HaMat_double_swigregister
HaMat_double_swigregister(HaMat_double)

def HaMat_double_mat_inverse(aa):
    return _molset.HaMat_double_mat_inverse(aa)
HaMat_double_mat_inverse = _molset.HaMat_double_mat_inverse

def HaMat_double_mat_transpose(aa):
    return _molset.HaMat_double_mat_transpose(aa)
HaMat_double_mat_transpose = _molset.HaMat_double_mat_transpose

def HaMat_double_mat_sdiag(aa, cc, eig):
    return _molset.HaMat_double_mat_sdiag(aa, cc, eig)
HaMat_double_mat_sdiag = _molset.HaMat_double_mat_sdiag

def HaMat_double_solv_lin_syst_1(a, b):
    return _molset.HaMat_double_solv_lin_syst_1(a, b)
HaMat_double_solv_lin_syst_1 = _molset.HaMat_double_solv_lin_syst_1

def HaMat_double_DiagMat(hmat, ss, eigv, eig_ene):
    return _molset.HaMat_double_DiagMat(hmat, ss, eigv, eig_ene)
HaMat_double_DiagMat = _molset.HaMat_double_DiagMat

def HaMat_double_PrintSymmMat(*args):
    return _molset.HaMat_double_PrintSymmMat(*args)
HaMat_double_PrintSymmMat = _molset.HaMat_double_PrintSymmMat


def matmult(C, A, B):
    return _molset.matmult(C, A, B)
matmult = _molset.matmult

def matmult_T1(C, A, B):
    return _molset.matmult_T1(C, A, B)
matmult_T1 = _molset.matmult_T1

def matmult_T2(C, A, B):
    return _molset.matmult_T2(C, A, B)
matmult_T2 = _molset.matmult_T2
class HaSMat_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaSMat_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaSMat_double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_HaSMat_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaSMat_double
    __del__ = lambda self: None

    def newsize(self, n):
        return _molset.HaSMat_double_newsize(self, n)

    def CopyFrom(self, *args):
        return _molset.HaSMat_double_CopyFrom(self, *args)

    def CopyTo(self, dmat):
        return _molset.HaSMat_double_CopyTo(self, dmat)

    def num_rows(self):
        return _molset.HaSMat_double_num_rows(self)

    def num_cols(self):
        return _molset.HaSMat_double_num_cols(self)

    def r0(self, *args):
        return _molset.HaSMat_double_r0(self, *args)

    def begin(self, *args):
        return _molset.HaSMat_double_begin(self, *args)
    __swig_setmethods__["ndim"] = _molset.HaSMat_double_ndim_set
    __swig_getmethods__["ndim"] = _molset.HaSMat_double_ndim_get
    if _newclass:
        ndim = _swig_property(_molset.HaSMat_double_ndim_get, _molset.HaSMat_double_ndim_set)
    __swig_setmethods__["amode"] = _molset.HaSMat_double_amode_set
    __swig_getmethods__["amode"] = _molset.HaSMat_double_amode_get
    if _newclass:
        amode = _swig_property(_molset.HaSMat_double_amode_get, _molset.HaSMat_double_amode_set)
HaSMat_double_swigregister = _molset.HaSMat_double_swigregister
HaSMat_double_swigregister(HaSMat_double)

class MultiVarFunctor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiVarFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiVarFunctor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_MultiVarFunctor
    __del__ = lambda self: None

    def __call__(self, xv):
        return _molset.MultiVarFunctor___call__(self, xv)

    def CalcGrad(self, grad, xv):
        return _molset.MultiVarFunctor_CalcGrad(self, grad, xv)
MultiVarFunctor_swigregister = _molset.MultiVarFunctor_swigregister
MultiVarFunctor_swigregister(MultiVarFunctor)


def va13ad_(iptr, pfunc, n, x, f, g, scale, acc, w):
    return _molset.va13ad_(iptr, pfunc, n, x, f, g, scale, acc, w)
va13ad_ = _molset.va13ad_
class HaMinimizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaMinimizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaMinimizer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaMinimizer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaMinimizer
    __del__ = lambda self: None
    __swig_setmethods__["min_method"] = _molset.HaMinimizer_min_method_set
    __swig_getmethods__["min_method"] = _molset.HaMinimizer_min_method_get
    if _newclass:
        min_method = _swig_property(_molset.HaMinimizer_min_method_get, _molset.HaMinimizer_min_method_set)

    def GetNVar(self):
        return _molset.HaMinimizer_GetNVar(self)

    def SetNVar(self, nvar):
        return _molset.HaMinimizer_SetNVar(self, nvar)

    def SetInitPoint(self, init_pt):
        return _molset.HaMinimizer_SetInitPoint(self, init_pt)

    def CalcValGrad(self, x, val, grad):
        return _molset.HaMinimizer_CalcValGrad(self, x, val, grad)

    def Minimize(self):
        return _molset.HaMinimizer_Minimize(self)
    __swig_setmethods__["vvar"] = _molset.HaMinimizer_vvar_set
    __swig_getmethods__["vvar"] = _molset.HaMinimizer_vvar_get
    if _newclass:
        vvar = _swig_property(_molset.HaMinimizer_vvar_get, _molset.HaMinimizer_vvar_set)
    __swig_setmethods__["scale"] = _molset.HaMinimizer_scale_set
    __swig_getmethods__["scale"] = _molset.HaMinimizer_scale_get
    if _newclass:
        scale = _swig_property(_molset.HaMinimizer_scale_get, _molset.HaMinimizer_scale_set)
    __swig_setmethods__["fun_val"] = _molset.HaMinimizer_fun_val_set
    __swig_getmethods__["fun_val"] = _molset.HaMinimizer_fun_val_get
    if _newclass:
        fun_val = _swig_property(_molset.HaMinimizer_fun_val_get, _molset.HaMinimizer_fun_val_set)
    __swig_setmethods__["nitr"] = _molset.HaMinimizer_nitr_set
    __swig_getmethods__["nitr"] = _molset.HaMinimizer_nitr_get
    if _newclass:
        nitr = _swig_property(_molset.HaMinimizer_nitr_get, _molset.HaMinimizer_nitr_set)
    __swig_setmethods__["flast"] = _molset.HaMinimizer_flast_set
    __swig_getmethods__["flast"] = _molset.HaMinimizer_flast_get
    if _newclass:
        flast = _swig_property(_molset.HaMinimizer_flast_get, _molset.HaMinimizer_flast_set)
    __swig_setmethods__["glast"] = _molset.HaMinimizer_glast_set
    __swig_getmethods__["glast"] = _molset.HaMinimizer_glast_get
    if _newclass:
        glast = _swig_property(_molset.HaMinimizer_glast_get, _molset.HaMinimizer_glast_set)
HaMinimizer_swigregister = _molset.HaMinimizer_swigregister
HaMinimizer_swigregister(HaMinimizer)
BFGS_MIN_METH = cvar.BFGS_MIN_METH


def ij_indx0(i, j):
    return _molset.ij_indx0(i, j)
ij_indx0 = _molset.ij_indx0

def ij_indx1(i, j):
    return _molset.ij_indx1(i, j)
ij_indx1 = _molset.ij_indx1

def write_double_array_chuncks(os, dvec, chunck_size, form_str):
    return _molset.write_double_array_chuncks(os, dvec, chunck_size, form_str)
write_double_array_chuncks = _molset.write_double_array_chuncks

def write_float_array_chuncks(os, fvec, chunck_size, form_str):
    return _molset.write_float_array_chuncks(os, fvec, chunck_size, form_str)
write_float_array_chuncks = _molset.write_float_array_chuncks

def write_int_array_chuncks(os, ivec, chunck_size, form_str):
    return _molset.write_int_array_chuncks(os, ivec, chunck_size, form_str)
write_int_array_chuncks = _molset.write_int_array_chuncks

def dot_double(a, b, n):
    return _molset.dot_double(a, b, n)
dot_double = _molset.dot_double
class LanzPars(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LanzPars, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LanzPars, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_LanzPars()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_LanzPars
    __del__ = lambda self: None
    __swig_setmethods__["mat_order"] = _molset.LanzPars_mat_order_set
    __swig_getmethods__["mat_order"] = _molset.LanzPars_mat_order_get
    if _newclass:
        mat_order = _swig_property(_molset.LanzPars_mat_order_get, _molset.LanzPars_mat_order_set)
    __swig_setmethods__["max_eigv_store"] = _molset.LanzPars_max_eigv_store_set
    __swig_getmethods__["max_eigv_store"] = _molset.LanzPars_max_eigv_store_get
    if _newclass:
        max_eigv_store = _swig_property(_molset.LanzPars_max_eigv_store_get, _molset.LanzPars_max_eigv_store_set)
    __swig_setmethods__["num_eigv_search"] = _molset.LanzPars_num_eigv_search_set
    __swig_getmethods__["num_eigv_search"] = _molset.LanzPars_num_eigv_search_get
    if _newclass:
        num_eigv_search = _swig_property(_molset.LanzPars_num_eigv_search_get, _molset.LanzPars_num_eigv_search_set)
    __swig_setmethods__["num_steps"] = _molset.LanzPars_num_steps_set
    __swig_getmethods__["num_steps"] = _molset.LanzPars_num_steps_get
    if _newclass:
        num_steps = _swig_property(_molset.LanzPars_num_steps_get, _molset.LanzPars_num_steps_set)
    __swig_setmethods__["iret"] = _molset.LanzPars_iret_set
    __swig_getmethods__["iret"] = _molset.LanzPars_iret_get
    if _newclass:
        iret = _swig_property(_molset.LanzPars_iret_get, _molset.LanzPars_iret_set)
    __swig_setmethods__["nfound"] = _molset.LanzPars_nfound_set
    __swig_getmethods__["nfound"] = _molset.LanzPars_nfound_get
    if _newclass:
        nfound = _swig_property(_molset.LanzPars_nfound_get, _molset.LanzPars_nfound_set)
    __swig_setmethods__["debug_lvl"] = _molset.LanzPars_debug_lvl_set
    __swig_getmethods__["debug_lvl"] = _molset.LanzPars_debug_lvl_get
    if _newclass:
        debug_lvl = _swig_property(_molset.LanzPars_debug_lvl_get, _molset.LanzPars_debug_lvl_set)
    __swig_setmethods__["problem_type"] = _molset.LanzPars_problem_type_set
    __swig_getmethods__["problem_type"] = _molset.LanzPars_problem_type_get
    if _newclass:
        problem_type = _swig_property(_molset.LanzPars_problem_type_get, _molset.LanzPars_problem_type_set)
    __swig_setmethods__["inertia_check"] = _molset.LanzPars_inertia_check_set
    __swig_getmethods__["inertia_check"] = _molset.LanzPars_inertia_check_get
    if _newclass:
        inertia_check = _swig_property(_molset.LanzPars_inertia_check_get, _molset.LanzPars_inertia_check_set)
    __swig_setmethods__["output_amount"] = _molset.LanzPars_output_amount_set
    __swig_getmethods__["output_amount"] = _molset.LanzPars_output_amount_get
    if _newclass:
        output_amount = _swig_property(_molset.LanzPars_output_amount_get, _molset.LanzPars_output_amount_set)
    __swig_setmethods__["max_steps_shift"] = _molset.LanzPars_max_steps_shift_set
    __swig_getmethods__["max_steps_shift"] = _molset.LanzPars_max_steps_shift_get
    if _newclass:
        max_steps_shift = _swig_property(_molset.LanzPars_max_steps_shift_get, _molset.LanzPars_max_steps_shift_set)
    __swig_setmethods__["search_in_boundary"] = _molset.LanzPars_search_in_boundary_set
    __swig_getmethods__["search_in_boundary"] = _molset.LanzPars_search_in_boundary_get
    if _newclass:
        search_in_boundary = _swig_property(_molset.LanzPars_search_in_boundary_get, _molset.LanzPars_search_in_boundary_set)
    __swig_setmethods__["fc_mat_fmt"] = _molset.LanzPars_fc_mat_fmt_set
    __swig_getmethods__["fc_mat_fmt"] = _molset.LanzPars_fc_mat_fmt_get
    if _newclass:
        fc_mat_fmt = _swig_property(_molset.LanzPars_fc_mat_fmt_get, _molset.LanzPars_fc_mat_fmt_set)
    __swig_setmethods__["m_mat_fmt"] = _molset.LanzPars_m_mat_fmt_set
    __swig_getmethods__["m_mat_fmt"] = _molset.LanzPars_m_mat_fmt_get
    if _newclass:
        m_mat_fmt = _swig_property(_molset.LanzPars_m_mat_fmt_get, _molset.LanzPars_m_mat_fmt_set)
    __swig_setmethods__["loop_unroll_lvl"] = _molset.LanzPars_loop_unroll_lvl_set
    __swig_getmethods__["loop_unroll_lvl"] = _molset.LanzPars_loop_unroll_lvl_get
    if _newclass:
        loop_unroll_lvl = _swig_property(_molset.LanzPars_loop_unroll_lvl_get, _molset.LanzPars_loop_unroll_lvl_set)
    __swig_setmethods__["factor_type"] = _molset.LanzPars_factor_type_set
    __swig_getmethods__["factor_type"] = _molset.LanzPars_factor_type_get
    if _newclass:
        factor_type = _swig_property(_molset.LanzPars_factor_type_get, _molset.LanzPars_factor_type_set)
    __swig_setmethods__["dyn_shift_off"] = _molset.LanzPars_dyn_shift_off_set
    __swig_getmethods__["dyn_shift_off"] = _molset.LanzPars_dyn_shift_off_get
    if _newclass:
        dyn_shift_off = _swig_property(_molset.LanzPars_dyn_shift_off_get, _molset.LanzPars_dyn_shift_off_set)
    __swig_setmethods__["init_guess"] = _molset.LanzPars_init_guess_set
    __swig_getmethods__["init_guess"] = _molset.LanzPars_init_guess_get
    if _newclass:
        init_guess = _swig_property(_molset.LanzPars_init_guess_get, _molset.LanzPars_init_guess_set)
    __swig_setmethods__["lead_y_idx"] = _molset.LanzPars_lead_y_idx_set
    __swig_getmethods__["lead_y_idx"] = _molset.LanzPars_lead_y_idx_get
    if _newclass:
        lead_y_idx = _swig_property(_molset.LanzPars_lead_y_idx_get, _molset.LanzPars_lead_y_idx_set)
    __swig_setmethods__["num_delay_piv"] = _molset.LanzPars_num_delay_piv_set
    __swig_getmethods__["num_delay_piv"] = _molset.LanzPars_num_delay_piv_get
    if _newclass:
        num_delay_piv = _swig_property(_molset.LanzPars_num_delay_piv_get, _molset.LanzPars_num_delay_piv_set)
    __swig_setmethods__["init_val"] = _molset.LanzPars_init_val_set
    __swig_getmethods__["init_val"] = _molset.LanzPars_init_val_get
    if _newclass:
        init_val = _swig_property(_molset.LanzPars_init_val_get, _molset.LanzPars_init_val_set)
    __swig_setmethods__["accuracy"] = _molset.LanzPars_accuracy_set
    __swig_getmethods__["accuracy"] = _molset.LanzPars_accuracy_get
    if _newclass:
        accuracy = _swig_property(_molset.LanzPars_accuracy_get, _molset.LanzPars_accuracy_set)
    __swig_setmethods__["left_bound"] = _molset.LanzPars_left_bound_set
    __swig_getmethods__["left_bound"] = _molset.LanzPars_left_bound_get
    if _newclass:
        left_bound = _swig_property(_molset.LanzPars_left_bound_get, _molset.LanzPars_left_bound_set)
    __swig_setmethods__["right_bound"] = _molset.LanzPars_right_bound_set
    __swig_getmethods__["right_bound"] = _molset.LanzPars_right_bound_get
    if _newclass:
        right_bound = _swig_property(_molset.LanzPars_right_bound_get, _molset.LanzPars_right_bound_set)
    __swig_setmethods__["store_factor"] = _molset.LanzPars_store_factor_set
    __swig_getmethods__["store_factor"] = _molset.LanzPars_store_factor_get
    if _newclass:
        store_factor = _swig_property(_molset.LanzPars_store_factor_get, _molset.LanzPars_store_factor_set)
LanzPars_swigregister = _molset.LanzPars_swigregister
LanzPars_swigregister(LanzPars)


def dgesv_(n, nrhs, a, lda, ipiv, b, ldb, info):
    return _molset.dgesv_(n, nrhs, a, lda, ipiv, b, ldb, info)
dgesv_ = _molset.dgesv_

def dsyev_(jobz, uplo, n, a, lda, w, work, lwork, info):
    return _molset.dsyev_(jobz, uplo, n, a, lda, w, work, lwork, info)
dsyev_ = _molset.dsyev_

def dsygv_(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, info):
    return _molset.dsygv_(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, info)
dsygv_ = _molset.dsygv_
class CmdParser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmdParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmdParser, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_CmdParser()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_CmdParser
    __del__ = lambda self: None
    __swig_setmethods__["CurToken"] = _molset.CmdParser_CurToken_set
    __swig_getmethods__["CurToken"] = _molset.CmdParser_CurToken_get
    if _newclass:
        CurToken = _swig_property(_molset.CmdParser_CurToken_get, _molset.CmdParser_CurToken_set)
    __swig_setmethods__["cmd_history"] = _molset.CmdParser_cmd_history_set
    __swig_getmethods__["cmd_history"] = _molset.CmdParser_cmd_history_get
    if _newclass:
        cmd_history = _swig_property(_molset.CmdParser_cmd_history_get, _molset.CmdParser_cmd_history_set)
    __swig_setmethods__["max_history_save"] = _molset.CmdParser_max_history_save_set
    __swig_getmethods__["max_history_save"] = _molset.CmdParser_max_history_save_get
    if _newclass:
        max_history_save = _swig_property(_molset.CmdParser_max_history_save_get, _molset.CmdParser_max_history_save_set)
    __swig_setmethods__["cur_history_cmd"] = _molset.CmdParser_cur_history_cmd_set
    __swig_getmethods__["cur_history_cmd"] = _molset.CmdParser_cur_history_cmd_get
    if _newclass:
        cur_history_cmd = _swig_property(_molset.CmdParser_cur_history_cmd_get, _molset.CmdParser_cur_history_cmd_set)
    __swig_setmethods__["Keywords"] = _molset.CmdParser_Keywords_set
    __swig_getmethods__["Keywords"] = _molset.CmdParser_Keywords_get
    if _newclass:
        Keywords = _swig_property(_molset.CmdParser_Keywords_get, _molset.CmdParser_Keywords_set)
    if _newclass:
        InitKeywords = staticmethod(_molset.CmdParser_InitKeywords)
    else:
        InitKeywords = _molset.CmdParser_InitKeywords
    if _newclass:
        RegisterKeyword = staticmethod(_molset.CmdParser_RegisterKeyword)
    else:
        RegisterKeyword = _molset.CmdParser_RegisterKeyword
    __swig_setmethods__["TokenValue"] = _molset.CmdParser_TokenValue_set
    __swig_getmethods__["TokenValue"] = _molset.CmdParser_TokenValue_get
    if _newclass:
        TokenValue = _swig_property(_molset.CmdParser_TokenValue_get, _molset.CmdParser_TokenValue_set)
    __swig_setmethods__["TokenValueFloat"] = _molset.CmdParser_TokenValueFloat_set
    __swig_getmethods__["TokenValueFloat"] = _molset.CmdParser_TokenValueFloat_get
    if _newclass:
        TokenValueFloat = _swig_property(_molset.CmdParser_TokenValueFloat_get, _molset.CmdParser_TokenValueFloat_set)
    __swig_setmethods__["TokenIdent"] = _molset.CmdParser_TokenIdent_set
    __swig_getmethods__["TokenIdent"] = _molset.CmdParser_TokenIdent_get
    if _newclass:
        TokenIdent = _swig_property(_molset.CmdParser_TokenIdent_get, _molset.CmdParser_TokenIdent_set)
    __swig_setmethods__["str_start_pos"] = _molset.CmdParser_str_start_pos_set
    __swig_getmethods__["str_start_pos"] = _molset.CmdParser_str_start_pos_get
    if _newclass:
        str_start_pos = _swig_property(_molset.CmdParser_str_start_pos_get, _molset.CmdParser_str_start_pos_set)
    __swig_setmethods__["cursor_pos"] = _molset.CmdParser_cursor_pos_set
    __swig_getmethods__["cursor_pos"] = _molset.CmdParser_cursor_pos_get
    if _newclass:
        cursor_pos = _swig_property(_molset.CmdParser_cursor_pos_get, _molset.CmdParser_cursor_pos_set)

    def SetCmdLine(self, cmd_line):
        return _molset.CmdParser_SetCmdLine(self, cmd_line)

    def GetCmdLine(self):
        return _molset.CmdParser_GetCmdLine(self)

    def GetStartPosSubstr(self):
        return _molset.CmdParser_GetStartPosSubstr(self)

    def RollHistory(self, step):
        return _molset.CmdParser_RollHistory(self, step)

    def ResetCursorPosition(self):
        return _molset.CmdParser_ResetCursorPosition(self)

    def CommandError(self, error):
        return _molset.CmdParser_CommandError(self, error)

    def LookUpKeyword(self):
        return _molset.CmdParser_LookUpKeyword(self)

    def FetchToken(self):
        return _molset.CmdParser_FetchToken(self)

    def NextIf(self, token, error):
        return _molset.CmdParser_NextIf(self, token, error)

    def ParseColour(self, RVal, GVal, BVal):
        return _molset.CmdParser_ParseColour(self, RVal, GVal, BVal)

    def ParseRange(self, neg):
        return _molset.CmdParser_ParseRange(self, neg)

    def ParseExpression(self, level, pmset):
        return _molset.CmdParser_ParseExpression(self, level, pmset)
CmdParser_swigregister = _molset.CmdParser_swigregister
CmdParser_swigregister(CmdParser)
FormatPDB = cvar.FormatPDB
FormatMacroMod = cvar.FormatMacroMod
FormatGaussian = cvar.FormatGaussian
FormatAlchemy = cvar.FormatAlchemy
FormatNMRPDB = cvar.FormatNMRPDB
FormatCharmm = cvar.FormatCharmm
FormatBiosym = cvar.FormatBiosym
FormatMOPAC = cvar.FormatMOPAC
FormatSHELX = cvar.FormatSHELX
FormatMol2 = cvar.FormatMol2
FormatFDAT = cvar.FormatFDAT
FormatMMDB = cvar.FormatMMDB
FormatMDL = cvar.FormatMDL
FormatXYZ = cvar.FormatXYZ
FormatCIF = cvar.FormatCIF
FormatCEX = cvar.FormatCEX
FormatRWF = cvar.FormatRWF
FormatHarlem = cvar.FormatHarlem
FormatAmberPrep = cvar.FormatAmberPrep
FormatAmberTop = cvar.FormatAmberTop
FormatHIN = cvar.FormatHIN
FormatGUESS = cvar.FormatGUESS

def CmdParser_InitKeywords():
    return _molset.CmdParser_InitKeywords()
CmdParser_InitKeywords = _molset.CmdParser_InitKeywords

def CmdParser_RegisterKeyword(keyw, itok):
    return _molset.CmdParser_RegisterKeyword(keyw, itok)
CmdParser_RegisterKeyword = _molset.CmdParser_RegisterKeyword

DirChar = _molset.DirChar
BOHR_U = _molset.BOHR_U
ANGSTROM_U = _molset.ANGSTROM_U
DEGREE_U = _molset.DEGREE_U
RADIAN_U = _molset.RADIAN_U
class Vec3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_Vec3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_Vec3D
    __del__ = lambda self: None

    def GetX(self):
        return _molset.Vec3D_GetX(self)

    def GetY(self):
        return _molset.Vec3D_GetY(self)

    def GetZ(self):
        return _molset.Vec3D_GetZ(self)

    def GetX_Bohr(self):
        return _molset.Vec3D_GetX_Bohr(self)

    def GetY_Bohr(self):
        return _molset.Vec3D_GetY_Bohr(self)

    def GetZ_Bohr(self):
        return _molset.Vec3D_GetZ_Bohr(self)

    def GetX_Ang(self):
        return _molset.Vec3D_GetX_Ang(self)

    def GetY_Ang(self):
        return _molset.Vec3D_GetY_Ang(self)

    def GetZ_Ang(self):
        return _molset.Vec3D_GetZ_Ang(self)

    def SetCoordFrom(self, ref_vec):
        return _molset.Vec3D_SetCoordFrom(self, ref_vec)

    def __iadd__(self, v):
        return _molset.Vec3D___iadd__(self, v)

    def length(self):
        return _molset.Vec3D_length(self)

    def length2(self):
        return _molset.Vec3D_length2(self)

    def IsClose(self, pt, crit=0.001):
        return _molset.Vec3D_IsClose(self, pt, crit)

    def SetX(self, x_new):
        return _molset.Vec3D_SetX(self, x_new)

    def SetY(self, y_new):
        return _molset.Vec3D_SetY(self, y_new)

    def SetZ(self, z_new):
        return _molset.Vec3D_SetZ(self, z_new)

    def SetX_Bohr(self, x_new):
        return _molset.Vec3D_SetX_Bohr(self, x_new)

    def SetY_Bohr(self, y_new):
        return _molset.Vec3D_SetY_Bohr(self, y_new)

    def SetZ_Bohr(self, z_new):
        return _molset.Vec3D_SetZ_Bohr(self, z_new)

    def SetX_Ang(self, x_new):
        return _molset.Vec3D_SetX_Ang(self, x_new)

    def SetY_Ang(self, y_new):
        return _molset.Vec3D_SetY_Ang(self, y_new)

    def SetZ_Ang(self, z_new):
        return _molset.Vec3D_SetZ_Ang(self, z_new)

    def SetFromStr(self, str):
        return _molset.Vec3D_SetFromStr(self, str)

    def Scale(self, scale):
        return _molset.Vec3D_Scale(self, scale)

    def normalize(self):
        return _molset.Vec3D_normalize(self)

    def SetZeros(self):
        return _molset.Vec3D_SetZeros(self)

    def RotatePt(self, still_pt, n, cosa, sina):
        return _molset.Vec3D_RotatePt(self, still_pt, n, cosa, sina)

    def Rotate(self, n, cosa, sina):
        return _molset.Vec3D_Rotate(self, n, cosa, sina)
    if _newclass:
        CalcTorsion = staticmethod(_molset.Vec3D_CalcTorsion)
    else:
        CalcTorsion = _molset.Vec3D_CalcTorsion
    if _newclass:
        CalcDihedral = staticmethod(_molset.Vec3D_CalcDihedral)
    else:
        CalcDihedral = _molset.Vec3D_CalcDihedral
    if _newclass:
        CalcAngle = staticmethod(_molset.Vec3D_CalcAngle)
    else:
        CalcAngle = _molset.Vec3D_CalcAngle
    if _newclass:
        CalcDistance = staticmethod(_molset.Vec3D_CalcDistance)
    else:
        CalcDistance = _molset.Vec3D_CalcDistance
    if _newclass:
        CalcDistanceSq = staticmethod(_molset.Vec3D_CalcDistanceSq)
    else:
        CalcDistanceSq = _molset.Vec3D_CalcDistanceSq
    if _newclass:
        VecProduct = staticmethod(_molset.Vec3D_VecProduct)
    else:
        VecProduct = _molset.Vec3D_VecProduct
    if _newclass:
        DotProduct = staticmethod(_molset.Vec3D_DotProduct)
    else:
        DotProduct = _molset.Vec3D_DotProduct
    if _newclass:
        diff = staticmethod(_molset.Vec3D_diff)
    else:
        diff = _molset.Vec3D_diff
    if _newclass:
        sum = staticmethod(_molset.Vec3D_sum)
    else:
        sum = _molset.Vec3D_sum
    if _newclass:
        CalcHlxParams = staticmethod(_molset.Vec3D_CalcHlxParams)
    else:
        CalcHlxParams = _molset.Vec3D_CalcHlxParams
    if _newclass:
        SetAtomPos = staticmethod(_molset.Vec3D_SetAtomPos)
    else:
        SetAtomPos = _molset.Vec3D_SetAtomPos

    def GetPnt(self):
        return _molset.Vec3D_GetPnt(self)
Vec3D_swigregister = _molset.Vec3D_swigregister
Vec3D_swigregister(Vec3D)

def Vec3D_CalcTorsion(atm1, atm2, atm3, atm4):
    return _molset.Vec3D_CalcTorsion(atm1, atm2, atm3, atm4)
Vec3D_CalcTorsion = _molset.Vec3D_CalcTorsion

def Vec3D_CalcDihedral(atm1, atm2, atm3, atm4):
    return _molset.Vec3D_CalcDihedral(atm1, atm2, atm3, atm4)
Vec3D_CalcDihedral = _molset.Vec3D_CalcDihedral

def Vec3D_CalcAngle(atm1, atm2, atm3):
    return _molset.Vec3D_CalcAngle(atm1, atm2, atm3)
Vec3D_CalcAngle = _molset.Vec3D_CalcAngle

def Vec3D_CalcDistance(atm1, atm2, units=ANGSTROM_U):
    return _molset.Vec3D_CalcDistance(atm1, atm2, units)
Vec3D_CalcDistance = _molset.Vec3D_CalcDistance

def Vec3D_CalcDistanceSq(atm1, atm2, units=ANGSTROM_U):
    return _molset.Vec3D_CalcDistanceSq(atm1, atm2, units)
Vec3D_CalcDistanceSq = _molset.Vec3D_CalcDistanceSq

def Vec3D_VecProduct(vprod, vec1, vec2):
    return _molset.Vec3D_VecProduct(vprod, vec1, vec2)
Vec3D_VecProduct = _molset.Vec3D_VecProduct

def Vec3D_DotProduct(vec1, vec2):
    return _molset.Vec3D_DotProduct(vec1, vec2)
Vec3D_DotProduct = _molset.Vec3D_DotProduct

def Vec3D_diff(c, vec1, vec2):
    return _molset.Vec3D_diff(c, vec1, vec2)
Vec3D_diff = _molset.Vec3D_diff

def Vec3D_sum(c, vec1, vec2):
    return _molset.Vec3D_sum(c, vec1, vec2)
Vec3D_sum = _molset.Vec3D_sum

def Vec3D_CalcHlxParams(c0_1, v1_1, v2_1, v3_1, c0_2, v1_2, v2_2, v3_2, shift, slide, rise, tilt, roll, twist, idir=1):
    return _molset.Vec3D_CalcHlxParams(c0_1, v1_1, v2_1, v3_1, c0_2, v1_2, v2_2, v3_2, shift, slide, rise, tilt, roll, twist, idir)
Vec3D_CalcHlxParams = _molset.Vec3D_CalcHlxParams

def Vec3D_SetAtomPos(pptr, ptr1, pptr2, pptr3, dist, val_angle, dih_angle):
    return _molset.Vec3D_SetAtomPos(pptr, ptr1, pptr2, pptr3, dist, val_angle, dih_angle)
Vec3D_SetAtomPos = _molset.Vec3D_SetAtomPos

class PointIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_PointIterator
    __del__ = lambda self: None

    def GetFirstPt(self):
        return _molset.PointIterator_GetFirstPt(self)

    def GetNextPt(self):
        return _molset.PointIterator_GetNextPt(self)
PointIterator_swigregister = _molset.PointIterator_swigregister
PointIterator_swigregister(PointIterator)

class PointIterator_const(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointIterator_const, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointIterator_const, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_PointIterator_const
    __del__ = lambda self: None

    def GetFirstPt(self):
        return _molset.PointIterator_const_GetFirstPt(self)

    def GetNextPt(self):
        return _molset.PointIterator_const_GetNextPt(self)
PointIterator_const_swigregister = _molset.PointIterator_const_swigregister
PointIterator_const_swigregister(PointIterator_const)

class PointContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointContainer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetPointIteratorPtr(self, *args):
        return _molset.PointContainer_GetPointIteratorPtr(self, *args)

    def GetNumPt(self):
        return _molset.PointContainer_GetNumPt(self)

    def IsAtomCollection(self):
        return _molset.PointContainer_IsAtomCollection(self)

    def IsWithinRadius(self, pptr, dlimit2):
        return _molset.PointContainer_IsWithinRadius(self, pptr, dlimit2)

    def GetMinMaxCrd(self, MinX_v, MinY_v, MinZ_v, MaxX_v, MaxY_v, MaxZ_v):
        return _molset.PointContainer_GetMinMaxCrd(self, MinX_v, MinY_v, MinZ_v, MaxX_v, MaxY_v, MaxZ_v)

    def GetAverageCoord(self, *args):
        return _molset.PointContainer_GetAverageCoord(self, *args)
    if _newclass:
        FindCoordMatch = staticmethod(_molset.PointContainer_FindCoordMatch)
    else:
        FindCoordMatch = _molset.PointContainer_FindCoordMatch
    if _newclass:
        GetSuperimposeMat = staticmethod(_molset.PointContainer_GetSuperimposeMat)
    else:
        GetSuperimposeMat = _molset.PointContainer_GetSuperimposeMat
    if _newclass:
        CalcRMSD = staticmethod(_molset.PointContainer_CalcRMSD)
    else:
        CalcRMSD = _molset.PointContainer_CalcRMSD

    def Transform(self, rot_mat, transl_vec):
        return _molset.PointContainer_Transform(self, rot_mat, transl_vec)

    def SaveCrdToArray(self, crd_arr):
        return _molset.PointContainer_SaveCrdToArray(self, crd_arr)

    def GetCrdArray(self):
        return _molset.PointContainer_GetCrdArray(self)

    def SetCrdFromArray(self, crd_arr):
        return _molset.PointContainer_SetCrdFromArray(self, crd_arr)
    __swig_destroy__ = _molset.delete_PointContainer
    __del__ = lambda self: None
PointContainer_swigregister = _molset.PointContainer_swigregister
PointContainer_swigregister(PointContainer)

def PointContainer_FindCoordMatch(g1, g2, pt_pt_map):
    return _molset.PointContainer_FindCoordMatch(g1, g2, pt_pt_map)
PointContainer_FindCoordMatch = _molset.PointContainer_FindCoordMatch

def PointContainer_GetSuperimposeMat(*args):
    return _molset.PointContainer_GetSuperimposeMat(*args)
PointContainer_GetSuperimposeMat = _molset.PointContainer_GetSuperimposeMat

def PointContainer_CalcRMSD(g1, g2, transform=1):
    return _molset.PointContainer_CalcRMSD(g1, g2, transform)
PointContainer_CalcRMSD = _molset.PointContainer_CalcRMSD


def GetSuperimposeMat(ref_crd, g2, rot_mat, transl_vec):
    return _molset.GetSuperimposeMat(ref_crd, g2, rot_mat, transl_vec)
GetSuperimposeMat = _molset.GetSuperimposeMat
class PointIteratorGen(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointIteratorGen, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointIteratorGen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_PointIteratorGen(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_PointIteratorGen
    __del__ = lambda self: None

    def GetFirstPt(self):
        return _molset.PointIteratorGen_GetFirstPt(self)

    def GetNextPt(self):
        return _molset.PointIteratorGen_GetNextPt(self)

    def GetNumPt(self):
        return _molset.PointIteratorGen_GetNumPt(self)
PointIteratorGen_swigregister = _molset.PointIteratorGen_swigregister
PointIteratorGen_swigregister(PointIteratorGen)

class PointIteratorGen_const(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointIteratorGen_const, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointIteratorGen_const, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_PointIteratorGen_const(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_PointIteratorGen_const
    __del__ = lambda self: None

    def GetFirstPt(self):
        return _molset.PointIteratorGen_const_GetFirstPt(self)

    def GetNextPt(self):
        return _molset.PointIteratorGen_const_GetNextPt(self)

    def GetNumPt(self):
        return _molset.PointIteratorGen_const_GetNumPt(self)
PointIteratorGen_const_swigregister = _molset.PointIteratorGen_const_swigregister
PointIteratorGen_const_swigregister(PointIteratorGen_const)

class Vec3DValArrayIterator(PointIterator):
    __swig_setmethods__ = {}
    for _s in [PointIterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3DValArrayIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [PointIterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3DValArrayIterator, name)
    __repr__ = _swig_repr

    def __init__(self, pt_array):
        this = _molset.new_Vec3DValArrayIterator(pt_array)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_Vec3DValArrayIterator
    __del__ = lambda self: None

    def GetFirstPt(self):
        return _molset.Vec3DValArrayIterator_GetFirstPt(self)

    def GetNextPt(self):
        return _molset.Vec3DValArrayIterator_GetNextPt(self)
Vec3DValArrayIterator_swigregister = _molset.Vec3DValArrayIterator_swigregister
Vec3DValArrayIterator_swigregister(Vec3DValArrayIterator)

class Vec3DValArrayIterator_const(PointIterator_const):
    __swig_setmethods__ = {}
    for _s in [PointIterator_const]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3DValArrayIterator_const, name, value)
    __swig_getmethods__ = {}
    for _s in [PointIterator_const]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3DValArrayIterator_const, name)
    __repr__ = _swig_repr

    def __init__(self, pt_array):
        this = _molset.new_Vec3DValArrayIterator_const(pt_array)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_Vec3DValArrayIterator_const
    __del__ = lambda self: None

    def GetFirstPt(self):
        return _molset.Vec3DValArrayIterator_const_GetFirstPt(self)

    def GetNextPt(self):
        return _molset.Vec3DValArrayIterator_const_GetNextPt(self)
Vec3DValArrayIterator_const_swigregister = _molset.Vec3DValArrayIterator_const_swigregister
Vec3DValArrayIterator_const_swigregister(Vec3DValArrayIterator_const)

class Vec3DValArray(PointContainer):
    __swig_setmethods__ = {}
    for _s in [PointContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3DValArray, name, value)
    __swig_getmethods__ = {}
    for _s in [PointContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3DValArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_Vec3DValArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_Vec3DValArray
    __del__ = lambda self: None

    def GetPointIteratorPtr(self, *args):
        return _molset.Vec3DValArray_GetPointIteratorPtr(self, *args)

    def GetNumPt(self):
        return _molset.Vec3DValArray_GetNumPt(self)
Vec3DValArray_swigregister = _molset.Vec3DValArray_swigregister
Vec3DValArray_swigregister(Vec3DValArray)

class Quaternion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quaternion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_Quaternion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_Quaternion
    __del__ = lambda self: None

    def __imul__(self, arg2):
        return _molset.Quaternion___imul__(self, arg2)

    def __invert__(self):
        return _molset.Quaternion___invert__(self)

    def __neg__(self):
        return _molset.Quaternion___neg__(self)

    def Normalize(self):
        return _molset.Quaternion_Normalize(self)

    def GetQuaternion(self, w, x, y, z):
        return _molset.Quaternion_GetQuaternion(self, w, x, y, z)

    def SetQuaternion(self, w, x, y, z):
        return _molset.Quaternion_SetQuaternion(self, w, x, y, z)

    def QuaternionFromAxis(self, arg2, arg3, arg4, arg5):
        return _molset.Quaternion_QuaternionFromAxis(self, arg2, arg3, arg4, arg5)
    if _newclass:
        QuaternionToRotMat = staticmethod(_molset.Quaternion_QuaternionToRotMat)
    else:
        QuaternionToRotMat = _molset.Quaternion_QuaternionToRotMat
    if _newclass:
        RotMatToQuaternion = staticmethod(_molset.Quaternion_RotMatToQuaternion)
    else:
        RotMatToQuaternion = _molset.Quaternion_RotMatToQuaternion

    def Slerp(self, arg2, arg3, arg4):
        return _molset.Quaternion_Slerp(self, arg2, arg3, arg4)

    def exp(self):
        return _molset.Quaternion_exp(self)

    def log(self):
        return _molset.Quaternion_log(self)

    def PrintOn(self):
        return _molset.Quaternion_PrintOn(self)
Quaternion_swigregister = _molset.Quaternion_swigregister
Quaternion_swigregister(Quaternion)

def Quaternion_QuaternionToRotMat(q, rmat):
    return _molset.Quaternion_QuaternionToRotMat(q, rmat)
Quaternion_QuaternionToRotMat = _molset.Quaternion_QuaternionToRotMat

def Quaternion_RotMatToQuaternion(rmat, q):
    return _molset.Quaternion_RotMatToQuaternion(rmat, q)
Quaternion_RotMatToQuaternion = _molset.Quaternion_RotMatToQuaternion

class Rot3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rot3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rot3D, name)
    __repr__ = _swig_repr
    if _newclass:
        RotMatToEuler = staticmethod(_molset.Rot3D_RotMatToEuler)
    else:
        RotMatToEuler = _molset.Rot3D_RotMatToEuler
    if _newclass:
        EulerToRotMat = staticmethod(_molset.Rot3D_EulerToRotMat)
    else:
        EulerToRotMat = _molset.Rot3D_EulerToRotMat
    if _newclass:
        IncrEulerAng = staticmethod(_molset.Rot3D_IncrEulerAng)
    else:
        IncrEulerAng = _molset.Rot3D_IncrEulerAng
    if _newclass:
        NormalizeEulerAng = staticmethod(_molset.Rot3D_NormalizeEulerAng)
    else:
        NormalizeEulerAng = _molset.Rot3D_NormalizeEulerAng
    if _newclass:
        RotMatToQuat = staticmethod(_molset.Rot3D_RotMatToQuat)
    else:
        RotMatToQuat = _molset.Rot3D_RotMatToQuat
    if _newclass:
        QuatToRotMat = staticmethod(_molset.Rot3D_QuatToRotMat)
    else:
        QuatToRotMat = _molset.Rot3D_QuatToRotMat

    def __init__(self):
        this = _molset.new_Rot3D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_Rot3D
    __del__ = lambda self: None
Rot3D_swigregister = _molset.Rot3D_swigregister
Rot3D_swigregister(Rot3D)

def Rot3D_RotMatToEuler(rmat, phi, cos_theta, psi):
    return _molset.Rot3D_RotMatToEuler(rmat, phi, cos_theta, psi)
Rot3D_RotMatToEuler = _molset.Rot3D_RotMatToEuler

def Rot3D_EulerToRotMat(phi, cos_theta, psi, rmat):
    return _molset.Rot3D_EulerToRotMat(phi, cos_theta, psi, rmat)
Rot3D_EulerToRotMat = _molset.Rot3D_EulerToRotMat

def Rot3D_IncrEulerAng(phi, cos_theta, psi, delt_phi, delt_cos_theta, delt_psi):
    return _molset.Rot3D_IncrEulerAng(phi, cos_theta, psi, delt_phi, delt_cos_theta, delt_psi)
Rot3D_IncrEulerAng = _molset.Rot3D_IncrEulerAng

def Rot3D_NormalizeEulerAng(phi, cos_theta, psi):
    return _molset.Rot3D_NormalizeEulerAng(phi, cos_theta, psi)
Rot3D_NormalizeEulerAng = _molset.Rot3D_NormalizeEulerAng

def Rot3D_RotMatToQuat(rmat, q):
    return _molset.Rot3D_RotMatToQuat(rmat, q)
Rot3D_RotMatToQuat = _molset.Rot3D_RotMatToQuat

def Rot3D_QuatToRotMat(q, rmat):
    return _molset.Rot3D_QuatToRotMat(q, rmat)
Rot3D_QuatToRotMat = _molset.Rot3D_QuatToRotMat

class BoxRegionPointIterator(PointIterator):
    __swig_setmethods__ = {}
    for _s in [PointIterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxRegionPointIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [PointIterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoxRegionPointIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_BoxRegionPointIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_BoxRegionPointIterator
    __del__ = lambda self: None

    def GetFirstPt(self):
        return _molset.BoxRegionPointIterator_GetFirstPt(self)

    def GetNextPt(self):
        return _molset.BoxRegionPointIterator_GetNextPt(self)

    def GetNumPt(self):
        return _molset.BoxRegionPointIterator_GetNumPt(self)
    __swig_setmethods__["iax_min"] = _molset.BoxRegionPointIterator_iax_min_set
    __swig_getmethods__["iax_min"] = _molset.BoxRegionPointIterator_iax_min_get
    if _newclass:
        iax_min = _swig_property(_molset.BoxRegionPointIterator_iax_min_get, _molset.BoxRegionPointIterator_iax_min_set)
    __swig_setmethods__["iay_min"] = _molset.BoxRegionPointIterator_iay_min_set
    __swig_getmethods__["iay_min"] = _molset.BoxRegionPointIterator_iay_min_get
    if _newclass:
        iay_min = _swig_property(_molset.BoxRegionPointIterator_iay_min_get, _molset.BoxRegionPointIterator_iay_min_set)
    __swig_setmethods__["iaz_min"] = _molset.BoxRegionPointIterator_iaz_min_set
    __swig_getmethods__["iaz_min"] = _molset.BoxRegionPointIterator_iaz_min_get
    if _newclass:
        iaz_min = _swig_property(_molset.BoxRegionPointIterator_iaz_min_get, _molset.BoxRegionPointIterator_iaz_min_set)
    __swig_setmethods__["iax_max"] = _molset.BoxRegionPointIterator_iax_max_set
    __swig_getmethods__["iax_max"] = _molset.BoxRegionPointIterator_iax_max_get
    if _newclass:
        iax_max = _swig_property(_molset.BoxRegionPointIterator_iax_max_get, _molset.BoxRegionPointIterator_iax_max_set)
    __swig_setmethods__["iay_max"] = _molset.BoxRegionPointIterator_iay_max_set
    __swig_getmethods__["iay_max"] = _molset.BoxRegionPointIterator_iay_max_get
    if _newclass:
        iay_max = _swig_property(_molset.BoxRegionPointIterator_iay_max_get, _molset.BoxRegionPointIterator_iay_max_set)
    __swig_setmethods__["iaz_max"] = _molset.BoxRegionPointIterator_iaz_max_set
    __swig_getmethods__["iaz_max"] = _molset.BoxRegionPointIterator_iaz_max_get
    if _newclass:
        iaz_max = _swig_property(_molset.BoxRegionPointIterator_iaz_max_get, _molset.BoxRegionPointIterator_iaz_max_set)
    __swig_setmethods__["partition"] = _molset.BoxRegionPointIterator_partition_set
    __swig_getmethods__["partition"] = _molset.BoxRegionPointIterator_partition_get
    if _newclass:
        partition = _swig_property(_molset.BoxRegionPointIterator_partition_get, _molset.BoxRegionPointIterator_partition_set)
BoxRegionPointIterator_swigregister = _molset.BoxRegionPointIterator_swigregister
BoxRegionPointIterator_swigregister(BoxRegionPointIterator)

class BoxPartition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxPartition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoxPartition, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_BoxPartition()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetDimensions(self, nx_new, ny_new, nz_new):
        return _molset.BoxPartition_SetDimensions(self, nx_new, ny_new, nz_new)

    def SetBoundaries(self, xmin_new, ymin_new, zmin_new, xmax_new, ymax_new, zmax_new):
        return _molset.BoxPartition_SetBoundaries(self, xmin_new, ymin_new, zmin_new, xmax_new, ymax_new, zmax_new)

    def DistributePointsToCells(self, pt_coll):
        return _molset.BoxPartition_DistributePointsToCells(self, pt_coll)

    def AddPoint(self, pt):
        return _molset.BoxPartition_AddPoint(self, pt)
    __swig_setmethods__["xmin"] = _molset.BoxPartition_xmin_set
    __swig_getmethods__["xmin"] = _molset.BoxPartition_xmin_get
    if _newclass:
        xmin = _swig_property(_molset.BoxPartition_xmin_get, _molset.BoxPartition_xmin_set)
    __swig_setmethods__["ymin"] = _molset.BoxPartition_ymin_set
    __swig_getmethods__["ymin"] = _molset.BoxPartition_ymin_get
    if _newclass:
        ymin = _swig_property(_molset.BoxPartition_ymin_get, _molset.BoxPartition_ymin_set)
    __swig_setmethods__["zmin"] = _molset.BoxPartition_zmin_set
    __swig_getmethods__["zmin"] = _molset.BoxPartition_zmin_get
    if _newclass:
        zmin = _swig_property(_molset.BoxPartition_zmin_get, _molset.BoxPartition_zmin_set)
    __swig_setmethods__["dx"] = _molset.BoxPartition_dx_set
    __swig_getmethods__["dx"] = _molset.BoxPartition_dx_get
    if _newclass:
        dx = _swig_property(_molset.BoxPartition_dx_get, _molset.BoxPartition_dx_set)
    __swig_setmethods__["dy"] = _molset.BoxPartition_dy_set
    __swig_getmethods__["dy"] = _molset.BoxPartition_dy_get
    if _newclass:
        dy = _swig_property(_molset.BoxPartition_dy_get, _molset.BoxPartition_dy_set)
    __swig_setmethods__["dz"] = _molset.BoxPartition_dz_set
    __swig_getmethods__["dz"] = _molset.BoxPartition_dz_get
    if _newclass:
        dz = _swig_property(_molset.BoxPartition_dz_get, _molset.BoxPartition_dz_set)
    __swig_setmethods__["nx"] = _molset.BoxPartition_nx_set
    __swig_getmethods__["nx"] = _molset.BoxPartition_nx_get
    if _newclass:
        nx = _swig_property(_molset.BoxPartition_nx_get, _molset.BoxPartition_nx_set)
    __swig_setmethods__["ny"] = _molset.BoxPartition_ny_set
    __swig_getmethods__["ny"] = _molset.BoxPartition_ny_get
    if _newclass:
        ny = _swig_property(_molset.BoxPartition_ny_get, _molset.BoxPartition_ny_set)
    __swig_setmethods__["nz"] = _molset.BoxPartition_nz_set
    __swig_getmethods__["nz"] = _molset.BoxPartition_nz_get
    if _newclass:
        nz = _swig_property(_molset.BoxPartition_nz_get, _molset.BoxPartition_nz_set)

    def GetIdx_x(self, x_coord):
        return _molset.BoxPartition_GetIdx_x(self, x_coord)

    def GetIdx_y(self, y_coord):
        return _molset.BoxPartition_GetIdx_y(self, y_coord)

    def GetIdx_z(self, z_coord):
        return _molset.BoxPartition_GetIdx_z(self, z_coord)

    def GetPointCellIdx(self, *args):
        return _molset.BoxPartition_GetPointCellIdx(self, *args)

    def GetLinCellIdx(self, ix, iy, iz):
        return _molset.BoxPartition_GetLinCellIdx(self, ix, iy, iz)
    __swig_setmethods__["ixrad"] = _molset.BoxPartition_ixrad_set
    __swig_getmethods__["ixrad"] = _molset.BoxPartition_ixrad_get
    if _newclass:
        ixrad = _swig_property(_molset.BoxPartition_ixrad_get, _molset.BoxPartition_ixrad_set)
    __swig_setmethods__["iyrad"] = _molset.BoxPartition_iyrad_set
    __swig_getmethods__["iyrad"] = _molset.BoxPartition_iyrad_get
    if _newclass:
        iyrad = _swig_property(_molset.BoxPartition_iyrad_get, _molset.BoxPartition_iyrad_set)
    __swig_setmethods__["izrad"] = _molset.BoxPartition_izrad_set
    __swig_getmethods__["izrad"] = _molset.BoxPartition_izrad_get
    if _newclass:
        izrad = _swig_property(_molset.BoxPartition_izrad_get, _molset.BoxPartition_izrad_set)

    def SetRegionRad(self, dist):
        return _molset.BoxPartition_SetRegionRad(self, dist)

    def GetNeighbors(self, pt, neighbors):
        return _molset.BoxPartition_GetNeighbors(self, pt, neighbors)

    def GetRegionPointIterator(self):
        return _molset.BoxPartition_GetRegionPointIterator(self)
    __swig_destroy__ = _molset.delete_BoxPartition
    __del__ = lambda self: None
BoxPartition_swigregister = _molset.BoxPartition_swigregister
BoxPartition_swigregister(BoxPartition)

NO_HYBRID = _molset.NO_HYBRID
SP_HYBRID = _molset.SP_HYBRID
SP2_HYBRID = _molset.SP2_HYBRID
SP3_HYBRID = _molset.SP3_HYBRID
class HaAtom(Vec3D):
    __swig_setmethods__ = {}
    for _s in [Vec3D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaAtom, name, value)
    __swig_getmethods__ = {}
    for _s in [Vec3D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaAtom, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaAtom()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaAtom
    __del__ = lambda self: None

    def SetParamFrom(self, atom_ref):
        return _molset.HaAtom_SetParamFrom(self, atom_ref)

    def GetElemNo(self):
        return _molset.HaAtom_GetElemNo(self)

    def SetElemNo(self, new_elem_no):
        return _molset.HaAtom_SetElemNo(self, new_elem_no)

    def SetName(self, atname):
        return _molset.HaAtom_SetName(self, atname)

    def SetNameFast(self, atname):
        return _molset.HaAtom_SetNameFast(self, atname)

    def GetName(self):
        return _molset.HaAtom_GetName(self)

    def GetStdSymbol(self):
        return _molset.HaAtom_GetStdSymbol(self)

    def Select(self):
        return _molset.HaAtom_Select(self)

    def UnSelect(self):
        return _molset.HaAtom_UnSelect(self)

    def Selected(self):
        return _molset.HaAtom_Selected(self)

    def IsDrawSphere(self):
        return _molset.HaAtom_IsDrawSphere(self)

    def SetDrawSphere(self, set_mode):
        return _molset.HaAtom_SetDrawSphere(self, set_mode)

    def SetDisplayed(self, set_mode):
        return _molset.HaAtom_SetDisplayed(self, set_mode)

    def IsDisplayed(self):
        return _molset.HaAtom_IsDisplayed(self)

    def IsDummy(self):
        return _molset.HaAtom_IsDummy(self)

    def SetDummy(self):
        return _molset.HaAtom_SetDummy(self)

    def IsProxy(self):
        return _molset.HaAtom_IsProxy(self)

    def SetProxy(self, proxy_flag_new=True):
        return _molset.HaAtom_SetProxy(self, proxy_flag_new)

    def GetReplacedAtName(self):
        return _molset.HaAtom_GetReplacedAtName(self)

    def SetReplacedAtName(self, repl_atom_name):
        return _molset.HaAtom_SetReplacedAtName(self, repl_atom_name)

    def IsHydrogen(self):
        return _molset.HaAtom_IsHydrogen(self)

    def GetDescription(self):
        return _molset.HaAtom_GetDescription(self)

    def SetDescription(self, desc):
        return _molset.HaAtom_SetDescription(self, desc)

    def IsHBDonor(self):
        return _molset.HaAtom_IsHBDonor(self)

    def IsHBAcceptor(self):
        return _molset.HaAtom_IsHBAcceptor(self)

    def SetHBDonor(self, set_mode):
        return _molset.HaAtom_SetHBDonor(self, set_mode)

    def SetHBAcceptor(self, set_mode):
        return _molset.HaAtom_SetHBAcceptor(self, set_mode)

    def SetHBStatus(self, hb_status_str):
        return _molset.HaAtom_SetHBStatus(self, hb_status_str)

    def GetHBStatusTextStr(self, hb_status_str):
        return _molset.HaAtom_GetHBStatusTextStr(self, hb_status_str)

    def GetHostRes(self, *args):
        return _molset.HaAtom_GetHostRes(self, *args)

    def GetHostChain(self, *args):
        return _molset.HaAtom_GetHostChain(self, *args)

    def GetHostChemGroup(self):
        return _molset.HaAtom_GetHostChemGroup(self)

    def GetHostMol(self, *args):
        return _molset.HaAtom_GetHostMol(self, *args)

    def GetHostMolSet(self, *args):
        return _molset.HaAtom_GetHostMolSet(self, *args)

    def SetHostRes(self, new_phost_res):
        return _molset.HaAtom_SetHostRes(self, new_phost_res)

    def Bonds_begin(self, *args):
        return _molset.HaAtom_Bonds_begin(self, *args)

    def Bonds_end(self, *args):
        return _molset.HaAtom_Bonds_end(self, *args)

    def GetBonds(self):
        return _molset.HaAtom_GetBonds(self)

    def GetBondedAtoms(self, bonded_atoms):
        return _molset.HaAtom_GetBondedAtoms(self, bonded_atoms)

    def GetHBondAcc(self, hbonded_acc_atoms):
        return _molset.HaAtom_GetHBondAcc(self, hbonded_acc_atoms)

    def IsBonded(self, at2):
        return _molset.HaAtom_IsBonded(self, at2)

    def RemoveBond(self, pb):
        return _molset.HaAtom_RemoveBond(self, pb)
    if _newclass:
        CreateBond = staticmethod(_molset.HaAtom_CreateBond)
    else:
        CreateBond = _molset.HaAtom_CreateBond
    if _newclass:
        DeleteBond = staticmethod(_molset.HaAtom_DeleteBond)
    else:
        DeleteBond = _molset.HaAtom_DeleteBond
    if _newclass:
        AddAtomFromTempl = staticmethod(_molset.HaAtom_AddAtomFromTempl)
    else:
        AddAtomFromTempl = _molset.HaAtom_AddAtomFromTempl
    if _newclass:
        SetCoordSubstH = staticmethod(_molset.HaAtom_SetCoordSubstH)
    else:
        SetCoordSubstH = _molset.HaAtom_SetCoordSubstH
    if _newclass:
        GetReachableAtoms = staticmethod(_molset.HaAtom_GetReachableAtoms)
    else:
        GetReachableAtoms = _molset.HaAtom_GetReachableAtoms
    if _newclass:
        RegisterAtName = staticmethod(_molset.HaAtom_RegisterAtName)
    else:
        RegisterAtName = _molset.HaAtom_RegisterAtName
    if _newclass:
        FillStdAtomTypes = staticmethod(_molset.HaAtom_FillStdAtomTypes)
    else:
        FillStdAtomTypes = _molset.HaAtom_FillStdAtomTypes
    __swig_setmethods__["ElemDesc"] = _molset.HaAtom_ElemDesc_set
    __swig_getmethods__["ElemDesc"] = _molset.HaAtom_ElemDesc_get
    if _newclass:
        ElemDesc = _swig_property(_molset.HaAtom_ElemDesc_get, _molset.HaAtom_ElemDesc_set)
    __swig_setmethods__["at_name_refno_map"] = _molset.HaAtom_at_name_refno_map_set
    __swig_getmethods__["at_name_refno_map"] = _molset.HaAtom_at_name_refno_map_get
    if _newclass:
        at_name_refno_map = _swig_property(_molset.HaAtom_at_name_refno_map_get, _molset.HaAtom_at_name_refno_map_set)

    def IsSameName(self, aptr_ref):
        return _molset.HaAtom_IsSameName(self, aptr_ref)

    def IsMatch(self, atempl):
        return _molset.HaAtom_IsMatch(self, atempl)
    if _newclass:
        AtTypeFromLbl = staticmethod(_molset.HaAtom_AtTypeFromLbl)
    else:
        AtTypeFromLbl = _molset.HaAtom_AtTypeFromLbl

    def Print_info(self, sout, level):
        return _molset.HaAtom_Print_info(self, sout, level)
    ATOMREF_FULL = _molset.HaAtom_ATOMREF_FULL
    ATOMREF_STD = _molset.HaAtom_ATOMREF_STD
    ATOMREF_NO_MOL = _molset.HaAtom_ATOMREF_NO_MOL
    ATOMREF_NO_RES = _molset.HaAtom_ATOMREF_NO_RES
    ATOMREF_ELEM_NAME = _molset.HaAtom_ATOMREF_ELEM_NAME
    ATOMREF_ELEM_NO = _molset.HaAtom_ATOMREF_ELEM_NO

    def GetRef(self, *args):
        return _molset.HaAtom_GetRef(self, *args)

    def FillRef(self, *args):
        return _molset.HaAtom_FillRef(self, *args)

    def GetSerNo(self):
        return _molset.HaAtom_GetSerNo(self)
    if _newclass:
        GetElemNoFromName = staticmethod(_molset.HaAtom_GetElemNoFromName)
    else:
        GetElemNoFromName = _molset.HaAtom_GetElemNoFromName
    if _newclass:
        GetElemNoFromChar = staticmethod(_molset.HaAtom_GetElemNoFromChar)
    else:
        GetElemNoFromChar = _molset.HaAtom_GetElemNoFromChar
    if _newclass:
        GetStdSymbolElem = staticmethod(_molset.HaAtom_GetStdSymbolElem)
    else:
        GetStdSymbolElem = _molset.HaAtom_GetStdSymbolElem
    if _newclass:
        ElemVDWRadius = staticmethod(_molset.HaAtom_ElemVDWRadius)
    else:
        ElemVDWRadius = _molset.HaAtom_ElemVDWRadius
    if _newclass:
        StdElemMass = staticmethod(_molset.HaAtom_StdElemMass)
    else:
        StdElemMass = _molset.HaAtom_StdElemMass

    def GetStdMass(self):
        return _molset.HaAtom_GetStdMass(self)
    if _newclass:
        ElemDuttonRadius = staticmethod(_molset.HaAtom_ElemDuttonRadius)
    else:
        ElemDuttonRadius = _molset.HaAtom_ElemDuttonRadius

    def GetFFSymbol(self):
        return _molset.HaAtom_GetFFSymbol(self)

    def SetFFSymbol(self, new_ff_symbol):
        return _molset.HaAtom_SetFFSymbol(self, new_ff_symbol)

    def SetCharge(self, new_charge):
        return _molset.HaAtom_SetCharge(self, new_charge)

    def GetCharge(self):
        return _molset.HaAtom_GetCharge(self)

    def GetMass(self):
        return _molset.HaAtom_GetMass(self)

    def SetMass(self, new_mass):
        return _molset.HaAtom_SetMass(self, new_mass)
    __swig_setmethods__["charge"] = _molset.HaAtom_charge_set
    __swig_getmethods__["charge"] = _molset.HaAtom_charge_get
    if _newclass:
        charge = _swig_property(_molset.HaAtom_charge_get, _molset.HaAtom_charge_set)
    __swig_setmethods__["mass"] = _molset.HaAtom_mass_set
    __swig_getmethods__["mass"] = _molset.HaAtom_mass_get
    if _newclass:
        mass = _swig_property(_molset.HaAtom_mass_get, _molset.HaAtom_mass_set)
    __swig_setmethods__["vdw_rad"] = _molset.HaAtom_vdw_rad_set
    __swig_getmethods__["vdw_rad"] = _molset.HaAtom_vdw_rad_get
    if _newclass:
        vdw_rad = _swig_property(_molset.HaAtom_vdw_rad_get, _molset.HaAtom_vdw_rad_set)
    __swig_setmethods__["ew"] = _molset.HaAtom_ew_set
    __swig_getmethods__["ew"] = _molset.HaAtom_ew_get
    if _newclass:
        ew = _swig_property(_molset.HaAtom_ew_get, _molset.HaAtom_ew_set)
    __swig_setmethods__["FFSymbol"] = _molset.HaAtom_FFSymbol_set
    __swig_getmethods__["FFSymbol"] = _molset.HaAtom_FFSymbol_get
    if _newclass:
        FFSymbol = _swig_property(_molset.HaAtom_FFSymbol_get, _molset.HaAtom_FFSymbol_set)

    def AddXml(self, *args):
        return _molset.HaAtom_AddXml(self, *args)

    def LoadXml(self, xml_element, option=0):
        return _molset.HaAtom_LoadXml(self, xml_element, option)

    def IsAlphaCarbon(self):
        return _molset.HaAtom_IsAlphaCarbon(self)

    def IsSugarPhosphate(self):
        return _molset.HaAtom_IsSugarPhosphate(self)

    def IsAminoBackbone(self):
        return _molset.HaAtom_IsAminoBackbone(self)

    def IsShapelyBackbone(self):
        return _molset.HaAtom_IsShapelyBackbone(self)

    def IsNucleicBackbone(self):
        return _molset.HaAtom_IsNucleicBackbone(self)

    def IsShapelySpecial(self):
        return _molset.HaAtom_IsShapelySpecial(self)

    def IsCysteineSulfur(self):
        return _molset.HaAtom_IsCysteineSulfur(self)
    __swig_setmethods__["x"] = _molset.HaAtom_x_set
    __swig_getmethods__["x"] = _molset.HaAtom_x_get
    if _newclass:
        x = _swig_property(_molset.HaAtom_x_get, _molset.HaAtom_x_set)
    __swig_setmethods__["y"] = _molset.HaAtom_y_set
    __swig_getmethods__["y"] = _molset.HaAtom_y_get
    if _newclass:
        y = _swig_property(_molset.HaAtom_y_get, _molset.HaAtom_y_set)
    __swig_setmethods__["z"] = _molset.HaAtom_z_set
    __swig_getmethods__["z"] = _molset.HaAtom_z_get
    if _newclass:
        z = _swig_property(_molset.HaAtom_z_get, _molset.HaAtom_z_set)
    __swig_setmethods__["tempf"] = _molset.HaAtom_tempf_set
    __swig_getmethods__["tempf"] = _molset.HaAtom_tempf_get
    if _newclass:
        tempf = _swig_property(_molset.HaAtom_tempf_get, _molset.HaAtom_tempf_set)
    __swig_setmethods__["col"] = _molset.HaAtom_col_set
    __swig_getmethods__["col"] = _molset.HaAtom_col_get
    if _newclass:
        col = _swig_property(_molset.HaAtom_col_get, _molset.HaAtom_col_set)
    __swig_setmethods__["label"] = _molset.HaAtom_label_set
    __swig_getmethods__["label"] = _molset.HaAtom_label_get
    if _newclass:
        label = _swig_property(_molset.HaAtom_label_get, _molset.HaAtom_label_set)
    __swig_setmethods__["elemno"] = _molset.HaAtom_elemno_set
    __swig_getmethods__["elemno"] = _molset.HaAtom_elemno_get
    if _newclass:
        elemno = _swig_property(_molset.HaAtom_elemno_get, _molset.HaAtom_elemno_set)
    __swig_setmethods__["refno"] = _molset.HaAtom_refno_set
    __swig_getmethods__["refno"] = _molset.HaAtom_refno_get
    if _newclass:
        refno = _swig_property(_molset.HaAtom_refno_get, _molset.HaAtom_refno_set)
    __swig_setmethods__["flag"] = _molset.HaAtom_flag_set
    __swig_getmethods__["flag"] = _molset.HaAtom_flag_get
    if _newclass:
        flag = _swig_property(_molset.HaAtom_flag_get, _molset.HaAtom_flag_set)
    __swig_setmethods__["radius"] = _molset.HaAtom_radius_set
    __swig_getmethods__["radius"] = _molset.HaAtom_radius_get
    if _newclass:
        radius = _swig_property(_molset.HaAtom_radius_get, _molset.HaAtom_radius_set)
    __swig_setmethods__["image_radius"] = _molset.HaAtom_image_radius_set
    __swig_getmethods__["image_radius"] = _molset.HaAtom_image_radius_get
    if _newclass:
        image_radius = _swig_property(_molset.HaAtom_image_radius_get, _molset.HaAtom_image_radius_set)
    __swig_setmethods__["irad"] = _molset.HaAtom_irad_set
    __swig_getmethods__["irad"] = _molset.HaAtom_irad_get
    if _newclass:
        irad = _swig_property(_molset.HaAtom_irad_get, _molset.HaAtom_irad_set)
    __swig_setmethods__["solv_access_area"] = _molset.HaAtom_solv_access_area_set
    __swig_getmethods__["solv_access_area"] = _molset.HaAtom_solv_access_area_get
    if _newclass:
        solv_access_area = _swig_property(_molset.HaAtom_solv_access_area_get, _molset.HaAtom_solv_access_area_set)
    __swig_setmethods__["hybrid"] = _molset.HaAtom_hybrid_set
    __swig_getmethods__["hybrid"] = _molset.HaAtom_hybrid_get
    if _newclass:
        hybrid = _swig_property(_molset.HaAtom_hybrid_get, _molset.HaAtom_hybrid_set)

    def GetHybrid(self):
        return _molset.HaAtom_GetHybrid(self)

    def GetHybridTextStr(self, hybrid_str):
        return _molset.HaAtom_GetHybridTextStr(self, hybrid_str)

    def SetHybrid(self, hybrid_str):
        return _molset.HaAtom_SetHybrid(self, hybrid_str)
    if _newclass:
        StdBondLen = staticmethod(_molset.HaAtom_StdBondLen)
    else:
        StdBondLen = _molset.HaAtom_StdBondLen

    def GetNBonds(self):
        return _molset.HaAtom_GetNBonds(self)
HaAtom_swigregister = _molset.HaAtom_swigregister
HaAtom_swigregister(HaAtom)
DUMMY_ELEM = cvar.DUMMY_ELEM
SphereFlag = cvar.SphereFlag
HeteroFlag = cvar.HeteroFlag
HydrogenFlag = cvar.HydrogenFlag
NormAtomFlag = cvar.NormAtomFlag
NonBondFlag = cvar.NonBondFlag
BreakFlag = cvar.BreakFlag
DisplayedFlag = cvar.DisplayedFlag
HBDonorFlag = cvar.HBDonorFlag
HBAcceptorFlag = cvar.HBAcceptorFlag

def HaAtom_CreateBond(aptr1, aptr2):
    return _molset.HaAtom_CreateBond(aptr1, aptr2)
HaAtom_CreateBond = _molset.HaAtom_CreateBond

def HaAtom_DeleteBond(aptr1, aptr2):
    return _molset.HaAtom_DeleteBond(aptr1, aptr2)
HaAtom_DeleteBond = _molset.HaAtom_DeleteBond

def HaAtom_AddAtomFromTempl(aptr2, aptr3, aptr4, aptr_templ, aptr_templ_2, aptr_templ_3, aptr_templ_4):
    return _molset.HaAtom_AddAtomFromTempl(aptr2, aptr3, aptr4, aptr_templ, aptr_templ_2, aptr_templ_3, aptr_templ_4)
HaAtom_AddAtomFromTempl = _molset.HaAtom_AddAtomFromTempl

def HaAtom_SetCoordSubstH(aptr1, aptr2, haptr):
    return _molset.HaAtom_SetCoordSubstH(aptr1, aptr2, haptr)
HaAtom_SetCoordSubstH = _molset.HaAtom_SetCoordSubstH

def HaAtom_GetReachableAtoms(block_atoms, aptr2, reach_atoms, loop):
    return _molset.HaAtom_GetReachableAtoms(block_atoms, aptr2, reach_atoms, loop)
HaAtom_GetReachableAtoms = _molset.HaAtom_GetReachableAtoms

def HaAtom_RegisterAtName(at_name):
    return _molset.HaAtom_RegisterAtName(at_name)
HaAtom_RegisterAtName = _molset.HaAtom_RegisterAtName

def HaAtom_FillStdAtomTypes():
    return _molset.HaAtom_FillStdAtomTypes()
HaAtom_FillStdAtomTypes = _molset.HaAtom_FillStdAtomTypes

def HaAtom_AtTypeFromLbl(Label):
    return _molset.HaAtom_AtTypeFromLbl(Label)
HaAtom_AtTypeFromLbl = _molset.HaAtom_AtTypeFromLbl

def HaAtom_GetElemNoFromName(at_name, pres=None):
    return _molset.HaAtom_GetElemNoFromName(at_name, pres)
HaAtom_GetElemNoFromName = _molset.HaAtom_GetElemNoFromName

def HaAtom_GetElemNoFromChar(ch_fst):
    return _molset.HaAtom_GetElemNoFromChar(ch_fst)
HaAtom_GetElemNoFromChar = _molset.HaAtom_GetElemNoFromChar

def HaAtom_GetStdSymbolElem(elem):
    return _molset.HaAtom_GetStdSymbolElem(elem)
HaAtom_GetStdSymbolElem = _molset.HaAtom_GetStdSymbolElem

def HaAtom_ElemVDWRadius(elem, united_atom_flag=False):
    return _molset.HaAtom_ElemVDWRadius(elem, united_atom_flag)
HaAtom_ElemVDWRadius = _molset.HaAtom_ElemVDWRadius

def HaAtom_StdElemMass(elem):
    return _molset.HaAtom_StdElemMass(elem)
HaAtom_StdElemMass = _molset.HaAtom_StdElemMass

def HaAtom_ElemDuttonRadius(elem):
    return _molset.HaAtom_ElemDuttonRadius(elem)
HaAtom_ElemDuttonRadius = _molset.HaAtom_ElemDuttonRadius

def HaAtom_StdBondLen(aptr1, aptr2):
    return _molset.HaAtom_StdBondLen(aptr1, aptr2)
HaAtom_StdBondLen = _molset.HaAtom_StdBondLen

class AtomDoubleMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomDoubleMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtomDoubleMap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_AtomDoubleMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomDoubleMap
    __del__ = lambda self: None

    def GetValue(self, aptr):
        return _molset.AtomDoubleMap_GetValue(self, aptr)

    def SetValue(self, aptr, new_val):
        return _molset.AtomDoubleMap_SetValue(self, aptr, new_val)

    def GetName(self):
        return _molset.AtomDoubleMap_GetName(self)

    def SetName(self, new_name):
        return _molset.AtomDoubleMap_SetName(self, new_name)
AtomDoubleMap_swigregister = _molset.AtomDoubleMap_swigregister
AtomDoubleMap_swigregister(AtomDoubleMap)

class AtomAtomMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomAtomMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtomAtomMap, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_AtomAtomMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomAtomMap
    __del__ = lambda self: None

    def GetValue(self, aptr):
        return _molset.AtomAtomMap_GetValue(self, aptr)

    def SetValue(self, aptr, val):
        return _molset.AtomAtomMap_SetValue(self, aptr, val)
AtomAtomMap_swigregister = _molset.AtomAtomMap_swigregister
AtomAtomMap_swigregister(AtomAtomMap)

class ElemStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElemStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElemStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["symbol"] = _molset.ElemStruct_symbol_set
    __swig_getmethods__["symbol"] = _molset.ElemStruct_symbol_get
    if _newclass:
        symbol = _swig_property(_molset.ElemStruct_symbol_get, _molset.ElemStruct_symbol_set)
    __swig_setmethods__["covalrad"] = _molset.ElemStruct_covalrad_set
    __swig_getmethods__["covalrad"] = _molset.ElemStruct_covalrad_get
    if _newclass:
        covalrad = _swig_property(_molset.ElemStruct_covalrad_get, _molset.ElemStruct_covalrad_set)
    __swig_setmethods__["vdwrad"] = _molset.ElemStruct_vdwrad_set
    __swig_getmethods__["vdwrad"] = _molset.ElemStruct_vdwrad_get
    if _newclass:
        vdwrad = _swig_property(_molset.ElemStruct_vdwrad_get, _molset.ElemStruct_vdwrad_set)
    __swig_setmethods__["mass"] = _molset.ElemStruct_mass_set
    __swig_getmethods__["mass"] = _molset.ElemStruct_mass_get
    if _newclass:
        mass = _swig_property(_molset.ElemStruct_mass_get, _molset.ElemStruct_mass_set)
    __swig_setmethods__["cpkcol"] = _molset.ElemStruct_cpkcol_set
    __swig_getmethods__["cpkcol"] = _molset.ElemStruct_cpkcol_get
    if _newclass:
        cpkcol = _swig_property(_molset.ElemStruct_cpkcol_get, _molset.ElemStruct_cpkcol_set)
    __swig_setmethods__["name"] = _molset.ElemStruct_name_set
    __swig_getmethods__["name"] = _molset.ElemStruct_name_get
    if _newclass:
        name = _swig_property(_molset.ElemStruct_name_get, _molset.ElemStruct_name_set)

    def __init__(self):
        this = _molset.new_ElemStruct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ElemStruct
    __del__ = lambda self: None
ElemStruct_swigregister = _molset.ElemStruct_swigregister
ElemStruct_swigregister(ElemStruct)
MAXELEMNO = cvar.MAXELEMNO

class AtomIterator(PointIterator):
    __swig_setmethods__ = {}
    for _s in [PointIterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [PointIterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_AtomIterator
    __del__ = lambda self: None

    def GetFirstAtom(self):
        return _molset.AtomIterator_GetFirstAtom(self)

    def GetNextAtom(self):
        return _molset.AtomIterator_GetNextAtom(self)

    def GetFirstPt(self):
        return _molset.AtomIterator_GetFirstPt(self)

    def GetNextPt(self):
        return _molset.AtomIterator_GetNextPt(self)
AtomIterator_swigregister = _molset.AtomIterator_swigregister
AtomIterator_swigregister(AtomIterator)

class AtomIterator_const(PointIterator_const):
    __swig_setmethods__ = {}
    for _s in [PointIterator_const]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomIterator_const, name, value)
    __swig_getmethods__ = {}
    for _s in [PointIterator_const]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomIterator_const, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_AtomIterator_const
    __del__ = lambda self: None

    def GetFirstAtom(self):
        return _molset.AtomIterator_const_GetFirstAtom(self)

    def GetNextAtom(self):
        return _molset.AtomIterator_const_GetNextAtom(self)

    def GetFirstPt(self):
        return _molset.AtomIterator_const_GetFirstPt(self)

    def GetNextPt(self):
        return _molset.AtomIterator_const_GetNextPt(self)
AtomIterator_const_swigregister = _molset.AtomIterator_const_swigregister
AtomIterator_const_swigregister(AtomIterator_const)

class AtomLoadOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomLoadOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtomLoadOptions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_AtomLoadOptions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomLoadOptions
    __del__ = lambda self: None

    def Copy(self, ref):
        return _molset.AtomLoadOptions_Copy(self, ref)

    def clone(self):
        return _molset.AtomLoadOptions_clone(self)

    def SetStdOptions(self):
        return _molset.AtomLoadOptions_SetStdOptions(self)

    def GetDefaultMolName(self):
        return _molset.AtomLoadOptions_GetDefaultMolName(self)

    def SetDefaultMolName(self, mol_name):
        return _molset.AtomLoadOptions_SetDefaultMolName(self, mol_name)

    def ToCalcBonds(self):
        return _molset.AtomLoadOptions_ToCalcBonds(self)

    def SetCalcBonds(self, set_par=True):
        return _molset.AtomLoadOptions_SetCalcBonds(self, set_par)

    def UniqueAtNames(self):
        return _molset.AtomLoadOptions_UniqueAtNames(self)

    def SetUniqueAtNames(self, set_par=True):
        return _molset.AtomLoadOptions_SetUniqueAtNames(self, set_par)
AtomLoadOptions_swigregister = _molset.AtomLoadOptions_swigregister
AtomLoadOptions_swigregister(AtomLoadOptions)

class AtomSaveOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomSaveOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtomSaveOptions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_AtomSaveOptions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomSaveOptions
    __del__ = lambda self: None

    def Copy(self, ref):
        return _molset.AtomSaveOptions_Copy(self, ref)

    def clone(self):
        return _molset.AtomSaveOptions_clone(self)

    def SetStdOptions(self):
        return _molset.AtomSaveOptions_SetStdOptions(self)
    __swig_setmethods__["save_selected"] = _molset.AtomSaveOptions_save_selected_set
    __swig_getmethods__["save_selected"] = _molset.AtomSaveOptions_save_selected_get
    if _newclass:
        save_selected = _swig_property(_molset.AtomSaveOptions_save_selected_get, _molset.AtomSaveOptions_save_selected_set)
    __swig_setmethods__["save_connect"] = _molset.AtomSaveOptions_save_connect_set
    __swig_getmethods__["save_connect"] = _molset.AtomSaveOptions_save_connect_get
    if _newclass:
        save_connect = _swig_property(_molset.AtomSaveOptions_save_connect_get, _molset.AtomSaveOptions_save_connect_set)
    __swig_setmethods__["save_transform"] = _molset.AtomSaveOptions_save_transform_set
    __swig_getmethods__["save_transform"] = _molset.AtomSaveOptions_save_transform_get
    if _newclass:
        save_transform = _swig_property(_molset.AtomSaveOptions_save_transform_get, _molset.AtomSaveOptions_save_transform_set)
    __swig_setmethods__["save_atom_ref"] = _molset.AtomSaveOptions_save_atom_ref_set
    __swig_getmethods__["save_atom_ref"] = _molset.AtomSaveOptions_save_atom_ref_get
    if _newclass:
        save_atom_ref = _swig_property(_molset.AtomSaveOptions_save_atom_ref_get, _molset.AtomSaveOptions_save_atom_ref_set)
    __swig_setmethods__["save_amber_pdb"] = _molset.AtomSaveOptions_save_amber_pdb_set
    __swig_getmethods__["save_amber_pdb"] = _molset.AtomSaveOptions_save_amber_pdb_get
    if _newclass:
        save_amber_pdb = _swig_property(_molset.AtomSaveOptions_save_amber_pdb_get, _molset.AtomSaveOptions_save_amber_pdb_set)
    __swig_setmethods__["save_sep_wat_mol"] = _molset.AtomSaveOptions_save_sep_wat_mol_set
    __swig_getmethods__["save_sep_wat_mol"] = _molset.AtomSaveOptions_save_sep_wat_mol_get
    if _newclass:
        save_sep_wat_mol = _swig_property(_molset.AtomSaveOptions_save_sep_wat_mol_get, _molset.AtomSaveOptions_save_sep_wat_mol_set)
    __swig_setmethods__["at_ref_type"] = _molset.AtomSaveOptions_at_ref_type_set
    __swig_getmethods__["at_ref_type"] = _molset.AtomSaveOptions_at_ref_type_get
    if _newclass:
        at_ref_type = _swig_property(_molset.AtomSaveOptions_at_ref_type_get, _molset.AtomSaveOptions_at_ref_type_set)
AtomSaveOptions_swigregister = _molset.AtomSaveOptions_swigregister
AtomSaveOptions_swigregister(AtomSaveOptions)

class AtomContainer(PointContainer):
    __swig_setmethods__ = {}
    for _s in [PointContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [PointContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomContainer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetAtomIteratorPtr(self):
        return _molset.AtomContainer_GetAtomIteratorPtr(self)

    def GetNAtoms(self):
        return _molset.AtomContainer_GetNAtoms(self)

    def IsMember(self, aptr):
        return _molset.AtomContainer_IsMember(self, aptr)

    def __iter__(self):
        return _molset.AtomContainer___iter__(self)

    def GetAtomIterator(self):
        return _molset.AtomContainer_GetAtomIterator(self)

    def IsAtomCollection(self):
        return _molset.AtomContainer_IsAtomCollection(self)

    def GetStdRotMat(self, rot_mat):
        return _molset.AtomContainer_GetStdRotMat(self, rot_mat)

    def GetStdMomInertRotMat(self, rot_mat):
        return _molset.AtomContainer_GetStdMomInertRotMat(self, rot_mat)

    def GetStdPosition(self, rot_std, trans_std):
        return _molset.AtomContainer_GetStdPosition(self, rot_std, trans_std)

    def SetPosition(self, rot_new, trans_new):
        return _molset.AtomContainer_SetPosition(self, rot_new, trans_new)

    def GetStdPositionMomInertia(self, rot_std, trans_std):
        return _molset.AtomContainer_GetStdPositionMomInertia(self, rot_std, trans_std)

    def SetPositionMomInertia(self, rot_new, trans_new):
        return _molset.AtomContainer_SetPositionMomInertia(self, rot_new, trans_new)

    def RotateAtoms(self, rot_mat, cnt):
        return _molset.AtomContainer_RotateAtoms(self, rot_mat, cnt)

    def TranslateAtoms(self, tr_vec):
        return _molset.AtomContainer_TranslateAtoms(self, tr_vec)

    def SetPosEulerTrans(self, phi, cos_theta, psi, trans):
        return _molset.AtomContainer_SetPosEulerTrans(self, phi, cos_theta, psi, trans)

    def GetPosEulerTrans(self, phi, cos_theta, psi, trans):
        return _molset.AtomContainer_GetPosEulerTrans(self, phi, cos_theta, psi, trans)

    def SetQuaternionTrans(self, q, trans):
        return _molset.AtomContainer_SetQuaternionTrans(self, q, trans)

    def GetQuaternionTrans(self, q, trans):
        return _molset.AtomContainer_GetQuaternionTrans(self, q, trans)

    def SetIntCoordFromStr(self, int_crd_str):
        return _molset.AtomContainer_SetIntCoordFromStr(self, int_crd_str)

    def SaveXYZFile(self, fout_name, p_opt=None):
        return _molset.AtomContainer_SaveXYZFile(self, fout_name, p_opt)

    def SaveXYZStream(self, sout, p_opt=None):
        return _molset.AtomContainer_SaveXYZStream(self, sout, p_opt)
    __swig_destroy__ = _molset.delete_AtomContainer
    __del__ = lambda self: None
AtomContainer_swigregister = _molset.AtomContainer_swigregister
AtomContainer_swigregister(AtomContainer)

class AtomIteratorGen(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomIteratorGen, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtomIteratorGen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_AtomIteratorGen(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomIteratorGen
    __del__ = lambda self: None

    def GetFirstAtom(self):
        return _molset.AtomIteratorGen_GetFirstAtom(self)

    def GetNextAtom(self):
        return _molset.AtomIteratorGen_GetNextAtom(self)

    def GetNAtoms(self):
        return _molset.AtomIteratorGen_GetNAtoms(self)

    def next(self):
        return _molset.AtomIteratorGen_next(self)

    def __next__(self):
        return _molset.AtomIteratorGen___next__(self)

    def __iter__(self):
        return _molset.AtomIteratorGen___iter__(self)
AtomIteratorGen_swigregister = _molset.AtomIteratorGen_swigregister
AtomIteratorGen_swigregister(AtomIteratorGen)

class AtomIteratorAtomGroup(AtomIterator):
    __swig_setmethods__ = {}
    for _s in [AtomIterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomIteratorAtomGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomIterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomIteratorAtomGroup, name)
    __repr__ = _swig_repr

    def __init__(self, new_p_at_group):
        this = _molset.new_AtomIteratorAtomGroup(new_p_at_group)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomIteratorAtomGroup
    __del__ = lambda self: None

    def GetFirstAtom(self):
        return _molset.AtomIteratorAtomGroup_GetFirstAtom(self)

    def GetNextAtom(self):
        return _molset.AtomIteratorAtomGroup_GetNextAtom(self)
AtomIteratorAtomGroup_swigregister = _molset.AtomIteratorAtomGroup_swigregister
AtomIteratorAtomGroup_swigregister(AtomIteratorAtomGroup)

class AtomIteratorAtomGroup_const(AtomIterator_const):
    __swig_setmethods__ = {}
    for _s in [AtomIterator_const]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomIteratorAtomGroup_const, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomIterator_const]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomIteratorAtomGroup_const, name)
    __repr__ = _swig_repr

    def __init__(self, new_p_at_group):
        this = _molset.new_AtomIteratorAtomGroup_const(new_p_at_group)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomIteratorAtomGroup_const
    __del__ = lambda self: None

    def GetFirstAtom(self):
        return _molset.AtomIteratorAtomGroup_const_GetFirstAtom(self)

    def GetNextAtom(self):
        return _molset.AtomIteratorAtomGroup_const_GetNextAtom(self)
AtomIteratorAtomGroup_const_swigregister = _molset.AtomIteratorAtomGroup_const_swigregister
AtomIteratorAtomGroup_const_swigregister(AtomIteratorAtomGroup_const)

class AtomGroup(AtomContainer):
    __swig_setmethods__ = {}
    for _s in [AtomContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomGroup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_AtomGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomGroup
    __del__ = lambda self: None

    def GetAtomIteratorPtr(self):
        return _molset.AtomGroup_GetAtomIteratorPtr(self)

    def GetNAtoms(self):
        return _molset.AtomGroup_GetNAtoms(self)

    def IsMember(self, aptr):
        return _molset.AtomGroup_IsMember(self, aptr)

    def GetPointIteratorPtr(self, *args):
        return _molset.AtomGroup_GetPointIteratorPtr(self, *args)

    def GetNumPt(self):
        return _molset.AtomGroup_GetNumPt(self)

    def GetAtomByName(self, at_name):
        return _molset.AtomGroup_GetAtomByName(self, at_name)

    def GetAtomByIdx(self, idx):
        return _molset.AtomGroup_GetAtomByIdx(self, idx)

    def InsertAtom(self, aptr):
        return _molset.AtomGroup_InsertAtom(self, aptr)

    def DeleteAtom(self, aptr):
        return _molset.AtomGroup_DeleteAtom(self, aptr)

    def DeleteAtoms(self, ptr_set):
        return _molset.AtomGroup_DeleteAtoms(self, ptr_set)

    def DelSelAtoms(self):
        return _molset.AtomGroup_DelSelAtoms(self)

    def SetFromExpr(self, expr, pmset):
        return _molset.AtomGroup_SetFromExpr(self, expr, pmset)

    def SetFromExprStr(self, expr_str, pmset):
        return _molset.AtomGroup_SetFromExprStr(self, expr_str, pmset)

    def AddFromExpr(self, expr, pmset):
        return _molset.AtomGroup_AddFromExpr(self, expr, pmset)

    def AddFromExprStr(self, expr_str, pmset):
        return _molset.AtomGroup_AddFromExprStr(self, expr_str, pmset)

    def DeleteAtomsExpr(self, expr, pmset):
        return _molset.AtomGroup_DeleteAtomsExpr(self, expr, pmset)

    def DeleteAtomsExprStr(self, expr_str, pmset):
        return _molset.AtomGroup_DeleteAtomsExprStr(self, expr_str, pmset)

    def KeepOnlyAtomsExpr(self, expr, pmset):
        return _molset.AtomGroup_KeepOnlyAtomsExpr(self, expr, pmset)

    def KeepOnlyAtomsExprStr(self, expr_str, pmset):
        return _molset.AtomGroup_KeepOnlyAtomsExprStr(self, expr_str, pmset)

    def GetID(self):
        return _molset.AtomGroup_GetID(self)

    def SetID(self, new_id):
        return _molset.AtomGroup_SetID(self, new_id)
AtomGroup_swigregister = _molset.AtomGroup_swigregister
AtomGroup_swigregister(AtomGroup)

class ChemGroup(AtomGroup):
    __swig_setmethods__ = {}
    for _s in [AtomGroup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChemGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomGroup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChemGroup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_ChemGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ChemGroup
    __del__ = lambda self: None

    def FillRef(self, buf):
        return _molset.ChemGroup_FillRef(self, buf)

    def GetProtect(self):
        return _molset.ChemGroup_GetProtect(self)

    def SetProtect(self, new_protect):
        return _molset.ChemGroup_SetProtect(self, new_protect)
    if _newclass:
        GetIDFromRef = staticmethod(_molset.ChemGroup_GetIDFromRef)
    else:
        GetIDFromRef = _molset.ChemGroup_GetIDFromRef

    def Print_info(self, sout, level):
        return _molset.ChemGroup_Print_info(self, sout, level)
ChemGroup_swigregister = _molset.ChemGroup_swigregister
ChemGroup_swigregister(ChemGroup)

def ChemGroup_GetIDFromRef(buf):
    return _molset.ChemGroup_GetIDFromRef(buf)
ChemGroup_GetIDFromRef = _molset.ChemGroup_GetIDFromRef

ADD_ALL_ATOMS = _molset.ADD_ALL_ATOMS
ADD_HYDROGENS = _molset.ADD_HYDROGENS
ADD_POLAR_HYDROGENS = _molset.ADD_POLAR_HYDROGENS
ADD_HEAVY_ATOMS = _molset.ADD_HEAVY_ATOMS
class HaResidue(AtomGroup):
    __swig_setmethods__ = {}
    for _s in [AtomGroup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaResidue, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomGroup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaResidue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_HaResidue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaResidue
    __del__ = lambda self: None

    def SetParamFrom(self, res_ref):
        return _molset.HaResidue_SetParamFrom(self, res_ref)

    def GetNAtomsNonProxy(self):
        return _molset.HaResidue_GetNAtomsNonProxy(self)

    def AddNewAtom(self):
        return _molset.HaResidue_AddNewAtom(self)

    def GetAtomByName(self, *args):
        return _molset.HaResidue_GetAtomByName(self, *args)

    def GetHostChain(self):
        return _molset.HaResidue_GetHostChain(self)

    def SetHostChain(self, new_phost):
        return _molset.HaResidue_SetHostChain(self, new_phost)

    def GetHostMol(self, *args):
        return _molset.HaResidue_GetHostMol(self, *args)

    def GetHostMolSet(self, *args):
        return _molset.HaResidue_GetHostMolSet(self, *args)

    def GetNextResInChain(self, *args):
        return _molset.HaResidue_GetNextResInChain(self, *args)

    def GetPrevResInChain(self, *args):
        return _molset.HaResidue_GetPrevResInChain(self, *args)

    def IsBonded(self, res2):
        return _molset.HaResidue_IsBonded(self, res2)

    def HasBackBHBond(self, res2):
        return _molset.HaResidue_HasBackBHBond(self, res2)

    def GetName(self):
        return _molset.HaResidue_GetName(self)

    def SetName(self, res_name):
        return _molset.HaResidue_SetName(self, res_name)

    def SetNameModifier(self, new_name_mod):
        return _molset.HaResidue_SetNameModifier(self, new_name_mod)

    def GetNameModifier(self):
        return _molset.HaResidue_GetNameModifier(self)

    def GetFullName(self):
        return _molset.HaResidue_GetFullName(self)
    if _newclass:
        GetResNameFromFullName = staticmethod(_molset.HaResidue_GetResNameFromFullName)
    else:
        GetResNameFromFullName = _molset.HaResidue_GetResNameFromFullName

    def GetRef(self):
        return _molset.HaResidue_GetRef(self)

    def FillRef(self, buf, mode=0):
        return _molset.HaResidue_FillRef(self, buf, mode)

    def HasSelectedAtoms(self):
        return _molset.HaResidue_HasSelectedAtoms(self)

    def SelectAtomsAll(self):
        return _molset.HaResidue_SelectAtomsAll(self)

    def GetAtomSeqNumMap(self, *args):
        return _molset.HaResidue_GetAtomSeqNumMap(self, *args)

    def SetUniqueAtomNames(self):
        return _molset.HaResidue_SetUniqueAtomNames(self)

    def GetUniqueAtomName(self, elem_no):
        return _molset.HaResidue_GetUniqueAtomName(self, elem_no)

    def SplitResidue(self):
        return _molset.HaResidue_SplitResidue(self)

    def SetStdCharges(self):
        return _molset.HaResidue_SetStdCharges(self)

    def InterpolResParams(self, res_name_1, res_name_2, weight_1):
        return _molset.HaResidue_InterpolResParams(self, res_name_1, res_name_2, weight_1)

    def GetTemplate(self):
        return _molset.HaResidue_GetTemplate(self)

    def CheckStruct(self):
        return _molset.HaResidue_CheckStruct(self)

    def CheckStructMortLib(self, ff_type):
        return _molset.HaResidue_CheckStructMortLib(self, ff_type)

    def AddMissingAtoms(self, atom_type):
        return _molset.HaResidue_AddMissingAtoms(self, atom_type)

    def AddWaterHydrogens(self):
        return _molset.HaResidue_AddWaterHydrogens(self)

    def GetSerNo(self):
        return _molset.HaResidue_GetSerNo(self)
    if _newclass:
        GetResNameInTable = staticmethod(_molset.HaResidue_GetResNameInTable)
    else:
        GetResNameInTable = _molset.HaResidue_GetResNameInTable

    def IsAmino(self):
        return _molset.HaResidue_IsAmino(self)

    def IsAminoNucleo(self):
        return _molset.HaResidue_IsAminoNucleo(self)

    def IsNucleo(self):
        return _molset.HaResidue_IsNucleo(self)

    def IsProtein(self):
        return _molset.HaResidue_IsProtein(self)

    def IsDNA(self):
        return _molset.HaResidue_IsDNA(self)

    def IsSolvent(self):
        return _molset.HaResidue_IsSolvent(self)

    def IsWater(self):
        return _molset.HaResidue_IsWater(self)

    def IsIon(self):
        return _molset.HaResidue_IsIon(self)

    def IsPyrimidine(self):
        return _molset.HaResidue_IsPyrimidine(self)

    def IsPurine(self):
        return _molset.HaResidue_IsPurine(self)

    def IsRNA(self):
        return _molset.HaResidue_IsRNA(self)

    def IsProline(self):
        return _molset.HaResidue_IsProline(self)

    def IsHistidine(self):
        return _molset.HaResidue_IsHistidine(self)

    def IsCysteine(self):
        return _molset.HaResidue_IsCysteine(self)

    def IsAdenine(self):
        return _molset.HaResidue_IsAdenine(self)

    def IsCytosine(self):
        return _molset.HaResidue_IsCytosine(self)

    def IsGuanine(self):
        return _molset.HaResidue_IsGuanine(self)

    def IsThymine(self):
        return _molset.HaResidue_IsThymine(self)

    def IsCoenzyme(self):
        return _molset.HaResidue_IsCoenzyme(self)

    def IsTerm(self):
        return _molset.HaResidue_IsTerm(self)

    def CalcStdCrdSys(self, fit_std_geom=0):
        return _molset.HaResidue_CalcStdCrdSys(self, fit_std_geom)
    if _newclass:
        CalcPhiAngle = staticmethod(_molset.HaResidue_CalcPhiAngle)
    else:
        CalcPhiAngle = _molset.HaResidue_CalcPhiAngle
    if _newclass:
        CalcPsiAngle = staticmethod(_molset.HaResidue_CalcPsiAngle)
    else:
        CalcPsiAngle = _molset.HaResidue_CalcPsiAngle
    __swig_setmethods__["phost_ch"] = _molset.HaResidue_phost_ch_set
    __swig_getmethods__["phost_ch"] = _molset.HaResidue_phost_ch_get
    if _newclass:
        phost_ch = _swig_property(_molset.HaResidue_phost_ch_get, _molset.HaResidue_phost_ch_set)
    __swig_setmethods__["serno"] = _molset.HaResidue_serno_set
    __swig_getmethods__["serno"] = _molset.HaResidue_serno_get
    if _newclass:
        serno = _swig_property(_molset.HaResidue_serno_get, _molset.HaResidue_serno_set)
    __swig_setmethods__["width"] = _molset.HaResidue_width_set
    __swig_getmethods__["width"] = _molset.HaResidue_width_get
    if _newclass:
        width = _swig_property(_molset.HaResidue_width_get, _molset.HaResidue_width_set)
    __swig_setmethods__["col1"] = _molset.HaResidue_col1_set
    __swig_getmethods__["col1"] = _molset.HaResidue_col1_get
    if _newclass:
        col1 = _swig_property(_molset.HaResidue_col1_get, _molset.HaResidue_col1_set)
    __swig_setmethods__["col2"] = _molset.HaResidue_col2_set
    __swig_getmethods__["col2"] = _molset.HaResidue_col2_get
    if _newclass:
        col2 = _swig_property(_molset.HaResidue_col2_get, _molset.HaResidue_col2_set)
    __swig_setmethods__["insert"] = _molset.HaResidue_insert_set
    __swig_getmethods__["insert"] = _molset.HaResidue_insert_get
    if _newclass:
        insert = _swig_property(_molset.HaResidue_insert_get, _molset.HaResidue_insert_set)
    __swig_setmethods__["refno"] = _molset.HaResidue_refno_set
    __swig_getmethods__["refno"] = _molset.HaResidue_refno_get
    if _newclass:
        refno = _swig_property(_molset.HaResidue_refno_get, _molset.HaResidue_refno_set)
    __swig_setmethods__["struc"] = _molset.HaResidue_struc_set
    __swig_getmethods__["struc"] = _molset.HaResidue_struc_get
    if _newclass:
        struc = _swig_property(_molset.HaResidue_struc_get, _molset.HaResidue_struc_set)
    __swig_setmethods__["flag"] = _molset.HaResidue_flag_set
    __swig_getmethods__["flag"] = _molset.HaResidue_flag_get
    if _newclass:
        flag = _swig_property(_molset.HaResidue_flag_get, _molset.HaResidue_flag_set)
    __swig_setmethods__["NameModifier"] = _molset.HaResidue_NameModifier_set
    __swig_getmethods__["NameModifier"] = _molset.HaResidue_NameModifier_get
    if _newclass:
        NameModifier = _swig_property(_molset.HaResidue_NameModifier_get, _molset.HaResidue_NameModifier_set)
    __swig_setmethods__["std_crd_sys"] = _molset.HaResidue_std_crd_sys_set
    __swig_getmethods__["std_crd_sys"] = _molset.HaResidue_std_crd_sys_get
    if _newclass:
        std_crd_sys = _swig_property(_molset.HaResidue_std_crd_sys_get, _molset.HaResidue_std_crd_sys_set)
    if _newclass:
        RegisterResName = staticmethod(_molset.HaResidue_RegisterResName)
    else:
        RegisterResName = _molset.HaResidue_RegisterResName
    if _newclass:
        InitStdResNames = staticmethod(_molset.HaResidue_InitStdResNames)
    else:
        InitStdResNames = _molset.HaResidue_InitStdResNames
    if _newclass:
        InitResSynonym = staticmethod(_molset.HaResidue_InitResSynonym)
    else:
        InitResSynonym = _molset.HaResidue_InitResSynonym
    __swig_setmethods__["ResNames"] = _molset.HaResidue_ResNames_set
    __swig_getmethods__["ResNames"] = _molset.HaResidue_ResNames_get
    if _newclass:
        ResNames = _swig_property(_molset.HaResidue_ResNames_get, _molset.HaResidue_ResNames_set)
    __swig_setmethods__["res_name_refno_map"] = _molset.HaResidue_res_name_refno_map_set
    __swig_getmethods__["res_name_refno_map"] = _molset.HaResidue_res_name_refno_map_get
    if _newclass:
        res_name_refno_map = _swig_property(_molset.HaResidue_res_name_refno_map_get, _molset.HaResidue_res_name_refno_map_set)
    __swig_setmethods__["ResSynonym"] = _molset.HaResidue_ResSynonym_set
    __swig_getmethods__["ResSynonym"] = _molset.HaResidue_ResSynonym_get
    if _newclass:
        ResSynonym = _swig_property(_molset.HaResidue_ResSynonym_get, _molset.HaResidue_ResSynonym_set)
HaResidue_swigregister = _molset.HaResidue_swigregister
HaResidue_swigregister(HaResidue)

def HaResidue_GetResNameFromFullName(res_full_name):
    return _molset.HaResidue_GetResNameFromFullName(res_full_name)
HaResidue_GetResNameFromFullName = _molset.HaResidue_GetResNameFromFullName

def HaResidue_GetResNameInTable(j):
    return _molset.HaResidue_GetResNameInTable(j)
HaResidue_GetResNameInTable = _molset.HaResidue_GetResNameInTable

def HaResidue_CalcPhiAngle(prev, curr):
    return _molset.HaResidue_CalcPhiAngle(prev, curr)
HaResidue_CalcPhiAngle = _molset.HaResidue_CalcPhiAngle

def HaResidue_CalcPsiAngle(curr, next):
    return _molset.HaResidue_CalcPsiAngle(curr, next)
HaResidue_CalcPsiAngle = _molset.HaResidue_CalcPsiAngle

def HaResidue_RegisterResName(res_name):
    return _molset.HaResidue_RegisterResName(res_name)
HaResidue_RegisterResName = _molset.HaResidue_RegisterResName

def HaResidue_InitStdResNames():
    return _molset.HaResidue_InitStdResNames()
HaResidue_InitStdResNames = _molset.HaResidue_InitStdResNames

def HaResidue_InitResSynonym():
    return _molset.HaResidue_InitResSynonym()
HaResidue_InitResSynonym = _molset.HaResidue_InitResSynonym

class AtomIteratorChain(AtomIterator):
    __swig_setmethods__ = {}
    for _s in [AtomIterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomIteratorChain, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomIterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomIteratorChain, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_AtomIteratorChain(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomIteratorChain
    __del__ = lambda self: None

    def SetForChain(self, new_chain):
        return _molset.AtomIteratorChain_SetForChain(self, new_chain)

    def GetFirstAtom(self):
        return _molset.AtomIteratorChain_GetFirstAtom(self)

    def GetNextAtom(self):
        return _molset.AtomIteratorChain_GetNextAtom(self)
AtomIteratorChain_swigregister = _molset.AtomIteratorChain_swigregister
AtomIteratorChain_swigregister(AtomIteratorChain)

class AtomIteratorChain_const(AtomIterator_const):
    __swig_setmethods__ = {}
    for _s in [AtomIterator_const]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomIteratorChain_const, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomIterator_const]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomIteratorChain_const, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_AtomIteratorChain_const(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomIteratorChain_const
    __del__ = lambda self: None

    def SetForChain(self, new_chain):
        return _molset.AtomIteratorChain_const_SetForChain(self, new_chain)

    def GetFirstAtom(self):
        return _molset.AtomIteratorChain_const_GetFirstAtom(self)

    def GetNextAtom(self):
        return _molset.AtomIteratorChain_const_GetNextAtom(self)
AtomIteratorChain_const_swigregister = _molset.AtomIteratorChain_const_swigregister
AtomIteratorChain_const_swigregister(AtomIteratorChain_const)

class ResidueIteratorChain(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResidueIteratorChain, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResidueIteratorChain, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_ResidueIteratorChain(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ResidueIteratorChain
    __del__ = lambda self: None

    def GetFirstRes(self):
        return _molset.ResidueIteratorChain_GetFirstRes(self)

    def GetNextRes(self):
        return _molset.ResidueIteratorChain_GetNextRes(self)
ResidueIteratorChain_swigregister = _molset.ResidueIteratorChain_swigregister
ResidueIteratorChain_swigregister(ResidueIteratorChain)

class HaChain(AtomContainer):
    __swig_setmethods__ = {}
    for _s in [AtomContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaChain, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaChain, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_HaChain(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaChain
    __del__ = lambda self: None

    def SetParamFrom(self, chain_ref):
        return _molset.HaChain_SetParamFrom(self, chain_ref)

    def AddResidue(self, res_ser_no):
        return _molset.HaChain_AddResidue(self, res_ser_no)

    def GetUniqResSerNo(self, term_res_flag=0):
        return _molset.HaChain_GetUniqResSerNo(self, term_res_flag)

    def SetUniqueResNo(self):
        return _molset.HaChain_SetUniqueResNo(self)

    def GetFirstRes(self):
        return _molset.HaChain_GetFirstRes(self)

    def GetResBySerNo(self, res_ser_no):
        return _molset.HaChain_GetResBySerNo(self, res_ser_no)

    def GetNRes(self):
        return _molset.HaChain_GetNRes(self)

    def GetAtomIteratorPtr(self, *args):
        return _molset.HaChain_GetAtomIteratorPtr(self, *args)

    def GetNAtoms(self):
        return _molset.HaChain_GetNAtoms(self)

    def IsMember(self, aptr):
        return _molset.HaChain_IsMember(self, aptr)

    def GetPointIteratorPtr(self, *args):
        return _molset.HaChain_GetPointIteratorPtr(self, *args)

    def GetNumPt(self):
        return _molset.HaChain_GetNumPt(self)
    __swig_setmethods__["ident"] = _molset.HaChain_ident_set
    __swig_getmethods__["ident"] = _molset.HaChain_ident_get
    if _newclass:
        ident = _swig_property(_molset.HaChain_ident_get, _molset.HaChain_ident_set)
    __swig_setmethods__["res_arr"] = _molset.HaChain_res_arr_set
    __swig_getmethods__["res_arr"] = _molset.HaChain_res_arr_get
    if _newclass:
        res_arr = _swig_property(_molset.HaChain_res_arr_get, _molset.HaChain_res_arr_set)
    __swig_setmethods__["res_map"] = _molset.HaChain_res_map_set
    __swig_getmethods__["res_map"] = _molset.HaChain_res_map_get
    if _newclass:
        res_map = _swig_property(_molset.HaChain_res_map_get, _molset.HaChain_res_map_set)

    def GetHostMol(self, *args):
        return _molset.HaChain_GetHostMol(self, *args)

    def SetMolHost(self, new_phost_mol):
        return _molset.HaChain_SetMolHost(self, new_phost_mol)
HaChain_swigregister = _molset.HaChain_swigregister
HaChain_swigregister(HaChain)

class PeriodicUnitInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeriodicUnitInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PeriodicUnitInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_PeriodicUnitInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_PeriodicUnitInfo
    __del__ = lambda self: None

    def SetBox(self, a, b, c, alpha_n=90, beta_n=90, gamma_n=90):
        return _molset.PeriodicUnitInfo_SetBox(self, a, b, c, alpha_n, beta_n, gamma_n)

    def IsSet(self):
        return _molset.PeriodicUnitInfo_IsSet(self)

    def IsOrthogonal(self):
        return _molset.PeriodicUnitInfo_IsOrthogonal(self)

    def IsOctahedron(self):
        return _molset.PeriodicUnitInfo_IsOctahedron(self)

    def IsValid(self):
        return _molset.PeriodicUnitInfo_IsValid(self)

    def Set(self, to_set=True):
        return _molset.PeriodicUnitInfo_Set(self, to_set)

    def SetOctahedron(self, to_set=True):
        return _molset.PeriodicUnitInfo_SetOctahedron(self, to_set)

    def SetStdBox(self, at_coll):
        return _molset.PeriodicUnitInfo_SetStdBox(self, at_coll)
    __swig_setmethods__["spacegroup"] = _molset.PeriodicUnitInfo_spacegroup_set
    __swig_getmethods__["spacegroup"] = _molset.PeriodicUnitInfo_spacegroup_get
    if _newclass:
        spacegroup = _swig_property(_molset.PeriodicUnitInfo_spacegroup_get, _molset.PeriodicUnitInfo_spacegroup_set)
    __swig_setmethods__["orthogonal_flag"] = _molset.PeriodicUnitInfo_orthogonal_flag_set
    __swig_getmethods__["orthogonal_flag"] = _molset.PeriodicUnitInfo_orthogonal_flag_get
    if _newclass:
        orthogonal_flag = _swig_property(_molset.PeriodicUnitInfo_orthogonal_flag_get, _molset.PeriodicUnitInfo_orthogonal_flag_set)
    __swig_setmethods__["octahedron_flag"] = _molset.PeriodicUnitInfo_octahedron_flag_set
    __swig_getmethods__["octahedron_flag"] = _molset.PeriodicUnitInfo_octahedron_flag_get
    if _newclass:
        octahedron_flag = _swig_property(_molset.PeriodicUnitInfo_octahedron_flag_get, _molset.PeriodicUnitInfo_octahedron_flag_set)
    __swig_setmethods__["ucell"] = _molset.PeriodicUnitInfo_ucell_set
    __swig_getmethods__["ucell"] = _molset.PeriodicUnitInfo_ucell_get
    if _newclass:
        ucell = _swig_property(_molset.PeriodicUnitInfo_ucell_get, _molset.PeriodicUnitInfo_ucell_set)
    __swig_setmethods__["recip_ucell"] = _molset.PeriodicUnitInfo_recip_ucell_set
    __swig_getmethods__["recip_ucell"] = _molset.PeriodicUnitInfo_recip_ucell_get
    if _newclass:
        recip_ucell = _swig_property(_molset.PeriodicUnitInfo_recip_ucell_get, _molset.PeriodicUnitInfo_recip_ucell_set)

    def GetA(self):
        return _molset.PeriodicUnitInfo_GetA(self)

    def GetB(self):
        return _molset.PeriodicUnitInfo_GetB(self)

    def GetC(self):
        return _molset.PeriodicUnitInfo_GetC(self)

    def GetAlpha(self):
        return _molset.PeriodicUnitInfo_GetAlpha(self)

    def GetBeta(self):
        return _molset.PeriodicUnitInfo_GetBeta(self)

    def GetGamma(self):
        return _molset.PeriodicUnitInfo_GetGamma(self)
    __swig_setmethods__["ucell_vol"] = _molset.PeriodicUnitInfo_ucell_vol_set
    __swig_getmethods__["ucell_vol"] = _molset.PeriodicUnitInfo_ucell_vol_get
    if _newclass:
        ucell_vol = _swig_property(_molset.PeriodicUnitInfo_ucell_vol_get, _molset.PeriodicUnitInfo_ucell_vol_set)
    __swig_setmethods__["ucell_sph"] = _molset.PeriodicUnitInfo_ucell_sph_set
    __swig_getmethods__["ucell_sph"] = _molset.PeriodicUnitInfo_ucell_sph_get
    if _newclass:
        ucell_sph = _swig_property(_molset.PeriodicUnitInfo_ucell_sph_get, _molset.PeriodicUnitInfo_ucell_sph_set)
    __swig_setmethods__["cut_factor"] = _molset.PeriodicUnitInfo_cut_factor_set
    __swig_getmethods__["cut_factor"] = _molset.PeriodicUnitInfo_cut_factor_get
    if _newclass:
        cut_factor = _swig_property(_molset.PeriodicUnitInfo_cut_factor_get, _molset.PeriodicUnitInfo_cut_factor_set)
    __swig_setmethods__["reclng"] = _molset.PeriodicUnitInfo_reclng_set
    __swig_getmethods__["reclng"] = _molset.PeriodicUnitInfo_reclng_get
    if _newclass:
        reclng = _swig_property(_molset.PeriodicUnitInfo_reclng_get, _molset.PeriodicUnitInfo_reclng_set)
PeriodicUnitInfo_swigregister = _molset.PeriodicUnitInfo_swigregister
PeriodicUnitInfo_swigregister(PeriodicUnitInfo)

class CrdSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrdSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CrdSnapshot, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_CrdSnapshot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_CrdSnapshot
    __del__ = lambda self: None

    def Clear(self):
        return _molset.CrdSnapshot_Clear(self)

    def SaveCrd(self, crd):
        return _molset.CrdSnapshot_SaveCrd(self, crd)

    def SavePBox(self, pbox):
        return _molset.CrdSnapshot_SavePBox(self, pbox)

    def SaveCurrentAtomCrd(self):
        return _molset.CrdSnapshot_SaveCurrentAtomCrd(self)

    def SetAtomCrd(self):
        return _molset.CrdSnapshot_SetAtomCrd(self)

    def IsValid(self):
        return _molset.CrdSnapshot_IsValid(self)

    def HasPBox(self):
        return _molset.CrdSnapshot_HasPBox(self)

    def GetName(self):
        return _molset.CrdSnapshot_GetName(self)

    def SetName(self, name_new):
        return _molset.CrdSnapshot_SetName(self, name_new)

    def GetDesc(self):
        return _molset.CrdSnapshot_GetDesc(self)

    def SetDesc(self, desc_new):
        return _molset.CrdSnapshot_SetDesc(self, desc_new)

    def GetCrd(self):
        return _molset.CrdSnapshot_GetCrd(self)

    def GetPBox(self):
        return _molset.CrdSnapshot_GetPBox(self)

    def LoadXMLNode(self, node, popt):
        return _molset.CrdSnapshot_LoadXMLNode(self, node, popt)

    def OnDelAtoms(self, at_del):
        return _molset.CrdSnapshot_OnDelAtoms(self, at_del)
    __swig_setmethods__["p_at_cont"] = _molset.CrdSnapshot_p_at_cont_set
    __swig_getmethods__["p_at_cont"] = _molset.CrdSnapshot_p_at_cont_get
    if _newclass:
        p_at_cont = _swig_property(_molset.CrdSnapshot_p_at_cont_get, _molset.CrdSnapshot_p_at_cont_set)
CrdSnapshot_swigregister = _molset.CrdSnapshot_swigregister
CrdSnapshot_swigregister(CrdSnapshot)

class CrdSnapshotIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrdSnapshotIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CrdSnapshotIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_CrdSnapshotIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_CrdSnapshotIterator
    __del__ = lambda self: None

    def next(self):
        return _molset.CrdSnapshotIterator_next(self)

    def __iter__(self):
        return _molset.CrdSnapshotIterator___iter__(self)
CrdSnapshotIterator_swigregister = _molset.CrdSnapshotIterator_swigregister
CrdSnapshotIterator_swigregister(CrdSnapshotIterator)

class HaBond(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaBond, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaBond, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_HaBond(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaBond
    __del__ = lambda self: None

    def SetParamFrom(self, ref):
        return _molset.HaBond_SetParamFrom(self, ref)

    def SetTypeFrom(self, ref):
        return _molset.HaBond_SetTypeFrom(self, ref)

    def assign(self, src, dst):
        return _molset.HaBond_assign(self, src, dst)

    def __eq__(self, rhs):
        return _molset.HaBond___eq__(self, rhs)

    def __lt__(self, rhs):
        return _molset.HaBond___lt__(self, rhs)

    def IsSingle(self):
        return _molset.HaBond_IsSingle(self)

    def IsAromatic(self):
        return _molset.HaBond_IsAromatic(self)

    def IsDouble(self):
        return _molset.HaBond_IsDouble(self)

    def IsTriple(self):
        return _molset.HaBond_IsTriple(self)

    def IsVirtual(self):
        return _molset.HaBond_IsVirtual(self)

    def SetSingle(self):
        return _molset.HaBond_SetSingle(self)

    def SetAromatic(self):
        return _molset.HaBond_SetAromatic(self)

    def SetDouble(self):
        return _molset.HaBond_SetDouble(self)

    def SetTriple(self):
        return _molset.HaBond_SetTriple(self)

    def SetVirtual(self):
        return _molset.HaBond_SetVirtual(self)

    def GetTypeString(self):
        return _molset.HaBond_GetTypeString(self)

    def Select(self):
        return _molset.HaBond_Select(self)

    def UnSelect(self):
        return _molset.HaBond_UnSelect(self)

    def Selected(self):
        return _molset.HaBond_Selected(self)

    def SetNotDraw(self):
        return _molset.HaBond_SetNotDraw(self)

    def DrawWire(self):
        return _molset.HaBond_DrawWire(self)

    def DrawDashed(self):
        return _molset.HaBond_DrawDashed(self)

    def DrawCylinder(self, rad):
        return _molset.HaBond_DrawCylinder(self, rad)

    def IsToDraw(self):
        return _molset.HaBond_IsToDraw(self)

    def GetFirstAtom(self, *args):
        return _molset.HaBond_GetFirstAtom(self, *args)

    def GetSecondAtom(self, *args):
        return _molset.HaBond_GetSecondAtom(self, *args)
    __swig_setmethods__["srcatom"] = _molset.HaBond_srcatom_set
    __swig_getmethods__["srcatom"] = _molset.HaBond_srcatom_get
    if _newclass:
        srcatom = _swig_property(_molset.HaBond_srcatom_get, _molset.HaBond_srcatom_set)
    __swig_setmethods__["dstatom"] = _molset.HaBond_dstatom_set
    __swig_getmethods__["dstatom"] = _molset.HaBond_dstatom_get
    if _newclass:
        dstatom = _swig_property(_molset.HaBond_dstatom_get, _molset.HaBond_dstatom_set)
    __swig_setmethods__["radius"] = _molset.HaBond_radius_set
    __swig_getmethods__["radius"] = _molset.HaBond_radius_get
    if _newclass:
        radius = _swig_property(_molset.HaBond_radius_get, _molset.HaBond_radius_set)
    __swig_setmethods__["irad"] = _molset.HaBond_irad_set
    __swig_getmethods__["irad"] = _molset.HaBond_irad_get
    if _newclass:
        irad = _swig_property(_molset.HaBond_irad_get, _molset.HaBond_irad_set)
    __swig_setmethods__["col"] = _molset.HaBond_col_set
    __swig_getmethods__["col"] = _molset.HaBond_col_get
    if _newclass:
        col = _swig_property(_molset.HaBond_col_get, _molset.HaBond_col_set)
    __swig_setmethods__["flag"] = _molset.HaBond_flag_set
    __swig_getmethods__["flag"] = _molset.HaBond_flag_get
    if _newclass:
        flag = _swig_property(_molset.HaBond_flag_get, _molset.HaBond_flag_set)
    SINGLE_BOND = _molset.HaBond_SINGLE_BOND
    DOUBLE_BOND = _molset.HaBond_DOUBLE_BOND
    TRIPLE_BOND = _molset.HaBond_TRIPLE_BOND
    AROMATIC_BOND = _molset.HaBond_AROMATIC_BOND
    VIRTUAL_BOND = _molset.HaBond_VIRTUAL_BOND
    __swig_setmethods__["type"] = _molset.HaBond_type_set
    __swig_getmethods__["type"] = _molset.HaBond_type_get
    if _newclass:
        type = _swig_property(_molset.HaBond_type_get, _molset.HaBond_type_set)
HaBond_swigregister = _molset.HaBond_swigregister
HaBond_swigregister(HaBond)
DrawBondFlag = cvar.DrawBondFlag
WireFlag = cvar.WireFlag
DashFlag = cvar.DashFlag
CylinderFlag = cvar.CylinderFlag
HydrBondFlag = cvar.HydrBondFlag
NormBondFlag = cvar.NormBondFlag
DoubBondFlag = cvar.DoubBondFlag
TripBondFlag = cvar.TripBondFlag
AromBondFlag = cvar.AromBondFlag

class HaHBond(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaHBond, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaHBond, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_HaHBond(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaHBond
    __del__ = lambda self: None

    def __eq__(self, rhs):
        return _molset.HaHBond___eq__(self, rhs)

    def __lt__(self, rhs):
        return _molset.HaHBond___lt__(self, rhs)

    def Select(self):
        return _molset.HaHBond_Select(self)

    def UnSelect(self):
        return _molset.HaHBond_UnSelect(self)

    def Selected(self):
        return _molset.HaHBond_Selected(self)

    def SetNotDraw(self):
        return _molset.HaHBond_SetNotDraw(self)

    def SetDraw(self):
        return _molset.HaHBond_SetDraw(self)

    def DrawWire(self):
        return _molset.HaHBond_DrawWire(self)

    def DrawDashed(self):
        return _molset.HaHBond_DrawDashed(self)

    def DrawCylinder(self, rad):
        return _molset.HaHBond_DrawCylinder(self, rad)

    def IsToDrawCylinder(self):
        return _molset.HaHBond_IsToDrawCylinder(self)

    def IsToDrawWire(self):
        return _molset.HaHBond_IsToDrawWire(self)

    def IsToDrawDashed(self):
        return _molset.HaHBond_IsToDrawDashed(self)

    def IsToDraw(self):
        return _molset.HaHBond_IsToDraw(self)

    def GetDonorAtom(self):
        return _molset.HaHBond_GetDonorAtom(self)

    def GetAcceptorAtom(self):
        return _molset.HaHBond_GetAcceptorAtom(self)

    def GetHAtom(self):
        return _molset.HaHBond_GetHAtom(self)

    def GetHCoord(self, pt):
        return _molset.HaHBond_GetHCoord(self, pt)
    __swig_setmethods__["srcCA"] = _molset.HaHBond_srcCA_set
    __swig_getmethods__["srcCA"] = _molset.HaHBond_srcCA_get
    if _newclass:
        srcCA = _swig_property(_molset.HaHBond_srcCA_get, _molset.HaHBond_srcCA_set)
    __swig_setmethods__["dstCA"] = _molset.HaHBond_dstCA_set
    __swig_getmethods__["dstCA"] = _molset.HaHBond_dstCA_get
    if _newclass:
        dstCA = _swig_property(_molset.HaHBond_dstCA_get, _molset.HaHBond_dstCA_set)
    __swig_setmethods__["dst"] = _molset.HaHBond_dst_set
    __swig_getmethods__["dst"] = _molset.HaHBond_dst_get
    if _newclass:
        dst = _swig_property(_molset.HaHBond_dst_get, _molset.HaHBond_dst_set)
    __swig_setmethods__["src"] = _molset.HaHBond_src_set
    __swig_getmethods__["src"] = _molset.HaHBond_src_get
    if _newclass:
        src = _swig_property(_molset.HaHBond_src_get, _molset.HaHBond_src_set)
    __swig_setmethods__["p_hatom"] = _molset.HaHBond_p_hatom_set
    __swig_getmethods__["p_hatom"] = _molset.HaHBond_p_hatom_get
    if _newclass:
        p_hatom = _swig_property(_molset.HaHBond_p_hatom_get, _molset.HaHBond_p_hatom_set)
    __swig_setmethods__["energy"] = _molset.HaHBond_energy_set
    __swig_getmethods__["energy"] = _molset.HaHBond_energy_get
    if _newclass:
        energy = _swig_property(_molset.HaHBond_energy_get, _molset.HaHBond_energy_set)
    __swig_setmethods__["radius"] = _molset.HaHBond_radius_set
    __swig_getmethods__["radius"] = _molset.HaHBond_radius_get
    if _newclass:
        radius = _swig_property(_molset.HaHBond_radius_get, _molset.HaHBond_radius_set)
    __swig_setmethods__["irad"] = _molset.HaHBond_irad_set
    __swig_getmethods__["irad"] = _molset.HaHBond_irad_get
    if _newclass:
        irad = _swig_property(_molset.HaHBond_irad_get, _molset.HaHBond_irad_set)
    __swig_setmethods__["offset"] = _molset.HaHBond_offset_set
    __swig_getmethods__["offset"] = _molset.HaHBond_offset_get
    if _newclass:
        offset = _swig_property(_molset.HaHBond_offset_get, _molset.HaHBond_offset_set)
    __swig_setmethods__["col"] = _molset.HaHBond_col_set
    __swig_getmethods__["col"] = _molset.HaHBond_col_get
    if _newclass:
        col = _swig_property(_molset.HaHBond_col_get, _molset.HaHBond_col_set)
HaHBond_swigregister = _molset.HaHBond_swigregister
HaHBond_swigregister(HaHBond)

class Object3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_Object3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_Object3D
    __del__ = lambda self: None

    def IsConnected(self):
        return _molset.Object3D_IsConnected(self)

    def SetConnected(self, status):
        return _molset.Object3D_SetConnected(self, status)

    def IsDisplayed(self):
        return _molset.Object3D_IsDisplayed(self)

    def SetDisplayed(self, status):
        return _molset.Object3D_SetDisplayed(self, status)

    def GetObjName(self):
        return _molset.Object3D_GetObjName(self)

    def SetObjName(self, new_name):
        return _molset.Object3D_SetObjName(self, new_name)

    def RotateX(self, theta, cnt):
        return _molset.Object3D_RotateX(self, theta, cnt)

    def RotateY(self, theta, cnt):
        return _molset.Object3D_RotateY(self, theta, cnt)

    def RotateZ(self, theta, cnt):
        return _molset.Object3D_RotateZ(self, theta, cnt)

    def RotateObj(self, rot_mat, cnt):
        return _molset.Object3D_RotateObj(self, rot_mat, cnt)

    def Translate(self, tr_vec):
        return _molset.Object3D_Translate(self, tr_vec)

    def GetObjType(self):
        return _molset.Object3D_GetObjType(self)

    def DrawObj(self, molview):
        return _molset.Object3D_DrawObj(self, molview)

    def SetTransparency(self, trasp_new):
        return _molset.Object3D_SetTransparency(self, trasp_new)
    __swig_setmethods__["transparency"] = _molset.Object3D_transparency_set
    __swig_getmethods__["transparency"] = _molset.Object3D_transparency_get
    if _newclass:
        transparency = _swig_property(_molset.Object3D_transparency_get, _molset.Object3D_transparency_set)

    def GetObjectMinMaxCrd(self, MinX_v, MinY_v, MinZ_v, MaxX_v, MaxY_v, MaxZ_v):
        return _molset.Object3D_GetObjectMinMaxCrd(self, MinX_v, MinY_v, MinZ_v, MaxX_v, MaxY_v, MaxZ_v)
Object3D_swigregister = _molset.Object3D_swigregister
Object3D_swigregister(Object3D)
OBJ3D_MOLECULE = cvar.OBJ3D_MOLECULE
OBJ3D_SURFACE = cvar.OBJ3D_SURFACE
OBJ3D_DOT_SURFACE = cvar.OBJ3D_DOT_SURFACE
OBJ3D_BOX = cvar.OBJ3D_BOX
OBJ3D_MEMBRANEZ = cvar.OBJ3D_MEMBRANEZ
OBJ3D_MEMBRANE_TUBE = cvar.OBJ3D_MEMBRANE_TUBE
OBJ3D_MATRIX = cvar.OBJ3D_MATRIX
OBJ3D_PlaneViewerOfHaField3D = cvar.OBJ3D_PlaneViewerOfHaField3D

class BoxObj3D(Object3D):
    __swig_setmethods__ = {}
    for _s in [Object3D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxObj3D, name, value)
    __swig_getmethods__ = {}
    for _s in [Object3D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoxObj3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_BoxObj3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_BoxObj3D
    __del__ = lambda self: None
    __swig_setmethods__["x0"] = _molset.BoxObj3D_x0_set
    __swig_getmethods__["x0"] = _molset.BoxObj3D_x0_get
    if _newclass:
        x0 = _swig_property(_molset.BoxObj3D_x0_get, _molset.BoxObj3D_x0_set)
    __swig_setmethods__["y0"] = _molset.BoxObj3D_y0_set
    __swig_getmethods__["y0"] = _molset.BoxObj3D_y0_get
    if _newclass:
        y0 = _swig_property(_molset.BoxObj3D_y0_get, _molset.BoxObj3D_y0_set)
    __swig_setmethods__["z0"] = _molset.BoxObj3D_z0_set
    __swig_getmethods__["z0"] = _molset.BoxObj3D_z0_get
    if _newclass:
        z0 = _swig_property(_molset.BoxObj3D_z0_get, _molset.BoxObj3D_z0_set)
    __swig_setmethods__["x1"] = _molset.BoxObj3D_x1_set
    __swig_getmethods__["x1"] = _molset.BoxObj3D_x1_get
    if _newclass:
        x1 = _swig_property(_molset.BoxObj3D_x1_get, _molset.BoxObj3D_x1_set)
    __swig_setmethods__["y1"] = _molset.BoxObj3D_y1_set
    __swig_getmethods__["y1"] = _molset.BoxObj3D_y1_get
    if _newclass:
        y1 = _swig_property(_molset.BoxObj3D_y1_get, _molset.BoxObj3D_y1_set)
    __swig_setmethods__["z1"] = _molset.BoxObj3D_z1_set
    __swig_getmethods__["z1"] = _molset.BoxObj3D_z1_get
    if _newclass:
        z1 = _swig_property(_molset.BoxObj3D_z1_get, _molset.BoxObj3D_z1_set)

    def SetBox(self, the_x0, the_y0, the_z0, the_x1, the_y1, the_z1):
        return _molset.BoxObj3D_SetBox(self, the_x0, the_y0, the_z0, the_x1, the_y1, the_z1)
    __swig_setmethods__["Color"] = _molset.BoxObj3D_Color_set
    __swig_getmethods__["Color"] = _molset.BoxObj3D_Color_get
    if _newclass:
        Color = _swig_property(_molset.BoxObj3D_Color_get, _molset.BoxObj3D_Color_set)

    def RotateObj(self, rot_mat, cnt):
        return _molset.BoxObj3D_RotateObj(self, rot_mat, cnt)

    def Translate(self, tr_vec):
        return _molset.BoxObj3D_Translate(self, tr_vec)

    def DrawObj(self, molview):
        return _molset.BoxObj3D_DrawObj(self, molview)

    def GetObjectMinMaxCrd(self, MinX_v, MinY_v, MinZ_v, MaxX_v, MaxY_v, MaxZ_v):
        return _molset.BoxObj3D_GetObjectMinMaxCrd(self, MinX_v, MinY_v, MinZ_v, MaxX_v, MaxY_v, MaxZ_v)
BoxObj3D_swigregister = _molset.BoxObj3D_swigregister
BoxObj3D_swigregister(BoxObj3D)
SCREEN_ORIENTATION = cvar.SCREEN_ORIENTATION
REFERENCE_ORIENTATION = cvar.REFERENCE_ORIENTATION

class MatrixObj3D(Object3D):
    __swig_setmethods__ = {}
    for _s in [Object3D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixObj3D, name, value)
    __swig_getmethods__ = {}
    for _s in [Object3D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixObj3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_MatrixObj3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_MatrixObj3D
    __del__ = lambda self: None
    __swig_setmethods__["x0"] = _molset.MatrixObj3D_x0_set
    __swig_getmethods__["x0"] = _molset.MatrixObj3D_x0_get
    if _newclass:
        x0 = _swig_property(_molset.MatrixObj3D_x0_get, _molset.MatrixObj3D_x0_set)
    __swig_setmethods__["y0"] = _molset.MatrixObj3D_y0_set
    __swig_getmethods__["y0"] = _molset.MatrixObj3D_y0_get
    if _newclass:
        y0 = _swig_property(_molset.MatrixObj3D_y0_get, _molset.MatrixObj3D_y0_set)
    __swig_setmethods__["z0"] = _molset.MatrixObj3D_z0_set
    __swig_getmethods__["z0"] = _molset.MatrixObj3D_z0_get
    if _newclass:
        z0 = _swig_property(_molset.MatrixObj3D_z0_get, _molset.MatrixObj3D_z0_set)
    __swig_setmethods__["dx1"] = _molset.MatrixObj3D_dx1_set
    __swig_getmethods__["dx1"] = _molset.MatrixObj3D_dx1_get
    if _newclass:
        dx1 = _swig_property(_molset.MatrixObj3D_dx1_get, _molset.MatrixObj3D_dx1_set)
    __swig_setmethods__["dy1"] = _molset.MatrixObj3D_dy1_set
    __swig_getmethods__["dy1"] = _molset.MatrixObj3D_dy1_get
    if _newclass:
        dy1 = _swig_property(_molset.MatrixObj3D_dy1_get, _molset.MatrixObj3D_dy1_set)
    __swig_setmethods__["dz1"] = _molset.MatrixObj3D_dz1_set
    __swig_getmethods__["dz1"] = _molset.MatrixObj3D_dz1_get
    if _newclass:
        dz1 = _swig_property(_molset.MatrixObj3D_dz1_get, _molset.MatrixObj3D_dz1_set)
    __swig_setmethods__["dx2"] = _molset.MatrixObj3D_dx2_set
    __swig_getmethods__["dx2"] = _molset.MatrixObj3D_dx2_get
    if _newclass:
        dx2 = _swig_property(_molset.MatrixObj3D_dx2_get, _molset.MatrixObj3D_dx2_set)
    __swig_setmethods__["dy2"] = _molset.MatrixObj3D_dy2_set
    __swig_getmethods__["dy2"] = _molset.MatrixObj3D_dy2_get
    if _newclass:
        dy2 = _swig_property(_molset.MatrixObj3D_dy2_get, _molset.MatrixObj3D_dy2_set)
    __swig_setmethods__["dz2"] = _molset.MatrixObj3D_dz2_set
    __swig_getmethods__["dz2"] = _molset.MatrixObj3D_dz2_get
    if _newclass:
        dz2 = _swig_property(_molset.MatrixObj3D_dz2_get, _molset.MatrixObj3D_dz2_set)
    __swig_setmethods__["Ni"] = _molset.MatrixObj3D_Ni_set
    __swig_getmethods__["Ni"] = _molset.MatrixObj3D_Ni_get
    if _newclass:
        Ni = _swig_property(_molset.MatrixObj3D_Ni_get, _molset.MatrixObj3D_Ni_set)
    __swig_setmethods__["Nj"] = _molset.MatrixObj3D_Nj_set
    __swig_getmethods__["Nj"] = _molset.MatrixObj3D_Nj_get
    if _newclass:
        Nj = _swig_property(_molset.MatrixObj3D_Nj_get, _molset.MatrixObj3D_Nj_set)

    def SetMatrixGuiders(self, the_x0, the_y0, the_z0, the_dx1, the_dy1, the_dz1, the_dx2, the_dy2, the_dz2):
        return _molset.MatrixObj3D_SetMatrixGuiders(self, the_x0, the_y0, the_z0, the_dx1, the_dy1, the_dz1, the_dx2, the_dy2, the_dz2)

    def SetColors(self, Nx, Ny, fmap, elpot_high_val, elpot_low_val):
        return _molset.MatrixObj3D_SetColors(self, Nx, Ny, fmap, elpot_high_val, elpot_low_val)
    __swig_setmethods__["Color"] = _molset.MatrixObj3D_Color_set
    __swig_getmethods__["Color"] = _molset.MatrixObj3D_Color_get
    if _newclass:
        Color = _swig_property(_molset.MatrixObj3D_Color_get, _molset.MatrixObj3D_Color_set)
    __swig_setmethods__["ColMat"] = _molset.MatrixObj3D_ColMat_set
    __swig_getmethods__["ColMat"] = _molset.MatrixObj3D_ColMat_get
    if _newclass:
        ColMat = _swig_property(_molset.MatrixObj3D_ColMat_get, _molset.MatrixObj3D_ColMat_set)

    def RotateObj(self, rot_mat, cnt):
        return _molset.MatrixObj3D_RotateObj(self, rot_mat, cnt)

    def Translate(self, tr_vec):
        return _molset.MatrixObj3D_Translate(self, tr_vec)

    def DrawObj(self, molview):
        return _molset.MatrixObj3D_DrawObj(self, molview)
MatrixObj3D_swigregister = _molset.MatrixObj3D_swigregister
MatrixObj3D_swigregister(MatrixObj3D)

class MembraneZObj3D(Object3D):
    __swig_setmethods__ = {}
    for _s in [Object3D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MembraneZObj3D, name, value)
    __swig_getmethods__ = {}
    for _s in [Object3D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MembraneZObj3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_MembraneZObj3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_MembraneZObj3D
    __del__ = lambda self: None
    __swig_setmethods__["x0"] = _molset.MembraneZObj3D_x0_set
    __swig_getmethods__["x0"] = _molset.MembraneZObj3D_x0_get
    if _newclass:
        x0 = _swig_property(_molset.MembraneZObj3D_x0_get, _molset.MembraneZObj3D_x0_set)
    __swig_setmethods__["y0"] = _molset.MembraneZObj3D_y0_set
    __swig_getmethods__["y0"] = _molset.MembraneZObj3D_y0_get
    if _newclass:
        y0 = _swig_property(_molset.MembraneZObj3D_y0_get, _molset.MembraneZObj3D_y0_set)
    __swig_setmethods__["z0"] = _molset.MembraneZObj3D_z0_set
    __swig_getmethods__["z0"] = _molset.MembraneZObj3D_z0_get
    if _newclass:
        z0 = _swig_property(_molset.MembraneZObj3D_z0_get, _molset.MembraneZObj3D_z0_set)
    __swig_setmethods__["x1"] = _molset.MembraneZObj3D_x1_set
    __swig_getmethods__["x1"] = _molset.MembraneZObj3D_x1_get
    if _newclass:
        x1 = _swig_property(_molset.MembraneZObj3D_x1_get, _molset.MembraneZObj3D_x1_set)
    __swig_setmethods__["y1"] = _molset.MembraneZObj3D_y1_set
    __swig_getmethods__["y1"] = _molset.MembraneZObj3D_y1_get
    if _newclass:
        y1 = _swig_property(_molset.MembraneZObj3D_y1_get, _molset.MembraneZObj3D_y1_set)
    __swig_setmethods__["z1"] = _molset.MembraneZObj3D_z1_set
    __swig_getmethods__["z1"] = _molset.MembraneZObj3D_z1_get
    if _newclass:
        z1 = _swig_property(_molset.MembraneZObj3D_z1_get, _molset.MembraneZObj3D_z1_set)
    __swig_setmethods__["mem_z1"] = _molset.MembraneZObj3D_mem_z1_set
    __swig_getmethods__["mem_z1"] = _molset.MembraneZObj3D_mem_z1_get
    if _newclass:
        mem_z1 = _swig_property(_molset.MembraneZObj3D_mem_z1_get, _molset.MembraneZObj3D_mem_z1_set)
    __swig_setmethods__["mem_z2"] = _molset.MembraneZObj3D_mem_z2_set
    __swig_getmethods__["mem_z2"] = _molset.MembraneZObj3D_mem_z2_get
    if _newclass:
        mem_z2 = _swig_property(_molset.MembraneZObj3D_mem_z2_get, _molset.MembraneZObj3D_mem_z2_set)
    __swig_setmethods__["hstep"] = _molset.MembraneZObj3D_hstep_set
    __swig_getmethods__["hstep"] = _molset.MembraneZObj3D_hstep_get
    if _newclass:
        hstep = _swig_property(_molset.MembraneZObj3D_hstep_get, _molset.MembraneZObj3D_hstep_set)

    def SetBox(self, the_x0, the_y0, the_z0, the_x1, the_y1, the_z1):
        return _molset.MembraneZObj3D_SetBox(self, the_x0, the_y0, the_z0, the_x1, the_y1, the_z1)

    def SetMembraneZ(self, the_mem_z1, the_mem_z2):
        return _molset.MembraneZObj3D_SetMembraneZ(self, the_mem_z1, the_mem_z2)
    __swig_setmethods__["Color"] = _molset.MembraneZObj3D_Color_set
    __swig_getmethods__["Color"] = _molset.MembraneZObj3D_Color_get
    if _newclass:
        Color = _swig_property(_molset.MembraneZObj3D_Color_get, _molset.MembraneZObj3D_Color_set)

    def RotateObj(self, rot_mat, cnt):
        return _molset.MembraneZObj3D_RotateObj(self, rot_mat, cnt)

    def Translate(self, tr_vec):
        return _molset.MembraneZObj3D_Translate(self, tr_vec)

    def DrawObj(self, molview):
        return _molset.MembraneZObj3D_DrawObj(self, molview)
MembraneZObj3D_swigregister = _molset.MembraneZObj3D_swigregister
MembraneZObj3D_swigregister(MembraneZObj3D)

class TubeObj3D(Object3D):
    __swig_setmethods__ = {}
    for _s in [Object3D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TubeObj3D, name, value)
    __swig_getmethods__ = {}
    for _s in [Object3D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TubeObj3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_TubeObj3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_TubeObj3D
    __del__ = lambda self: None
    __swig_setmethods__["x0"] = _molset.TubeObj3D_x0_set
    __swig_getmethods__["x0"] = _molset.TubeObj3D_x0_get
    if _newclass:
        x0 = _swig_property(_molset.TubeObj3D_x0_get, _molset.TubeObj3D_x0_set)
    __swig_setmethods__["y0"] = _molset.TubeObj3D_y0_set
    __swig_getmethods__["y0"] = _molset.TubeObj3D_y0_get
    if _newclass:
        y0 = _swig_property(_molset.TubeObj3D_y0_get, _molset.TubeObj3D_y0_set)
    __swig_setmethods__["z0"] = _molset.TubeObj3D_z0_set
    __swig_getmethods__["z0"] = _molset.TubeObj3D_z0_get
    if _newclass:
        z0 = _swig_property(_molset.TubeObj3D_z0_get, _molset.TubeObj3D_z0_set)
    __swig_setmethods__["x1"] = _molset.TubeObj3D_x1_set
    __swig_getmethods__["x1"] = _molset.TubeObj3D_x1_get
    if _newclass:
        x1 = _swig_property(_molset.TubeObj3D_x1_get, _molset.TubeObj3D_x1_set)
    __swig_setmethods__["y1"] = _molset.TubeObj3D_y1_set
    __swig_getmethods__["y1"] = _molset.TubeObj3D_y1_get
    if _newclass:
        y1 = _swig_property(_molset.TubeObj3D_y1_get, _molset.TubeObj3D_y1_set)
    __swig_setmethods__["z1"] = _molset.TubeObj3D_z1_set
    __swig_getmethods__["z1"] = _molset.TubeObj3D_z1_get
    if _newclass:
        z1 = _swig_property(_molset.TubeObj3D_z1_get, _molset.TubeObj3D_z1_set)
    __swig_setmethods__["mem_z1"] = _molset.TubeObj3D_mem_z1_set
    __swig_getmethods__["mem_z1"] = _molset.TubeObj3D_mem_z1_get
    if _newclass:
        mem_z1 = _swig_property(_molset.TubeObj3D_mem_z1_get, _molset.TubeObj3D_mem_z1_set)
    __swig_setmethods__["mem_z2"] = _molset.TubeObj3D_mem_z2_set
    __swig_getmethods__["mem_z2"] = _molset.TubeObj3D_mem_z2_get
    if _newclass:
        mem_z2 = _swig_property(_molset.TubeObj3D_mem_z2_get, _molset.TubeObj3D_mem_z2_set)
    __swig_setmethods__["mem_x"] = _molset.TubeObj3D_mem_x_set
    __swig_getmethods__["mem_x"] = _molset.TubeObj3D_mem_x_get
    if _newclass:
        mem_x = _swig_property(_molset.TubeObj3D_mem_x_get, _molset.TubeObj3D_mem_x_set)
    __swig_setmethods__["mem_y"] = _molset.TubeObj3D_mem_y_set
    __swig_getmethods__["mem_y"] = _molset.TubeObj3D_mem_y_get
    if _newclass:
        mem_y = _swig_property(_molset.TubeObj3D_mem_y_get, _molset.TubeObj3D_mem_y_set)
    __swig_setmethods__["hstep"] = _molset.TubeObj3D_hstep_set
    __swig_getmethods__["hstep"] = _molset.TubeObj3D_hstep_get
    if _newclass:
        hstep = _swig_property(_molset.TubeObj3D_hstep_get, _molset.TubeObj3D_hstep_set)
    __swig_setmethods__["phistep"] = _molset.TubeObj3D_phistep_set
    __swig_getmethods__["phistep"] = _molset.TubeObj3D_phistep_get
    if _newclass:
        phistep = _swig_property(_molset.TubeObj3D_phistep_get, _molset.TubeObj3D_phistep_set)
    __swig_setmethods__["R1"] = _molset.TubeObj3D_R1_set
    __swig_getmethods__["R1"] = _molset.TubeObj3D_R1_get
    if _newclass:
        R1 = _swig_property(_molset.TubeObj3D_R1_get, _molset.TubeObj3D_R1_set)
    __swig_setmethods__["R2"] = _molset.TubeObj3D_R2_set
    __swig_getmethods__["R2"] = _molset.TubeObj3D_R2_get
    if _newclass:
        R2 = _swig_property(_molset.TubeObj3D_R2_get, _molset.TubeObj3D_R2_set)

    def SetBox(self, the_x0, the_y0, the_z0, the_x1, the_y1, the_z1):
        return _molset.TubeObj3D_SetBox(self, the_x0, the_y0, the_z0, the_x1, the_y1, the_z1)

    def SetTube3d(self, the_mem_z1, the_mem_z2, the_mem_x, the_mem_y, the_R1, the_R2):
        return _molset.TubeObj3D_SetTube3d(self, the_mem_z1, the_mem_z2, the_mem_x, the_mem_y, the_R1, the_R2)
    __swig_setmethods__["Color"] = _molset.TubeObj3D_Color_set
    __swig_getmethods__["Color"] = _molset.TubeObj3D_Color_get
    if _newclass:
        Color = _swig_property(_molset.TubeObj3D_Color_get, _molset.TubeObj3D_Color_set)
    __swig_setmethods__["Style"] = _molset.TubeObj3D_Style_set
    __swig_getmethods__["Style"] = _molset.TubeObj3D_Style_get
    if _newclass:
        Style = _swig_property(_molset.TubeObj3D_Style_get, _molset.TubeObj3D_Style_set)

    def RotateObj(self, rot_mat, cnt):
        return _molset.TubeObj3D_RotateObj(self, rot_mat, cnt)

    def Translate(self, tr_vec):
        return _molset.TubeObj3D_Translate(self, tr_vec)

    def DrawObj(self, molview):
        return _molset.TubeObj3D_DrawObj(self, molview)

    def GetObjectMinMaxCrd(self, MinX_v, MinY_v, MinZ_v, MaxX_v, MaxY_v, MaxZ_v):
        return _molset.TubeObj3D_GetObjectMinMaxCrd(self, MinX_v, MinY_v, MinZ_v, MaxX_v, MaxY_v, MaxZ_v)
TubeObj3D_swigregister = _molset.TubeObj3D_swigregister
TubeObj3D_swigregister(TubeObj3D)

class PlaneViewOfHaField3D(Object3D):
    __swig_setmethods__ = {}
    for _s in [Object3D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlaneViewOfHaField3D, name, value)
    __swig_getmethods__ = {}
    for _s in [Object3D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlaneViewOfHaField3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_PlaneViewOfHaField3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_PlaneViewOfHaField3D
    __del__ = lambda self: None
    PlaneXY = _molset.PlaneViewOfHaField3D_PlaneXY
    PlaneYZ = _molset.PlaneViewOfHaField3D_PlaneYZ
    PlaneZX = _molset.PlaneViewOfHaField3D_PlaneZX
    __swig_setmethods__["OwnerOfData"] = _molset.PlaneViewOfHaField3D_OwnerOfData_set
    __swig_getmethods__["OwnerOfData"] = _molset.PlaneViewOfHaField3D_OwnerOfData_get
    if _newclass:
        OwnerOfData = _swig_property(_molset.PlaneViewOfHaField3D_OwnerOfData_get, _molset.PlaneViewOfHaField3D_OwnerOfData_set)

    def SetMinMax(self, m_Min, m_Max):
        return _molset.PlaneViewOfHaField3D_SetMinMax(self, m_Min, m_Max)

    def SetLevel(self, NewLevel):
        return _molset.PlaneViewOfHaField3D_SetLevel(self, NewLevel)

    def SetPlaneXY(self):
        return _molset.PlaneViewOfHaField3D_SetPlaneXY(self)

    def SetPlaneYZ(self):
        return _molset.PlaneViewOfHaField3D_SetPlaneYZ(self)

    def SetPlaneZX(self):
        return _molset.PlaneViewOfHaField3D_SetPlaneZX(self)

    def SetPlane(self, newPlane):
        return _molset.PlaneViewOfHaField3D_SetPlane(self, newPlane)

    def SetHideZeroValues(self, newHideZeroValues):
        return _molset.PlaneViewOfHaField3D_SetHideZeroValues(self, newHideZeroValues)

    def GetPlane(self):
        return _molset.PlaneViewOfHaField3D_GetPlane(self)

    def GetLevel(self):
        return _molset.PlaneViewOfHaField3D_GetLevel(self)

    def GetValueMin(self):
        return _molset.PlaneViewOfHaField3D_GetValueMin(self)

    def GetValueMax(self):
        return _molset.PlaneViewOfHaField3D_GetValueMax(self)

    def GetHaField3D(self):
        return _molset.PlaneViewOfHaField3D_GetHaField3D(self)

    def GetHideZeroValues(self):
        return _molset.PlaneViewOfHaField3D_GetHideZeroValues(self)

    def SetColorsOfPlane(self):
        return _molset.PlaneViewOfHaField3D_SetColorsOfPlane(self)

    def RotateObj(self, rot_mat, cnt):
        return _molset.PlaneViewOfHaField3D_RotateObj(self, rot_mat, cnt)

    def Translate(self, tr_vec):
        return _molset.PlaneViewOfHaField3D_Translate(self, tr_vec)

    def DrawObj(self, molview):
        return _molset.PlaneViewOfHaField3D_DrawObj(self, molview)

    def GetObjectMinMaxCrd(self, MinX_v, MinY_v, MinZ_v, MaxX_v, MaxY_v, MaxZ_v):
        return _molset.PlaneViewOfHaField3D_GetObjectMinMaxCrd(self, MinX_v, MinY_v, MinZ_v, MaxX_v, MaxY_v, MaxZ_v)
PlaneViewOfHaField3D_swigregister = _molset.PlaneViewOfHaField3D_swigregister
PlaneViewOfHaField3D_swigregister(PlaneViewOfHaField3D)

class SecStructElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecStructElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SecStructElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_SecStructElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_SecStructElement
    __del__ = lambda self: None
    __swig_setmethods__["init"] = _molset.SecStructElement_init_set
    __swig_getmethods__["init"] = _molset.SecStructElement_init_get
    if _newclass:
        init = _swig_property(_molset.SecStructElement_init_get, _molset.SecStructElement_init_set)
    __swig_setmethods__["term"] = _molset.SecStructElement_term_set
    __swig_getmethods__["term"] = _molset.SecStructElement_term_get
    if _newclass:
        term = _swig_property(_molset.SecStructElement_term_get, _molset.SecStructElement_term_set)
    __swig_setmethods__["chain"] = _molset.SecStructElement_chain_set
    __swig_getmethods__["chain"] = _molset.SecStructElement_chain_get
    if _newclass:
        chain = _swig_property(_molset.SecStructElement_chain_get, _molset.SecStructElement_chain_set)
    __swig_setmethods__["type"] = _molset.SecStructElement_type_set
    __swig_getmethods__["type"] = _molset.SecStructElement_type_get
    if _newclass:
        type = _swig_property(_molset.SecStructElement_type_get, _molset.SecStructElement_type_set)

    def __eq__(self, rhs):
        return _molset.SecStructElement___eq__(self, rhs)

    def __lt__(self, rhs):
        return _molset.SecStructElement___lt__(self, rhs)
SecStructElement_swigregister = _molset.SecStructElement_swigregister
SecStructElement_swigregister(SecStructElement)
SourceNone = cvar.SourceNone
SourcePDB = cvar.SourcePDB
SourceCalc = cvar.SourceCalc
FeatHelix = cvar.FeatHelix
FeatSheet = cvar.FeatSheet
FeatTurn = cvar.FeatTurn

class HaMolecule(Object3D, AtomContainer):
    __swig_setmethods__ = {}
    for _s in [Object3D, AtomContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaMolecule, name, value)
    __swig_getmethods__ = {}
    for _s in [Object3D, AtomContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaMolecule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_HaMolecule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaMolecule
    __del__ = lambda self: None

    def GetHostMolSet(self, *args):
        return _molset.HaMolecule_GetHostMolSet(self, *args)

    def AddMolCopy(self, Mol_ref, create_new_chain=True, ptr_atom_map=None):
        return _molset.HaMolecule_AddMolCopy(self, Mol_ref, create_new_chain, ptr_atom_map)
    if _newclass:
        AttachFragment = staticmethod(_molset.HaMolecule_AttachFragment)
    else:
        AttachFragment = _molset.HaMolecule_AttachFragment

    def CombineMolecules(self, frag_mol, catom_host, catom_frag):
        return _molset.HaMolecule_CombineMolecules(self, frag_mol, catom_host, catom_frag)

    def GetRef(self):
        return _molset.HaMolecule_GetRef(self)

    def FillRef(self, buf, mode=0):
        return _molset.HaMolecule_FillRef(self, buf, mode)

    def SetObjName(self, new_name):
        return _molset.HaMolecule_SetObjName(self, new_name)

    def RotateObj(self, rot_mat, cnt):
        return _molset.HaMolecule_RotateObj(self, rot_mat, cnt)

    def RotateObjFromWorld(self, rot_mat, cnt):
        return _molset.HaMolecule_RotateObjFromWorld(self, rot_mat, cnt)

    def Translate(self, tr_vec):
        return _molset.HaMolecule_Translate(self, tr_vec)

    def SetAtomScreenCoord(self, pview):
        return _molset.HaMolecule_SetAtomScreenCoord(self, pview)

    def SetUniqueAtomNames(self):
        return _molset.HaMolecule_SetUniqueAtomNames(self)

    def InitAtoms(self, gfile):
        return _molset.HaMolecule_InitAtoms(self, gfile)

    def GetAtomByRef(self, at_ref):
        return _molset.HaMolecule_GetAtomByRef(self, at_ref)

    def GetNAtoms(self):
        return _molset.HaMolecule_GetNAtoms(self)

    def GetAtomIteratorPtr(self):
        return _molset.HaMolecule_GetAtomIteratorPtr(self)

    def IsMember(self, aptr):
        return _molset.HaMolecule_IsMember(self, aptr)

    def GetPointIteratorPtr(self, *args):
        return _molset.HaMolecule_GetPointIteratorPtr(self, *args)

    def GetNumPt(self):
        return _molset.HaMolecule_GetNumPt(self)

    def GetNBonds(self):
        return _molset.HaMolecule_GetNBonds(self)

    def GetNHBonds(self):
        return _molset.HaMolecule_GetNHBonds(self)

    def GetNSSBonds(self):
        return _molset.HaMolecule_GetNSSBonds(self)

    def SetTermResNames(self):
        return _molset.HaMolecule_SetTermResNames(self)

    def SetHISNames(self):
        return _molset.HaMolecule_SetHISNames(self)

    def SetCysBridgeNames(self):
        return _molset.HaMolecule_SetCysBridgeNames(self)

    def Print_info(self, sout, level):
        return _molset.HaMolecule_Print_info(self, sout, level)

    def CreateMolResidue(self):
        return _molset.HaMolecule_CreateMolResidue(self)

    def GetNRes(self):
        return _molset.HaMolecule_GetNRes(self)

    def GetResByRef(self, res_str):
        return _molset.HaMolecule_GetResByRef(self, res_str)

    def GetNChains(self):
        return _molset.HaMolecule_GetNChains(self)

    def AddChain(self, ident):
        return _molset.HaMolecule_AddChain(self, ident)

    def GetChainIdentMax(self):
        return _molset.HaMolecule_GetChainIdentMax(self)

    def GetFirstChain(self):
        return _molset.HaMolecule_GetFirstChain(self)

    def GetChain(self, chain_id):
        return _molset.HaMolecule_GetChain(self, chain_id)

    def FixChainsIdent(self):
        return _molset.HaMolecule_FixChainsIdent(self)

    def DescribeMolecule(self):
        return _molset.HaMolecule_DescribeMolecule(self)

    def Renumber(self, start):
        return _molset.HaMolecule_Renumber(self, start)

    def GetAtomSeqNumMap(self, *args):
        return _molset.HaMolecule_GetAtomSeqNumMap(self, *args)

    def DescribeSequence(self):
        return _molset.HaMolecule_DescribeSequence(self)
    __swig_setmethods__["SeqFormat"] = _molset.HaMolecule_SeqFormat_set
    __swig_getmethods__["SeqFormat"] = _molset.HaMolecule_SeqFormat_get
    if _newclass:
        SeqFormat = _swig_property(_molset.HaMolecule_SeqFormat_get, _molset.HaMolecule_SeqFormat_set)

    def AddFeature(self):
        return _molset.HaMolecule_AddFeature(self)

    def DeleteFeatures(self, itype):
        return _molset.HaMolecule_DeleteFeatures(self, itype)

    def GetNumFeatures(self, itype):
        return _molset.HaMolecule_GetNumFeatures(self, itype)

    def UpdateFeature(self, ptr, mask):
        return _molset.HaMolecule_UpdateFeature(self, ptr, mask)

    def ProcessFeatures(self):
        return _molset.HaMolecule_ProcessFeatures(self)

    def IsSecStructFound(self):
        return _molset.HaMolecule_IsSecStructFound(self)
    __swig_setmethods__["sec_struct_found"] = _molset.HaMolecule_sec_struct_found_set
    __swig_getmethods__["sec_struct_found"] = _molset.HaMolecule_sec_struct_found_get
    if _newclass:
        sec_struct_found = _swig_property(_molset.HaMolecule_sec_struct_found_get, _molset.HaMolecule_sec_struct_found_set)
    __swig_setmethods__["structsource"] = _molset.HaMolecule_structsource_set
    __swig_getmethods__["structsource"] = _molset.HaMolecule_structsource_get
    if _newclass:
        structsource = _swig_property(_molset.HaMolecule_structsource_get, _molset.HaMolecule_structsource_set)
    __swig_setmethods__["Features"] = _molset.HaMolecule_Features_set
    __swig_getmethods__["Features"] = _molset.HaMolecule_Features_get
    if _newclass:
        Features = _swig_property(_molset.HaMolecule_Features_get, _molset.HaMolecule_Features_set)
    __swig_setmethods__["classification"] = _molset.HaMolecule_classification_set
    __swig_getmethods__["classification"] = _molset.HaMolecule_classification_get
    if _newclass:
        classification = _swig_property(_molset.HaMolecule_classification_get, _molset.HaMolecule_classification_set)
    __swig_setmethods__["identcode"] = _molset.HaMolecule_identcode_set
    __swig_getmethods__["identcode"] = _molset.HaMolecule_identcode_get
    if _newclass:
        identcode = _swig_property(_molset.HaMolecule_identcode_get, _molset.HaMolecule_identcode_set)
HaMolecule_swigregister = _molset.HaMolecule_swigregister
HaMolecule_swigregister(HaMolecule)

def HaMolecule_AttachFragment(catom_host, catom_frag):
    return _molset.HaMolecule_AttachFragment(catom_host, catom_frag)
HaMolecule_AttachFragment = _molset.HaMolecule_AttachFragment

class AtomIteratorMolecule(AtomIterator):
    __swig_setmethods__ = {}
    for _s in [AtomIterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomIteratorMolecule, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomIterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomIteratorMolecule, name)
    __repr__ = _swig_repr

    def __init__(self, new_pMol):
        this = _molset.new_AtomIteratorMolecule(new_pMol)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomIteratorMolecule
    __del__ = lambda self: None

    def GetFirstAtom(self):
        return _molset.AtomIteratorMolecule_GetFirstAtom(self)

    def GetNextAtom(self):
        return _molset.AtomIteratorMolecule_GetNextAtom(self)
AtomIteratorMolecule_swigregister = _molset.AtomIteratorMolecule_swigregister
AtomIteratorMolecule_swigregister(AtomIteratorMolecule)

class AtomIteratorMolecule_const(AtomIterator_const):
    __swig_setmethods__ = {}
    for _s in [AtomIterator_const]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomIteratorMolecule_const, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomIterator_const]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomIteratorMolecule_const, name)
    __repr__ = _swig_repr

    def __init__(self, new_pMol):
        this = _molset.new_AtomIteratorMolecule_const(new_pMol)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomIteratorMolecule_const
    __del__ = lambda self: None

    def GetFirstAtom(self):
        return _molset.AtomIteratorMolecule_const_GetFirstAtom(self)

    def GetNextAtom(self):
        return _molset.AtomIteratorMolecule_const_GetNextAtom(self)
AtomIteratorMolecule_const_swigregister = _molset.AtomIteratorMolecule_const_swigregister
AtomIteratorMolecule_const_swigregister(AtomIteratorMolecule_const)

class ResidueIteratorMolecule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResidueIteratorMolecule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResidueIteratorMolecule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_ResidueIteratorMolecule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ResidueIteratorMolecule
    __del__ = lambda self: None

    def GetFirstRes(self):
        return _molset.ResidueIteratorMolecule_GetFirstRes(self)

    def GetNextRes(self):
        return _molset.ResidueIteratorMolecule_GetNextRes(self)
ResidueIteratorMolecule_swigregister = _molset.ResidueIteratorMolecule_swigregister
ResidueIteratorMolecule_swigregister(ResidueIteratorMolecule)

class ChainIteratorMolecule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainIteratorMolecule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChainIteratorMolecule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_ChainIteratorMolecule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ChainIteratorMolecule
    __del__ = lambda self: None

    def GetFirstChain(self):
        return _molset.ChainIteratorMolecule_GetFirstChain(self)

    def GetNextChain(self):
        return _molset.ChainIteratorMolecule_GetNextChain(self)
ChainIteratorMolecule_swigregister = _molset.ChainIteratorMolecule_swigregister
ChainIteratorMolecule_swigregister(ChainIteratorMolecule)

class AtomMapping(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomMapping, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtomMapping, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_AtomMapping(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomMapping
    __del__ = lambda self: None

    def PrintInfo(self, detailed=0):
        return _molset.AtomMapping_PrintInfo(self, detailed)
    __swig_setmethods__["p_ac_1"] = _molset.AtomMapping_p_ac_1_set
    __swig_getmethods__["p_ac_1"] = _molset.AtomMapping_p_ac_1_get
    if _newclass:
        p_ac_1 = _swig_property(_molset.AtomMapping_p_ac_1_get, _molset.AtomMapping_p_ac_1_set)
    __swig_setmethods__["p_ac_2"] = _molset.AtomMapping_p_ac_2_set
    __swig_getmethods__["p_ac_2"] = _molset.AtomMapping_p_ac_2_get
    if _newclass:
        p_ac_2 = _swig_property(_molset.AtomMapping_p_ac_2_get, _molset.AtomMapping_p_ac_2_set)
    __swig_setmethods__["atmap_2to1"] = _molset.AtomMapping_atmap_2to1_set
    __swig_getmethods__["atmap_2to1"] = _molset.AtomMapping_atmap_2to1_get
    if _newclass:
        atmap_2to1 = _swig_property(_molset.AtomMapping_atmap_2to1_get, _molset.AtomMapping_atmap_2to1_set)
    __swig_setmethods__["atmap_1to2"] = _molset.AtomMapping_atmap_1to2_set
    __swig_getmethods__["atmap_1to2"] = _molset.AtomMapping_atmap_1to2_get
    if _newclass:
        atmap_1to2 = _swig_property(_molset.AtomMapping_atmap_1to2_get, _molset.AtomMapping_atmap_1to2_set)
    __swig_setmethods__["SyncRules2from1"] = _molset.AtomMapping_SyncRules2from1_set
    __swig_getmethods__["SyncRules2from1"] = _molset.AtomMapping_SyncRules2from1_get
    if _newclass:
        SyncRules2from1 = _swig_property(_molset.AtomMapping_SyncRules2from1_get, _molset.AtomMapping_SyncRules2from1_set)
    __swig_setmethods__["SyncRules1from2"] = _molset.AtomMapping_SyncRules1from2_set
    __swig_getmethods__["SyncRules1from2"] = _molset.AtomMapping_SyncRules1from2_get
    if _newclass:
        SyncRules1from2 = _swig_property(_molset.AtomMapping_SyncRules1from2_get, _molset.AtomMapping_SyncRules1from2_set)

    def ClearSyncRules1from2(self):
        return _molset.AtomMapping_ClearSyncRules1from2(self)

    def ClearSyncRules2from1(self):
        return _molset.AtomMapping_ClearSyncRules2from1(self)

    def Map2to1ByAtomDistance(self):
        return _molset.AtomMapping_Map2to1ByAtomDistance(self)

    def Map2to1ByAtomRef(self):
        return _molset.AtomMapping_Map2to1ByAtomRef(self)

    def AssociateAtomsRefAtoms(self, aptr_mng, aref_1, aref_2, aref_3, dist=-1.0, vang=-1.0, torsion=-500.0, priority=-1):
        return _molset.AtomMapping_AssociateAtomsRefAtoms(self, aptr_mng, aref_1, aref_2, aref_3, dist, vang, torsion, priority)

    def SyncAtomCrd1From2(self):
        return _molset.AtomMapping_SyncAtomCrd1From2(self)

    def SyncAtomCrd2From1(self):
        return _molset.AtomMapping_SyncAtomCrd2From1(self)
    if _newclass:
        BuildSyncRulesForMissingAtoms = staticmethod(_molset.AtomMapping_BuildSyncRulesForMissingAtoms)
    else:
        BuildSyncRulesForMissingAtoms = _molset.AtomMapping_BuildSyncRulesForMissingAtoms
AtomMapping_swigregister = _molset.AtomMapping_swigregister
AtomMapping_swigregister(AtomMapping)
SelectFlag = cvar.SelectFlag
AllAtomFlag = cvar.AllAtomFlag
HelixFlag = cvar.HelixFlag
CystineFlag = cvar.CystineFlag
StrandFlag = cvar.StrandFlag
DashStrandFlag = cvar.DashStrandFlag
RibbonFlag = cvar.RibbonFlag
TraceFlag = cvar.TraceFlag
CartoonFlag = cvar.CartoonFlag
DotsFlag = cvar.DotsFlag
Helix3Flag = cvar.Helix3Flag
Helix4Flag = cvar.Helix4Flag
Helix5Flag = cvar.Helix5Flag
SheetFlag = cvar.SheetFlag
TurnFlag = cvar.TurnFlag

def AtomMapping_BuildSyncRulesForMissingAtoms(all_atoms, known_atoms, rules):
    return _molset.AtomMapping_BuildSyncRulesForMissingAtoms(all_atoms, known_atoms, rules)
AtomMapping_BuildSyncRulesForMissingAtoms = _molset.AtomMapping_BuildSyncRulesForMissingAtoms

class HaMolSet(AtomContainer):
    __swig_setmethods__ = {}
    for _s in [AtomContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaMolSet, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaMolSet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaMolSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaMolSet
    __del__ = lambda self: None
    file_reading_debug = _molset.HaMolSet_file_reading_debug
    __swig_setmethods__["debug_flag"] = _molset.HaMolSet_debug_flag_set
    __swig_getmethods__["debug_flag"] = _molset.HaMolSet_debug_flag_get
    if _newclass:
        debug_flag = _swig_property(_molset.HaMolSet_debug_flag_get, _molset.HaMolSet_debug_flag_set)

    def Print_info(self, sout, level):
        return _molset.HaMolSet_Print_info(self, sout, level)

    def ExecuteCommand(self, cmd_pr):
        return _molset.HaMolSet_ExecuteCommand(self, cmd_pr)

    def ExecuteShowCommand(self, cmd_pr):
        return _molset.HaMolSet_ExecuteShowCommand(self, cmd_pr)
    __swig_setmethods__["p_evt_h"] = _molset.HaMolSet_p_evt_h_set
    __swig_getmethods__["p_evt_h"] = _molset.HaMolSet_p_evt_h_get
    if _newclass:
        p_evt_h = _swig_property(_molset.HaMolSet_p_evt_h_get, _molset.HaMolSet_p_evt_h_set)

    def OverlapMol(self, fmolatset, smolatset):
        return _molset.HaMolSet_OverlapMol(self, fmolatset, smolatset)

    def AlignOverlapMol(self, fmolatset, pMol2, fit=None, p_trans=None, p_rot=None):
        return _molset.HaMolSet_AlignOverlapMol(self, fmolatset, pMol2, fit, p_trans, p_rot)
    __swig_setmethods__["p_load_opt_default"] = _molset.HaMolSet_p_load_opt_default_set
    __swig_getmethods__["p_load_opt_default"] = _molset.HaMolSet_p_load_opt_default_get
    if _newclass:
        p_load_opt_default = _swig_property(_molset.HaMolSet_p_load_opt_default_get, _molset.HaMolSet_p_load_opt_default_set)
    __swig_setmethods__["p_save_opt_default"] = _molset.HaMolSet_p_save_opt_default_set
    __swig_getmethods__["p_save_opt_default"] = _molset.HaMolSet_p_save_opt_default_get
    if _newclass:
        p_save_opt_default = _swig_property(_molset.HaMolSet_p_save_opt_default_get, _molset.HaMolSet_p_save_opt_default_set)

    def FetchFile(self, format, file_name):
        return _molset.HaMolSet_FetchFile(self, format, file_name)

    def LoadHarlemFile(self, fname, popt=None):
        return _molset.HaMolSet_LoadHarlemFile(self, fname, popt)

    def LoadAmberPrepFile(self, fname):
        return _molset.HaMolSet_LoadAmberPrepFile(self, fname)

    def LoadAmberTopFile(self, fname):
        return _molset.HaMolSet_LoadAmberTopFile(self, fname)

    def LoadRWFMolecule(self, fname):
        return _molset.HaMolSet_LoadRWFMolecule(self, fname)

    def LoadPDBFile(self, fname, flag=0):
        return _molset.HaMolSet_LoadPDBFile(self, fname, flag)

    def LoadMol2File(self, fname):
        return _molset.HaMolSet_LoadMol2File(self, fname)

    def LoadMDLFile(self, fname):
        return _molset.HaMolSet_LoadMDLFile(self, fname)

    def LoadXYZFile(self, fname, popt=None):
        return _molset.HaMolSet_LoadXYZFile(self, fname, popt)

    def LoadHINFile(self, fname, popt=None):
        return _molset.HaMolSet_LoadHINFile(self, fname, popt)

    def LoadXYZStream(self, arg2, popt=None):
        return _molset.HaMolSet_LoadXYZStream(self, arg2, popt)

    def LoadHINStream(self, arg2, popt=None):
        return _molset.HaMolSet_LoadHINStream(self, arg2, popt)

    def LoadXMLStream(self, arg2, popt=None):
        return _molset.HaMolSet_LoadXMLStream(self, arg2, popt)

    def LoadXMLNode(self, node, popt=None):
        return _molset.HaMolSet_LoadXMLNode(self, node, popt)

    def LoadOldHarlemFile(self, fp):
        return _molset.HaMolSet_LoadOldHarlemFile(self, fp)

    def SetCoordFromFile(self, *args):
        return _molset.HaMolSet_SetCoordFromFile(self, *args)

    def SetCrdFromArray(self, crd_arr):
        return _molset.HaMolSet_SetCrdFromArray(self, crd_arr)

    def SavePDBFile(self, filename):
        return _molset.HaMolSet_SavePDBFile(self, filename)

    def SaveHarlemFile(self, filename, popt=None):
        return _molset.HaMolSet_SaveHarlemFile(self, filename, popt)

    def SaveOldHarlemFile(self, filename):
        return _molset.HaMolSet_SaveOldHarlemFile(self, filename)

    def SaveXYZRadFile(self, filename):
        return _molset.HaMolSet_SaveXYZRadFile(self, filename)

    def SaveHINFile(self, filename):
        return _molset.HaMolSet_SaveHINFile(self, filename)

    def SavePQRFile(self, filename, SaveChainLetter=True):
        return _molset.HaMolSet_SavePQRFile(self, filename, SaveChainLetter)

    def SavePQRFreeFile(self, filename):
        return _molset.HaMolSet_SavePQRFreeFile(self, filename)

    def AddXml(self, *args):
        return _molset.HaMolSet_AddXml(self, *args)

    def SaveXML(self, file_out, option=0):
        return _molset.HaMolSet_SaveXML(self, file_out, option)

    def SaveOldHarlemStream(self, os):
        return _molset.HaMolSet_SaveOldHarlemStream(self, os)

    def SaveHINToStream(self, os):
        return _molset.HaMolSet_SaveHINToStream(self, os)

    def SaveXMLToStream(self, os, popt=None):
        return _molset.HaMolSet_SaveXMLToStream(self, os, popt)

    def GetZMat(self, popt=None):
        return _molset.HaMolSet_GetZMat(self, popt)
    __swig_setmethods__["CurMolSet"] = _molset.HaMolSet_CurMolSet_set
    __swig_getmethods__["CurMolSet"] = _molset.HaMolSet_CurMolSet_get
    if _newclass:
        CurMolSet = _swig_property(_molset.HaMolSet_CurMolSet_get, _molset.HaMolSet_CurMolSet_set)
    __swig_setmethods__["HostMolecules"] = _molset.HaMolSet_HostMolecules_set
    __swig_getmethods__["HostMolecules"] = _molset.HaMolSet_HostMolecules_get
    if _newclass:
        HostMolecules = _swig_property(_molset.HaMolSet_HostMolecules_get, _molset.HaMolSet_HostMolecules_set)

    def CreateMolecule(self):
        return _molset.HaMolSet_CreateMolecule(self)

    def GetFirstMolecule(self):
        return _molset.HaMolSet_GetFirstMolecule(self)

    def GetMoleculeNum(self, imol):
        return _molset.HaMolSet_GetMoleculeNum(self, imol)

    def GetMolByName(self, *args):
        return _molset.HaMolSet_GetMolByName(self, *args)

    def DeleteAll(self):
        return _molset.HaMolSet_DeleteAll(self)

    def DeleteMol(self, pMol):
        return _molset.HaMolSet_DeleteMol(self, pMol)

    def DeleteAtomWithRef(self, atref):
        return _molset.HaMolSet_DeleteAtomWithRef(self, atref)

    def DeleteAtom(self, aptr):
        return _molset.HaMolSet_DeleteAtom(self, aptr)

    def DeleteAtoms(self, atset):
        return _molset.HaMolSet_DeleteAtoms(self, atset)

    def OnAtomSeqChange(self):
        return _molset.HaMolSet_OnAtomSeqChange(self)

    def OnChangePeriodicity(self):
        return _molset.HaMolSet_OnChangePeriodicity(self)

    def RenumberSelectedRes(self, start_num=1):
        return _molset.HaMolSet_RenumberSelectedRes(self, start_num)

    def GetPointIteratorPtr(self, *args):
        return _molset.HaMolSet_GetPointIteratorPtr(self, *args)

    def GetNumPt(self):
        return _molset.HaMolSet_GetNumPt(self)

    def GetAtomIteratorPtr(self, *args):
        return _molset.HaMolSet_GetAtomIteratorPtr(self, *args)

    def IsMember(self, aptr):
        return _molset.HaMolSet_IsMember(self, aptr)

    def GetNMol(self):
        return _molset.HaMolSet_GetNMol(self)

    def GetNRes(self):
        return _molset.HaMolSet_GetNRes(self)

    def GetNChains(self):
        return _molset.HaMolSet_GetNChains(self)

    def GetNAtoms(self):
        return _molset.HaMolSet_GetNAtoms(self)

    def GetNDumAtoms(self):
        return _molset.HaMolSet_GetNDumAtoms(self)

    def GetNBonds(self):
        return _molset.HaMolSet_GetNBonds(self)

    def GetNHBonds(self):
        return _molset.HaMolSet_GetNHBonds(self)

    def GetNSSBonds(self):
        return _molset.HaMolSet_GetNSSBonds(self)

    def GetNBackbBonds(self):
        return _molset.HaMolSet_GetNBackbBonds(self)

    def FindClosestContact(self, atc1, atc2):
        return _molset.HaMolSet_FindClosestContact(self, atc1, atc2)

    def GetResByRef(self, res_ref):
        return _molset.HaMolSet_GetResByRef(self, res_ref)

    def GetAtomByRef(self, at_ref):
        return _molset.HaMolSet_GetAtomByRef(self, at_ref)

    def GetAtomsByRef(self, at_ref, at_set):
        return _molset.HaMolSet_GetAtomsByRef(self, at_ref, at_set)

    def GetAtomBySeqNum(self, seq_num):
        return _molset.HaMolSet_GetAtomBySeqNum(self, seq_num)

    def GetSeqNumForAtom(self, aptr):
        return _molset.HaMolSet_GetSeqNumForAtom(self, aptr)

    def InitAtomIdx(self):
        return _molset.HaMolSet_InitAtomIdx(self)

    def GetAtomSeqNumMap(self, *args):
        return _molset.HaMolSet_GetAtomSeqNumMap(self, *args)

    def SelectAtomsAll(self):
        return _molset.HaMolSet_SelectAtomsAll(self)

    def SelectAtoms(self, atom_coll):
        return _molset.HaMolSet_SelectAtoms(self, atom_coll)

    def SelectAtomsMask(self, mask):
        return _molset.HaMolSet_SelectAtomsMask(self, mask)

    def SelectAtomsExprObj(self, expr):
        return _molset.HaMolSet_SelectAtomsExprObj(self, expr)

    def SelectAtomsExpr(self, expr_str):
        return _molset.HaMolSet_SelectAtomsExpr(self, expr_str)

    def SelectAtomsInBoundaryBox(self):
        return _molset.HaMolSet_SelectAtomsInBoundaryBox(self)

    def UnSelectAtomsAll(self):
        return _molset.HaMolSet_UnSelectAtomsAll(self)

    def RevertAtomSelection(self):
        return _molset.HaMolSet_RevertAtomSelection(self)

    def DisplaySelectCount(self):
        return _molset.HaMolSet_DisplaySelectCount(self)

    def AreHBonded(self, src, dst):
        return _molset.HaMolSet_AreHBonded(self, src, dst)

    def AddHBond(self, src, dst):
        return _molset.HaMolSet_AddHBond(self, src, dst)

    def CreateHydrogenBond(self, src, dst, energy, offset):
        return _molset.HaMolSet_CreateHydrogenBond(self, src, dst, energy, offset)

    def AddBond(self, src, dst):
        return _molset.HaMolSet_AddBond(self, src, dst)

    def DeleteBond(self, src, dst):
        return _molset.HaMolSet_DeleteBond(self, src, dst)

    def ClearBackbone(self):
        return _molset.HaMolSet_ClearBackbone(self)
    __swig_setmethods__["HBonds"] = _molset.HaMolSet_HBonds_set
    __swig_getmethods__["HBonds"] = _molset.HaMolSet_HBonds_get
    if _newclass:
        HBonds = _swig_property(_molset.HaMolSet_HBonds_get, _molset.HaMolSet_HBonds_set)
    __swig_setmethods__["Bonds"] = _molset.HaMolSet_Bonds_set
    __swig_getmethods__["Bonds"] = _molset.HaMolSet_Bonds_get
    if _newclass:
        Bonds = _swig_property(_molset.HaMolSet_Bonds_get, _molset.HaMolSet_Bonds_set)
    __swig_setmethods__["BackboneBonds"] = _molset.HaMolSet_BackboneBonds_set
    __swig_getmethods__["BackboneBonds"] = _molset.HaMolSet_BackboneBonds_get
    if _newclass:
        BackboneBonds = _swig_property(_molset.HaMolSet_BackboneBonds_get, _molset.HaMolSet_BackboneBonds_set)
    __swig_setmethods__["SSBonds_found"] = _molset.HaMolSet_SSBonds_found_set
    __swig_getmethods__["SSBonds_found"] = _molset.HaMolSet_SSBonds_found_get
    if _newclass:
        SSBonds_found = _swig_property(_molset.HaMolSet_SSBonds_found_get, _molset.HaMolSet_SSBonds_found_set)
    __swig_setmethods__["HBonds_found"] = _molset.HaMolSet_HBonds_found_set
    __swig_getmethods__["HBonds_found"] = _molset.HaMolSet_HBonds_found_get
    if _newclass:
        HBonds_found = _swig_property(_molset.HaMolSet_HBonds_found_get, _molset.HaMolSet_HBonds_found_set)
    __swig_setmethods__["to_find_backb"] = _molset.HaMolSet_to_find_backb_set
    __swig_getmethods__["to_find_backb"] = _molset.HaMolSet_to_find_backb_get
    if _newclass:
        to_find_backb = _swig_property(_molset.HaMolSet_to_find_backb_get, _molset.HaMolSet_to_find_backb_set)
    __swig_setmethods__["per_bc"] = _molset.HaMolSet_per_bc_set
    __swig_getmethods__["per_bc"] = _molset.HaMolSet_per_bc_get
    if _newclass:
        per_bc = _swig_property(_molset.HaMolSet_per_bc_get, _molset.HaMolSet_per_bc_set)

    def WrapToUnitCell(self):
        return _molset.HaMolSet_WrapToUnitCell(self)

    def WrapAndCenter(self, grp_name, cnt_crd):
        return _molset.HaMolSet_WrapAndCenter(self, grp_name, cnt_crd)

    def SetName(self, new_name):
        return _molset.HaMolSet_SetName(self, new_name)

    def GetName(self):
        return _molset.HaMolSet_GetName(self)

    def GetUniqueMolName(self, suggest_name):
        return _molset.HaMolSet_GetUniqueMolName(self, suggest_name)
    __swig_setmethods__["name_mset"] = _molset.HaMolSet_name_mset_set
    __swig_getmethods__["name_mset"] = _molset.HaMolSet_name_mset_get
    if _newclass:
        name_mset = _swig_property(_molset.HaMolSet_name_mset_get, _molset.HaMolSet_name_mset_set)

    def GetResidueIterator(self):
        return _molset.HaMolSet_GetResidueIterator(self)

    def GetNChemGroups(self):
        return _molset.HaMolSet_GetNChemGroups(self)

    def AddBlankChemGroup(self, *args):
        return _molset.HaMolSet_AddBlankChemGroup(self, *args)

    def DeleteChemGroup(self, gid):
        return _molset.HaMolSet_DeleteChemGroup(self, gid)

    def DeleteChemGroupPtr(self, grp_ptr):
        return _molset.HaMolSet_DeleteChemGroupPtr(self, grp_ptr)

    def SetChemGrpSelected(self, gid):
        return _molset.HaMolSet_SetChemGrpSelected(self, gid)

    def GetChemGroupByIdx(self, index):
        return _molset.HaMolSet_GetChemGroupByIdx(self, index)

    def GetChemGroupByID(self, gid):
        return _molset.HaMolSet_GetChemGroupByID(self, gid)

    def GetChemGroupByAtom(self, aptr):
        return _molset.HaMolSet_GetChemGroupByAtom(self, aptr)

    def SetStdChemGroups(self):
        return _molset.HaMolSet_SetStdChemGroups(self)

    def RenumberGrp(self):
        return _molset.HaMolSet_RenumberGrp(self)

    def CheckUniqChemGrpID(self, gid):
        return _molset.HaMolSet_CheckUniqChemGrpID(self, gid)

    def GetUniqChemGrpID(self, buf_reg_flag):
        return _molset.HaMolSet_GetUniqChemGrpID(self, buf_reg_flag)
    __swig_setmethods__["ChemGroups"] = _molset.HaMolSet_ChemGroups_set
    __swig_getmethods__["ChemGroups"] = _molset.HaMolSet_ChemGroups_get
    if _newclass:
        ChemGroups = _swig_property(_molset.HaMolSet_ChemGroups_get, _molset.HaMolSet_ChemGroups_set)
    __swig_setmethods__["chemg_idx"] = _molset.HaMolSet_chemg_idx_set
    __swig_getmethods__["chemg_idx"] = _molset.HaMolSet_chemg_idx_get
    if _newclass:
        chemg_idx = _swig_property(_molset.HaMolSet_chemg_idx_get, _molset.HaMolSet_chemg_idx_set)

    def AddAtomGroup(self, *args):
        return _molset.HaMolSet_AddAtomGroup(self, *args)

    def GetAtomGroupByID(self, id):
        return _molset.HaMolSet_GetAtomGroupByID(self, id)

    def SetAtomGroupFromSelection(self, id):
        return _molset.HaMolSet_SetAtomGroupFromSelection(self, id)
    __swig_setmethods__["NamedAtomGroups"] = _molset.HaMolSet_NamedAtomGroups_set
    __swig_getmethods__["NamedAtomGroups"] = _molset.HaMolSet_NamedAtomGroups_get
    if _newclass:
        NamedAtomGroups = _swig_property(_molset.HaMolSet_NamedAtomGroups_get, _molset.HaMolSet_NamedAtomGroups_set)

    def DeleteAtomGroup(self, id):
        return _molset.HaMolSet_DeleteAtomGroup(self, id)

    def DeleteAtomGroupPtr(self, atgrp_ptr):
        return _molset.HaMolSet_DeleteAtomGroupPtr(self, atgrp_ptr)

    def CreateAxxMol(self, mol_name, id):
        return _molset.HaMolSet_CreateAxxMol(self, mol_name, id)

    def GetCrdSnapshots(self):
        return _molset.HaMolSet_GetCrdSnapshots(self)
    __swig_setmethods__["crd_snapshots"] = _molset.HaMolSet_crd_snapshots_set
    __swig_getmethods__["crd_snapshots"] = _molset.HaMolSet_crd_snapshots_get
    if _newclass:
        crd_snapshots = _swig_property(_molset.HaMolSet_crd_snapshots_get, _molset.HaMolSet_crd_snapshots_set)

    def DeleteCrdSnapshots(self):
        return _molset.HaMolSet_DeleteCrdSnapshots(self)

    def AddCrdSnapshot(self, *args):
        return _molset.HaMolSet_AddCrdSnapshot(self, *args)

    def AddCrdSnapshotForGroup(self, *args):
        return _molset.HaMolSet_AddCrdSnapshotForGroup(self, *args)

    def GetCrdSnapshotByName(self, snp_name, create=False):
        return _molset.HaMolSet_GetCrdSnapshotByName(self, snp_name, create)

    def DeleteCrdSnapshot(self, psnap):
        return _molset.HaMolSet_DeleteCrdSnapshot(self, psnap)

    def SetCrdFromSnapshot(self, *args):
        return _molset.HaMolSet_SetCrdFromSnapshot(self, *args)

    def SaveCrdSnapshots(self, *args):
        return _molset.HaMolSet_SaveCrdSnapshots(self, *args)

    def LoadCrdSnapshots(self, fname, popt=None):
        return _molset.HaMolSet_LoadCrdSnapshots(self, fname, popt)

    def DescribeSecStruct(self):
        return _molset.HaMolSet_DescribeSecStruct(self)

    def PrintHBonds(self):
        return _molset.HaMolSet_PrintHBonds(self)

    def GetMolSurface(self, create_flag=0):
        return _molset.HaMolSet_GetMolSurface(self, create_flag)

    def CalcMolSurface(self, surf_type=1):
        return _molset.HaMolSet_CalcMolSurface(self, surf_type)

    def CalcMolSurfDens(self):
        return _molset.HaMolSet_CalcMolSurfDens(self)

    def CalcSolventAccessArea(self):
        return _molset.HaMolSet_CalcSolventAccessArea(self)

    def CreateExcludedVolumeMol(self):
        return _molset.HaMolSet_CreateExcludedVolumeMol(self)

    def SaveCrdExclVolArb(self):
        return _molset.HaMolSet_SaveCrdExclVolArb(self)

    def CalculatePotential(self, x, y, z):
        return _molset.HaMolSet_CalculatePotential(self, x, y, z)

    def CalcDipole(self):
        return _molset.HaMolSet_CalcDipole(self)

    def SetVdwRadii(self):
        return _molset.HaMolSet_SetVdwRadii(self)

    def SetParseRadii(self):
        return _molset.HaMolSet_SetParseRadii(self)

    def SetHPPRadii(self):
        return _molset.HaMolSet_SetHPPRadii(self)
    __swig_setmethods__["ChargeMaps"] = _molset.HaMolSet_ChargeMaps_set
    __swig_getmethods__["ChargeMaps"] = _molset.HaMolSet_ChargeMaps_get
    if _newclass:
        ChargeMaps = _swig_property(_molset.HaMolSet_ChargeMaps_get, _molset.HaMolSet_ChargeMaps_set)

    def GetChargeMapByName(self, map_name):
        return _molset.HaMolSet_GetChargeMapByName(self, map_name)

    def CreateChargeMap(self, map_name):
        return _molset.HaMolSet_CreateChargeMap(self, map_name)

    def SetChargeMapByCurrentCharges(self, map_name):
        return _molset.HaMolSet_SetChargeMapByCurrentCharges(self, map_name)

    def SetChargesFromChargeMap(self, charge_map):
        return _molset.HaMolSet_SetChargesFromChargeMap(self, charge_map)
    __swig_setmethods__["parent_mset"] = _molset.HaMolSet_parent_mset_set
    __swig_getmethods__["parent_mset"] = _molset.HaMolSet_parent_mset_get
    if _newclass:
        parent_mset = _swig_property(_molset.HaMolSet_parent_mset_get, _molset.HaMolSet_parent_mset_set)

    def CreateFragmentFromSelection(self, frag_name, params=None):
        return _molset.HaMolSet_CreateFragmentFromSelection(self, frag_name, params)
    __swig_setmethods__["Fragments"] = _molset.HaMolSet_Fragments_set
    __swig_getmethods__["Fragments"] = _molset.HaMolSet_Fragments_get
    if _newclass:
        Fragments = _swig_property(_molset.HaMolSet_Fragments_get, _molset.HaMolSet_Fragments_set)
    __swig_setmethods__["frag_atom_maps"] = _molset.HaMolSet_frag_atom_maps_set
    __swig_getmethods__["frag_atom_maps"] = _molset.HaMolSet_frag_atom_maps_get
    if _newclass:
        frag_atom_maps = _swig_property(_molset.HaMolSet_frag_atom_maps_get, _molset.HaMolSet_frag_atom_maps_set)

    def AssociateFragment(self, frag):
        return _molset.HaMolSet_AssociateFragment(self, frag)

    def ReleaseFragment(self, frag):
        return _molset.HaMolSet_ReleaseFragment(self, frag)

    def DeleteFragment(self, frag):
        return _molset.HaMolSet_DeleteFragment(self, frag)

    def ReleaseAllFragments(self):
        return _molset.HaMolSet_ReleaseAllFragments(self)

    def DeleteAllFragments(self):
        return _molset.HaMolSet_DeleteAllFragments(self)

    def BuildFragmentAtomMap(self, frag, frag_atom_map):
        return _molset.HaMolSet_BuildFragmentAtomMap(self, frag, frag_atom_map)

    def SelectAtomsMatchingFragment(self, frag):
        return _molset.HaMolSet_SelectAtomsMatchingFragment(self, frag)

    def IsFragment(self, pmset):
        return _molset.HaMolSet_IsFragment(self, pmset)

    def FragmentIdx(self, pmset):
        return _molset.HaMolSet_FragmentIdx(self, pmset)

    def SyncFragmentCoord(self, frag):
        return _molset.HaMolSet_SyncFragmentCoord(self, frag)

    def GetCompModule(self, *args):
        return _molset.HaMolSet_GetCompModule(self, *args)

    def GetQCMod(self, *args):
        return _molset.HaMolSet_GetQCMod(self, *args)

    def GetETCouplMod(self, create_module=False):
        return _molset.HaMolSet_GetETCouplMod(self, create_module)

    def GetGaussMod(self, create_module=False):
        return _molset.HaMolSet_GetGaussMod(self, create_module)

    def GetDaltonMod(self, create_module=False):
        return _molset.HaMolSet_GetDaltonMod(self, create_module)

    def GetElectrostMod(self, create_module=False):
        return _molset.HaMolSet_GetElectrostMod(self, create_module)

    def GetpKaCalcMod(self, create_module=False):
        return _molset.HaMolSet_GetpKaCalcMod(self, create_module)

    def GetPNPMod(self, create_module=False):
        return _molset.HaMolSet_GetPNPMod(self, create_module)

    def GetAPBSMod(self, create_module=False):
        return _molset.HaMolSet_GetAPBSMod(self, create_module)

    def GetInterMolMod(self, create_module=False):
        return _molset.HaMolSet_GetInterMolMod(self, create_module)

    def GetMolMechMod(self, *args):
        return _molset.HaMolSet_GetMolMechMod(self, *args)

    def GetTrajAnalMod(self, create_module=False):
        return _molset.HaMolSet_GetTrajAnalMod(self, create_module)

    def GetScatterMod(self, create_module=False):
        return _molset.HaMolSet_GetScatterMod(self, create_module)

    def GetSTMMod(self, create_module=False):
        return _molset.HaMolSet_GetSTMMod(self, create_module)

    def GetNuclAcidMod(self, create_module=False):
        return _molset.HaMolSet_GetNuclAcidMod(self, create_module)

    def GetZindoMod(self, create_module=False):
        return _molset.HaMolSet_GetZindoMod(self, create_module)

    def GetProtonRedoxMod(self, create_module=False):
        return _molset.HaMolSet_GetProtonRedoxMod(self, create_module)

    def GetEmpiricalMod(self, create_module=False):
        return _molset.HaMolSet_GetEmpiricalMod(self, create_module)

    def GetMolMembraneMod(self, create_module=False):
        return _molset.HaMolSet_GetMolMembraneMod(self, create_module)

    def GetFlexMod(self, create_module=False):
        return _molset.HaMolSet_GetFlexMod(self, create_module)

    def GetMolEditor(self, create_module=False):
        return _molset.HaMolSet_GetMolEditor(self, create_module)

    def GetCollectCrdAnalMod(self, create_module=False):
        return _molset.HaMolSet_GetCollectCrdAnalMod(self, create_module)
    __swig_setmethods__["CompModules"] = _molset.HaMolSet_CompModules_set
    __swig_getmethods__["CompModules"] = _molset.HaMolSet_CompModules_get
    if _newclass:
        CompModules = _swig_property(_molset.HaMolSet_CompModules_get, _molset.HaMolSet_CompModules_set)

    def AnnounceGeomChange(self):
        return _molset.HaMolSet_AnnounceGeomChange(self)

    def RefreshAllViews(self, lHint=0):
        return _molset.HaMolSet_RefreshAllViews(self, lHint)

    def GetActiveMolView(self, *args):
        return _molset.HaMolSet_GetActiveMolView(self, *args)
    __swig_setmethods__["mset_pview"] = _molset.HaMolSet_mset_pview_set
    __swig_getmethods__["mset_pview"] = _molset.HaMolSet_mset_pview_get
    if _newclass:
        mset_pview = _swig_property(_molset.HaMolSet_mset_pview_get, _molset.HaMolSet_mset_pview_set)
    __swig_setmethods__["canvas_wx"] = _molset.HaMolSet_canvas_wx_set
    __swig_getmethods__["canvas_wx"] = _molset.HaMolSet_canvas_wx_get
    if _newclass:
        canvas_wx = _swig_property(_molset.HaMolSet_canvas_wx_get, _molset.HaMolSet_canvas_wx_set)

    def AddObject3D(self, new_view_object):
        return _molset.HaMolSet_AddObject3D(self, new_view_object)

    def DeleteObject3D(self, *args):
        return _molset.HaMolSet_DeleteObject3D(self, *args)
    __swig_setmethods__["ViewObjects"] = _molset.HaMolSet_ViewObjects_set
    __swig_getmethods__["ViewObjects"] = _molset.HaMolSet_ViewObjects_get
    if _newclass:
        ViewObjects = _swig_property(_molset.HaMolSet_ViewObjects_get, _molset.HaMolSet_ViewObjects_set)

    def ClearPickedAtoms(self):
        return _molset.HaMolSet_ClearPickedAtoms(self)
    __swig_setmethods__["picked_atoms"] = _molset.HaMolSet_picked_atoms_set
    __swig_getmethods__["picked_atoms"] = _molset.HaMolSet_picked_atoms_get
    if _newclass:
        picked_atoms = _swig_property(_molset.HaMolSet_picked_atoms_get, _molset.HaMolSet_picked_atoms_set)
    __swig_setmethods__["info_str"] = _molset.HaMolSet_info_str_set
    __swig_getmethods__["info_str"] = _molset.HaMolSet_info_str_get
    if _newclass:
        info_str = _swig_property(_molset.HaMolSet_info_str_get, _molset.HaMolSet_info_str_set)

    def SetMortMol(self, mort_mol, ff_type):
        return _molset.HaMolSet_SetMortMol(self, mort_mol, ff_type)

    def SavePDBMort(self, fname):
        return _molset.HaMolSet_SavePDBMort(self, fname)

    def SaveSDFMort(self, fname):
        return _molset.HaMolSet_SaveSDFMort(self, fname)
HaMolSet_swigregister = _molset.HaMolSet_swigregister
HaMolSet_swigregister(HaMolSet)

class AtomIteratorMolSet(AtomIterator):
    __swig_setmethods__ = {}
    for _s in [AtomIterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomIteratorMolSet, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomIterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomIteratorMolSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_AtomIteratorMolSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomIteratorMolSet
    __del__ = lambda self: None

    def clone(self):
        return _molset.AtomIteratorMolSet_clone(self)

    def GetFirstAtom(self):
        return _molset.AtomIteratorMolSet_GetFirstAtom(self)

    def GetNextAtom(self):
        return _molset.AtomIteratorMolSet_GetNextAtom(self)

    def __ref__(self):
        return _molset.AtomIteratorMolSet___ref__(self)

    def next(self):
        return _molset.AtomIteratorMolSet_next(self)

    def __iter__(self):
        return _molset.AtomIteratorMolSet___iter__(self)
AtomIteratorMolSet_swigregister = _molset.AtomIteratorMolSet_swigregister
AtomIteratorMolSet_swigregister(AtomIteratorMolSet)

class AtomIteratorMolSet_const(AtomIterator_const):
    __swig_setmethods__ = {}
    for _s in [AtomIterator_const]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomIteratorMolSet_const, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomIterator_const]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomIteratorMolSet_const, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_AtomIteratorMolSet_const(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomIteratorMolSet_const
    __del__ = lambda self: None

    def clone(self):
        return _molset.AtomIteratorMolSet_const_clone(self)

    def GetFirstAtom(self):
        return _molset.AtomIteratorMolSet_const_GetFirstAtom(self)

    def GetNextAtom(self):
        return _molset.AtomIteratorMolSet_const_GetNextAtom(self)
AtomIteratorMolSet_const_swigregister = _molset.AtomIteratorMolSet_const_swigregister
AtomIteratorMolSet_const_swigregister(AtomIteratorMolSet_const)

class ResidueIteratorMolSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResidueIteratorMolSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResidueIteratorMolSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_ResidueIteratorMolSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ResidueIteratorMolSet
    __del__ = lambda self: None

    def GetFirstRes(self):
        return _molset.ResidueIteratorMolSet_GetFirstRes(self)

    def GetNextRes(self):
        return _molset.ResidueIteratorMolSet_GetNextRes(self)

    def GetCurrRes(self):
        return _molset.ResidueIteratorMolSet_GetCurrRes(self)

    def next(self):
        return _molset.ResidueIteratorMolSet_next(self)

    def __next__(self):
        return _molset.ResidueIteratorMolSet___next__(self)

    def __iter__(self):
        return _molset.ResidueIteratorMolSet___iter__(self)
ResidueIteratorMolSet_swigregister = _molset.ResidueIteratorMolSet_swigregister
ResidueIteratorMolSet_swigregister(ResidueIteratorMolSet)

class ResidueIteratorMolSet_const(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResidueIteratorMolSet_const, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResidueIteratorMolSet_const, name)
    __repr__ = _swig_repr

    def __init__(self, new_pmset):
        this = _molset.new_ResidueIteratorMolSet_const(new_pmset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ResidueIteratorMolSet_const
    __del__ = lambda self: None

    def GetFirstRes(self):
        return _molset.ResidueIteratorMolSet_const_GetFirstRes(self)

    def GetNextRes(self):
        return _molset.ResidueIteratorMolSet_const_GetNextRes(self)
ResidueIteratorMolSet_const_swigregister = _molset.ResidueIteratorMolSet_const_swigregister
ResidueIteratorMolSet_const_swigregister(ResidueIteratorMolSet_const)

class ChainIteratorMolSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainIteratorMolSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChainIteratorMolSet, name)
    __repr__ = _swig_repr

    def __init__(self, new_pmset):
        this = _molset.new_ChainIteratorMolSet(new_pmset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ChainIteratorMolSet
    __del__ = lambda self: None

    def GetFirstChain(self):
        return _molset.ChainIteratorMolSet_GetFirstChain(self)

    def GetNextChain(self):
        return _molset.ChainIteratorMolSet_GetNextChain(self)
ChainIteratorMolSet_swigregister = _molset.ChainIteratorMolSet_swigregister
ChainIteratorMolSet_swigregister(ChainIteratorMolSet)

class ChemGroupIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChemGroupIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChemGroupIterator, name)
    __repr__ = _swig_repr

    def __init__(self, new_pmset):
        this = _molset.new_ChemGroupIterator(new_pmset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ChemGroupIterator
    __del__ = lambda self: None

    def GetFirst(self):
        return _molset.ChemGroupIterator_GetFirst(self)

    def GetNext(self):
        return _molset.ChemGroupIterator_GetNext(self)
ChemGroupIterator_swigregister = _molset.ChemGroupIterator_swigregister
ChemGroupIterator_swigregister(ChemGroupIterator)

class AtomGroupIteratorMolSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomGroupIteratorMolSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtomGroupIteratorMolSet, name)
    __repr__ = _swig_repr

    def __init__(self, new_pmset):
        this = _molset.new_AtomGroupIteratorMolSet(new_pmset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomGroupIteratorMolSet
    __del__ = lambda self: None

    def GetFirst(self):
        return _molset.AtomGroupIteratorMolSet_GetFirst(self)

    def GetNext(self):
        return _molset.AtomGroupIteratorMolSet_GetNext(self)
AtomGroupIteratorMolSet_swigregister = _molset.AtomGroupIteratorMolSet_swigregister
AtomGroupIteratorMolSet_swigregister(AtomGroupIteratorMolSet)

class AtomGroupIteratorMolSet_const(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomGroupIteratorMolSet_const, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtomGroupIteratorMolSet_const, name)
    __repr__ = _swig_repr

    def __init__(self, new_pmset):
        this = _molset.new_AtomGroupIteratorMolSet_const(new_pmset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomGroupIteratorMolSet_const
    __del__ = lambda self: None

    def GetFirst(self):
        return _molset.AtomGroupIteratorMolSet_const_GetFirst(self)

    def GetNext(self):
        return _molset.AtomGroupIteratorMolSet_const_GetNext(self)
AtomGroupIteratorMolSet_const_swigregister = _molset.AtomGroupIteratorMolSet_const_swigregister
AtomGroupIteratorMolSet_const_swigregister(AtomGroupIteratorMolSet_const)

class BondIteratorMolSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BondIteratorMolSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BondIteratorMolSet, name)
    __repr__ = _swig_repr

    def __init__(self, new_pmset):
        this = _molset.new_BondIteratorMolSet(new_pmset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_BondIteratorMolSet
    __del__ = lambda self: None

    def GetFirstBond(self):
        return _molset.BondIteratorMolSet_GetFirstBond(self)

    def GetNextBond(self):
        return _molset.BondIteratorMolSet_GetNextBond(self)
BondIteratorMolSet_swigregister = _molset.BondIteratorMolSet_swigregister
BondIteratorMolSet_swigregister(BondIteratorMolSet)

class HBondIteratorMolSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HBondIteratorMolSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HBondIteratorMolSet, name)
    __repr__ = _swig_repr

    def __init__(self, new_pmset):
        this = _molset.new_HBondIteratorMolSet(new_pmset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HBondIteratorMolSet
    __del__ = lambda self: None

    def GetFirstBond(self):
        return _molset.HBondIteratorMolSet_GetFirstBond(self)

    def GetNextBond(self):
        return _molset.HBondIteratorMolSet_GetNextBond(self)
HBondIteratorMolSet_swigregister = _molset.HBondIteratorMolSet_swigregister
HBondIteratorMolSet_swigregister(HBondIteratorMolSet)

class FragmentCreatePars(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FragmentCreatePars, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FragmentCreatePars, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_FragmentCreatePars()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["add_hydr"] = _molset.FragmentCreatePars_add_hydr_set
    __swig_getmethods__["add_hydr"] = _molset.FragmentCreatePars_add_hydr_get
    if _newclass:
        add_hydr = _swig_property(_molset.FragmentCreatePars_add_hydr_get, _molset.FragmentCreatePars_add_hydr_set)
    __swig_destroy__ = _molset.delete_FragmentCreatePars
    __del__ = lambda self: None
FragmentCreatePars_swigregister = _molset.FragmentCreatePars_swigregister
FragmentCreatePars_swigregister(FragmentCreatePars)

class PyAccMolSetProp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyAccMolSetProp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyAccMolSetProp, name)
    __repr__ = _swig_repr

    def __init__(self, new_pmset):
        this = _molset.new_PyAccMolSetProp(new_pmset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_PyAccMolSetProp
    __del__ = lambda self: None
    __swig_setmethods__["pmset"] = _molset.PyAccMolSetProp_pmset_set
    __swig_getmethods__["pmset"] = _molset.PyAccMolSetProp_pmset_get
    if _newclass:
        pmset = _swig_property(_molset.PyAccMolSetProp_pmset_get, _molset.PyAccMolSetProp_pmset_set)

    def GetAtomsSerNoAsVec(self):
        return _molset.PyAccMolSetProp_GetAtomsSerNoAsVec(self)

    def GetResidueSerNoAsVec(self):
        return _molset.PyAccMolSetProp_GetResidueSerNoAsVec(self)

    def GetAtomsChargeAsVec(self):
        return _molset.PyAccMolSetProp_GetAtomsChargeAsVec(self)

    def GetAtomsRadiusAsVec(self):
        return _molset.PyAccMolSetProp_GetAtomsRadiusAsVec(self)

    def GetAtomsNameAsVec(self):
        return _molset.PyAccMolSetProp_GetAtomsNameAsVec(self)

    def GetResidueNameAsVec(self):
        return _molset.PyAccMolSetProp_GetResidueNameAsVec(self)

    def GetAtomsCoorXAsVec(self):
        return _molset.PyAccMolSetProp_GetAtomsCoorXAsVec(self)

    def GetAtomsCoorYAsVec(self):
        return _molset.PyAccMolSetProp_GetAtomsCoorYAsVec(self)

    def GetAtomsCoorZAsVec(self):
        return _molset.PyAccMolSetProp_GetAtomsCoorZAsVec(self)

    def GetAtomsIonExcludedRadiusAsVec(self, Rion):
        return _molset.PyAccMolSetProp_GetAtomsIonExcludedRadiusAsVec(self, Rion)

    def WriteAtomParamFileForPNP(self, filename, ResidueSerNo, ResidueName, AtomsSerNo, AtomsName, AtomsCoorX, AtomsCoorY, AtomsCoorZ, AtomsCharge, AtomsRadius, AtomsIER1, AtomsIER2, SR_A_K, SR_N_K, SR_A_Cl, SR_N_Cl):
        return _molset.PyAccMolSetProp_WriteAtomParamFileForPNP(self, filename, ResidueSerNo, ResidueName, AtomsSerNo, AtomsName, AtomsCoorX, AtomsCoorY, AtomsCoorZ, AtomsCharge, AtomsRadius, AtomsIER1, AtomsIER2, SR_A_K, SR_N_K, SR_A_Cl, SR_N_Cl)
PyAccMolSetProp_swigregister = _molset.PyAccMolSetProp_swigregister
PyAccMolSetProp_swigregister(PyAccMolSetProp)


def GetCurMolSet():
    return _molset.GetCurMolSet()
GetCurMolSet = _molset.GetCurMolSet

def SetCurMolSet(pmset):
    return _molset.SetCurMolSet(pmset)
SetCurMolSet = _molset.SetCurMolSet
class ComputerAccount(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComputerAccount, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComputerAccount, name)
    __repr__ = _swig_repr
    __swig_setmethods__["acc_id"] = _molset.ComputerAccount_acc_id_set
    __swig_getmethods__["acc_id"] = _molset.ComputerAccount_acc_id_get
    if _newclass:
        acc_id = _swig_property(_molset.ComputerAccount_acc_id_get, _molset.ComputerAccount_acc_id_set)
    __swig_setmethods__["login_str"] = _molset.ComputerAccount_login_str_set
    __swig_getmethods__["login_str"] = _molset.ComputerAccount_login_str_get
    if _newclass:
        login_str = _swig_property(_molset.ComputerAccount_login_str_get, _molset.ComputerAccount_login_str_set)
    __swig_setmethods__["interm_acc_ID"] = _molset.ComputerAccount_interm_acc_ID_set
    __swig_getmethods__["interm_acc_ID"] = _molset.ComputerAccount_interm_acc_ID_get
    if _newclass:
        interm_acc_ID = _swig_property(_molset.ComputerAccount_interm_acc_ID_get, _molset.ComputerAccount_interm_acc_ID_set)

    def __init__(self):
        this = _molset.new_ComputerAccount()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ComputerAccount
    __del__ = lambda self: None
ComputerAccount_swigregister = _molset.ComputerAccount_swigregister
ComputerAccount_swigregister(ComputerAccount)

class HarlemApp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HarlemApp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HarlemApp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HarlemApp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HarlemApp
    __del__ = lambda self: None

    def Python_AppInit(self):
        return _molset.HarlemApp_Python_AppInit(self)

    def ProcessOptions(self):
        return _molset.HarlemApp_ProcessOptions(self)

    def InitFirst(self):
        return _molset.HarlemApp_InitFirst(self)

    def InitLast(self):
        return _molset.HarlemApp_InitLast(self)

    def InitParallel(self):
        return _molset.HarlemApp_InitParallel(self)

    def InitXML(self):
        return _molset.HarlemApp_InitXML(self)

    def InitRemoteComp(self):
        return _molset.HarlemApp_InitRemoteComp(self)

    def InitCommand(self):
        return _molset.HarlemApp_InitCommand(self)

    def FinalizeXML(self):
        return _molset.HarlemApp_FinalizeXML(self)

    def RedirectIOLogWindow(self):
        return _molset.HarlemApp_RedirectIOLogWindow(self)

    def RedirectIOLogFile(self, *args):
        return _molset.HarlemApp_RedirectIOLogFile(self, *args)

    def CreateCommandWindow(self):
        return _molset.HarlemApp_CreateCommandWindow(self)

    def ExecuteCommand(self):
        return _molset.HarlemApp_ExecuteCommand(self)

    def RasMolCmd(self, cmd):
        return _molset.HarlemApp_RasMolCmd(self, cmd)

    def ExecRasMolScript(self, file_name):
        return _molset.HarlemApp_ExecRasMolScript(self, file_name)

    def ExecuteScriptFromFile(self, script_fname):
        return _molset.HarlemApp_ExecuteScriptFromFile(self, script_fname)

    def ExecuteScriptInString(self, script_str):
        return _molset.HarlemApp_ExecuteScriptInString(self, script_str)
    if _newclass:
        RunExternalProgram = staticmethod(_molset.HarlemApp_RunExternalProgram)
    else:
        RunExternalProgram = _molset.HarlemApp_RunExternalProgram
    if _newclass:
        CheckProcIsActive = staticmethod(_molset.HarlemApp_CheckProcIsActive)
    else:
        CheckProcIsActive = _molset.HarlemApp_CheckProcIsActive
    if _newclass:
        KillProc = staticmethod(_molset.HarlemApp_KillProc)
    else:
        KillProc = _molset.HarlemApp_KillProc
    if _newclass:
        SwitchThread = staticmethod(_molset.HarlemApp_SwitchThread)
    else:
        SwitchThread = _molset.HarlemApp_SwitchThread
    if _newclass:
        SleepThread = staticmethod(_molset.HarlemApp_SleepThread)
    else:
        SleepThread = _molset.HarlemApp_SleepThread
    __swig_setmethods__["comp_accounts"] = _molset.HarlemApp_comp_accounts_set
    __swig_getmethods__["comp_accounts"] = _molset.HarlemApp_comp_accounts_get
    if _newclass:
        comp_accounts = _swig_property(_molset.HarlemApp_comp_accounts_get, _molset.HarlemApp_comp_accounts_set)

    def GetAccountByID(self, acc_id):
        return _molset.HarlemApp_GetAccountByID(self, acc_id)

    def ShowAccountsLoad(self):
        return _molset.HarlemApp_ShowAccountsLoad(self)

    def ExecuteRemoteCmd(self, pacc, cmd, prog_output, get_prog_output):
        return _molset.HarlemApp_ExecuteRemoteCmd(self, pacc, cmd, prog_output, get_prog_output)

    def Exit(self):
        return _molset.HarlemApp_Exit(self)

    def LoadInitFile(self):
        return _molset.HarlemApp_LoadInitFile(self)

    def StartWait(self):
        return _molset.HarlemApp_StartWait(self)

    def EndWait(self):
        return _molset.HarlemApp_EndWait(self)

    def GetMolSetByName(self, name):
        return _molset.HarlemApp_GetMolSetByName(self, name)

    def AddMolSet(self, pmset):
        return _molset.HarlemApp_AddMolSet(self, pmset)

    def DeleteMolSet(self, pmset):
        return _molset.HarlemApp_DeleteMolSet(self, pmset)

    def GetAtomByRef(self, at_ref):
        return _molset.HarlemApp_GetAtomByRef(self, at_ref)
    __swig_setmethods__["gui_mode"] = _molset.HarlemApp_gui_mode_set
    __swig_getmethods__["gui_mode"] = _molset.HarlemApp_gui_mode_get
    if _newclass:
        gui_mode = _swig_property(_molset.HarlemApp_gui_mode_get, _molset.HarlemApp_gui_mode_set)
    __swig_setmethods__["cmd_prompt_mode"] = _molset.HarlemApp_cmd_prompt_mode_set
    __swig_getmethods__["cmd_prompt_mode"] = _molset.HarlemApp_cmd_prompt_mode_get
    if _newclass:
        cmd_prompt_mode = _swig_property(_molset.HarlemApp_cmd_prompt_mode_get, _molset.HarlemApp_cmd_prompt_mode_set)
    __swig_setmethods__["mpi_py_script"] = _molset.HarlemApp_mpi_py_script_set
    __swig_getmethods__["mpi_py_script"] = _molset.HarlemApp_mpi_py_script_get
    if _newclass:
        mpi_py_script = _swig_property(_molset.HarlemApp_mpi_py_script_get, _molset.HarlemApp_mpi_py_script_set)
    __swig_setmethods__["argc_loc"] = _molset.HarlemApp_argc_loc_set
    __swig_getmethods__["argc_loc"] = _molset.HarlemApp_argc_loc_get
    if _newclass:
        argc_loc = _swig_property(_molset.HarlemApp_argc_loc_get, _molset.HarlemApp_argc_loc_set)
    __swig_setmethods__["argv_loc"] = _molset.HarlemApp_argv_loc_set
    __swig_getmethods__["argv_loc"] = _molset.HarlemApp_argv_loc_get
    if _newclass:
        argv_loc = _swig_property(_molset.HarlemApp_argv_loc_get, _molset.HarlemApp_argv_loc_set)
    __swig_setmethods__["FormatOpt"] = _molset.HarlemApp_FormatOpt_set
    __swig_getmethods__["FormatOpt"] = _molset.HarlemApp_FormatOpt_get
    if _newclass:
        FormatOpt = _swig_property(_molset.HarlemApp_FormatOpt_get, _molset.HarlemApp_FormatOpt_set)
    __swig_setmethods__["finp_name"] = _molset.HarlemApp_finp_name_set
    __swig_getmethods__["finp_name"] = _molset.HarlemApp_finp_name_get
    if _newclass:
        finp_name = _swig_property(_molset.HarlemApp_finp_name_get, _molset.HarlemApp_finp_name_set)
    __swig_setmethods__["script_name"] = _molset.HarlemApp_script_name_set
    __swig_getmethods__["script_name"] = _molset.HarlemApp_script_name_get
    if _newclass:
        script_name = _swig_property(_molset.HarlemApp_script_name_get, _molset.HarlemApp_script_name_set)
    __swig_setmethods__["script_str"] = _molset.HarlemApp_script_str_set
    __swig_getmethods__["script_str"] = _molset.HarlemApp_script_str_get
    if _newclass:
        script_str = _swig_property(_molset.HarlemApp_script_str_get, _molset.HarlemApp_script_str_set)
    __swig_setmethods__["cmd_pr"] = _molset.HarlemApp_cmd_pr_set
    __swig_getmethods__["cmd_pr"] = _molset.HarlemApp_cmd_pr_get
    if _newclass:
        cmd_pr = _swig_property(_molset.HarlemApp_cmd_pr_get, _molset.HarlemApp_cmd_pr_set)
    __swig_setmethods__["only_rasmol_command"] = _molset.HarlemApp_only_rasmol_command_set
    __swig_getmethods__["only_rasmol_command"] = _molset.HarlemApp_only_rasmol_command_get
    if _newclass:
        only_rasmol_command = _swig_property(_molset.HarlemApp_only_rasmol_command_get, _molset.HarlemApp_only_rasmol_command_set)
    __swig_setmethods__["FileFormat"] = _molset.HarlemApp_FileFormat_set
    __swig_getmethods__["FileFormat"] = _molset.HarlemApp_FileFormat_get
    if _newclass:
        FileFormat = _swig_property(_molset.HarlemApp_FileFormat_get, _molset.HarlemApp_FileFormat_set)
    __swig_setmethods__["harlem_home_dir"] = _molset.HarlemApp_harlem_home_dir_set
    __swig_getmethods__["harlem_home_dir"] = _molset.HarlemApp_harlem_home_dir_get
    if _newclass:
        harlem_home_dir = _swig_property(_molset.HarlemApp_harlem_home_dir_get, _molset.HarlemApp_harlem_home_dir_set)
    __swig_setmethods__["res_db_dir"] = _molset.HarlemApp_res_db_dir_set
    __swig_getmethods__["res_db_dir"] = _molset.HarlemApp_res_db_dir_get
    if _newclass:
        res_db_dir = _swig_property(_molset.HarlemApp_res_db_dir_get, _molset.HarlemApp_res_db_dir_set)
    __swig_setmethods__["script_dir"] = _molset.HarlemApp_script_dir_set
    __swig_getmethods__["script_dir"] = _molset.HarlemApp_script_dir_get
    if _newclass:
        script_dir = _swig_property(_molset.HarlemApp_script_dir_get, _molset.HarlemApp_script_dir_set)
    __swig_setmethods__["basis_dir"] = _molset.HarlemApp_basis_dir_set
    __swig_getmethods__["basis_dir"] = _molset.HarlemApp_basis_dir_get
    if _newclass:
        basis_dir = _swig_property(_molset.HarlemApp_basis_dir_get, _molset.HarlemApp_basis_dir_set)
    __swig_setmethods__["word_editor"] = _molset.HarlemApp_word_editor_set
    __swig_getmethods__["word_editor"] = _molset.HarlemApp_word_editor_get
    if _newclass:
        word_editor = _swig_property(_molset.HarlemApp_word_editor_get, _molset.HarlemApp_word_editor_set)
    __swig_setmethods__["manual_main_page"] = _molset.HarlemApp_manual_main_page_set
    __swig_getmethods__["manual_main_page"] = _molset.HarlemApp_manual_main_page_get
    if _newclass:
        manual_main_page = _swig_property(_molset.HarlemApp_manual_main_page_get, _molset.HarlemApp_manual_main_page_set)
    __swig_setmethods__["html_browser"] = _molset.HarlemApp_html_browser_set
    __swig_getmethods__["html_browser"] = _molset.HarlemApp_html_browser_get
    if _newclass:
        html_browser = _swig_property(_molset.HarlemApp_html_browser_get, _molset.HarlemApp_html_browser_set)
    __swig_setmethods__["mpi_driver"] = _molset.HarlemApp_mpi_driver_set
    __swig_getmethods__["mpi_driver"] = _molset.HarlemApp_mpi_driver_get
    if _newclass:
        mpi_driver = _swig_property(_molset.HarlemApp_mpi_driver_get, _molset.HarlemApp_mpi_driver_set)
    __swig_setmethods__["python_thread"] = _molset.HarlemApp_python_thread_set
    __swig_getmethods__["python_thread"] = _molset.HarlemApp_python_thread_get
    if _newclass:
        python_thread = _swig_property(_molset.HarlemApp_python_thread_get, _molset.HarlemApp_python_thread_set)
    __swig_setmethods__["file_log"] = _molset.HarlemApp_file_log_set
    __swig_getmethods__["file_log"] = _molset.HarlemApp_file_log_get
    if _newclass:
        file_log = _swig_property(_molset.HarlemApp_file_log_get, _molset.HarlemApp_file_log_set)
    __swig_setmethods__["molset_vec"] = _molset.HarlemApp_molset_vec_set
    __swig_getmethods__["molset_vec"] = _molset.HarlemApp_molset_vec_get
    if _newclass:
        molset_vec = _swig_property(_molset.HarlemApp_molset_vec_get, _molset.HarlemApp_molset_vec_set)
HarlemApp_swigregister = _molset.HarlemApp_swigregister
HarlemApp_swigregister(HarlemApp)

def HarlemApp_RunExternalProgram(rmode, prog_name, prog_args, prog_output, get_prog_output=0):
    return _molset.HarlemApp_RunExternalProgram(rmode, prog_name, prog_args, prog_output, get_prog_output)
HarlemApp_RunExternalProgram = _molset.HarlemApp_RunExternalProgram

def HarlemApp_CheckProcIsActive(proc_id):
    return _molset.HarlemApp_CheckProcIsActive(proc_id)
HarlemApp_CheckProcIsActive = _molset.HarlemApp_CheckProcIsActive

def HarlemApp_KillProc(proc_id):
    return _molset.HarlemApp_KillProc(proc_id)
HarlemApp_KillProc = _molset.HarlemApp_KillProc

def HarlemApp_SwitchThread():
    return _molset.HarlemApp_SwitchThread()
HarlemApp_SwitchThread = _molset.HarlemApp_SwitchThread

def HarlemApp_SleepThread(ms_delay):
    return _molset.HarlemApp_SleepThread(ms_delay)
HarlemApp_SleepThread = _molset.HarlemApp_SleepThread


def StartHarlemApp():
    return _molset.StartHarlemApp()
StartHarlemApp = _molset.StartHarlemApp
class HaMPI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaMPI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaMPI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaMPI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaMPI
    __del__ = lambda self: None

    def Listen(self):
        return _molset.HaMPI_Listen(self)

    def SendXmlMsgAllProc(self, msg):
        return _molset.HaMPI_SendXmlMsgAllProc(self, msg)

    def SendKillAppMsgAllProc(self):
        return _molset.HaMPI_SendKillAppMsgAllProc(self)

    def ExecuteCommandProcArray(self, proc_array, cmd):
        return _molset.HaMPI_ExecuteCommandProcArray(self, proc_array, cmd)

    def ExecuteCommandAllProc(self, cmd):
        return _molset.HaMPI_ExecuteCommandAllProc(self, cmd)
    __swig_setmethods__["myrank"] = _molset.HaMPI_myrank_set
    __swig_getmethods__["myrank"] = _molset.HaMPI_myrank_get
    if _newclass:
        myrank = _swig_property(_molset.HaMPI_myrank_get, _molset.HaMPI_myrank_set)
    __swig_setmethods__["nprocs"] = _molset.HaMPI_nprocs_set
    __swig_getmethods__["nprocs"] = _molset.HaMPI_nprocs_get
    if _newclass:
        nprocs = _swig_property(_molset.HaMPI_nprocs_get, _molset.HaMPI_nprocs_set)
    __swig_setmethods__["world_group"] = _molset.HaMPI_world_group_set
    __swig_getmethods__["world_group"] = _molset.HaMPI_world_group_get
    if _newclass:
        world_group = _swig_property(_molset.HaMPI_world_group_get, _molset.HaMPI_world_group_set)
    BASIC_SIGNAL_DIM = _molset.HaMPI_BASIC_SIGNAL_DIM
    KILL_APP_SIGNAL = _molset.HaMPI_KILL_APP_SIGNAL
    XML_SIGNAL = _molset.HaMPI_XML_SIGNAL
    WX_EVENT_SIGNAL = _molset.HaMPI_WX_EVENT_SIGNAL
    __swig_setmethods__["basic_signal"] = _molset.HaMPI_basic_signal_set
    __swig_getmethods__["basic_signal"] = _molset.HaMPI_basic_signal_get
    if _newclass:
        basic_signal = _swig_property(_molset.HaMPI_basic_signal_get, _molset.HaMPI_basic_signal_set)
    __swig_setmethods__["msg_buffer"] = _molset.HaMPI_msg_buffer_set
    __swig_getmethods__["msg_buffer"] = _molset.HaMPI_msg_buffer_get
    if _newclass:
        msg_buffer = _swig_property(_molset.HaMPI_msg_buffer_get, _molset.HaMPI_msg_buffer_set)
    if _newclass:
        BuildXMLwxCmdEventBasic = staticmethod(_molset.HaMPI_BuildXMLwxCmdEventBasic)
    else:
        BuildXMLwxCmdEventBasic = _molset.HaMPI_BuildXMLwxCmdEventBasic
HaMPI_swigregister = _molset.HaMPI_swigregister
HaMPI_swigregister(HaMPI)

def HaMPI_BuildXMLwxCmdEventBasic(type, id, add_header=True):
    return _molset.HaMPI_BuildXMLwxCmdEventBasic(type, id, add_header)
HaMPI_BuildXMLwxCmdEventBasic = _molset.HaMPI_BuildXMLwxCmdEventBasic

MAXRAD = _molset.MAXRAD
MAXTABLE = _molset.MAXTABLE
class Knot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Knot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Knot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["px"] = _molset.Knot_px_set
    __swig_getmethods__["px"] = _molset.Knot_px_get
    if _newclass:
        px = _swig_property(_molset.Knot_px_get, _molset.Knot_px_set)
    __swig_setmethods__["py"] = _molset.Knot_py_set
    __swig_getmethods__["py"] = _molset.Knot_py_get
    if _newclass:
        py = _swig_property(_molset.Knot_py_get, _molset.Knot_py_set)
    __swig_setmethods__["pz"] = _molset.Knot_pz_set
    __swig_getmethods__["pz"] = _molset.Knot_pz_get
    if _newclass:
        pz = _swig_property(_molset.Knot_pz_get, _molset.Knot_pz_set)
    __swig_setmethods__["tx"] = _molset.Knot_tx_set
    __swig_getmethods__["tx"] = _molset.Knot_tx_get
    if _newclass:
        tx = _swig_property(_molset.Knot_tx_get, _molset.Knot_tx_set)
    __swig_setmethods__["ty"] = _molset.Knot_ty_set
    __swig_getmethods__["ty"] = _molset.Knot_ty_get
    if _newclass:
        ty = _swig_property(_molset.Knot_ty_get, _molset.Knot_ty_set)
    __swig_setmethods__["tz"] = _molset.Knot_tz_set
    __swig_getmethods__["tz"] = _molset.Knot_tz_get
    if _newclass:
        tz = _swig_property(_molset.Knot_tz_get, _molset.Knot_tz_set)
    __swig_setmethods__["hnx"] = _molset.Knot_hnx_set
    __swig_getmethods__["hnx"] = _molset.Knot_hnx_get
    if _newclass:
        hnx = _swig_property(_molset.Knot_hnx_get, _molset.Knot_hnx_set)
    __swig_setmethods__["hny"] = _molset.Knot_hny_set
    __swig_getmethods__["hny"] = _molset.Knot_hny_get
    if _newclass:
        hny = _swig_property(_molset.Knot_hny_get, _molset.Knot_hny_set)
    __swig_setmethods__["hnz"] = _molset.Knot_hnz_set
    __swig_getmethods__["hnz"] = _molset.Knot_hnz_get
    if _newclass:
        hnz = _swig_property(_molset.Knot_hnz_get, _molset.Knot_hnz_set)
    __swig_setmethods__["vnx"] = _molset.Knot_vnx_set
    __swig_getmethods__["vnx"] = _molset.Knot_vnx_get
    if _newclass:
        vnx = _swig_property(_molset.Knot_vnx_get, _molset.Knot_vnx_set)
    __swig_setmethods__["vny"] = _molset.Knot_vny_set
    __swig_getmethods__["vny"] = _molset.Knot_vny_get
    if _newclass:
        vny = _swig_property(_molset.Knot_vny_get, _molset.Knot_vny_set)
    __swig_setmethods__["vnz"] = _molset.Knot_vnz_set
    __swig_getmethods__["vnz"] = _molset.Knot_vnz_get
    if _newclass:
        vnz = _swig_property(_molset.Knot_vnz_get, _molset.Knot_vnz_set)
    __swig_setmethods__["dx"] = _molset.Knot_dx_set
    __swig_getmethods__["dx"] = _molset.Knot_dx_get
    if _newclass:
        dx = _swig_property(_molset.Knot_dx_get, _molset.Knot_dx_set)
    __swig_setmethods__["dy"] = _molset.Knot_dy_set
    __swig_getmethods__["dy"] = _molset.Knot_dy_get
    if _newclass:
        dy = _swig_property(_molset.Knot_dy_get, _molset.Knot_dy_set)
    __swig_setmethods__["dz"] = _molset.Knot_dz_set
    __swig_getmethods__["dz"] = _molset.Knot_dz_get
    if _newclass:
        dz = _swig_property(_molset.Knot_dz_get, _molset.Knot_dz_set)
    __swig_setmethods__["wx"] = _molset.Knot_wx_set
    __swig_getmethods__["wx"] = _molset.Knot_wx_get
    if _newclass:
        wx = _swig_property(_molset.Knot_wx_get, _molset.Knot_wx_set)
    __swig_setmethods__["wy"] = _molset.Knot_wy_set
    __swig_getmethods__["wy"] = _molset.Knot_wy_get
    if _newclass:
        wy = _swig_property(_molset.Knot_wy_get, _molset.Knot_wy_set)
    __swig_setmethods__["wz"] = _molset.Knot_wz_set
    __swig_getmethods__["wz"] = _molset.Knot_wz_get
    if _newclass:
        wz = _swig_property(_molset.Knot_wz_get, _molset.Knot_wz_set)
    __swig_setmethods__["hinten"] = _molset.Knot_hinten_set
    __swig_getmethods__["hinten"] = _molset.Knot_hinten_get
    if _newclass:
        hinten = _swig_property(_molset.Knot_hinten_get, _molset.Knot_hinten_set)
    __swig_setmethods__["vinten"] = _molset.Knot_vinten_set
    __swig_getmethods__["vinten"] = _molset.Knot_vinten_get
    if _newclass:
        vinten = _swig_property(_molset.Knot_vinten_get, _molset.Knot_vinten_set)
    __swig_setmethods__["hsize"] = _molset.Knot_hsize_set
    __swig_getmethods__["hsize"] = _molset.Knot_hsize_get
    if _newclass:
        hsize = _swig_property(_molset.Knot_hsize_get, _molset.Knot_hsize_set)
    __swig_setmethods__["vsize"] = _molset.Knot_vsize_set
    __swig_getmethods__["vsize"] = _molset.Knot_vsize_get
    if _newclass:
        vsize = _swig_property(_molset.Knot_vsize_get, _molset.Knot_vsize_set)
    __swig_setmethods__["wide"] = _molset.Knot_wide_set
    __swig_getmethods__["wide"] = _molset.Knot_wide_get
    if _newclass:
        wide = _swig_property(_molset.Knot_wide_get, _molset.Knot_wide_set)

    def __init__(self):
        this = _molset.new_Knot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_Knot
    __del__ = lambda self: None
Knot_swigregister = _molset.Knot_swigregister
Knot_swigregister(Knot)

MAXVERT = _molset.MAXVERT
class Edge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Edge, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dx"] = _molset.Edge_dx_set
    __swig_getmethods__["dx"] = _molset.Edge_dx_get
    if _newclass:
        dx = _swig_property(_molset.Edge_dx_get, _molset.Edge_dx_set)
    __swig_setmethods__["dz"] = _molset.Edge_dz_set
    __swig_getmethods__["dz"] = _molset.Edge_dz_get
    if _newclass:
        dz = _swig_property(_molset.Edge_dz_get, _molset.Edge_dz_set)
    __swig_setmethods__["dr"] = _molset.Edge_dr_set
    __swig_getmethods__["dr"] = _molset.Edge_dr_get
    if _newclass:
        dr = _swig_property(_molset.Edge_dr_get, _molset.Edge_dr_set)
    __swig_setmethods__["dg"] = _molset.Edge_dg_set
    __swig_getmethods__["dg"] = _molset.Edge_dg_get
    if _newclass:
        dg = _swig_property(_molset.Edge_dg_get, _molset.Edge_dg_set)
    __swig_setmethods__["db"] = _molset.Edge_db_set
    __swig_getmethods__["db"] = _molset.Edge_db_get
    if _newclass:
        db = _swig_property(_molset.Edge_db_get, _molset.Edge_db_set)
    __swig_setmethods__["x"] = _molset.Edge_x_set
    __swig_getmethods__["x"] = _molset.Edge_x_get
    if _newclass:
        x = _swig_property(_molset.Edge_x_get, _molset.Edge_x_set)
    __swig_setmethods__["z"] = _molset.Edge_z_set
    __swig_getmethods__["z"] = _molset.Edge_z_get
    if _newclass:
        z = _swig_property(_molset.Edge_z_get, _molset.Edge_z_set)
    __swig_setmethods__["r"] = _molset.Edge_r_set
    __swig_getmethods__["r"] = _molset.Edge_r_get
    if _newclass:
        r = _swig_property(_molset.Edge_r_get, _molset.Edge_r_set)
    __swig_setmethods__["g"] = _molset.Edge_g_set
    __swig_getmethods__["g"] = _molset.Edge_g_get
    if _newclass:
        g = _swig_property(_molset.Edge_g_get, _molset.Edge_g_set)
    __swig_setmethods__["b"] = _molset.Edge_b_set
    __swig_getmethods__["b"] = _molset.Edge_b_get
    if _newclass:
        b = _swig_property(_molset.Edge_b_get, _molset.Edge_b_set)

    def __init__(self):
        this = _molset.new_Edge()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_Edge
    __del__ = lambda self: None
Edge_swigregister = _molset.Edge_swigregister
Edge_swigregister(Edge)

class Vert(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vert, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vert, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _molset.Vert_x_set
    __swig_getmethods__["x"] = _molset.Vert_x_get
    if _newclass:
        x = _swig_property(_molset.Vert_x_get, _molset.Vert_x_set)
    __swig_setmethods__["y"] = _molset.Vert_y_set
    __swig_getmethods__["y"] = _molset.Vert_y_get
    if _newclass:
        y = _swig_property(_molset.Vert_y_get, _molset.Vert_y_set)
    __swig_setmethods__["z"] = _molset.Vert_z_set
    __swig_getmethods__["z"] = _molset.Vert_z_get
    if _newclass:
        z = _swig_property(_molset.Vert_z_get, _molset.Vert_z_set)
    __swig_setmethods__["inten"] = _molset.Vert_inten_set
    __swig_getmethods__["inten"] = _molset.Vert_inten_get
    if _newclass:
        inten = _swig_property(_molset.Vert_inten_get, _molset.Vert_inten_set)

    def __init__(self):
        this = _molset.new_Vert()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_Vert
    __del__ = lambda self: None
Vert_swigregister = _molset.Vert_swigregister
Vert_swigregister(Vert)

class Poly(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Poly, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Poly, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v"] = _molset.Poly_v_set
    __swig_getmethods__["v"] = _molset.Poly_v_get
    if _newclass:
        v = _swig_property(_molset.Poly_v_get, _molset.Poly_v_set)
    __swig_setmethods__["count"] = _molset.Poly_count_set
    __swig_getmethods__["count"] = _molset.Poly_count_get
    if _newclass:
        count = _swig_property(_molset.Poly_count_get, _molset.Poly_count_set)

    def __init__(self):
        this = _molset.new_Poly()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_Poly
    __del__ = lambda self: None
Poly_swigregister = _molset.Poly_swigregister
Poly_swigregister(Poly)

class ArcEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArcEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArcEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dx"] = _molset.ArcEntry_dx_set
    __swig_getmethods__["dx"] = _molset.ArcEntry_dx_get
    if _newclass:
        dx = _swig_property(_molset.ArcEntry_dx_get, _molset.ArcEntry_dx_set)
    __swig_setmethods__["dy"] = _molset.ArcEntry_dy_set
    __swig_getmethods__["dy"] = _molset.ArcEntry_dy_get
    if _newclass:
        dy = _swig_property(_molset.ArcEntry_dy_get, _molset.ArcEntry_dy_set)
    __swig_setmethods__["dz"] = _molset.ArcEntry_dz_set
    __swig_getmethods__["dz"] = _molset.ArcEntry_dz_get
    if _newclass:
        dz = _swig_property(_molset.ArcEntry_dz_get, _molset.ArcEntry_dz_set)
    __swig_setmethods__["inten"] = _molset.ArcEntry_inten_set
    __swig_getmethods__["inten"] = _molset.ArcEntry_inten_get
    if _newclass:
        inten = _swig_property(_molset.ArcEntry_inten_get, _molset.ArcEntry_inten_set)
    __swig_setmethods__["offset"] = _molset.ArcEntry_offset_set
    __swig_getmethods__["offset"] = _molset.ArcEntry_offset_get
    if _newclass:
        offset = _swig_property(_molset.ArcEntry_offset_get, _molset.ArcEntry_offset_set)

    def __init__(self):
        this = _molset.new_ArcEntry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ArcEntry
    __del__ = lambda self: None
ArcEntry_swigregister = _molset.ArcEntry_swigregister
ArcEntry_swigregister(ArcEntry)

class ViewStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fbuf"] = _molset.ViewStruct_fbuf_set
    __swig_getmethods__["fbuf"] = _molset.ViewStruct_fbuf_get
    if _newclass:
        fbuf = _swig_property(_molset.ViewStruct_fbuf_get, _molset.ViewStruct_fbuf_set)
    __swig_setmethods__["dbuf"] = _molset.ViewStruct_dbuf_set
    __swig_getmethods__["dbuf"] = _molset.ViewStruct_dbuf_get
    if _newclass:
        dbuf = _swig_property(_molset.ViewStruct_dbuf_get, _molset.ViewStruct_dbuf_set)
    __swig_setmethods__["xmax"] = _molset.ViewStruct_xmax_set
    __swig_getmethods__["xmax"] = _molset.ViewStruct_xmax_get
    if _newclass:
        xmax = _swig_property(_molset.ViewStruct_xmax_get, _molset.ViewStruct_xmax_set)
    __swig_setmethods__["ymax"] = _molset.ViewStruct_ymax_set
    __swig_getmethods__["ymax"] = _molset.ViewStruct_ymax_get
    if _newclass:
        ymax = _swig_property(_molset.ViewStruct_ymax_get, _molset.ViewStruct_ymax_set)
    __swig_setmethods__["yskip"] = _molset.ViewStruct_yskip_set
    __swig_getmethods__["yskip"] = _molset.ViewStruct_yskip_get
    if _newclass:
        yskip = _swig_property(_molset.ViewStruct_yskip_get, _molset.ViewStruct_yskip_set)

    def __init__(self):
        this = _molset.new_ViewStruct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ViewStruct
    __del__ = lambda self: None
ViewStruct_swigregister = _molset.ViewStruct_swigregister
ViewStruct_swigregister(ViewStruct)

class HaColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_HaColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaColor
    __del__ = lambda self: None

    def __eq__(self, ref):
        return _molset.HaColor___eq__(self, ref)

    def SetColor(self, *args):
        return _molset.HaColor_SetColor(self, *args)
    if _newclass:
        ColorNameExist = staticmethod(_molset.HaColor_ColorNameExist)
    else:
        ColorNameExist = _molset.HaColor_ColorNameExist
    if _newclass:
        GetColorName = staticmethod(_molset.HaColor_GetColorName)
    else:
        GetColorName = _molset.HaColor_GetColorName
    if _newclass:
        GetColorVal = staticmethod(_molset.HaColor_GetColorVal)
    else:
        GetColorVal = _molset.HaColor_GetColorVal
    if _newclass:
        RegisterColor = staticmethod(_molset.HaColor_RegisterColor)
    else:
        RegisterColor = _molset.HaColor_RegisterColor
    if _newclass:
        GetPureColorByCIdx = staticmethod(_molset.HaColor_GetPureColorByCIdx)
    else:
        GetPureColorByCIdx = _molset.HaColor_GetPureColorByCIdx
    if _newclass:
        GetPureRGBbyCIdx = staticmethod(_molset.HaColor_GetPureRGBbyCIdx)
    else:
        GetPureRGBbyCIdx = _molset.HaColor_GetPureRGBbyCIdx
    if _newclass:
        GetRGBFromColVal = staticmethod(_molset.HaColor_GetRGBFromColVal)
    else:
        GetRGBFromColVal = _molset.HaColor_GetRGBFromColVal
    if _newclass:
        GetNumColors = staticmethod(_molset.HaColor_GetNumColors)
    else:
        GetNumColors = _molset.HaColor_GetNumColors
    if _newclass:
        RegisterColorName = staticmethod(_molset.HaColor_RegisterColorName)
    else:
        RegisterColorName = _molset.HaColor_RegisterColorName
    __swig_setmethods__["r"] = _molset.HaColor_r_set
    __swig_getmethods__["r"] = _molset.HaColor_r_get
    if _newclass:
        r = _swig_property(_molset.HaColor_r_get, _molset.HaColor_r_set)
    __swig_setmethods__["g"] = _molset.HaColor_g_set
    __swig_getmethods__["g"] = _molset.HaColor_g_get
    if _newclass:
        g = _swig_property(_molset.HaColor_g_get, _molset.HaColor_g_set)
    __swig_setmethods__["b"] = _molset.HaColor_b_set
    __swig_getmethods__["b"] = _molset.HaColor_b_get
    if _newclass:
        b = _swig_property(_molset.HaColor_b_get, _molset.HaColor_b_set)
    __swig_setmethods__["cval"] = _molset.HaColor_cval_set
    __swig_getmethods__["cval"] = _molset.HaColor_cval_get
    if _newclass:
        cval = _swig_property(_molset.HaColor_cval_get, _molset.HaColor_cval_set)
    __swig_setmethods__["cidx"] = _molset.HaColor_cidx_set
    __swig_getmethods__["cidx"] = _molset.HaColor_cidx_get
    if _newclass:
        cidx = _swig_property(_molset.HaColor_cidx_get, _molset.HaColor_cidx_set)
    __swig_setmethods__["cval_idx_map"] = _molset.HaColor_cval_idx_map_set
    __swig_getmethods__["cval_idx_map"] = _molset.HaColor_cval_idx_map_get
    if _newclass:
        cval_idx_map = _swig_property(_molset.HaColor_cval_idx_map_get, _molset.HaColor_cval_idx_map_set)
    __swig_setmethods__["col_name_map"] = _molset.HaColor_col_name_map_set
    __swig_getmethods__["col_name_map"] = _molset.HaColor_col_name_map_get
    if _newclass:
        col_name_map = _swig_property(_molset.HaColor_col_name_map_get, _molset.HaColor_col_name_map_set)
    __swig_setmethods__["name_col_map"] = _molset.HaColor_name_col_map_set
    __swig_getmethods__["name_col_map"] = _molset.HaColor_name_col_map_get
    if _newclass:
        name_col_map = _swig_property(_molset.HaColor_name_col_map_get, _molset.HaColor_name_col_map_set)
    __swig_setmethods__["used_colors"] = _molset.HaColor_used_colors_set
    __swig_getmethods__["used_colors"] = _molset.HaColor_used_colors_get
    if _newclass:
        used_colors = _swig_property(_molset.HaColor_used_colors_get, _molset.HaColor_used_colors_set)
    __swig_setmethods__["color_names_init_flag"] = _molset.HaColor_color_names_init_flag_set
    __swig_getmethods__["color_names_init_flag"] = _molset.HaColor_color_names_init_flag_get
    if _newclass:
        color_names_init_flag = _swig_property(_molset.HaColor_color_names_init_flag_get, _molset.HaColor_color_names_init_flag_set)
    if _newclass:
        GetRGBbyCIdxFloat = staticmethod(_molset.HaColor_GetRGBbyCIdxFloat)
    else:
        GetRGBbyCIdxFloat = _molset.HaColor_GetRGBbyCIdxFloat
HaColor_swigregister = _molset.HaColor_swigregister
HaColor_swigregister(HaColor)
LutSize = cvar.LutSize
DefaultAmbient = cvar.DefaultAmbient
ColourDepth = cvar.ColourDepth
ColourMask = cvar.ColourMask
SlabReject = cvar.SlabReject
SlabHalf = cvar.SlabHalf
SlabHollow = cvar.SlabHollow
SlabFinal = cvar.SlabFinal
SlabClose = cvar.SlabClose
SlabSection = cvar.SlabSection
ColBits = cvar.ColBits

def HaColor_ColorNameExist(col_str):
    return _molset.HaColor_ColorNameExist(col_str)
HaColor_ColorNameExist = _molset.HaColor_ColorNameExist

def HaColor_GetColorName(r, g, b):
    return _molset.HaColor_GetColorName(r, g, b)
HaColor_GetColorName = _molset.HaColor_GetColorName

def HaColor_GetColorVal(*args):
    return _molset.HaColor_GetColorVal(*args)
HaColor_GetColorVal = _molset.HaColor_GetColorVal

def HaColor_RegisterColor(r, g, b):
    return _molset.HaColor_RegisterColor(r, g, b)
HaColor_RegisterColor = _molset.HaColor_RegisterColor

def HaColor_GetPureColorByCIdx(cidx):
    return _molset.HaColor_GetPureColorByCIdx(cidx)
HaColor_GetPureColorByCIdx = _molset.HaColor_GetPureColorByCIdx

def HaColor_GetPureRGBbyCIdx(cidx, r, g, b):
    return _molset.HaColor_GetPureRGBbyCIdx(cidx, r, g, b)
HaColor_GetPureRGBbyCIdx = _molset.HaColor_GetPureRGBbyCIdx

def HaColor_GetRGBFromColVal(cval, r, g, b):
    return _molset.HaColor_GetRGBFromColVal(cval, r, g, b)
HaColor_GetRGBFromColVal = _molset.HaColor_GetRGBFromColVal

def HaColor_GetNumColors():
    return _molset.HaColor_GetNumColors()
HaColor_GetNumColors = _molset.HaColor_GetNumColors

def HaColor_RegisterColorName(col_name, r, g, b):
    return _molset.HaColor_RegisterColorName(col_name, r, g, b)
HaColor_RegisterColorName = _molset.HaColor_RegisterColorName

def HaColor_GetRGBbyCIdxFloat(cidx, fcol):
    return _molset.HaColor_GetRGBbyCIdxFloat(cidx, fcol)
HaColor_GetRGBbyCIdxFloat = _molset.HaColor_GetRGBbyCIdxFloat

class HaColorMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaColorMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaColorMap, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaColorMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaColorMap
    __del__ = lambda self: None
    __swig_setmethods__["colors"] = _molset.HaColorMap_colors_set
    __swig_getmethods__["colors"] = _molset.HaColorMap_colors_get
    if _newclass:
        colors = _swig_property(_molset.HaColorMap_colors_get, _molset.HaColorMap_colors_set)

    def GetColorByIdx(self, idx):
        return _molset.HaColorMap_GetColorByIdx(self, idx)

    def GetNColors(self):
        return _molset.HaColorMap_GetNColors(self)

    def AddColor(self, r, g, b):
        return _molset.HaColorMap_AddColor(self, r, g, b)

    def AddUniformRange(self, num_cols, col1, col2):
        return _molset.HaColorMap_AddUniformRange(self, num_cols, col1, col2)

    def GetIdxByProp(self, prop):
        return _molset.HaColorMap_GetIdxByProp(self, prop)
HaColorMap_swigregister = _molset.HaColorMap_swigregister
HaColorMap_swigregister(HaColorMap)

class StrColorMap(HaColorMap):
    __swig_setmethods__ = {}
    for _s in [HaColorMap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrColorMap, name, value)
    __swig_getmethods__ = {}
    for _s in [HaColorMap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrColorMap, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_StrColorMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_StrColorMap
    __del__ = lambda self: None

    def GetColorForStr(self, str):
        return _molset.StrColorMap_GetColorForStr(self, str)

    def AddStrColorPair(self, str, r, g, b):
        return _molset.StrColorMap_AddStrColorPair(self, str, r, g, b)
    __swig_setmethods__["str_idx_map"] = _molset.StrColorMap_str_idx_map_set
    __swig_getmethods__["str_idx_map"] = _molset.StrColorMap_str_idx_map_get
    if _newclass:
        str_idx_map = _swig_property(_molset.StrColorMap_str_idx_map_get, _molset.StrColorMap_str_idx_map_set)
    __swig_setmethods__["cval_idx_map"] = _molset.StrColorMap_cval_idx_map_set
    __swig_getmethods__["cval_idx_map"] = _molset.StrColorMap_cval_idx_map_get
    if _newclass:
        cval_idx_map = _swig_property(_molset.StrColorMap_cval_idx_map_get, _molset.StrColorMap_cval_idx_map_set)
StrColorMap_swigregister = _molset.StrColorMap_swigregister
StrColorMap_swigregister(StrColorMap)

class IValColorMap(HaColorMap):
    __swig_setmethods__ = {}
    for _s in [HaColorMap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IValColorMap, name, value)
    __swig_getmethods__ = {}
    for _s in [HaColorMap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IValColorMap, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_IValColorMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_IValColorMap
    __del__ = lambda self: None

    def GetColorForInt(self, ival):
        return _molset.IValColorMap_GetColorForInt(self, ival)

    def AddIntColorPair(self, ival, r, g, b):
        return _molset.IValColorMap_AddIntColorPair(self, ival, r, g, b)
    __swig_setmethods__["int_idx_map"] = _molset.IValColorMap_int_idx_map_set
    __swig_getmethods__["int_idx_map"] = _molset.IValColorMap_int_idx_map_get
    if _newclass:
        int_idx_map = _swig_property(_molset.IValColorMap_int_idx_map_get, _molset.IValColorMap_int_idx_map_set)
    __swig_setmethods__["cval_idx_map"] = _molset.IValColorMap_cval_idx_map_set
    __swig_getmethods__["cval_idx_map"] = _molset.IValColorMap_cval_idx_map_get
    if _newclass:
        cval_idx_map = _swig_property(_molset.IValColorMap_cval_idx_map_get, _molset.IValColorMap_cval_idx_map_set)
IValColorMap_swigregister = _molset.IValColorMap_swigregister
IValColorMap_swigregister(IValColorMap)

class DRangeColorMap(HaColorMap):
    __swig_setmethods__ = {}
    for _s in [HaColorMap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DRangeColorMap, name, value)
    __swig_getmethods__ = {}
    for _s in [HaColorMap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DRangeColorMap, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_DRangeColorMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_DRangeColorMap
    __del__ = lambda self: None

    def GetColorForVal(self, val):
        return _molset.DRangeColorMap_GetColorForVal(self, val)
    __swig_setmethods__["min_val"] = _molset.DRangeColorMap_min_val_set
    __swig_getmethods__["min_val"] = _molset.DRangeColorMap_min_val_get
    if _newclass:
        min_val = _swig_property(_molset.DRangeColorMap_min_val_get, _molset.DRangeColorMap_min_val_set)
    __swig_setmethods__["max_val"] = _molset.DRangeColorMap_max_val_set
    __swig_getmethods__["max_val"] = _molset.DRangeColorMap_max_val_get
    if _newclass:
        max_val = _swig_property(_molset.DRangeColorMap_max_val_get, _molset.DRangeColorMap_max_val_set)
DRangeColorMap_swigregister = _molset.DRangeColorMap_swigregister
DRangeColorMap_swigregister(DRangeColorMap)

class DValColorMap(HaColorMap):
    __swig_setmethods__ = {}
    for _s in [HaColorMap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DValColorMap, name, value)
    __swig_getmethods__ = {}
    for _s in [HaColorMap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DValColorMap, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_DValColorMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_DValColorMap
    __del__ = lambda self: None

    def GetColorForVal(self, val):
        return _molset.DValColorMap_GetColorForVal(self, val)

    def SaveToTxtFile(self, fname):
        return _molset.DValColorMap_SaveToTxtFile(self, fname)

    def LoadFromTxtFile(self, fname):
        return _molset.DValColorMap_LoadFromTxtFile(self, fname)

    def Clear(self):
        return _molset.DValColorMap_Clear(self)

    def IsValid(self):
        return _molset.DValColorMap_IsValid(self)

    def AddColorAndMinVal(self, r, g, b, val_min, n_interp_col=0):
        return _molset.DValColorMap_AddColorAndMinVal(self, r, g, b, val_min, n_interp_col)
    __swig_setmethods__["min_values"] = _molset.DValColorMap_min_values_set
    __swig_getmethods__["min_values"] = _molset.DValColorMap_min_values_get
    if _newclass:
        min_values = _swig_property(_molset.DValColorMap_min_values_get, _molset.DValColorMap_min_values_set)
DValColorMap_swigregister = _molset.DValColorMap_swigregister
DValColorMap_swigregister(DValColorMap)

class Canvas3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Canvas3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Canvas3D, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_Canvas3D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_Canvas3D
    __del__ = lambda self: None

    def resize(self, new_XRange, new_YRange):
        return _molset.Canvas3D_resize(self, new_XRange, new_YRange)

    def AllocImage(self):
        return _molset.Canvas3D_AllocImage(self)

    def DestroyImage(self):
        return _molset.Canvas3D_DestroyImage(self)

    def AllocDBuffer(self):
        return _molset.Canvas3D_AllocDBuffer(self)

    def DestroyDBuffer(self):
        return _molset.Canvas3D_DestroyDBuffer(self)
    __swig_setmethods__["FBuffer"] = _molset.Canvas3D_FBuffer_set
    __swig_getmethods__["FBuffer"] = _molset.Canvas3D_FBuffer_get
    if _newclass:
        FBuffer = _swig_property(_molset.Canvas3D_FBuffer_get, _molset.Canvas3D_FBuffer_set)
    __swig_setmethods__["DBuffer"] = _molset.Canvas3D_DBuffer_set
    __swig_getmethods__["DBuffer"] = _molset.Canvas3D_DBuffer_get
    if _newclass:
        DBuffer = _swig_property(_molset.Canvas3D_DBuffer_get, _molset.Canvas3D_DBuffer_set)
    __swig_setmethods__["FBClear"] = _molset.Canvas3D_FBClear_set
    __swig_getmethods__["FBClear"] = _molset.Canvas3D_FBClear_get
    if _newclass:
        FBClear = _swig_property(_molset.Canvas3D_FBClear_get, _molset.Canvas3D_FBClear_set)
    __swig_setmethods__["DBClear"] = _molset.Canvas3D_DBClear_set
    __swig_getmethods__["DBClear"] = _molset.Canvas3D_DBClear_get
    if _newclass:
        DBClear = _swig_property(_molset.Canvas3D_DBClear_get, _molset.Canvas3D_DBClear_set)
    __swig_setmethods__["View"] = _molset.Canvas3D_View_set
    __swig_getmethods__["View"] = _molset.Canvas3D_View_get
    if _newclass:
        View = _swig_property(_molset.Canvas3D_View_get, _molset.Canvas3D_View_set)
    __swig_setmethods__["Lut"] = _molset.Canvas3D_Lut_set
    __swig_getmethods__["Lut"] = _molset.Canvas3D_Lut_get
    if _newclass:
        Lut = _swig_property(_molset.Canvas3D_Lut_get, _molset.Canvas3D_Lut_set)
    __swig_setmethods__["empty_lut_idx"] = _molset.Canvas3D_empty_lut_idx_set
    __swig_getmethods__["empty_lut_idx"] = _molset.Canvas3D_empty_lut_idx_get
    if _newclass:
        empty_lut_idx = _swig_property(_molset.Canvas3D_empty_lut_idx_get, _molset.Canvas3D_empty_lut_idx_set)
    __swig_setmethods__["m_FontSize"] = _molset.Canvas3D_m_FontSize_set
    __swig_getmethods__["m_FontSize"] = _molset.Canvas3D_m_FontSize_get
    if _newclass:
        m_FontSize = _swig_property(_molset.Canvas3D_m_FontSize_get, _molset.Canvas3D_m_FontSize_set)
    __swig_setmethods__["m_SplineCount"] = _molset.Canvas3D_m_SplineCount_set
    __swig_getmethods__["m_SplineCount"] = _molset.Canvas3D_m_SplineCount_get
    if _newclass:
        m_SplineCount = _swig_property(_molset.Canvas3D_m_SplineCount_get, _molset.Canvas3D_m_SplineCount_set)
    __swig_setmethods__["m_UseSlabPlane"] = _molset.Canvas3D_m_UseSlabPlane_set
    __swig_getmethods__["m_UseSlabPlane"] = _molset.Canvas3D_m_UseSlabPlane_get
    if _newclass:
        m_UseSlabPlane = _swig_property(_molset.Canvas3D_m_UseSlabPlane_get, _molset.Canvas3D_m_UseSlabPlane_set)
    __swig_setmethods__["m_SlabValue"] = _molset.Canvas3D_m_SlabValue_set
    __swig_getmethods__["m_SlabValue"] = _molset.Canvas3D_m_SlabValue_get
    if _newclass:
        m_SlabValue = _swig_property(_molset.Canvas3D_m_SlabValue_get, _molset.Canvas3D_m_SlabValue_set)
    __swig_setmethods__["m_SlabMode"] = _molset.Canvas3D_m_SlabMode_set
    __swig_getmethods__["m_SlabMode"] = _molset.Canvas3D_m_SlabMode_get
    if _newclass:
        m_SlabMode = _swig_property(_molset.Canvas3D_m_SlabMode_get, _molset.Canvas3D_m_SlabMode_set)
    __swig_setmethods__["m_SlabInten"] = _molset.Canvas3D_m_SlabInten_set
    __swig_getmethods__["m_SlabInten"] = _molset.Canvas3D_m_SlabInten_get
    if _newclass:
        m_SlabInten = _swig_property(_molset.Canvas3D_m_SlabInten_get, _molset.Canvas3D_m_SlabInten_set)
    __swig_setmethods__["m_SliceValue"] = _molset.Canvas3D_m_SliceValue_set
    __swig_getmethods__["m_SliceValue"] = _molset.Canvas3D_m_SliceValue_get
    if _newclass:
        m_SliceValue = _swig_property(_molset.Canvas3D_m_SliceValue_get, _molset.Canvas3D_m_SliceValue_set)
    __swig_setmethods__["m_ImageSize"] = _molset.Canvas3D_m_ImageSize_set
    __swig_getmethods__["m_ImageSize"] = _molset.Canvas3D_m_ImageSize_get
    if _newclass:
        m_ImageSize = _swig_property(_molset.Canvas3D_m_ImageSize_get, _molset.Canvas3D_m_ImageSize_set)
    __swig_setmethods__["m_ImageRadius"] = _molset.Canvas3D_m_ImageRadius_set
    __swig_getmethods__["m_ImageRadius"] = _molset.Canvas3D_m_ImageRadius_get
    if _newclass:
        m_ImageRadius = _swig_property(_molset.Canvas3D_m_ImageRadius_get, _molset.Canvas3D_m_ImageRadius_set)
    __swig_setmethods__["m_ZOffset"] = _molset.Canvas3D_m_ZOffset_set
    __swig_getmethods__["m_ZOffset"] = _molset.Canvas3D_m_ZOffset_get
    if _newclass:
        m_ZOffset = _swig_property(_molset.Canvas3D_m_ZOffset_get, _molset.Canvas3D_m_ZOffset_set)
    __swig_setmethods__["LookUp"] = _molset.Canvas3D_LookUp_set
    __swig_getmethods__["LookUp"] = _molset.Canvas3D_LookUp_get
    if _newclass:
        LookUp = _swig_property(_molset.Canvas3D_LookUp_get, _molset.Canvas3D_LookUp_set)
    __swig_setmethods__["Array"] = _molset.Canvas3D_Array_set
    __swig_getmethods__["Array"] = _molset.Canvas3D_Array_get
    if _newclass:
        Array = _swig_property(_molset.Canvas3D_Array_get, _molset.Canvas3D_Array_set)
    __swig_setmethods__["ColConstTable"] = _molset.Canvas3D_ColConstTable_set
    __swig_getmethods__["ColConstTable"] = _molset.Canvas3D_ColConstTable_get
    if _newclass:
        ColConstTable = _swig_property(_molset.Canvas3D_ColConstTable_get, _molset.Canvas3D_ColConstTable_set)
    __swig_setmethods__["ColConst"] = _molset.Canvas3D_ColConst_set
    __swig_getmethods__["ColConst"] = _molset.Canvas3D_ColConst_get
    if _newclass:
        ColConst = _swig_property(_molset.Canvas3D_ColConst_get, _molset.Canvas3D_ColConst_set)

    def XRange(self):
        return _molset.Canvas3D_XRange(self)

    def YRange(self):
        return _molset.Canvas3D_YRange(self)

    def HRange(self):
        return _molset.Canvas3D_HRange(self)

    def WRange(self):
        return _molset.Canvas3D_WRange(self)

    def Range(self):
        return _molset.Canvas3D_Range(self)

    def PlotDeepPoint(self, x, y, z, col):
        return _molset.Canvas3D_PlotDeepPoint(self, x, y, z, col)

    def ClipDeepPoint(self, x, y, z, col):
        return _molset.Canvas3D_ClipDeepPoint(self, x, y, z, col)

    def DrawTwinLine(self, x1, y1, z1, x2, y2, z2, col1, col2):
        return _molset.Canvas3D_DrawTwinLine(self, x1, y1, z1, x2, y2, z2, col1, col2)

    def ClipTwinLine(self, x1, y1, z1, x2, y2, z2, col1, col2):
        return _molset.Canvas3D_ClipTwinLine(self, x1, y1, z1, x2, y2, z2, col1, col2)

    def DrawTwinVector(self, x1, y1, z1, x2, y2, z2, col1, col2):
        return _molset.Canvas3D_DrawTwinVector(self, x1, y1, z1, x2, y2, z2, col1, col2)

    def ClipTwinVector(self, x1, y1, z1, x2, y2, z2, col1, col2):
        return _molset.Canvas3D_ClipTwinVector(self, x1, y1, z1, x2, y2, z2, col1, col2)

    def ClipDashVector(self, x1, y1, z1, x2, y2, z2, col1, col2):
        return _molset.Canvas3D_ClipDashVector(self, x1, y1, z1, x2, y2, z2, col1, col2)

    def DrawCylinder(self, x1, y1, z1, x2, y2, z2, c1, c2, rad):
        return _molset.Canvas3D_DrawCylinder(self, x1, y1, z1, x2, y2, z2, c1, c2, rad)

    def ClipCylinder(self, x1, y1, z1, x2, y2, z2, c1, c2, rad):
        return _molset.Canvas3D_ClipCylinder(self, x1, y1, z1, x2, y2, z2, c1, c2, rad)

    def DashRibbon(self, src, dst, col1, col2):
        return _molset.Canvas3D_DashRibbon(self, src, dst, col1, col2)

    def StrandRibbon(self, src, dst, col1, col2):
        return _molset.Canvas3D_StrandRibbon(self, src, dst, col1, col2)

    def SolidRibbon2(self, src, dst, col1, col2):
        return _molset.Canvas3D_SolidRibbon2(self, src, dst, col1, col2)

    def SolidRibbon(self, src, dst, col):
        return _molset.Canvas3D_SolidRibbon(self, src, dst, col)

    def RectRibbon(self, src, dst, col):
        return _molset.Canvas3D_RectRibbon(self, src, dst, col)

    def DrawSphere(self, x, y, z, rad, col):
        return _molset.Canvas3D_DrawSphere(self, x, y, z, rad, col)

    def ClipSphere(self, x, y, z, rad, col):
        return _molset.Canvas3D_ClipSphere(self, x, y, z, rad, col)

    def SetFontSize(self, size):
        return _molset.Canvas3D_SetFontSize(self, size)

    def DisplayTextString(self, x, y, z, label, col):
        return _molset.Canvas3D_DisplayTextString(self, x, y, z, label, col)

    def ClipPolygon(self, p, transp=0.0):
        return _molset.Canvas3D_ClipPolygon(self, p, transp)
Canvas3D_swigregister = _molset.Canvas3D_swigregister
Canvas3D_swigregister(Canvas3D)

class Monitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Monitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Monitor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_Monitor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_Monitor
    __del__ = lambda self: None
    __swig_setmethods__["src"] = _molset.Monitor_src_set
    __swig_getmethods__["src"] = _molset.Monitor_src_get
    if _newclass:
        src = _swig_property(_molset.Monitor_src_get, _molset.Monitor_src_set)
    __swig_setmethods__["dst"] = _molset.Monitor_dst_set
    __swig_getmethods__["dst"] = _molset.Monitor_dst_get
    if _newclass:
        dst = _swig_property(_molset.Monitor_dst_get, _molset.Monitor_dst_set)

    def __eq__(self, ref):
        return _molset.Monitor___eq__(self, ref)

    def __lt__(self, ref):
        return _molset.Monitor___lt__(self, ref)
    __swig_setmethods__["dist"] = _molset.Monitor_dist_set
    __swig_getmethods__["dist"] = _molset.Monitor_dist_get
    if _newclass:
        dist = _swig_property(_molset.Monitor_dist_get, _molset.Monitor_dist_set)
    __swig_setmethods__["col"] = _molset.Monitor_col_set
    __swig_getmethods__["col"] = _molset.Monitor_col_get
    if _newclass:
        col = _swig_property(_molset.Monitor_col_get, _molset.Monitor_col_set)
Monitor_swigregister = _molset.Monitor_swigregister
Monitor_swigregister(Monitor)
LOAD_AMBER_RESTART_TIMER_ID = cvar.LOAD_AMBER_RESTART_TIMER_ID

class HaMolView(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaMolView, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaMolView, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaMolView()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaMolView
    __del__ = lambda self: None

    def GetMolSet(self):
        return _molset.HaMolView_GetMolSet(self)
    __swig_setmethods__["debug_level"] = _molset.HaMolView_debug_level_set
    __swig_getmethods__["debug_level"] = _molset.HaMolView_debug_level_get
    if _newclass:
        debug_level = _swig_property(_molset.HaMolView_debug_level_get, _molset.HaMolView_debug_level_set)

    def ResetView(self):
        return _molset.HaMolView_ResetView(self)
    __swig_setmethods__["UseDepthCue"] = _molset.HaMolView_UseDepthCue_set
    __swig_getmethods__["UseDepthCue"] = _molset.HaMolView_UseDepthCue_get
    if _newclass:
        UseDepthCue = _swig_property(_molset.HaMolView_UseDepthCue_get, _molset.HaMolView_UseDepthCue_set)
    __swig_setmethods__["UseStereo"] = _molset.HaMolView_UseStereo_set
    __swig_getmethods__["UseStereo"] = _molset.HaMolView_UseStereo_get
    if _newclass:
        UseStereo = _swig_property(_molset.HaMolView_UseStereo_get, _molset.HaMolView_UseStereo_set)
    __swig_setmethods__["UseClipping"] = _molset.HaMolView_UseClipping_set
    __swig_getmethods__["UseClipping"] = _molset.HaMolView_UseClipping_get
    if _newclass:
        UseClipping = _swig_property(_molset.HaMolView_UseClipping_get, _molset.HaMolView_UseClipping_set)
    __swig_setmethods__["SSBondMode"] = _molset.HaMolView_SSBondMode_set
    __swig_getmethods__["SSBondMode"] = _molset.HaMolView_SSBondMode_get
    if _newclass:
        SSBondMode = _swig_property(_molset.HaMolView_SSBondMode_get, _molset.HaMolView_SSBondMode_set)
    __swig_setmethods__["HBondMode"] = _molset.HaMolView_HBondMode_set
    __swig_getmethods__["HBondMode"] = _molset.HaMolView_HBondMode_get
    if _newclass:
        HBondMode = _swig_property(_molset.HaMolView_HBondMode_get, _molset.HaMolView_HBondMode_set)
    __swig_setmethods__["ZoneBoth"] = _molset.HaMolView_ZoneBoth_set
    __swig_getmethods__["ZoneBoth"] = _molset.HaMolView_ZoneBoth_get
    if _newclass:
        ZoneBoth = _swig_property(_molset.HaMolView_ZoneBoth_get, _molset.HaMolView_ZoneBoth_set)
    __swig_setmethods__["UseTransparent"] = _molset.HaMolView_UseTransparent_set
    __swig_getmethods__["UseTransparent"] = _molset.HaMolView_UseTransparent_get
    if _newclass:
        UseTransparent = _swig_property(_molset.HaMolView_UseTransparent_get, _molset.HaMolView_UseTransparent_set)
    __swig_setmethods__["UseOutLine"] = _molset.HaMolView_UseOutLine_set
    __swig_getmethods__["UseOutLine"] = _molset.HaMolView_UseOutLine_get
    if _newclass:
        UseOutLine = _swig_property(_molset.HaMolView_UseOutLine_get, _molset.HaMolView_UseOutLine_set)
    __swig_setmethods__["StereoAngle"] = _molset.HaMolView_StereoAngle_set
    __swig_getmethods__["StereoAngle"] = _molset.HaMolView_StereoAngle_get
    if _newclass:
        StereoAngle = _swig_property(_molset.HaMolView_StereoAngle_get, _molset.HaMolView_StereoAngle_set)
    __swig_setmethods__["DrawBoundBox"] = _molset.HaMolView_DrawBoundBox_set
    __swig_getmethods__["DrawBoundBox"] = _molset.HaMolView_DrawBoundBox_get
    if _newclass:
        DrawBoundBox = _swig_property(_molset.HaMolView_DrawBoundBox_get, _molset.HaMolView_DrawBoundBox_set)
    __swig_setmethods__["DrawAxes"] = _molset.HaMolView_DrawAxes_set
    __swig_getmethods__["DrawAxes"] = _molset.HaMolView_DrawAxes_get
    if _newclass:
        DrawAxes = _swig_property(_molset.HaMolView_DrawAxes_get, _molset.HaMolView_DrawAxes_set)
    __swig_setmethods__["DrawDoubleBonds"] = _molset.HaMolView_DrawDoubleBonds_set
    __swig_getmethods__["DrawDoubleBonds"] = _molset.HaMolView_DrawDoubleBonds_get
    if _newclass:
        DrawDoubleBonds = _swig_property(_molset.HaMolView_DrawDoubleBonds_get, _molset.HaMolView_DrawDoubleBonds_set)
    __swig_setmethods__["DrawUnitCell"] = _molset.HaMolView_DrawUnitCell_set
    __swig_getmethods__["DrawUnitCell"] = _molset.HaMolView_DrawUnitCell_get
    if _newclass:
        DrawUnitCell = _swig_property(_molset.HaMolView_DrawUnitCell_get, _molset.HaMolView_DrawUnitCell_set)
    __swig_setmethods__["CartoonHeight"] = _molset.HaMolView_CartoonHeight_set
    __swig_getmethods__["CartoonHeight"] = _molset.HaMolView_CartoonHeight_get
    if _newclass:
        CartoonHeight = _swig_property(_molset.HaMolView_CartoonHeight_get, _molset.HaMolView_CartoonHeight_set)
    __swig_setmethods__["SolventDots"] = _molset.HaMolView_SolventDots_set
    __swig_getmethods__["SolventDots"] = _molset.HaMolView_SolventDots_get
    if _newclass:
        SolventDots = _swig_property(_molset.HaMolView_SolventDots_get, _molset.HaMolView_SolventDots_set)
    __swig_setmethods__["ProbeRadius"] = _molset.HaMolView_ProbeRadius_set
    __swig_getmethods__["ProbeRadius"] = _molset.HaMolView_ProbeRadius_get
    if _newclass:
        ProbeRadius = _swig_property(_molset.HaMolView_ProbeRadius_get, _molset.HaMolView_ProbeRadius_set)
    __swig_setmethods__["DrawDots"] = _molset.HaMolView_DrawDots_set
    __swig_getmethods__["DrawDots"] = _molset.HaMolView_DrawDots_get
    if _newclass:
        DrawDots = _swig_property(_molset.HaMolView_DrawDots_get, _molset.HaMolView_DrawDots_set)
    __swig_setmethods__["DrawLabels"] = _molset.HaMolView_DrawLabels_set
    __swig_getmethods__["DrawLabels"] = _molset.HaMolView_DrawLabels_get
    if _newclass:
        DrawLabels = _swig_property(_molset.HaMolView_DrawLabels_get, _molset.HaMolView_DrawLabels_set)
    __swig_setmethods__["DrawMonitDistance"] = _molset.HaMolView_DrawMonitDistance_set
    __swig_getmethods__["DrawMonitDistance"] = _molset.HaMolView_DrawMonitDistance_get
    if _newclass:
        DrawMonitDistance = _swig_property(_molset.HaMolView_DrawMonitDistance_get, _molset.HaMolView_DrawMonitDistance_set)
    __swig_setmethods__["DrawBetaArrows"] = _molset.HaMolView_DrawBetaArrows_set
    __swig_getmethods__["DrawBetaArrows"] = _molset.HaMolView_DrawBetaArrows_get
    if _newclass:
        DrawBetaArrows = _swig_property(_molset.HaMolView_DrawBetaArrows_get, _molset.HaMolView_DrawBetaArrows_set)
    __swig_setmethods__["DrawObj3D"] = _molset.HaMolView_DrawObj3D_set
    __swig_getmethods__["DrawObj3D"] = _molset.HaMolView_DrawObj3D_get
    if _newclass:
        DrawObj3D = _swig_property(_molset.HaMolView_DrawObj3D_get, _molset.HaMolView_DrawObj3D_set)
    __swig_setmethods__["host_mol_set"] = _molset.HaMolView_host_mol_set_set
    __swig_getmethods__["host_mol_set"] = _molset.HaMolView_host_mol_set_get
    if _newclass:
        host_mol_set = _swig_property(_molset.HaMolView_host_mol_set_get, _molset.HaMolView_host_mol_set_set)
    __swig_setmethods__["HashTable"] = _molset.HaMolView_HashTable_set
    __swig_getmethods__["HashTable"] = _molset.HaMolView_HashTable_get
    if _newclass:
        HashTable = _swig_property(_molset.HaMolView_HashTable_get, _molset.HaMolView_HashTable_set)
    __swig_setmethods__["XOffset"] = _molset.HaMolView_XOffset_set
    __swig_getmethods__["XOffset"] = _molset.HaMolView_XOffset_get
    if _newclass:
        XOffset = _swig_property(_molset.HaMolView_XOffset_get, _molset.HaMolView_XOffset_set)
    __swig_setmethods__["YOffset"] = _molset.HaMolView_YOffset_set
    __swig_getmethods__["YOffset"] = _molset.HaMolView_YOffset_get
    if _newclass:
        YOffset = _swig_property(_molset.HaMolView_YOffset_get, _molset.HaMolView_YOffset_set)
    __swig_setmethods__["ideltx"] = _molset.HaMolView_ideltx_set
    __swig_getmethods__["ideltx"] = _molset.HaMolView_ideltx_get
    if _newclass:
        ideltx = _swig_property(_molset.HaMolView_ideltx_get, _molset.HaMolView_ideltx_set)
    __swig_setmethods__["idelty"] = _molset.HaMolView_idelty_set
    __swig_getmethods__["idelty"] = _molset.HaMolView_idelty_get
    if _newclass:
        idelty = _swig_property(_molset.HaMolView_idelty_get, _molset.HaMolView_idelty_set)
    __swig_setmethods__["CenX"] = _molset.HaMolView_CenX_set
    __swig_getmethods__["CenX"] = _molset.HaMolView_CenX_get
    if _newclass:
        CenX = _swig_property(_molset.HaMolView_CenX_get, _molset.HaMolView_CenX_set)
    __swig_setmethods__["CenY"] = _molset.HaMolView_CenY_set
    __swig_getmethods__["CenY"] = _molset.HaMolView_CenY_get
    if _newclass:
        CenY = _swig_property(_molset.HaMolView_CenY_get, _molset.HaMolView_CenY_set)
    __swig_setmethods__["CenZ"] = _molset.HaMolView_CenZ_set
    __swig_getmethods__["CenZ"] = _molset.HaMolView_CenZ_get
    if _newclass:
        CenZ = _swig_property(_molset.HaMolView_CenZ_get, _molset.HaMolView_CenZ_set)
    __swig_setmethods__["CurRX"] = _molset.HaMolView_CurRX_set
    __swig_getmethods__["CurRX"] = _molset.HaMolView_CurRX_get
    if _newclass:
        CurRX = _swig_property(_molset.HaMolView_CurRX_get, _molset.HaMolView_CurRX_set)
    __swig_setmethods__["CurRY"] = _molset.HaMolView_CurRY_set
    __swig_getmethods__["CurRY"] = _molset.HaMolView_CurRY_get
    if _newclass:
        CurRY = _swig_property(_molset.HaMolView_CurRY_get, _molset.HaMolView_CurRY_set)
    __swig_setmethods__["CurRZ"] = _molset.HaMolView_CurRZ_set
    __swig_getmethods__["CurRZ"] = _molset.HaMolView_CurRZ_get
    if _newclass:
        CurRZ = _swig_property(_molset.HaMolView_CurRZ_get, _molset.HaMolView_CurRZ_set)
    __swig_setmethods__["CurTX"] = _molset.HaMolView_CurTX_set
    __swig_getmethods__["CurTX"] = _molset.HaMolView_CurTX_get
    if _newclass:
        CurTX = _swig_property(_molset.HaMolView_CurTX_get, _molset.HaMolView_CurTX_set)
    __swig_setmethods__["CurTY"] = _molset.HaMolView_CurTY_set
    __swig_getmethods__["CurTY"] = _molset.HaMolView_CurTY_get
    if _newclass:
        CurTY = _swig_property(_molset.HaMolView_CurTY_get, _molset.HaMolView_CurTY_set)
    __swig_setmethods__["CurZoom"] = _molset.HaMolView_CurZoom_set
    __swig_getmethods__["CurZoom"] = _molset.HaMolView_CurZoom_get
    if _newclass:
        CurZoom = _swig_property(_molset.HaMolView_CurZoom_get, _molset.HaMolView_CurZoom_set)
    __swig_setmethods__["CurSlabValue"] = _molset.HaMolView_CurSlabValue_set
    __swig_getmethods__["CurSlabValue"] = _molset.HaMolView_CurSlabValue_get
    if _newclass:
        CurSlabValue = _swig_property(_molset.HaMolView_CurSlabValue_get, _molset.HaMolView_CurSlabValue_set)
    __swig_setmethods__["LastRX"] = _molset.HaMolView_LastRX_set
    __swig_getmethods__["LastRX"] = _molset.HaMolView_LastRX_get
    if _newclass:
        LastRX = _swig_property(_molset.HaMolView_LastRX_get, _molset.HaMolView_LastRX_set)
    __swig_setmethods__["LastRY"] = _molset.HaMolView_LastRY_set
    __swig_getmethods__["LastRY"] = _molset.HaMolView_LastRY_get
    if _newclass:
        LastRY = _swig_property(_molset.HaMolView_LastRY_get, _molset.HaMolView_LastRY_set)
    __swig_setmethods__["LastRZ"] = _molset.HaMolView_LastRZ_set
    __swig_getmethods__["LastRZ"] = _molset.HaMolView_LastRZ_get
    if _newclass:
        LastRZ = _swig_property(_molset.HaMolView_LastRZ_get, _molset.HaMolView_LastRZ_set)
    __swig_setmethods__["LastTX"] = _molset.HaMolView_LastTX_set
    __swig_getmethods__["LastTX"] = _molset.HaMolView_LastTX_get
    if _newclass:
        LastTX = _swig_property(_molset.HaMolView_LastTX_get, _molset.HaMolView_LastTX_set)
    __swig_setmethods__["LastTY"] = _molset.HaMolView_LastTY_set
    __swig_getmethods__["LastTY"] = _molset.HaMolView_LastTY_get
    if _newclass:
        LastTY = _swig_property(_molset.HaMolView_LastTY_get, _molset.HaMolView_LastTY_set)
    __swig_setmethods__["PointX"] = _molset.HaMolView_PointX_set
    __swig_getmethods__["PointX"] = _molset.HaMolView_PointX_get
    if _newclass:
        PointX = _swig_property(_molset.HaMolView_PointX_get, _molset.HaMolView_PointX_set)
    __swig_setmethods__["PointY"] = _molset.HaMolView_PointY_set
    __swig_getmethods__["PointY"] = _molset.HaMolView_PointY_get
    if _newclass:
        PointY = _swig_property(_molset.HaMolView_PointY_get, _molset.HaMolView_PointY_set)
    __swig_setmethods__["InitX"] = _molset.HaMolView_InitX_set
    __swig_getmethods__["InitX"] = _molset.HaMolView_InitX_get
    if _newclass:
        InitX = _swig_property(_molset.HaMolView_InitX_get, _molset.HaMolView_InitX_set)
    __swig_setmethods__["InitY"] = _molset.HaMolView_InitY_set
    __swig_getmethods__["InitY"] = _molset.HaMolView_InitY_get
    if _newclass:
        InitY = _swig_property(_molset.HaMolView_InitY_get, _molset.HaMolView_InitY_set)
    __swig_setmethods__["FakeSpecular"] = _molset.HaMolView_FakeSpecular_set
    __swig_getmethods__["FakeSpecular"] = _molset.HaMolView_FakeSpecular_get
    if _newclass:
        FakeSpecular = _swig_property(_molset.HaMolView_FakeSpecular_get, _molset.HaMolView_FakeSpecular_set)
    __swig_setmethods__["SpecPower"] = _molset.HaMolView_SpecPower_set
    __swig_getmethods__["SpecPower"] = _molset.HaMolView_SpecPower_get
    if _newclass:
        SpecPower = _swig_property(_molset.HaMolView_SpecPower_get, _molset.HaMolView_SpecPower_set)
    __swig_setmethods__["UseLabelCol"] = _molset.HaMolView_UseLabelCol_set
    __swig_getmethods__["UseLabelCol"] = _molset.HaMolView_UseLabelCol_get
    if _newclass:
        UseLabelCol = _swig_property(_molset.HaMolView_UseLabelCol_get, _molset.HaMolView_UseLabelCol_set)
    __swig_setmethods__["UseBackFade"] = _molset.HaMolView_UseBackFade_set
    __swig_getmethods__["UseBackFade"] = _molset.HaMolView_UseBackFade_get
    if _newclass:
        UseBackFade = _swig_property(_molset.HaMolView_UseBackFade_get, _molset.HaMolView_UseBackFade_set)
    __swig_setmethods__["Ambient"] = _molset.HaMolView_Ambient_set
    __swig_getmethods__["Ambient"] = _molset.HaMolView_Ambient_get
    if _newclass:
        Ambient = _swig_property(_molset.HaMolView_Ambient_get, _molset.HaMolView_Ambient_set)
    __swig_setmethods__["Rot"] = _molset.HaMolView_Rot_set
    __swig_getmethods__["Rot"] = _molset.HaMolView_Rot_get
    if _newclass:
        Rot = _swig_property(_molset.HaMolView_Rot_get, _molset.HaMolView_Rot_set)
    __swig_setmethods__["Orig"] = _molset.HaMolView_Orig_set
    __swig_getmethods__["Orig"] = _molset.HaMolView_Orig_get
    if _newclass:
        Orig = _swig_property(_molset.HaMolView_Orig_get, _molset.HaMolView_Orig_set)
    __swig_setmethods__["Zoom"] = _molset.HaMolView_Zoom_set
    __swig_getmethods__["Zoom"] = _molset.HaMolView_Zoom_get
    if _newclass:
        Zoom = _swig_property(_molset.HaMolView_Zoom_get, _molset.HaMolView_Zoom_set)
    __swig_setmethods__["Scale"] = _molset.HaMolView_Scale_set
    __swig_getmethods__["Scale"] = _molset.HaMolView_Scale_get
    if _newclass:
        Scale = _swig_property(_molset.HaMolView_Scale_get, _molset.HaMolView_Scale_set)
    __swig_setmethods__["DScale"] = _molset.HaMolView_DScale_set
    __swig_getmethods__["DScale"] = _molset.HaMolView_DScale_get
    if _newclass:
        DScale = _swig_property(_molset.HaMolView_DScale_get, _molset.HaMolView_DScale_set)
    __swig_setmethods__["UseScreenClip"] = _molset.HaMolView_UseScreenClip_set
    __swig_getmethods__["UseScreenClip"] = _molset.HaMolView_UseScreenClip_get
    if _newclass:
        UseScreenClip = _swig_property(_molset.HaMolView_UseScreenClip_get, _molset.HaMolView_UseScreenClip_set)
    __swig_setmethods__["m_screen_transform"] = _molset.HaMolView_m_screen_transform_set
    __swig_getmethods__["m_screen_transform"] = _molset.HaMolView_m_screen_transform_get
    if _newclass:
        m_screen_transform = _swig_property(_molset.HaMolView_m_screen_transform_get, _molset.HaMolView_m_screen_transform_set)
    __swig_setmethods__["ReDrawFlag"] = _molset.HaMolView_ReDrawFlag_set
    __swig_getmethods__["ReDrawFlag"] = _molset.HaMolView_ReDrawFlag_get
    if _newclass:
        ReDrawFlag = _swig_property(_molset.HaMolView_ReDrawFlag_get, _molset.HaMolView_ReDrawFlag_set)
    __swig_setmethods__["Hydrogens"] = _molset.HaMolView_Hydrogens_set
    __swig_getmethods__["Hydrogens"] = _molset.HaMolView_Hydrogens_get
    if _newclass:
        Hydrogens = _swig_property(_molset.HaMolView_Hydrogens_get, _molset.HaMolView_Hydrogens_set)
    __swig_setmethods__["HetaGroups"] = _molset.HaMolView_HetaGroups_set
    __swig_getmethods__["HetaGroups"] = _molset.HaMolView_HetaGroups_get
    if _newclass:
        HetaGroups = _swig_property(_molset.HaMolView_HetaGroups_get, _molset.HaMolView_HetaGroups_set)
    __swig_setmethods__["DrawAtoms"] = _molset.HaMolView_DrawAtoms_set
    __swig_getmethods__["DrawAtoms"] = _molset.HaMolView_DrawAtoms_get
    if _newclass:
        DrawAtoms = _swig_property(_molset.HaMolView_DrawAtoms_get, _molset.HaMolView_DrawAtoms_set)
    __swig_setmethods__["DrawBonds"] = _molset.HaMolView_DrawBonds_set
    __swig_getmethods__["DrawBonds"] = _molset.HaMolView_DrawBonds_get
    if _newclass:
        DrawBonds = _swig_property(_molset.HaMolView_DrawBonds_get, _molset.HaMolView_DrawBonds_set)
    __swig_setmethods__["DrawRibbon"] = _molset.HaMolView_DrawRibbon_set
    __swig_getmethods__["DrawRibbon"] = _molset.HaMolView_DrawRibbon_get
    if _newclass:
        DrawRibbon = _swig_property(_molset.HaMolView_DrawRibbon_get, _molset.HaMolView_DrawRibbon_set)
    __swig_setmethods__["DrawBestPath"] = _molset.HaMolView_DrawBestPath_set
    __swig_getmethods__["DrawBestPath"] = _molset.HaMolView_DrawBestPath_get
    if _newclass:
        DrawBestPath = _swig_property(_molset.HaMolView_DrawBestPath_get, _molset.HaMolView_DrawBestPath_set)
    __swig_setmethods__["DrawContourSurf"] = _molset.HaMolView_DrawContourSurf_set
    __swig_getmethods__["DrawContourSurf"] = _molset.HaMolView_DrawContourSurf_get
    if _newclass:
        DrawContourSurf = _swig_property(_molset.HaMolView_DrawContourSurf_get, _molset.HaMolView_DrawContourSurf_set)
    __swig_setmethods__["DrawSolidSurfaces"] = _molset.HaMolView_DrawSolidSurfaces_set
    __swig_getmethods__["DrawSolidSurfaces"] = _molset.HaMolView_DrawSolidSurfaces_get
    if _newclass:
        DrawSolidSurfaces = _swig_property(_molset.HaMolView_DrawSolidSurfaces_get, _molset.HaMolView_DrawSolidSurfaces_set)

    def ExecuteCommand(self, cmd_pr):
        return _molset.HaMolView_ExecuteCommand(self, cmd_pr)

    def ExecuteSetCommand(self, cmd_pr):
        return _molset.HaMolView_ExecuteSetCommand(self, cmd_pr)

    def ExecuteColourCommand(self, cmd_pr):
        return _molset.HaMolView_ExecuteColourCommand(self, cmd_pr)

    def ConnectObject(self, pObj):
        return _molset.HaMolView_ConnectObject(self, pObj)

    def BroadcastCurrAtom(self):
        return _molset.HaMolView_BroadcastCurrAtom(self)

    def FillCurrAtomRef(self, buf):
        return _molset.HaMolView_FillCurrAtomRef(self, buf)

    def GetImageSize(self):
        return _molset.HaMolView_GetImageSize(self)

    def GetImageRadius(self):
        return _molset.HaMolView_GetImageRadius(self)

    def SetUseSlabPlane(self, new_UseSlabPlane):
        return _molset.HaMolView_SetUseSlabPlane(self, new_UseSlabPlane)

    def UseSlabPlane(self):
        return _molset.HaMolView_UseSlabPlane(self)

    def SetSlabMode(self, new_SlabMode):
        return _molset.HaMolView_SetSlabMode(self, new_SlabMode)

    def SlabMode(self):
        return _molset.HaMolView_SlabMode(self)

    def SetSlabValue(self, new_SlabValue):
        return _molset.HaMolView_SetSlabValue(self, new_SlabValue)

    def SlabValue(self):
        return _molset.HaMolView_SlabValue(self)

    def SetSlabInten(self, new_SlabInten):
        return _molset.HaMolView_SetSlabInten(self, new_SlabInten)

    def SetSliceValue(self, new_SliceValue):
        return _molset.HaMolView_SetSliceValue(self, new_SliceValue)

    def SliceValue(self):
        return _molset.HaMolView_SliceValue(self)

    def SetZOffset(self, new_ZOffset):
        return _molset.HaMolView_SetZOffset(self, new_ZOffset)

    def ZOffset(self):
        return _molset.HaMolView_ZOffset(self)

    def ClampShiftVal(self, ival, value):
        return _molset.HaMolView_ClampShiftVal(self, ival, value)

    def WrapShiftVal(self, iaxis, value):
        return _molset.HaMolView_WrapShiftVal(self, iaxis, value)

    def UpdateThisView(self, lHint=0):
        return _molset.HaMolView_UpdateThisView(self, lHint)

    def RefreshScreen(self):
        return _molset.HaMolView_RefreshScreen(self)

    def CreateImage(self):
        return _molset.HaMolView_CreateImage(self)

    def ClearImage(self):
        return _molset.HaMolView_ClearImage(self)

    def ClearBuffers(self):
        return _molset.HaMolView_ClearBuffers(self)

    def TransferImage(self):
        return _molset.HaMolView_TransferImage(self)

    def PrintImage(self):
        return _molset.HaMolView_PrintImage(self)

    def ClipboardImage(self):
        return _molset.HaMolView_ClipboardImage(self)

    def ReSizeScreen(self):
        return _molset.HaMolView_ReSizeScreen(self)

    def ReAllocBuffers(self):
        return _molset.HaMolView_ReAllocBuffers(self)

    def BuildHashTable(self):
        return _molset.HaMolView_BuildHashTable(self)

    def DrawFrame(self):
        return _molset.HaMolView_DrawFrame(self)

    def ResetRenderer(self):
        return _molset.HaMolView_ResetRenderer(self)

    def SetStereoMode(self, arg2):
        return _molset.HaMolView_SetStereoMode(self, arg2)

    def SetPickMode(self, arg2):
        return _molset.HaMolView_SetPickMode(self, arg2)

    def PickAtom(self, arg2, arg3, arg4):
        return _molset.HaMolView_PickAtom(self, arg2, arg3, arg4)

    def InitialTransform(self):
        return _molset.HaMolView_InitialTransform(self)

    def PrepareTransform(self):
        return _molset.HaMolView_PrepareTransform(self)

    def ApplyTransform(self):
        return _molset.HaMolView_ApplyTransform(self)

    def ResetTransform(self):
        return _molset.HaMolView_ResetTransform(self)

    def CalcRotCenter(self, sel_atoms=0):
        return _molset.HaMolView_CalcRotCenter(self, sel_atoms)

    def CenterSelected(self):
        return _molset.HaMolView_CenterSelected(self)

    def GetTransfCoord(self, x_abs, y_abs, z_abs, x_tr, y_tr, z_tr):
        return _molset.HaMolView_GetTransfCoord(self, x_abs, y_abs, z_abs, x_tr, y_tr, z_tr)

    def SetAtomScreenRadVal(self, rad):
        return _molset.HaMolView_SetAtomScreenRadVal(self, rad)

    def SetRadiusTemperature(self):
        return _molset.HaMolView_SetRadiusTemperature(self)

    def SetAtomScreenRadVdW(self):
        return _molset.HaMolView_SetAtomScreenRadVdW(self)

    def DefaultRepresentation(self):
        return _molset.HaMolView_DefaultRepresentation(self)

    def DisableSpacefill(self):
        return _molset.HaMolView_DisableSpacefill(self)

    def EnableWireframe(self, mask, rad):
        return _molset.HaMolView_EnableWireframe(self, mask, rad)

    def DisableWireframe(self):
        return _molset.HaMolView_DisableWireframe(self)

    def EnableBackbone(self, mask, rad):
        return _molset.HaMolView_EnableBackbone(self, mask, rad)

    def DisableBackbone(self):
        return _molset.HaMolView_DisableBackbone(self)

    def SetHBondStatus(self, enable, rad):
        return _molset.HaMolView_SetHBondStatus(self, enable, rad)

    def SetSSBondStatus(self, enable, rad):
        return _molset.HaMolView_SetSSBondStatus(self, enable, rad)

    def SetRibbonCartoons(self):
        return _molset.HaMolView_SetRibbonCartoons(self)

    def SetRibbonStatus(self, enable, flag, width):
        return _molset.HaMolView_SetRibbonStatus(self, enable, flag, width)

    def SetTraceTemperature(self):
        return _molset.HaMolView_SetTraceTemperature(self)
    if _newclass:
        SetMouseMode = staticmethod(_molset.HaMolView_SetMouseMode)
    else:
        SetMouseMode = _molset.HaMolView_SetMouseMode
    __swig_setmethods__["MouseMode"] = _molset.HaMolView_MouseMode_set
    __swig_getmethods__["MouseMode"] = _molset.HaMolView_MouseMode_get
    if _newclass:
        MouseMode = _swig_property(_molset.HaMolView_MouseMode_get, _molset.HaMolView_MouseMode_set)
    __swig_setmethods__["UseHourGlass"] = _molset.HaMolView_UseHourGlass_set
    __swig_getmethods__["UseHourGlass"] = _molset.HaMolView_UseHourGlass_get
    if _newclass:
        UseHourGlass = _swig_property(_molset.HaMolView_UseHourGlass_get, _molset.HaMolView_UseHourGlass_set)
    __swig_setmethods__["min_color_map"] = _molset.HaMolView_min_color_map_set
    __swig_getmethods__["min_color_map"] = _molset.HaMolView_min_color_map_get
    if _newclass:
        min_color_map = _swig_property(_molset.HaMolView_min_color_map_get, _molset.HaMolView_min_color_map_set)
    __swig_setmethods__["rev_color_map"] = _molset.HaMolView_rev_color_map_set
    __swig_getmethods__["rev_color_map"] = _molset.HaMolView_rev_color_map_get
    if _newclass:
        rev_color_map = _swig_property(_molset.HaMolView_rev_color_map_get, _molset.HaMolView_rev_color_map_set)
    if _newclass:
        RefreshColors = staticmethod(_molset.HaMolView_RefreshColors)
    else:
        RefreshColors = _molset.HaMolView_RefreshColors

    def ComputeRevColourMap(self):
        return _molset.HaMolView_ComputeRevColourMap(self)
    __swig_setmethods__["BackColor"] = _molset.HaMolView_BackColor_set
    __swig_getmethods__["BackColor"] = _molset.HaMolView_BackColor_get
    if _newclass:
        BackColor = _swig_property(_molset.HaMolView_BackColor_get, _molset.HaMolView_BackColor_set)
    __swig_setmethods__["BoxColor"] = _molset.HaMolView_BoxColor_set
    __swig_getmethods__["BoxColor"] = _molset.HaMolView_BoxColor_get
    if _newclass:
        BoxColor = _swig_property(_molset.HaMolView_BoxColor_get, _molset.HaMolView_BoxColor_set)
    __swig_setmethods__["LabelColor"] = _molset.HaMolView_LabelColor_set
    __swig_getmethods__["LabelColor"] = _molset.HaMolView_LabelColor_get
    if _newclass:
        LabelColor = _swig_property(_molset.HaMolView_LabelColor_get, _molset.HaMolView_LabelColor_set)

    def ColorAtomsByProp(self, str_prop, p_col_map=None):
        return _molset.HaMolView_ColorAtomsByProp(self, str_prop, p_col_map)

    def ColourBackNone(self):
        return _molset.HaMolView_ColourBackNone(self)

    def ColourBondNone(self):
        return _molset.HaMolView_ColourBondNone(self)

    def ColourHBondType(self):
        return _molset.HaMolView_ColourHBondType(self)

    def ColourHBondNone(self):
        return _molset.HaMolView_ColourHBondNone(self)

    def ColourSSBondNone(self):
        return _molset.HaMolView_ColourSSBondNone(self)

    def ColourMonitNone(self):
        return _molset.HaMolView_ColourMonitNone(self)

    def ColourBackAttrib(self, r, g, b):
        return _molset.HaMolView_ColourBackAttrib(self, r, g, b)

    def ColourBondAttrib(self, r, g, b):
        return _molset.HaMolView_ColourBondAttrib(self, r, g, b)

    def ColourHBondAttrib(self, r, g, b):
        return _molset.HaMolView_ColourHBondAttrib(self, r, g, b)

    def ColourSSBondAttrib(self, r, g, b):
        return _molset.HaMolView_ColourSSBondAttrib(self, r, g, b)

    def ColourMonitAttrib(self, r, g, b):
        return _molset.HaMolView_ColourMonitAttrib(self, r, g, b)

    def ColourDotsAttrib(self, r, g, b):
        return _molset.HaMolView_ColourDotsAttrib(self, r, g, b)

    def ColourDotsPotential(self):
        return _molset.HaMolView_ColourDotsPotential(self)

    def ColourRibbonNone(self, flag):
        return _molset.HaMolView_ColourRibbonNone(self, flag)

    def ColourRibbonAttrib(self, flag, r, g, b):
        return _molset.HaMolView_ColourRibbonAttrib(self, flag, r, g, b)

    def ScaleColourAttrib(self, attr):
        return _molset.HaMolView_ScaleColourAttrib(self, attr)

    def MonoColourAttrib(self, r, g, b):
        return _molset.HaMolView_MonoColourAttrib(self, r, g, b)

    def CPKColourAttrib(self):
        return _molset.HaMolView_CPKColourAttrib(self)
    if _newclass:
        ColorAtomCPK = staticmethod(_molset.HaMolView_ColorAtomCPK)
    else:
        ColorAtomCPK = _molset.HaMolView_ColorAtomCPK

    def GroupsColourAttrib(self):
        return _molset.HaMolView_GroupsColourAttrib(self)

    def ShapelyColourAttrib(self):
        return _molset.HaMolView_ShapelyColourAttrib(self)

    def AminoColourAttrib(self):
        return _molset.HaMolView_AminoColourAttrib(self)

    def StructColourAttrib(self):
        return _molset.HaMolView_StructColourAttrib(self)

    def RigidClusterColourAttrib(self):
        return _molset.HaMolView_RigidClusterColourAttrib(self)
    if _newclass:
        IsCPKColour = staticmethod(_molset.HaMolView_IsCPKColour)
    else:
        IsCPKColour = _molset.HaMolView_IsCPKColour
    __swig_setmethods__["cpk_col_map"] = _molset.HaMolView_cpk_col_map_set
    __swig_getmethods__["cpk_col_map"] = _molset.HaMolView_cpk_col_map_get
    if _newclass:
        cpk_col_map = _swig_property(_molset.HaMolView_cpk_col_map_get, _molset.HaMolView_cpk_col_map_set)

    def FormatLabel(self, chain, group, aptr, label, ptr):
        return _molset.HaMolView_FormatLabel(self, chain, group, aptr, label, ptr)

    def DeleteLabels(self):
        return _molset.HaMolView_DeleteLabels(self)

    def DefineLabels(self, label):
        return _molset.HaMolView_DefineLabels(self, label)

    def DefaultLabels(self, enable):
        return _molset.HaMolView_DefaultLabels(self, enable)

    def DisplayLabels(self):
        return _molset.HaMolView_DisplayLabels(self)
    __swig_setmethods__["LabelOptFlag"] = _molset.HaMolView_LabelOptFlag_set
    __swig_getmethods__["LabelOptFlag"] = _molset.HaMolView_LabelOptFlag_get
    if _newclass:
        LabelOptFlag = _swig_property(_molset.HaMolView_LabelOptFlag_get, _molset.HaMolView_LabelOptFlag_set)
    __swig_setmethods__["MonitList"] = _molset.HaMolView_MonitList_set
    __swig_getmethods__["MonitList"] = _molset.HaMolView_MonitList_get
    if _newclass:
        MonitList = _swig_property(_molset.HaMolView_MonitList_get, _molset.HaMolView_MonitList_set)

    def DeleteMonitors(self):
        return _molset.HaMolView_DeleteMonitors(self)

    def AddMonitors(self, src, dst):
        return _molset.HaMolView_AddMonitors(self, src, dst)

    def CreateMonitor(self, src, dst):
        return _molset.HaMolView_CreateMonitor(self, src, dst)

    def DisplayMonitors(self):
        return _molset.HaMolView_DisplayMonitors(self)

    def DisplayETBestPath(self):
        return _molset.HaMolView_DisplayETBestPath(self)

    def DisplayContourSurf(self):
        return _molset.HaMolView_DisplayContourSurf(self)

    def AnimateEigenVector(self, evec, at_coll):
        return _molset.HaMolView_AnimateEigenVector(self, evec, at_coll)

    def AnimateEigenVectorInternal(self, evec, at_coll):
        return _molset.HaMolView_AnimateEigenVectorInternal(self, evec, at_coll)

    def StopAnimation(self):
        return _molset.HaMolView_StopAnimation(self)
    __swig_setmethods__["p_anim_thread"] = _molset.HaMolView_p_anim_thread_set
    __swig_getmethods__["p_anim_thread"] = _molset.HaMolView_p_anim_thread_get
    if _newclass:
        p_anim_thread = _swig_property(_molset.HaMolView_p_anim_thread_get, _molset.HaMolView_p_anim_thread_set)
    __swig_setmethods__["to_stop_animation"] = _molset.HaMolView_to_stop_animation_set
    __swig_getmethods__["to_stop_animation"] = _molset.HaMolView_to_stop_animation_get
    if _newclass:
        to_stop_animation = _swig_property(_molset.HaMolView_to_stop_animation_get, _molset.HaMolView_to_stop_animation_set)

    def RestrictSelected(self):
        return _molset.HaMolView_RestrictSelected(self)

    def TestDot(self, x, y, z, solvent_access):
        return _molset.HaMolView_TestDot(self, x, y, z, solvent_access)

    def InitElemDots(self):
        return _molset.HaMolView_InitElemDots(self)

    def AddElemDots(self, elem, density):
        return _molset.HaMolView_AddElemDots(self, elem, density)

    def FreeElemDots(self):
        return _molset.HaMolView_FreeElemDots(self)

    def DeleteDotSurfaces(self):
        return _molset.HaMolView_DeleteDotSurfaces(self)

    def CalculateDotSurface(self, density):
        return _molset.HaMolView_CalculateDotSurface(self, density)

    def DisplayDotSurfaces(self):
        return _molset.HaMolView_DisplayDotSurfaces(self)

    def DisplayObj3D(self):
        return _molset.HaMolView_DisplayObj3D(self)

    def DisplayRibbon(self, arg2):
        return _molset.HaMolView_DisplayRibbon(self, arg2)

    def WriteImageFile(self, name, type):
        return _molset.HaMolView_WriteImageFile(self, name, type)

    def WritePPMFile(self, name, raw):
        return _molset.HaMolView_WritePPMFile(self, name, raw)

    def WriteGIFFile(self, name):
        return _molset.HaMolView_WriteGIFFile(self, name)

    def WriteBMPFile(self, name):
        return _molset.HaMolView_WriteBMPFile(self, name)

    def WritePNGFile(self, name):
        return _molset.HaMolView_WritePNGFile(self, name)

    def WriteJPEGFile(self, name):
        return _molset.HaMolView_WriteJPEGFile(self, name)

    def WriteTIFFFile(self, name):
        return _molset.HaMolView_WriteTIFFFile(self, name)

    def WritePCXFile(self, name):
        return _molset.HaMolView_WritePCXFile(self, name)

    def WritePICTFile(self, name):
        return _molset.HaMolView_WritePICTFile(self, name)

    def WriteIRISFile(self, name):
        return _molset.HaMolView_WriteIRISFile(self, name)

    def WriteVectPSFile(self, name):
        return _molset.HaMolView_WriteVectPSFile(self, name)

    def WritePOVRayFile(self, name):
        return _molset.HaMolView_WritePOVRayFile(self, name)

    def WriteVRMLFile(self, name):
        return _molset.HaMolView_WriteVRMLFile(self, name)

    def WriteScriptFile(self, name):
        return _molset.HaMolView_WriteScriptFile(self, name)

    def WriteMolScriptFile(self, name):
        return _molset.HaMolView_WriteMolScriptFile(self, name)

    def WriteVRMLDots(self):
        return _molset.HaMolView_WriteVRMLDots(self)

    def WriteVRMLColour(self, indent, shade):
        return _molset.HaMolView_WriteVRMLColour(self, indent, shade)

    def WriteVRMLTriple(self, x, y, z):
        return _molset.HaMolView_WriteVRMLTriple(self, x, y, z)

    def WriteVRMLAtoms(self):
        return _molset.HaMolView_WriteVRMLAtoms(self)

    def WriteVRMLLine(self, src, dst, shade, flag):
        return _molset.HaMolView_WriteVRMLLine(self, src, dst, shade, flag)

    def WriteVRMLWireframe(self):
        return _molset.HaMolView_WriteVRMLWireframe(self)
    __swig_setmethods__["pCanv"] = _molset.HaMolView_pCanv_set
    __swig_getmethods__["pCanv"] = _molset.HaMolView_pCanv_get
    if _newclass:
        pCanv = _swig_property(_molset.HaMolView_pCanv_get, _molset.HaMolView_pCanv_set)

    def DisplaySpaceFill(self):
        return _molset.HaMolView_DisplaySpaceFill(self)

    def DisplayWireframe(self):
        return _molset.HaMolView_DisplayWireframe(self)

    def DisplayCylinder(self, x1, y1, z1, x2, y2, z2, c1, c2, rad):
        return _molset.HaMolView_DisplayCylinder(self, x1, y1, z1, x2, y2, z2, c1, c2, rad)

    def DisplayDoubleBonds(self):
        return _molset.HaMolView_DisplayDoubleBonds(self)

    def DisplayBackbone(self):
        return _molset.HaMolView_DisplayBackbone(self)

    def DisplayHBonds(self):
        return _molset.HaMolView_DisplayHBonds(self)

    def DisplaySSBonds(self):
        return _molset.HaMolView_DisplaySSBonds(self)

    def DisplayBoxes(self):
        return _molset.HaMolView_DisplayBoxes(self)

    def DisplayOnScreenInfo(self):
        return _molset.HaMolView_DisplayOnScreenInfo(self)

    def DisplayPickedAtoms(self):
        return _molset.HaMolView_DisplayPickedAtoms(self)

    def RenderFrame(self):
        return _molset.HaMolView_RenderFrame(self)

    def TestAtomProximity(self, ptr, xpos, ypos):
        return _molset.HaMolView_TestAtomProximity(self, ptr, xpos, ypos)

    def IdentifyAtom(self, xpos, ypos):
        return _molset.HaMolView_IdentifyAtom(self, xpos, ypos)

    def InitializeTables(self):
        return _molset.HaMolView_InitializeTables(self)

    def InitializeRenderer(self):
        return _molset.HaMolView_InitializeRenderer(self)
HaMolView_swigregister = _molset.HaMolView_swigregister
HaMolView_swigregister(HaMolView)
ResidueAttr = cvar.ResidueAttr
ChainAttr = cvar.ChainAttr
TempAttr = cvar.TempAttr
ChargeAttr = cvar.ChargeAttr
RibColInside = cvar.RibColInside
RibColOutside = cvar.RibColOutside
RibColBoth = cvar.RibColBoth
DrawKnotFlag = cvar.DrawKnotFlag
WideKnotFlag = cvar.WideKnotFlag

def HaMolView_SetMouseMode(arg2):
    return _molset.HaMolView_SetMouseMode(arg2)
HaMolView_SetMouseMode = _molset.HaMolView_SetMouseMode

def HaMolView_RefreshColors():
    return _molset.HaMolView_RefreshColors()
HaMolView_RefreshColors = _molset.HaMolView_RefreshColors

def HaMolView_ColorAtomCPK(aptr):
    return _molset.HaMolView_ColorAtomCPK(aptr)
HaMolView_ColorAtomCPK = _molset.HaMolView_ColorAtomCPK

def HaMolView_IsCPKColour(aptr):
    return _molset.HaMolView_IsCPKColour(aptr)
HaMolView_IsCPKColour = _molset.HaMolView_IsCPKColour


def isqrt(arg1):
    return _molset.isqrt(arg1)
isqrt = _molset.isqrt
MAXVARS = _molset.MAXVARS
MAXTIMES = _molset.MAXTIMES
class HaField3D(HaObject):
    __swig_setmethods__ = {}
    for _s in [HaObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaField3D, name, value)
    __swig_getmethods__ = {}
    for _s in [HaObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaField3D, name)
    __repr__ = _swig_repr

    def __init__(self, fvec=None, new_Nx=0, new_Ny=0, new_Nz=0, deligate_control=False):
        this = _molset.new_HaField3D(fvec, new_Nx, new_Ny, new_Nz, deligate_control)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaField3D
    __del__ = lambda self: None

    def clear(self):
        return _molset.HaField3D_clear(self)

    def FillZeros(self):
        return _molset.HaField3D_FillZeros(self)

    def FillValues(self, val):
        return _molset.HaField3D_FillValues(self, val)

    def MultiplyByValues(self, val):
        return _molset.HaField3D_MultiplyByValues(self, val)

    def SaveGZ(self, fname, Columns=2):
        return _molset.HaField3D_SaveGZ(self, fname, Columns)

    def LoadGZ(self, fname):
        return _molset.HaField3D_LoadGZ(self, fname)

    def SaveToFile(self, fname, binary=1):
        return _molset.HaField3D_SaveToFile(self, fname, binary)

    def RestoreFromFile(self, fname, binary=1):
        return _molset.HaField3D_RestoreFromFile(self, fname, binary)

    def copy_from(self, ref_field):
        return _molset.HaField3D_copy_from(self, ref_field)

    def SetDimensions(self, new_Nx, new_Ny, new_Nz):
        return _molset.HaField3D_SetDimensions(self, new_Nx, new_Ny, new_Nz)

    def GetNx(self):
        return _molset.HaField3D_GetNx(self)

    def GetNy(self):
        return _molset.HaField3D_GetNy(self)

    def GetNz(self):
        return _molset.HaField3D_GetNz(self)

    def GetXmin(self):
        return _molset.HaField3D_GetXmin(self)

    def GetYmin(self):
        return _molset.HaField3D_GetYmin(self)

    def GetZmin(self):
        return _molset.HaField3D_GetZmin(self)

    def GetXmax(self):
        return _molset.HaField3D_GetXmax(self)

    def GetYmax(self):
        return _molset.HaField3D_GetYmax(self)

    def GetZmax(self):
        return _molset.HaField3D_GetZmax(self)

    def GetXstep(self):
        return _molset.HaField3D_GetXstep(self)

    def GetYstep(self):
        return _molset.HaField3D_GetYstep(self)

    def GetZstep(self):
        return _molset.HaField3D_GetZstep(self)

    def GetMinMaxValue(self, ValueMin, ValueMax):
        return _molset.HaField3D_GetMinMaxValue(self, ValueMin, ValueMax)

    def SetGridCornersCoord(self, xmin_new, ymin_new, zmin_new, xmax_new, ymax_new, zmax_new):
        return _molset.HaField3D_SetGridCornersCoord(self, xmin_new, ymin_new, zmin_new, xmax_new, ymax_new, zmax_new)

    def ShiftGridCorners(self, xsht, ysht, zsht):
        return _molset.HaField3D_ShiftGridCorners(self, xsht, ysht, zsht)

    def SetCenterAsZero(self, scale):
        return _molset.HaField3D_SetCenterAsZero(self, scale)

    def GetLinIdx(self, ix, iy, iz):
        return _molset.HaField3D_GetLinIdx(self, ix, iy, iz)

    def GetFieldPtr(self):
        return _molset.HaField3D_GetFieldPtr(self)

    def GetXYZ(self, x, y, z, ix, iy, iz):
        return _molset.HaField3D_GetXYZ(self, x, y, z, ix, iy, iz)

    def GetGridPtCrd(self, ix, iy, iz):
        return _molset.HaField3D_GetGridPtCrd(self, ix, iy, iz)

    def GetValPtr(self, ix, iy, iz):
        return _molset.HaField3D_GetValPtr(self, ix, iy, iz)

    def GetValue(self, ix, iy, iz):
        return _molset.HaField3D_GetValue(self, ix, iy, iz)

    def SetValue(self, ix, iy, iz, val):
        return _molset.HaField3D_SetValue(self, ix, iy, iz, val)

    def GetClosestGridPoint(self, x, y, z, ix, iy, iz):
        return _molset.HaField3D_GetClosestGridPoint(self, x, y, z, ix, iy, iz)

    def CalcLinInter(self, V0, V1, x):
        return _molset.HaField3D_CalcLinInter(self, V0, V1, x)

    def GetInterpolValAtPoint(self, x, y, z):
        return _molset.HaField3D_GetInterpolValAtPoint(self, x, y, z)

    def grid_to_xyz_float(self, numverts, vr, vc, vl, xyz_coord):
        return _molset.HaField3D_grid_to_xyz_float(self, numverts, vr, vc, vl, xyz_coord)

    def CompareHaField3D(self, CompareWith, Prec):
        return _molset.HaField3D_CompareHaField3D(self, CompareWith, Prec)
HaField3D_swigregister = _molset.HaField3D_swigregister
HaField3D_swigregister(HaField3D)
PickNone = cvar.PickNone
PickIdent = cvar.PickIdent
PickDist = cvar.PickDist
PickAngle = cvar.PickAngle
PickTorsn = cvar.PickTorsn
PickLabel = cvar.PickLabel
PickMonit = cvar.PickMonit
PickCentr = cvar.PickCentr
PickMolConnect = cvar.PickMolConnect
DefaultWide = cvar.DefaultWide
DefaultHigh = cvar.DefaultHigh
RFRotateX = cvar.RFRotateX
RFRotateY = cvar.RFRotateY
RFRotateZ = cvar.RFRotateZ
RFZoom = cvar.RFZoom
RFTransX = cvar.RFTransX
RFTransY = cvar.RFTransY
RFTransZ = cvar.RFTransZ
RFSlab = cvar.RFSlab
RFReSize = cvar.RFReSize
RFColour = cvar.RFColour
RFRefresh = cvar.RFRefresh
RFPoint1 = cvar.RFPoint1
RFPoint2 = cvar.RFPoint2
RFTrans = cvar.RFTrans
RFRotate = cvar.RFRotate
RFApply = cvar.RFApply
RFDials = cvar.RFDials
RFMagnify = cvar.RFMagnify
RFInitial = cvar.RFInitial
RFPoint = cvar.RFPoint
MMRasMol = cvar.MMRasMol
MMInsight = cvar.MMInsight
MMQuanta = cvar.MMQuanta
ViewLeft = cvar.ViewLeft
ViewRight = cvar.ViewRight
MAX_ISO_VERTS = cvar.MAX_ISO_VERTS
VERTEX_SCALE = cvar.VERTEX_SCALE

class HaNonLocField3D_2(HaField3D):
    __swig_setmethods__ = {}
    for _s in [HaField3D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaNonLocField3D_2, name, value)
    __swig_getmethods__ = {}
    for _s in [HaField3D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaNonLocField3D_2, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaNonLocField3D_2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaNonLocField3D_2
    __del__ = lambda self: None

    def SetDepth(self, new_depth):
        return _molset.HaNonLocField3D_2_SetDepth(self, new_depth)

    def GetDepth(self):
        return _molset.HaNonLocField3D_2_GetDepth(self)

    def clear(self):
        return _molset.HaNonLocField3D_2_clear(self)

    def SetDimensions(self, new_Nx, new_Ny, new_Nz):
        return _molset.HaNonLocField3D_2_SetDimensions(self, new_Nx, new_Ny, new_Nz)

    def GetValue_nloc(self, ix, iy, iz, ir_shift, ic_shift, il_shift):
        return _molset.HaNonLocField3D_2_GetValue_nloc(self, ix, iy, iz, ir_shift, ic_shift, il_shift)
HaNonLocField3D_2_swigregister = _molset.HaNonLocField3D_2_swigregister
HaNonLocField3D_2_swigregister(HaNonLocField3D_2)

class ValAtPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ValAtPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ValAtPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_ValAtPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ValAtPoint
    __del__ = lambda self: None
    __swig_setmethods__["ix"] = _molset.ValAtPoint_ix_set
    __swig_getmethods__["ix"] = _molset.ValAtPoint_ix_get
    if _newclass:
        ix = _swig_property(_molset.ValAtPoint_ix_get, _molset.ValAtPoint_ix_set)
    __swig_setmethods__["iy"] = _molset.ValAtPoint_iy_set
    __swig_getmethods__["iy"] = _molset.ValAtPoint_iy_get
    if _newclass:
        iy = _swig_property(_molset.ValAtPoint_iy_get, _molset.ValAtPoint_iy_set)
    __swig_setmethods__["iz"] = _molset.ValAtPoint_iz_set
    __swig_getmethods__["iz"] = _molset.ValAtPoint_iz_get
    if _newclass:
        iz = _swig_property(_molset.ValAtPoint_iz_get, _molset.ValAtPoint_iz_set)
    __swig_setmethods__["val"] = _molset.ValAtPoint_val_set
    __swig_getmethods__["val"] = _molset.ValAtPoint_val_get
    if _newclass:
        val = _swig_property(_molset.ValAtPoint_val_get, _molset.ValAtPoint_val_set)
ValAtPoint_swigregister = _molset.ValAtPoint_swigregister
ValAtPoint_swigregister(ValAtPoint)

class HaNonLocField3D(HaField3D):
    __swig_setmethods__ = {}
    for _s in [HaField3D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaNonLocField3D, name, value)
    __swig_getmethods__ = {}
    for _s in [HaField3D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaNonLocField3D, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaNonLocField3D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaNonLocField3D
    __del__ = lambda self: None
    __swig_setmethods__["fvals"] = _molset.HaNonLocField3D_fvals_set
    __swig_getmethods__["fvals"] = _molset.HaNonLocField3D_fvals_get
    if _newclass:
        fvals = _swig_property(_molset.HaNonLocField3D_fvals_get, _molset.HaNonLocField3D_fvals_set)

    def SaveField(self, fname):
        return _molset.HaNonLocField3D_SaveField(self, fname)
HaNonLocField3D_swigregister = _molset.HaNonLocField3D_swigregister
HaNonLocField3D_swigregister(HaNonLocField3D)

class HaSurface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaSurface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaSurface, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaSurface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaSurface
    __del__ = lambda self: None

    def clear(self):
        return _molset.HaSurface_clear(self)

    def GetSurfVolume(self):
        return _molset.HaSurface_GetSurfVolume(self)
    __swig_setmethods__["valid"] = _molset.HaSurface_valid_set
    __swig_getmethods__["valid"] = _molset.HaSurface_valid_get
    if _newclass:
        valid = _swig_property(_molset.HaSurface_valid_get, _molset.HaSurface_valid_set)
    __swig_setmethods__["isolevel"] = _molset.HaSurface_isolevel_set
    __swig_getmethods__["isolevel"] = _molset.HaSurface_isolevel_get
    if _newclass:
        isolevel = _swig_property(_molset.HaSurface_isolevel_get, _molset.HaSurface_isolevel_set)

    def calc_isosurf(self, field, iso_level):
        return _molset.HaSurface_calc_isosurf(self, field, iso_level)
    if _newclass:
        main_march = staticmethod(_molset.HaSurface_main_march)
    else:
        main_march = _molset.HaSurface_main_march
    VDW_SURF = _molset.HaSurface_VDW_SURF
    SACCESS_SURF = _molset.HaSurface_SACCESS_SURF
    SEXCL_SURF = _molset.HaSurface_SEXCL_SURF
    if _newclass:
        CalcMolSurf = staticmethod(_molset.HaSurface_CalcMolSurf)
    else:
        CalcMolSurf = _molset.HaSurface_CalcMolSurf
    __swig_setmethods__["gepol_prm"] = _molset.HaSurface_gepol_prm_set
    __swig_getmethods__["gepol_prm"] = _molset.HaSurface_gepol_prm_get
    if _newclass:
        gepol_prm = _swig_property(_molset.HaSurface_gepol_prm_get, _molset.HaSurface_gepol_prm_set)
    __swig_setmethods__["verts"] = _molset.HaSurface_verts_set
    __swig_getmethods__["verts"] = _molset.HaSurface_verts_get
    if _newclass:
        verts = _swig_property(_molset.HaSurface_verts_get, _molset.HaSurface_verts_set)
    __swig_setmethods__["norms"] = _molset.HaSurface_norms_set
    __swig_getmethods__["norms"] = _molset.HaSurface_norms_get
    if _newclass:
        norms = _swig_property(_molset.HaSurface_norms_get, _molset.HaSurface_norms_set)
    __swig_setmethods__["tr_indx"] = _molset.HaSurface_tr_indx_set
    __swig_getmethods__["tr_indx"] = _molset.HaSurface_tr_indx_get
    if _newclass:
        tr_indx = _swig_property(_molset.HaSurface_tr_indx_get, _molset.HaSurface_tr_indx_set)

    def GetNumTr(self):
        return _molset.HaSurface_GetNumTr(self)

    def GetNumVerts(self):
        return _molset.HaSurface_GetNumVerts(self)

    def SetNumVerts(self, new_num_verts):
        return _molset.HaSurface_SetNumVerts(self, new_num_verts)
    __swig_setmethods__["sph"] = _molset.HaSurface_sph_set
    __swig_getmethods__["sph"] = _molset.HaSurface_sph_get
    if _newclass:
        sph = _swig_property(_molset.HaSurface_sph_get, _molset.HaSurface_sph_set)
    __swig_setmethods__["srad"] = _molset.HaSurface_srad_set
    __swig_getmethods__["srad"] = _molset.HaSurface_srad_get
    if _newclass:
        srad = _swig_property(_molset.HaSurface_srad_get, _molset.HaSurface_srad_set)
    __swig_setmethods__["flag_sph"] = _molset.HaSurface_flag_sph_set
    __swig_getmethods__["flag_sph"] = _molset.HaSurface_flag_sph_get
    if _newclass:
        flag_sph = _swig_property(_molset.HaSurface_flag_sph_get, _molset.HaSurface_flag_sph_set)
    __swig_setmethods__["tess"] = _molset.HaSurface_tess_set
    __swig_getmethods__["tess"] = _molset.HaSurface_tess_get
    if _newclass:
        tess = _swig_property(_molset.HaSurface_tess_get, _molset.HaSurface_tess_set)
    __swig_setmethods__["tsurf"] = _molset.HaSurface_tsurf_set
    __swig_getmethods__["tsurf"] = _molset.HaSurface_tsurf_get
    if _newclass:
        tsurf = _swig_property(_molset.HaSurface_tsurf_get, _molset.HaSurface_tsurf_set)
    __swig_setmethods__["itsph"] = _molset.HaSurface_itsph_set
    __swig_getmethods__["itsph"] = _molset.HaSurface_itsph_get
    if _newclass:
        itsph = _swig_property(_molset.HaSurface_itsph_get, _molset.HaSurface_itsph_set)
    __swig_setmethods__["itsph_r"] = _molset.HaSurface_itsph_r_set
    __swig_getmethods__["itsph_r"] = _molset.HaSurface_itsph_r_get
    if _newclass:
        itsph_r = _swig_property(_molset.HaSurface_itsph_r_get, _molset.HaSurface_itsph_r_set)

    def Print_info(self, sout, level):
        return _molset.HaSurface_Print_info(self, sout, level)
    __swig_setmethods__["surface_alpha"] = _molset.HaSurface_surface_alpha_set
    __swig_getmethods__["surface_alpha"] = _molset.HaSurface_surface_alpha_get
    if _newclass:
        surface_alpha = _swig_property(_molset.HaSurface_surface_alpha_get, _molset.HaSurface_surface_alpha_set)
    __swig_setmethods__["volume_alpha"] = _molset.HaSurface_volume_alpha_set
    __swig_getmethods__["volume_alpha"] = _molset.HaSurface_volume_alpha_get
    if _newclass:
        volume_alpha = _swig_property(_molset.HaSurface_volume_alpha_get, _molset.HaSurface_volume_alpha_set)
    __swig_setmethods__["d_volume_alpha"] = _molset.HaSurface_d_volume_alpha_set
    __swig_getmethods__["d_volume_alpha"] = _molset.HaSurface_d_volume_alpha_get
    if _newclass:
        d_volume_alpha = _swig_property(_molset.HaSurface_d_volume_alpha_get, _molset.HaSurface_d_volume_alpha_set)
    __swig_setmethods__["d_surface_alpha"] = _molset.HaSurface_d_surface_alpha_set
    __swig_getmethods__["d_surface_alpha"] = _molset.HaSurface_d_surface_alpha_get
    if _newclass:
        d_surface_alpha = _swig_property(_molset.HaSurface_d_surface_alpha_get, _molset.HaSurface_d_surface_alpha_set)
    __swig_setmethods__["surface_alpha_total"] = _molset.HaSurface_surface_alpha_total_set
    __swig_getmethods__["surface_alpha_total"] = _molset.HaSurface_surface_alpha_total_get
    if _newclass:
        surface_alpha_total = _swig_property(_molset.HaSurface_surface_alpha_total_get, _molset.HaSurface_surface_alpha_total_set)

    def CalcMolSurfAlpha(self, calc_d, solv_rad, cnt_crd_alpha, cnt_rad_alpha):
        return _molset.HaSurface_CalcMolSurfAlpha(self, calc_d, solv_rad, cnt_crd_alpha, cnt_rad_alpha)
HaSurface_swigregister = _molset.HaSurface_swigregister
HaSurface_swigregister(HaSurface)

def HaSurface_main_march(ptGRID, NC, NR, NL, LOWLEV, GLEV, ARX, ARY, ARZ, NVERTS, VX, VY, VZ, NX, NY, NZ, NPTS, VPTS, IVERT, IPTS, IPOLY, ITRI):
    return _molset.HaSurface_main_march(ptGRID, NC, NR, NL, LOWLEV, GLEV, ARX, ARY, ARZ, NVERTS, VX, VY, VZ, NX, NY, NZ, NPTS, VPTS, IVERT, IPTS, IPOLY, ITRI)
HaSurface_main_march = _molset.HaSurface_main_march

def HaSurface_CalcMolSurf(sptr, surf_type, solv_rad, at_coll):
    return _molset.HaSurface_CalcMolSurf(sptr, surf_type, solv_rad, at_coll)
HaSurface_CalcMolSurf = _molset.HaSurface_CalcMolSurf


def gsurf_(ksurf, rmin, ofac, rd, ndiv, ass1, natom, ghost, np, surf_volume):
    return _molset.gsurf_(ksurf, rmin, ofac, rd, ndiv, ass1, natom, ghost, np, surf_volume)
gsurf_ = _molset.gsurf_
class csfe_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csfe_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csfe_type, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xe"] = _molset.csfe_type_xe_set
    __swig_getmethods__["xe"] = _molset.csfe_type_xe_get
    if _newclass:
        xe = _swig_property(_molset.csfe_type_xe_get, _molset.csfe_type_xe_set)
    __swig_setmethods__["ye"] = _molset.csfe_type_ye_set
    __swig_getmethods__["ye"] = _molset.csfe_type_ye_get
    if _newclass:
        ye = _swig_property(_molset.csfe_type_ye_get, _molset.csfe_type_ye_set)
    __swig_setmethods__["ze"] = _molset.csfe_type_ze_set
    __swig_getmethods__["ze"] = _molset.csfe_type_ze_get
    if _newclass:
        ze = _swig_property(_molset.csfe_type_ze_get, _molset.csfe_type_ze_set)
    __swig_setmethods__["re"] = _molset.csfe_type_re_set
    __swig_getmethods__["re"] = _molset.csfe_type_re_get
    if _newclass:
        re = _swig_property(_molset.csfe_type_re_get, _molset.csfe_type_re_set)
    __swig_setmethods__["iuse"] = _molset.csfe_type_iuse_set
    __swig_getmethods__["iuse"] = _molset.csfe_type_iuse_get
    if _newclass:
        iuse = _swig_property(_molset.csfe_type_iuse_get, _molset.csfe_type_iuse_set)

    def __init__(self):
        this = _molset.new_csfe_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_csfe_type
    __del__ = lambda self: None
csfe_type_swigregister = _molset.csfe_type_swigregister
csfe_type_swigregister(csfe_type)
MC_SIZE = cvar.MC_SIZE
MV_SIZE = cvar.MV_SIZE

class penta_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, penta_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, penta_type, name)
    __repr__ = _swig_repr
    __swig_setmethods__["jvt1"] = _molset.penta_type_jvt1_set
    __swig_getmethods__["jvt1"] = _molset.penta_type_jvt1_get
    if _newclass:
        jvt1 = _swig_property(_molset.penta_type_jvt1_get, _molset.penta_type_jvt1_set)
    __swig_setmethods__["jvt2"] = _molset.penta_type_jvt2_set
    __swig_getmethods__["jvt2"] = _molset.penta_type_jvt2_get
    if _newclass:
        jvt2 = _swig_property(_molset.penta_type_jvt2_get, _molset.penta_type_jvt2_set)

    def __init__(self):
        this = _molset.new_penta_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_penta_type
    __del__ = lambda self: None
penta_type_swigregister = _molset.penta_type_swigregister
penta_type_swigregister(penta_type)

class pun_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pun_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pun_type, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ito"] = _molset.pun_type_ito_set
    __swig_getmethods__["ito"] = _molset.pun_type_ito_get
    if _newclass:
        ito = _swig_property(_molset.pun_type_ito_get, _molset.pun_type_ito_set)
    __swig_setmethods__["iso"] = _molset.pun_type_iso_set
    __swig_getmethods__["iso"] = _molset.pun_type_iso_get
    if _newclass:
        iso = _swig_property(_molset.pun_type_iso_get, _molset.pun_type_iso_set)
    __swig_setmethods__["isa"] = _molset.pun_type_isa_set
    __swig_getmethods__["isa"] = _molset.pun_type_isa_get
    if _newclass:
        isa = _swig_property(_molset.pun_type_isa_get, _molset.pun_type_isa_set)
    __swig_setmethods__["xp"] = _molset.pun_type_xp_set
    __swig_getmethods__["xp"] = _molset.pun_type_xp_get
    if _newclass:
        xp = _swig_property(_molset.pun_type_xp_get, _molset.pun_type_xp_set)
    __swig_setmethods__["yp"] = _molset.pun_type_yp_set
    __swig_getmethods__["yp"] = _molset.pun_type_yp_get
    if _newclass:
        yp = _swig_property(_molset.pun_type_yp_get, _molset.pun_type_yp_set)
    __swig_setmethods__["zp"] = _molset.pun_type_zp_set
    __swig_getmethods__["zp"] = _molset.pun_type_zp_get
    if _newclass:
        zp = _swig_property(_molset.pun_type_zp_get, _molset.pun_type_zp_set)
    __swig_setmethods__["ap"] = _molset.pun_type_ap_set
    __swig_getmethods__["ap"] = _molset.pun_type_ap_get
    if _newclass:
        ap = _swig_property(_molset.pun_type_ap_get, _molset.pun_type_ap_set)

    def __init__(self):
        this = _molset.new_pun_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_pun_type
    __del__ = lambda self: None
pun_type_swigregister = _molset.pun_type_swigregister
pun_type_swigregister(pun_type)

class poli_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, poli_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, poli_type, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cv"] = _molset.poli_type_cv_set
    __swig_getmethods__["cv"] = _molset.poli_type_cv_get
    if _newclass:
        cv = _swig_property(_molset.poli_type_cv_get, _molset.poli_type_cv_set)
    __swig_setmethods__["xc1"] = _molset.poli_type_xc1_set
    __swig_getmethods__["xc1"] = _molset.poli_type_xc1_get
    if _newclass:
        xc1 = _swig_property(_molset.poli_type_xc1_get, _molset.poli_type_xc1_set)
    __swig_setmethods__["yc1"] = _molset.poli_type_yc1_set
    __swig_getmethods__["yc1"] = _molset.poli_type_yc1_get
    if _newclass:
        yc1 = _swig_property(_molset.poli_type_yc1_get, _molset.poli_type_yc1_set)
    __swig_setmethods__["zc1"] = _molset.poli_type_zc1_set
    __swig_getmethods__["zc1"] = _molset.poli_type_zc1_get
    if _newclass:
        zc1 = _swig_property(_molset.poli_type_zc1_get, _molset.poli_type_zc1_set)

    def __init__(self):
        this = _molset.new_poli_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_poli_type
    __del__ = lambda self: None
poli_type_swigregister = _molset.poli_type_swigregister
poli_type_swigregister(poli_type)

class HaDisplayedSurface(HaSurface, Object3D):
    __swig_setmethods__ = {}
    for _s in [HaSurface, Object3D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaDisplayedSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [HaSurface, Object3D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaDisplayedSurface, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaDisplayedSurface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaDisplayedSurface
    __del__ = lambda self: None

    def clear(self):
        return _molset.HaDisplayedSurface_clear(self)

    def RotateObj(self, rot_mat, cnt):
        return _molset.HaDisplayedSurface_RotateObj(self, rot_mat, cnt)

    def Translate(self, tr_vec):
        return _molset.HaDisplayedSurface_Translate(self, tr_vec)

    def SetTransparency(self, transp_new):
        return _molset.HaDisplayedSurface_SetTransparency(self, transp_new)

    def ColourUniform(self, r, g, b):
        return _molset.HaDisplayedSurface_ColourUniform(self, r, g, b)

    def SetNumVerts(self, new_num_verts):
        return _molset.HaDisplayedSurface_SetNumVerts(self, new_num_verts)
    __swig_setmethods__["colors"] = _molset.HaDisplayedSurface_colors_set
    __swig_getmethods__["colors"] = _molset.HaDisplayedSurface_colors_get
    if _newclass:
        colors = _swig_property(_molset.HaDisplayedSurface_colors_get, _molset.HaDisplayedSurface_colors_set)
HaDisplayedSurface_swigregister = _molset.HaDisplayedSurface_swigregister
HaDisplayedSurface_swigregister(HaDisplayedSurface)

class HaDot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaDot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaDot, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_HaDot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaDot
    __del__ = lambda self: None
    __swig_setmethods__["col"] = _molset.HaDot_col_set
    __swig_getmethods__["col"] = _molset.HaDot_col_get
    if _newclass:
        col = _swig_property(_molset.HaDot_col_get, _molset.HaDot_col_set)

    def GetX(self):
        return _molset.HaDot_GetX(self)

    def GetY(self):
        return _molset.HaDot_GetY(self)

    def GetZ(self):
        return _molset.HaDot_GetZ(self)

    def GetX_Ang(self):
        return _molset.HaDot_GetX_Ang(self)

    def GetY_Ang(self):
        return _molset.HaDot_GetY_Ang(self)

    def GetZ_Ang(self):
        return _molset.HaDot_GetZ_Ang(self)

    def SetX(self, new_x):
        return _molset.HaDot_SetX(self, new_x)

    def SetY(self, new_y):
        return _molset.HaDot_SetY(self, new_y)

    def SetZ(self, new_z):
        return _molset.HaDot_SetZ(self, new_z)

    def SetX_Ang(self, new_x):
        return _molset.HaDot_SetX_Ang(self, new_x)

    def SetY_Ang(self, new_y):
        return _molset.HaDot_SetY_Ang(self, new_y)

    def SetZ_Ang(self, new_z):
        return _molset.HaDot_SetZ_Ang(self, new_z)
HaDot_swigregister = _molset.HaDot_swigregister
HaDot_swigregister(HaDot)

class DotStruct(Object3D):
    __swig_setmethods__ = {}
    for _s in [Object3D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DotStruct, name, value)
    __swig_getmethods__ = {}
    for _s in [Object3D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DotStruct, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_DotStruct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_DotStruct
    __del__ = lambda self: None
    __swig_setmethods__["dots"] = _molset.DotStruct_dots_set
    __swig_getmethods__["dots"] = _molset.DotStruct_dots_get
    if _newclass:
        dots = _swig_property(_molset.DotStruct_dots_get, _molset.DotStruct_dots_set)

    def GetCount(self):
        return _molset.DotStruct_GetCount(self)

    def AddDot(self, x, y, z, col):
        return _molset.DotStruct_AddDot(self, x, y, z, col)

    def GetObjName(self):
        return _molset.DotStruct_GetObjName(self)

    def RotateObj(self, rot_mat, cnt):
        return _molset.DotStruct_RotateObj(self, rot_mat, cnt)

    def Translate(self, tr_vec):
        return _molset.DotStruct_Translate(self, tr_vec)
DotStruct_swigregister = _molset.DotStruct_swigregister
DotStruct_swigregister(DotStruct)

class HaBasisSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaBasisSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaBasisSet, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNBfunc(self):
        return _molset.HaBasisSet_GetNBfunc(self)

    def GetClassName(self):
        return _molset.HaBasisSet_GetClassName(self)

    def GetLabel(self, idx):
        return _molset.HaBasisSet_GetLabel(self, idx)

    def GetHostPt(self, *args):
        return _molset.HaBasisSet_GetHostPt(self, *args)

    def TransferBetweenAtoms(self, pt_corr_map):
        return _molset.HaBasisSet_TransferBetweenAtoms(self, pt_corr_map)
    if _newclass:
        CalcOvlpMat = staticmethod(_molset.HaBasisSet_CalcOvlpMat)
    else:
        CalcOvlpMat = _molset.HaBasisSet_CalcOvlpMat
    if _newclass:
        GetID = staticmethod(_molset.HaBasisSet_GetID)
    else:
        GetID = _molset.HaBasisSet_GetID
    if _newclass:
        RemoveCachedMatForBasis = staticmethod(_molset.HaBasisSet_RemoveCachedMatForBasis)
    else:
        RemoveCachedMatForBasis = _molset.HaBasisSet_RemoveCachedMatForBasis
    if _newclass:
        ClearMatCache = staticmethod(_molset.HaBasisSet_ClearMatCache)
    else:
        ClearMatCache = _molset.HaBasisSet_ClearMatCache
    if _newclass:
        GetCachedOvlpMat = staticmethod(_molset.HaBasisSet_GetCachedOvlpMat)
    else:
        GetCachedOvlpMat = _molset.HaBasisSet_GetCachedOvlpMat
    if _newclass:
        SaveInCacheOverlapMap = staticmethod(_molset.HaBasisSet_SaveInCacheOverlapMap)
    else:
        SaveInCacheOverlapMap = _molset.HaBasisSet_SaveInCacheOverlapMap
    __swig_destroy__ = _molset.delete_HaBasisSet
    __del__ = lambda self: None
HaBasisSet_swigregister = _molset.HaBasisSet_swigregister
HaBasisSet_swigregister(HaBasisSet)

def HaBasisSet_CalcOvlpMat(pbas1, pbas2, ovlp_mat):
    return _molset.HaBasisSet_CalcOvlpMat(pbas1, pbas2, ovlp_mat)
HaBasisSet_CalcOvlpMat = _molset.HaBasisSet_CalcOvlpMat

def HaBasisSet_GetID(pbas):
    return _molset.HaBasisSet_GetID(pbas)
HaBasisSet_GetID = _molset.HaBasisSet_GetID

def HaBasisSet_RemoveCachedMatForBasis(pbas):
    return _molset.HaBasisSet_RemoveCachedMatForBasis(pbas)
HaBasisSet_RemoveCachedMatForBasis = _molset.HaBasisSet_RemoveCachedMatForBasis

def HaBasisSet_ClearMatCache():
    return _molset.HaBasisSet_ClearMatCache()
HaBasisSet_ClearMatCache = _molset.HaBasisSet_ClearMatCache

def HaBasisSet_GetCachedOvlpMat(pbas1, pbas2):
    return _molset.HaBasisSet_GetCachedOvlpMat(pbas1, pbas2)
HaBasisSet_GetCachedOvlpMat = _molset.HaBasisSet_GetCachedOvlpMat

def HaBasisSet_SaveInCacheOverlapMap(pbas1, pbas2, smat):
    return _molset.HaBasisSet_SaveInCacheOverlapMap(pbas1, pbas2, smat)
HaBasisSet_SaveInCacheOverlapMap = _molset.HaBasisSet_SaveInCacheOverlapMap

class ArrayOrb3D(HaBasisSet):
    __swig_setmethods__ = {}
    for _s in [HaBasisSet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayOrb3D, name, value)
    __swig_getmethods__ = {}
    for _s in [HaBasisSet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayOrb3D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ExpandInBas(self, coef, bset):
        return _molset.ArrayOrb3D_ExpandInBas(self, coef, bset)

    def GetTransfMat(self, *args):
        return _molset.ArrayOrb3D_GetTransfMat(self, *args)

    def AddXml(self, *args):
        return _molset.ArrayOrb3D_AddXml(self, *args)

    def SaveXML(self, file_out, option=0):
        return _molset.ArrayOrb3D_SaveXML(self, file_out, option)

    def LoadXmlFile(self, *args):
        return _molset.ArrayOrb3D_LoadXmlFile(self, *args)

    def LoadXml(self, xml_element, option=0):
        return _molset.ArrayOrb3D_LoadXml(self, xml_element, option)
    if _newclass:
        CreateObjectWithType = staticmethod(_molset.ArrayOrb3D_CreateObjectWithType)
    else:
        CreateObjectWithType = _molset.ArrayOrb3D_CreateObjectWithType
    __swig_destroy__ = _molset.delete_ArrayOrb3D
    __del__ = lambda self: None
ArrayOrb3D_swigregister = _molset.ArrayOrb3D_swigregister
ArrayOrb3D_swigregister(ArrayOrb3D)

def ArrayOrb3D_CreateObjectWithType(type):
    return _molset.ArrayOrb3D_CreateObjectWithType(type)
ArrayOrb3D_CreateObjectWithType = _molset.ArrayOrb3D_CreateObjectWithType

class GauShell(ArrayOrb3D):
    __swig_setmethods__ = {}
    for _s in [ArrayOrb3D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GauShell, name, value)
    __swig_getmethods__ = {}
    for _s in [ArrayOrb3D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GauShell, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_GauShell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_GauShell
    __del__ = lambda self: None

    def GetL(self):
        return _molset.GauShell_GetL(self)

    def GetShellSymbol(self):
        return _molset.GauShell_GetShellSymbol(self)

    def GetShellFunSymbol(self, ifun):
        return _molset.GauShell_GetShellFunSymbol(self, ifun)

    def GetLabel(self, idx):
        return _molset.GauShell_GetLabel(self, idx)

    def GetHostPt(self, *args):
        return _molset.GauShell_GetHostPt(self, *args)

    def GetClassName(self):
        return _molset.GauShell_GetClassName(self)

    def GetNBfunc(self):
        return _molset.GauShell_GetNBfunc(self)

    def GetTransfMat(self, trans_mat, rot_mat):
        return _molset.GauShell_GetTransfMat(self, trans_mat, rot_mat)

    def TransferBetweenAtoms(self, pt_corr_map):
        return _molset.GauShell_TransferBetweenAtoms(self, pt_corr_map)

    def AddXml(self, *args):
        return _molset.GauShell_AddXml(self, *args)

    def LoadXml(self, gau_shell_element, option=0):
        return _molset.GauShell_LoadXml(self, gau_shell_element, option)

    def GetNBfuncCart(self):
        return _molset.GauShell_GetNBfuncCart(self)

    def EvalLinCombInPoint(self, x, y, z, cf):
        return _molset.GauShell_EvalLinCombInPoint(self, x, y, z, cf)

    def GetExtent(self, i, tol):
        return _molset.GauShell_GetExtent(self, i, tol)

    def GetNumGauss(self):
        return _molset.GauShell_GetNumGauss(self)

    def SetNumGauss(self, NGauss):
        return _molset.GauShell_SetNumGauss(self, NGauss)

    def SetCoef(self, *args):
        return _molset.GauShell_SetCoef(self, *args)

    def GetExp(self, ig):
        return _molset.GauShell_GetExp(self, ig)

    def GetCoef(self, *args):
        return _molset.GauShell_GetCoef(self, *args)

    def SaveGaussianInp(self, os):
        return _molset.GauShell_SaveGaussianInp(self, os)

    def __eq__(self, rhs):
        return _molset.GauShell___eq__(self, rhs)

    def __lt__(self, rhs):
        return _molset.GauShell___lt__(self, rhs)

    def Normalize(self):
        return _molset.GauShell_Normalize(self)
GauShell_swigregister = _molset.GauShell_swigregister
GauShell_swigregister(GauShell)

class GauAtomBasis(ArrayOrb3D):
    __swig_setmethods__ = {}
    for _s in [ArrayOrb3D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GauAtomBasis, name, value)
    __swig_getmethods__ = {}
    for _s in [ArrayOrb3D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GauAtomBasis, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_GauAtomBasis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_GauAtomBasis
    __del__ = lambda self: None

    def SetDefaultParams(self):
        return _molset.GauAtomBasis_SetDefaultParams(self)

    def copy_from(self, ref):
        return _molset.GauAtomBasis_copy_from(self, ref)

    def SetForAtom(self, BasName, aptr):
        return _molset.GauAtomBasis_SetForAtom(self, BasName, aptr)

    def GetBasName(self):
        return _molset.GauAtomBasis_GetBasName(self)

    def SetBasName(self, name):
        return _molset.GauAtomBasis_SetBasName(self, name)

    def SetAtHost(self, new_host_atom):
        return _molset.GauAtomBasis_SetAtHost(self, new_host_atom)

    def GetAtHost(self, *args):
        return _molset.GauAtomBasis_GetAtHost(self, *args)

    def GetLabel(self, idx):
        return _molset.GauAtomBasis_GetLabel(self, idx)

    def GetHostPt(self, *args):
        return _molset.GauAtomBasis_GetHostPt(self, *args)

    def TransferBetweenAtoms(self, pt_corr_map):
        return _molset.GauAtomBasis_TransferBetweenAtoms(self, pt_corr_map)

    def AddXml(self, *args):
        return _molset.GauAtomBasis_AddXml(self, *args)

    def LoadXml(self, gau_shell_element, option=0):
        return _molset.GauAtomBasis_LoadXml(self, gau_shell_element, option)

    def SetFromGaussianInp(self, arg2):
        return _molset.GauAtomBasis_SetFromGaussianInp(self, arg2)

    def SaveGaussianInp(self, p_stream_out):
        return _molset.GauAtomBasis_SaveGaussianInp(self, p_stream_out)

    def GetAtomType(self):
        return _molset.GauAtomBasis_GetAtomType(self)

    def SetAtomType(self, atype):
        return _molset.GauAtomBasis_SetAtomType(self, atype)

    def GetNBfunc(self):
        return _molset.GauAtomBasis_GetNBfunc(self)

    def GetNBfuncCart(self):
        return _molset.GauAtomBasis_GetNBfuncCart(self)

    def GetClassName(self):
        return _molset.GauAtomBasis_GetClassName(self)

    def AddShell(self, shl):
        return _molset.GauAtomBasis_AddShell(self, shl)

    def Clear(self):
        return _molset.GauAtomBasis_Clear(self)

    def ClearCoef(self):
        return _molset.GauAtomBasis_ClearCoef(self)

    def SetPseudoPotName(self, new_pot_name):
        return _molset.GauAtomBasis_SetPseudoPotName(self, new_pot_name)

    def SetPseudoPotFromName(self):
        return _molset.GauAtomBasis_SetPseudoPotFromName(self)

    def SetPseudoPotPtr(self, new_ppot):
        return _molset.GauAtomBasis_SetPseudoPotPtr(self, new_ppot)

    def GetPseudoPot(self):
        return _molset.GauAtomBasis_GetPseudoPot(self)

    def IsSetPseudoPot(self):
        return _molset.GauAtomBasis_IsSetPseudoPot(self)

    def GetNumElectr(self):
        return _molset.GauAtomBasis_GetNumElectr(self)

    def __eq__(self, rhs):
        return _molset.GauAtomBasis___eq__(self, rhs)

    def __lt__(self, rhs):
        return _molset.GauAtomBasis___lt__(self, rhs)

    def Print_info(self, sout, level):
        return _molset.GauAtomBasis_Print_info(self, sout, level)
    __swig_setmethods__["Shells"] = _molset.GauAtomBasis_Shells_set
    __swig_getmethods__["Shells"] = _molset.GauAtomBasis_Shells_get
    if _newclass:
        Shells = _swig_property(_molset.GauAtomBasis_Shells_get, _molset.GauAtomBasis_Shells_set)
GauAtomBasis_swigregister = _molset.GauAtomBasis_swigregister
GauAtomBasis_swigregister(GauAtomBasis)

class GauBasisSet(ArrayOrb3D):
    __swig_setmethods__ = {}
    for _s in [ArrayOrb3D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GauBasisSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ArrayOrb3D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GauBasisSet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_GauBasisSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_GauBasisSet
    __del__ = lambda self: None

    def Clear(self):
        return _molset.GauBasisSet_Clear(self)

    def GetName(self):
        return _molset.GauBasisSet_GetName(self)

    def IsGeneric(self):
        return _molset.GauBasisSet_IsGeneric(self)

    def SetGeneric(self):
        return _molset.GauBasisSet_SetGeneric(self)

    def LoadToGaussianBas(self, gaub):
        return _molset.GauBasisSet_LoadToGaussianBas(self, gaub)

    def LoadToGaussianBCommon(self):
        return _molset.GauBasisSet_LoadToGaussianBCommon(self)

    def LoadToGaussianB2Common(self):
        return _molset.GauBasisSet_LoadToGaussianB2Common(self)

    def CreateIPackBas(self):
        return _molset.GauBasisSet_CreateIPackBas(self)

    def GetNBfunc(self):
        return _molset.GauBasisSet_GetNBfunc(self)

    def GetClassName(self):
        return _molset.GauBasisSet_GetClassName(self)

    def GetNBfuncCart(self):
        return _molset.GauBasisSet_GetNBfuncCart(self)
    __swig_setmethods__["pure_fun_flag"] = _molset.GauBasisSet_pure_fun_flag_set
    __swig_getmethods__["pure_fun_flag"] = _molset.GauBasisSet_pure_fun_flag_get
    if _newclass:
        pure_fun_flag = _swig_property(_molset.GauBasisSet_pure_fun_flag_get, _molset.GauBasisSet_pure_fun_flag_set)

    def GetLabel(self, idx):
        return _molset.GauBasisSet_GetLabel(self, idx)

    def GetHostPt(self, *args):
        return _molset.GauBasisSet_GetHostPt(self, *args)

    def GetTransfMat(self, transf_mat, rot_mat):
        return _molset.GauBasisSet_GetTransfMat(self, transf_mat, rot_mat)

    def TransferBetweenAtoms(self, pt_corr_map):
        return _molset.GauBasisSet_TransferBetweenAtoms(self, pt_corr_map)

    def AddXml(self, *args):
        return _molset.GauBasisSet_AddXml(self, *args)

    def LoadXml(self, xml_element, option=0):
        return _molset.GauBasisSet_LoadXml(self, xml_element, option)

    def InitForMolSet(self, bname, pmset):
        return _molset.GauBasisSet_InitForMolSet(self, bname, pmset)

    def InitForAtoms(self, bname, at_coll):
        return _molset.GauBasisSet_InitForAtoms(self, bname, at_coll)

    def AddBasisToAtom(self, bas_name, aptr):
        return _molset.GauBasisSet_AddBasisToAtom(self, bas_name, aptr)

    def GetAtBasByIdx(self, i):
        return _molset.GauBasisSet_GetAtBasByIdx(self, i)

    def GetNumAtBas(self):
        return _molset.GauBasisSet_GetNumAtBas(self)
    if _newclass:
        CalcOvlpMat = staticmethod(_molset.GauBasisSet_CalcOvlpMat)
    else:
        CalcOvlpMat = _molset.GauBasisSet_CalcOvlpMat

    def GetNumCnt(self):
        return _molset.GauBasisSet_GetNumCnt(self)

    def GetCntCoord(self, coord):
        return _molset.GauBasisSet_GetCntCoord(self, coord)

    def GetCntCoordArr(self, crd_arr):
        return _molset.GauBasisSet_GetCntCoordArr(self, crd_arr)

    def GetNumElectr(self):
        return _molset.GauBasisSet_GetNumElectr(self)

    def GetAtBasIdxForOrb(self, i):
        return _molset.GauBasisSet_GetAtBasIdxForOrb(self, i)

    def RecompFstBasVec(self):
        return _molset.GauBasisSet_RecompFstBasVec(self)

    def MatchBasisSet(self, basis_frag, frag_bas_fun_map, bas_pert_vec=None):
        return _molset.GauBasisSet_MatchBasisSet(self, basis_frag, frag_bas_fun_map, bas_pert_vec)
    __swig_setmethods__["at_bas_vec"] = _molset.GauBasisSet_at_bas_vec_set
    __swig_getmethods__["at_bas_vec"] = _molset.GauBasisSet_at_bas_vec_get
    if _newclass:
        at_bas_vec = _swig_property(_molset.GauBasisSet_at_bas_vec_get, _molset.GauBasisSet_at_bas_vec_set)
    __swig_setmethods__["atom_bas_idx"] = _molset.GauBasisSet_atom_bas_idx_set
    __swig_getmethods__["atom_bas_idx"] = _molset.GauBasisSet_atom_bas_idx_get
    if _newclass:
        atom_bas_idx = _swig_property(_molset.GauBasisSet_atom_bas_idx_get, _molset.GauBasisSet_atom_bas_idx_set)
    __swig_setmethods__["fst_bas_fun_idx"] = _molset.GauBasisSet_fst_bas_fun_idx_set
    __swig_getmethods__["fst_bas_fun_idx"] = _molset.GauBasisSet_fst_bas_fun_idx_get
    if _newclass:
        fst_bas_fun_idx = _swig_property(_molset.GauBasisSet_fst_bas_fun_idx_get, _molset.GauBasisSet_fst_bas_fun_idx_set)
    __swig_setmethods__["bf_lbls"] = _molset.GauBasisSet_bf_lbls_set
    __swig_getmethods__["bf_lbls"] = _molset.GauBasisSet_bf_lbls_get
    if _newclass:
        bf_lbls = _swig_property(_molset.GauBasisSet_bf_lbls_get, _molset.GauBasisSet_bf_lbls_set)
GauBasisSet_swigregister = _molset.GauBasisSet_swigregister
GauBasisSet_swigregister(GauBasisSet)

def GauBasisSet_CalcOvlpMat(pbas1, pbas2, ovlp_mat):
    return _molset.GauBasisSet_CalcOvlpMat(pbas1, pbas2, ovlp_mat)
GauBasisSet_CalcOvlpMat = _molset.GauBasisSet_CalcOvlpMat

class LinCombOrb3D(ArrayOrb3D):
    __swig_setmethods__ = {}
    for _s in [ArrayOrb3D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinCombOrb3D, name, value)
    __swig_getmethods__ = {}
    for _s in [ArrayOrb3D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinCombOrb3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_LinCombOrb3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_LinCombOrb3D
    __del__ = lambda self: None

    def SetStdParams(self):
        return _molset.LinCombOrb3D_SetStdParams(self)

    def GetClassName(self):
        return _molset.LinCombOrb3D_GetClassName(self)

    def IsEmpty(self):
        return _molset.LinCombOrb3D_IsEmpty(self)

    def Clear(self):
        return _molset.LinCombOrb3D_Clear(self)

    def GetOrbIdxByID(self, id):
        return _molset.LinCombOrb3D_GetOrbIdxByID(self, id)

    def GetLabel(self, idx):
        return _molset.LinCombOrb3D_GetLabel(self, idx)

    def GetHostPt(self, *args):
        return _molset.LinCombOrb3D_GetHostPt(self, *args)

    def TransferBetweenAtoms(self, pt_corr_map):
        return _molset.LinCombOrb3D_TransferBetweenAtoms(self, pt_corr_map)

    def AddXml(self, *args):
        return _molset.LinCombOrb3D_AddXml(self, *args)

    def LoadXml(self, xml_element, option=0):
        return _molset.LinCombOrb3D_LoadXml(self, xml_element, option)

    def CreateEmptyOrbs(self, n_orb, new_bas):
        return _molset.LinCombOrb3D_CreateEmptyOrbs(self, n_orb, new_bas)

    def AddOrbs(self, orbs):
        return _molset.LinCombOrb3D_AddOrbs(self, orbs)

    def SetOrbLabel(self, idx, orb_lbl):
        return _molset.LinCombOrb3D_SetOrbLabel(self, idx, orb_lbl)

    def ProjectToBasis(self, coef_new, basis_new):
        return _molset.LinCombOrb3D_ProjectToBasis(self, coef_new, basis_new)

    def GetNOrbs(self):
        return _molset.LinCombOrb3D_GetNOrbs(self)

    def GetNBfunc(self):
        return _molset.LinCombOrb3D_GetNBfunc(self)

    def TrCoefRot(self, rot_mat):
        return _molset.LinCombOrb3D_TrCoefRot(self, rot_mat)
    __swig_setmethods__["internal_basis"] = _molset.LinCombOrb3D_internal_basis_set
    __swig_getmethods__["internal_basis"] = _molset.LinCombOrb3D_internal_basis_get
    if _newclass:
        internal_basis = _swig_property(_molset.LinCombOrb3D_internal_basis_get, _molset.LinCombOrb3D_internal_basis_set)
    __swig_setmethods__["coef"] = _molset.LinCombOrb3D_coef_set
    __swig_getmethods__["coef"] = _molset.LinCombOrb3D_coef_get
    if _newclass:
        coef = _swig_property(_molset.LinCombOrb3D_coef_get, _molset.LinCombOrb3D_coef_set)
    __swig_setmethods__["bas"] = _molset.LinCombOrb3D_bas_set
    __swig_getmethods__["bas"] = _molset.LinCombOrb3D_bas_get
    if _newclass:
        bas = _swig_property(_molset.LinCombOrb3D_bas_get, _molset.LinCombOrb3D_bas_set)
    __swig_setmethods__["ids"] = _molset.LinCombOrb3D_ids_set
    __swig_getmethods__["ids"] = _molset.LinCombOrb3D_ids_get
    if _newclass:
        ids = _swig_property(_molset.LinCombOrb3D_ids_get, _molset.LinCombOrb3D_ids_set)
    __swig_setmethods__["at_ptr"] = _molset.LinCombOrb3D_at_ptr_set
    __swig_getmethods__["at_ptr"] = _molset.LinCombOrb3D_at_ptr_get
    if _newclass:
        at_ptr = _swig_property(_molset.LinCombOrb3D_at_ptr_get, _molset.LinCombOrb3D_at_ptr_set)
    if _newclass:
        CalcOvlpMat = staticmethod(_molset.LinCombOrb3D_CalcOvlpMat)
    else:
        CalcOvlpMat = _molset.LinCombOrb3D_CalcOvlpMat
    if _newclass:
        Eval1eOp = staticmethod(_molset.LinCombOrb3D_Eval1eOp)
    else:
        Eval1eOp = _molset.LinCombOrb3D_Eval1eOp
LinCombOrb3D_swigregister = _molset.LinCombOrb3D_swigregister
LinCombOrb3D_swigregister(LinCombOrb3D)

def LinCombOrb3D_CalcOvlpMat(pbas1, pbas2, ovlp_mat):
    return _molset.LinCombOrb3D_CalcOvlpMat(pbas1, pbas2, ovlp_mat)
LinCombOrb3D_CalcOvlpMat = _molset.LinCombOrb3D_CalcOvlpMat

def LinCombOrb3D_Eval1eOp(pbas1, pbas2, bop_mat, op_mat):
    return _molset.LinCombOrb3D_Eval1eOp(pbas1, pbas2, bop_mat, op_mat)
LinCombOrb3D_Eval1eOp = _molset.LinCombOrb3D_Eval1eOp

class HaOperR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaOperR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaOperR, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaOperR()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaOperR
    __del__ = lambda self: None

    def FillMat(self, pbset, rmats):
        return _molset.HaOperR_FillMat(self, pbset, rmats)

    def EvalGauBasisSet(self, pbset, rmats):
        return _molset.HaOperR_EvalGauBasisSet(self, pbset, rmats)
HaOperR_swigregister = _molset.HaOperR_swigregister
HaOperR_swigregister(HaOperR)

class HaOperRDelt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaOperRDelt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaOperRDelt, name)
    __repr__ = _swig_repr

    def __init__(self, ptr_qc_mod_new):
        this = _molset.new_HaOperRDelt(ptr_qc_mod_new)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaOperRDelt
    __del__ = lambda self: None

    def FillMat(self, pbset, rmats):
        return _molset.HaOperRDelt_FillMat(self, pbset, rmats)

    def EvalGauBasisSet(self, pbset, rmats):
        return _molset.HaOperRDelt_EvalGauBasisSet(self, pbset, rmats)

    def RecalcFromHr(self):
        return _molset.HaOperRDelt_RecalcFromHr(self)

    def RecalcFromHr2(self):
        return _molset.HaOperRDelt_RecalcFromHr2(self)

    def RecalcLondon(self, pbset):
        return _molset.HaOperRDelt_RecalcLondon(self, pbset)

    def LondonDaltonCalc(self):
        return _molset.HaOperRDelt_LondonDaltonCalc(self)

    def SetLondonAO(self):
        return _molset.HaOperRDelt_SetLondonAO(self)
    __swig_setmethods__["ptr_qc_mod"] = _molset.HaOperRDelt_ptr_qc_mod_set
    __swig_getmethods__["ptr_qc_mod"] = _molset.HaOperRDelt_ptr_qc_mod_get
    if _newclass:
        ptr_qc_mod = _swig_property(_molset.HaOperRDelt_ptr_qc_mod_get, _molset.HaOperRDelt_ptr_qc_mod_set)
    __swig_setmethods__["data"] = _molset.HaOperRDelt_data_set
    __swig_getmethods__["data"] = _molset.HaOperRDelt_data_get
    if _newclass:
        data = _swig_property(_molset.HaOperRDelt_data_get, _molset.HaOperRDelt_data_set)
    __swig_setmethods__["i_lond"] = _molset.HaOperRDelt_i_lond_set
    __swig_getmethods__["i_lond"] = _molset.HaOperRDelt_i_lond_get
    if _newclass:
        i_lond = _swig_property(_molset.HaOperRDelt_i_lond_get, _molset.HaOperRDelt_i_lond_set)
HaOperRDelt_swigregister = _molset.HaOperRDelt_swigregister
HaOperRDelt_swigregister(HaOperRDelt)

class HaOperGrad(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaOperGrad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaOperGrad, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaOperGrad()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaOperGrad
    __del__ = lambda self: None

    def FillMat(self, pbset, rmats):
        return _molset.HaOperGrad_FillMat(self, pbset, rmats)

    def EvalGauBasisSet(self, pbset, fmats):
        return _molset.HaOperGrad_EvalGauBasisSet(self, pbset, fmats)
HaOperGrad_swigregister = _molset.HaOperGrad_swigregister
HaOperGrad_swigregister(HaOperGrad)

class HaOperKinEner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaOperKinEner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaOperKinEner, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaOperKinEner()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaOperKinEner
    __del__ = lambda self: None

    def EvalGauBasisSet(self, pbset, fmat):
        return _molset.HaOperKinEner_EvalGauBasisSet(self, pbset, fmat)
HaOperKinEner_swigregister = _molset.HaOperKinEner_swigregister
HaOperKinEner_swigregister(HaOperKinEner)

class PseudoTerm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PseudoTerm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PseudoTerm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_PseudoTerm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_PseudoTerm
    __del__ = lambda self: None
    __swig_setmethods__["npower"] = _molset.PseudoTerm_npower_set
    __swig_getmethods__["npower"] = _molset.PseudoTerm_npower_get
    if _newclass:
        npower = _swig_property(_molset.PseudoTerm_npower_get, _molset.PseudoTerm_npower_set)
    __swig_setmethods__["expon"] = _molset.PseudoTerm_expon_set
    __swig_getmethods__["expon"] = _molset.PseudoTerm_expon_get
    if _newclass:
        expon = _swig_property(_molset.PseudoTerm_expon_get, _molset.PseudoTerm_expon_set)
    __swig_setmethods__["coef"] = _molset.PseudoTerm_coef_set
    __swig_getmethods__["coef"] = _molset.PseudoTerm_coef_get
    if _newclass:
        coef = _swig_property(_molset.PseudoTerm_coef_get, _molset.PseudoTerm_coef_set)
PseudoTerm_swigregister = _molset.PseudoTerm_swigregister
PseudoTerm_swigregister(PseudoTerm)

class PseudoBlock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PseudoBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PseudoBlock, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_PseudoBlock()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_PseudoBlock
    __del__ = lambda self: None
    __swig_setmethods__["description"] = _molset.PseudoBlock_description_set
    __swig_getmethods__["description"] = _molset.PseudoBlock_description_get
    if _newclass:
        description = _swig_property(_molset.PseudoBlock_description_get, _molset.PseudoBlock_description_set)
    __swig_setmethods__["terms"] = _molset.PseudoBlock_terms_set
    __swig_getmethods__["terms"] = _molset.PseudoBlock_terms_get
    if _newclass:
        terms = _swig_property(_molset.PseudoBlock_terms_get, _molset.PseudoBlock_terms_set)
PseudoBlock_swigregister = _molset.PseudoBlock_swigregister
PseudoBlock_swigregister(PseudoBlock)

class HaPseudoPot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaPseudoPot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaPseudoPot, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaPseudoPot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaPseudoPot
    __del__ = lambda self: None

    def SaveGaussInp(self, os):
        return _molset.HaPseudoPot_SaveGaussInp(self, os)

    def GetNCoreEl(self):
        return _molset.HaPseudoPot_GetNCoreEl(self)
HaPseudoPot_swigregister = _molset.HaPseudoPot_swigregister
HaPseudoPot_swigregister(HaPseudoPot)

class HaPseudoPotRef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaPseudoPotRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaPseudoPotRef, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_HaPseudoPotRef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaPseudoPotRef
    __del__ = lambda self: None

    def __eq__(self, rhs):
        return _molset.HaPseudoPotRef___eq__(self, rhs)

    def __lt__(self, rhs):
        return _molset.HaPseudoPotRef___lt__(self, rhs)
HaPseudoPotRef_swigregister = _molset.HaPseudoPotRef_swigregister
HaPseudoPotRef_swigregister(HaPseudoPotRef)

class HaPseudoPotDB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaPseudoPotDB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaPseudoPotDB, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaPseudoPotDB()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaPseudoPotDB
    __del__ = lambda self: None

    def Extract(self, pot_name, at_label):
        return _molset.HaPseudoPotDB_Extract(self, pot_name, at_label)

    def Init(self):
        return _molset.HaPseudoPotDB_Init(self)
HaPseudoPotDB_swigregister = _molset.HaPseudoPotDB_swigregister
HaPseudoPotDB_swigregister(HaPseudoPotDB)

class RunOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RunOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RunOptions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_RunOptions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_RunOptions
    __del__ = lambda self: None

    def SetStdOptions(self):
        return _molset.RunOptions_SetStdOptions(self)

    def Copy(self, ref):
        return _molset.RunOptions_Copy(self, ref)

    def clone(self):
        return _molset.RunOptions_clone(self)

    def SetRunSync(self, set_flag=True):
        return _molset.RunOptions_SetRunSync(self, set_flag)

    def ToRunSync(self):
        return _molset.RunOptions_ToRunSync(self)

    def SetSaveInpFile(self, set_flag=True):
        return _molset.RunOptions_SetSaveInpFile(self, set_flag)

    def ToSaveInpFile(self):
        return _molset.RunOptions_ToSaveInpFile(self)

    def SetLoadOutput(self, set_flag=True):
        return _molset.RunOptions_SetLoadOutput(self, set_flag)

    def ToLoadOutput(self):
        return _molset.RunOptions_ToLoadOutput(self)
RunOptions_swigregister = _molset.RunOptions_swigregister
RunOptions_swigregister(RunOptions)
COMP_MOD_ELECTROST = cvar.COMP_MOD_ELECTROST
COMP_MOD_ET_COUPL = cvar.COMP_MOD_ET_COUPL
COMP_MOD_QCHEM = cvar.COMP_MOD_QCHEM
COMP_MOD_GAUSSIAN = cvar.COMP_MOD_GAUSSIAN
COMP_MOD_DALTON = cvar.COMP_MOD_DALTON
COMP_MOD_INTERMOL = cvar.COMP_MOD_INTERMOL
COMP_MOD_MOLMECH = cvar.COMP_MOD_MOLMECH
COMP_MOD_SCATTER = cvar.COMP_MOD_SCATTER
COMP_MOD_STM = cvar.COMP_MOD_STM
COMP_MOD_NUCL_ACID = cvar.COMP_MOD_NUCL_ACID
COMP_MOD_ZINDO = cvar.COMP_MOD_ZINDO
COMP_MOD_PROTON_REDOX = cvar.COMP_MOD_PROTON_REDOX
COMP_MOD_EMPIRICAL = cvar.COMP_MOD_EMPIRICAL
COMP_MOD_PNP = cvar.COMP_MOD_PNP
COMP_MOD_APBS = cvar.COMP_MOD_APBS
COMP_MOD_EL = cvar.COMP_MOD_EL
COMP_MOD_PKA_CALC = cvar.COMP_MOD_PKA_CALC
COMP_MOD_MEMBRANE = cvar.COMP_MOD_MEMBRANE
COMP_MOD_FLEX = cvar.COMP_MOD_FLEX
COMP_MOD_CLUSTER_ANAL = cvar.COMP_MOD_CLUSTER_ANAL

class HaCompMod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaCompMod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaCompMod, name)
    __repr__ = _swig_repr

    def __init__(self, new_mtype, new_phost_mset=None):
        this = _molset.new_HaCompMod(new_mtype, new_phost_mset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaCompMod
    __del__ = lambda self: None
    if _newclass:
        CreateCompMod = staticmethod(_molset.HaCompMod_CreateCompMod)
    else:
        CreateCompMod = _molset.HaCompMod_CreateCompMod

    def SetMolHost(self, new_phost_mset):
        return _molset.HaCompMod_SetMolHost(self, new_phost_mset)

    def GetMolSet(self, *args):
        return _molset.HaCompMod_GetMolSet(self, *args)

    def GetType(self):
        return _molset.HaCompMod_GetType(self)

    def SetDebugLevel(self, new_debug_level):
        return _molset.HaCompMod_SetDebugLevel(self, new_debug_level)

    def SaveXMLToStream(self, os, popt=None):
        return _molset.HaCompMod_SaveXMLToStream(self, os, popt)

    def OnDelAtoms(self, del_atoms):
        return _molset.HaCompMod_OnDelAtoms(self, del_atoms)
    __swig_setmethods__["debug_level"] = _molset.HaCompMod_debug_level_set
    __swig_getmethods__["debug_level"] = _molset.HaCompMod_debug_level_get
    if _newclass:
        debug_level = _swig_property(_molset.HaCompMod_debug_level_get, _molset.HaCompMod_debug_level_set)
HaCompMod_swigregister = _molset.HaCompMod_swigregister
HaCompMod_swigregister(HaCompMod)

def HaCompMod_CreateCompMod(mtype, new_phost_mset=None):
    return _molset.HaCompMod_CreateCompMod(mtype, new_phost_mset)
HaCompMod_CreateCompMod = _molset.HaCompMod_CreateCompMod

class QCIntEngineType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QCIntEngineType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QCIntEngineType, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_QCIntEngineType
    __del__ = lambda self: None
    INT_ENGINE_GAUSS = _molset.QCIntEngineType_INT_ENGINE_GAUSS
    INT_ENGINE_IPACK = _molset.QCIntEngineType_INT_ENGINE_IPACK

    def __eq__(self, val):
        return _molset.QCIntEngineType___eq__(self, val)

    def __ne__(self, val):
        return _molset.QCIntEngineType___ne__(self, val)

    def GetLabelsMap(self):
        return _molset.QCIntEngineType_GetLabelsMap(self)

    def value(self):
        return _molset.QCIntEngineType_value(self)

    def label(self):
        return _molset.QCIntEngineType_label(self)

    def SetWithValue(self, val):
        return _molset.QCIntEngineType_SetWithValue(self, val)

    def SetWithLabel(self, label):
        return _molset.QCIntEngineType_SetWithLabel(self, label)

    def __init__(self, *args):
        this = _molset.new_QCIntEngineType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
QCIntEngineType_swigregister = _molset.QCIntEngineType_swigregister
QCIntEngineType_swigregister(QCIntEngineType)

CNDO_2 = _molset.CNDO_2
INDO_2 = _molset.INDO_2
ZINDO_1 = _molset.ZINDO_1
ZINDO_S = _molset.ZINDO_S
HUCKEL = _molset.HUCKEL
SCRF_NO = _molset.SCRF_NO
SCRF_PCM = _molset.SCRF_PCM
HARTREE_FOCK = _molset.HARTREE_FOCK
NDO = _molset.NDO
EXTENDED_HUCKEL = _molset.EXTENDED_HUCKEL
MP2 = _molset.MP2
DFT_B3LYP = _molset.DFT_B3LYP
CCSD_T = _molset.CCSD_T
class HaQCMod(HaCompMod):
    __swig_setmethods__ = {}
    for _s in [HaCompMod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaQCMod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaCompMod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaQCMod, name)
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset):
        this = _molset.new_HaQCMod(new_phost_mset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaQCMod
    __del__ = lambda self: None

    def SetStdParams(self):
        return _molset.HaQCMod_SetStdParams(self)

    def Print_info(self, sout, level):
        return _molset.HaQCMod_Print_info(self, sout, level)

    def SaveXMLToStream(self, os, popt=None):
        return _molset.HaQCMod_SaveXMLToStream(self, os, popt)

    def GetNumCnt(self):
        return _molset.HaQCMod_GetNumCnt(self)

    def GetCntCharges(self, charges):
        return _molset.HaQCMod_GetCntCharges(self, charges)

    def SetCharge(self, charge):
        return _molset.HaQCMod_SetCharge(self, charge)

    def SetMult(self, mult):
        return _molset.HaQCMod_SetMult(self, mult)

    def GetCharge(self):
        return _molset.HaQCMod_GetCharge(self)

    def GetMult(self):
        return _molset.HaQCMod_GetMult(self)

    def SetField(self, el_x, el_y, el_z):
        return _molset.HaQCMod_SetField(self, el_x, el_y, el_z)

    def SetFieldAU(self, el_x, el_y, el_z):
        return _molset.HaQCMod_SetFieldAU(self, el_x, el_y, el_z)

    def GetNelectr(self):
        return _molset.HaQCMod_GetNelectr(self)

    def GetNumAlphaEl(self, active_bas=0):
        return _molset.HaQCMod_GetNumAlphaEl(self, active_bas)

    def GetNumBetaEl(self, active_bas=0):
        return _molset.HaQCMod_GetNumBetaEl(self, active_bas)

    def GetNumOccMO(self):
        return _molset.HaQCMod_GetNumOccMO(self)

    def GetNumVacMO(self):
        return _molset.HaQCMod_GetNumVacMO(self)

    def GetNumMO(self):
        return _molset.HaQCMod_GetNumMO(self)

    def SetWaveFunType(self, str_wf_type):
        return _molset.HaQCMod_SetWaveFunType(self, str_wf_type)

    def InitBasis(self, *args):
        return _molset.HaQCMod_InitBasis(self, *args)

    def FBasFunPos(self, ref_aptr):
        return _molset.HaQCMod_FBasFunPos(self, ref_aptr)

    def GetAtomOfAO(self, idx_AO):
        return _molset.HaQCMod_GetAtomOfAO(self, idx_AO)

    def GetNBfunc(self):
        return _molset.HaQCMod_GetNBfunc(self)

    def GetBasName(self):
        return _molset.HaQCMod_GetBasName(self)

    def UsePseudoPot(self):
        return _molset.HaQCMod_UsePseudoPot(self)

    def InitLocOrb(self, setid):
        return _molset.HaQCMod_InitLocOrb(self, setid)

    def GetNActiveOrb(self):
        return _molset.HaQCMod_GetNActiveOrb(self)

    def IsLocOrbFullBasis(self):
        return _molset.HaQCMod_IsLocOrbFullBasis(self)

    def GetLocOrbIdxOfGrp(self, gid, ilgr):
        return _molset.HaQCMod_GetLocOrbIdxOfGrp(self, gid, ilgr)

    def ExtractLocOrbSubMat(self, gid1, gid2, ActOrbMat, ActOrbSubMat):
        return _molset.HaQCMod_ExtractLocOrbSubMat(self, gid1, gid2, ActOrbMat, ActOrbSubMat)

    def InsertLocOrbSubMat(self, gid1, gid2, ActOrbMat, ActOrbSubMat):
        return _molset.HaQCMod_InsertLocOrbSubMat(self, gid1, gid2, ActOrbMat, ActOrbSubMat)

    def GetLocOrbSetID(self):
        return _molset.HaQCMod_GetLocOrbSetID(self)
    if _newclass:
        EvalLinCombOnGrid = staticmethod(_molset.HaQCMod_EvalLinCombOnGrid)
    else:
        EvalLinCombOnGrid = _molset.HaQCMod_EvalLinCombOnGrid

    def CreateOrbContour(self, orb_coef, bas_set, mo_isolvl=0.1, ngrid=11):
        return _molset.HaQCMod_CreateOrbContour(self, orb_coef, bas_set, mo_isolvl, ngrid)

    def CreateMOcontour(self, imo, mo_isolvl=0.1, ngrid=11):
        return _molset.HaQCMod_CreateMOcontour(self, imo, mo_isolvl, ngrid)
    __swig_setmethods__["m_grid_size"] = _molset.HaQCMod_m_grid_size_set
    __swig_getmethods__["m_grid_size"] = _molset.HaQCMod_m_grid_size_get
    if _newclass:
        m_grid_size = _swig_property(_molset.HaQCMod_m_grid_size_get, _molset.HaQCMod_m_grid_size_set)

    def BuildFockMatFromMOs(self, fock_matrix, cut_ene=-100000.0):
        return _molset.HaQCMod_BuildFockMatFromMOs(self, fock_matrix, cut_ene)
    if _newclass:
        GetQCIntEngine = staticmethod(_molset.HaQCMod_GetQCIntEngine)
    else:
        GetQCIntEngine = _molset.HaQCMod_GetQCIntEngine
    if _newclass:
        SetQCIntEngine = staticmethod(_molset.HaQCMod_SetQCIntEngine)
    else:
        SetQCIntEngine = _molset.HaQCMod_SetQCIntEngine
    __swig_setmethods__["int_engine"] = _molset.HaQCMod_int_engine_set
    __swig_getmethods__["int_engine"] = _molset.HaQCMod_int_engine_get
    if _newclass:
        int_engine = _swig_property(_molset.HaQCMod_int_engine_get, _molset.HaQCMod_int_engine_set)

    def InitBasOvlp(self):
        return _molset.HaQCMod_InitBasOvlp(self)

    def Init1eDens(self, gfile):
        return _molset.HaQCMod_Init1eDens(self, gfile)

    def InitMOs(self, gfile):
        return _molset.HaQCMod_InitMOs(self, gfile)
    if _newclass:
        LoadGauCom = staticmethod(_molset.HaQCMod_LoadGauCom)
    else:
        LoadGauCom = _molset.HaQCMod_LoadGauCom

    def LoadDataFromFChk(self, fname):
        return _molset.HaQCMod_LoadDataFromFChk(self, fname)
    __swig_setmethods__["load_mo_flag"] = _molset.HaQCMod_load_mo_flag_set
    __swig_getmethods__["load_mo_flag"] = _molset.HaQCMod_load_mo_flag_get
    if _newclass:
        load_mo_flag = _swig_property(_molset.HaQCMod_load_mo_flag_get, _molset.HaQCMod_load_mo_flag_set)

    def ProjMatToActBas(self, fmat, fmat_lb):
        return _molset.HaQCMod_ProjMatToActBas(self, fmat, fmat_lb)

    def CalcEPfromMO(self, gm, ene):
        return _molset.HaQCMod_CalcEPfromMO(self, gm, ene)

    def GetOvlpMat(self):
        return _molset.HaQCMod_GetOvlpMat(self)
    __swig_setmethods__["max_scf_iter"] = _molset.HaQCMod_max_scf_iter_set
    __swig_getmethods__["max_scf_iter"] = _molset.HaQCMod_max_scf_iter_get
    if _newclass:
        max_scf_iter = _swig_property(_molset.HaQCMod_max_scf_iter_get, _molset.HaQCMod_max_scf_iter_set)
    __swig_setmethods__["max_it_avg"] = _molset.HaQCMod_max_it_avg_set
    __swig_getmethods__["max_it_avg"] = _molset.HaQCMod_max_it_avg_get
    if _newclass:
        max_it_avg = _swig_property(_molset.HaQCMod_max_it_avg_get, _molset.HaQCMod_max_it_avg_set)
    __swig_setmethods__["max_it_noavg"] = _molset.HaQCMod_max_it_noavg_set
    __swig_getmethods__["max_it_noavg"] = _molset.HaQCMod_max_it_noavg_get
    if _newclass:
        max_it_noavg = _swig_property(_molset.HaQCMod_max_it_noavg_get, _molset.HaQCMod_max_it_noavg_set)
    __swig_setmethods__["iuhf"] = _molset.HaQCMod_iuhf_set
    __swig_getmethods__["iuhf"] = _molset.HaQCMod_iuhf_get
    if _newclass:
        iuhf = _swig_property(_molset.HaQCMod_iuhf_get, _molset.HaQCMod_iuhf_set)
    __swig_setmethods__["conv_dm"] = _molset.HaQCMod_conv_dm_set
    __swig_getmethods__["conv_dm"] = _molset.HaQCMod_conv_dm_get
    if _newclass:
        conv_dm = _swig_property(_molset.HaQCMod_conv_dm_get, _molset.HaQCMod_conv_dm_set)
    __swig_setmethods__["temp0_fermi"] = _molset.HaQCMod_temp0_fermi_set
    __swig_getmethods__["temp0_fermi"] = _molset.HaQCMod_temp0_fermi_get
    if _newclass:
        temp0_fermi = _swig_property(_molset.HaQCMod_temp0_fermi_get, _molset.HaQCMod_temp0_fermi_set)
    __swig_setmethods__["iter_temp"] = _molset.HaQCMod_iter_temp_set
    __swig_getmethods__["iter_temp"] = _molset.HaQCMod_iter_temp_get
    if _newclass:
        iter_temp = _swig_property(_molset.HaQCMod_iter_temp_get, _molset.HaQCMod_iter_temp_set)
    __swig_setmethods__["guess_only"] = _molset.HaQCMod_guess_only_set
    __swig_getmethods__["guess_only"] = _molset.HaQCMod_guess_only_get
    if _newclass:
        guess_only = _swig_property(_molset.HaQCMod_guess_only_get, _molset.HaQCMod_guess_only_set)
    __swig_setmethods__["set_guess_from_mos"] = _molset.HaQCMod_set_guess_from_mos_set
    __swig_getmethods__["set_guess_from_mos"] = _molset.HaQCMod_set_guess_from_mos_get
    if _newclass:
        set_guess_from_mos = _swig_property(_molset.HaQCMod_set_guess_from_mos_get, _molset.HaQCMod_set_guess_from_mos_set)
    if _newclass:
        InitIPack = staticmethod(_molset.HaQCMod_InitIPack)
    else:
        InitIPack = _molset.HaQCMod_InitIPack
    __swig_setmethods__["max_gauss_mem"] = _molset.HaQCMod_max_gauss_mem_set
    __swig_getmethods__["max_gauss_mem"] = _molset.HaQCMod_max_gauss_mem_get
    if _newclass:
        max_gauss_mem = _swig_property(_molset.HaQCMod_max_gauss_mem_get, _molset.HaQCMod_max_gauss_mem_set)
    if _newclass:
        set_max_gauss_mem = staticmethod(_molset.HaQCMod_set_max_gauss_mem)
    else:
        set_max_gauss_mem = _molset.HaQCMod_set_max_gauss_mem

    def Run(self, popt=None):
        return _molset.HaQCMod_Run(self, popt)

    def StopCalc(self):
        return _molset.HaQCMod_StopCalc(self)

    def PrepGauss(self):
        return _molset.HaQCMod_PrepGauss(self)

    def RunCNDO(self):
        return _molset.HaQCMod_RunCNDO(self)

    def RunCNDOThread(self):
        return _molset.HaQCMod_RunCNDOThread(self)

    def RunExtHuckel(self):
        return _molset.HaQCMod_RunExtHuckel(self)
    __swig_setmethods__["stop_calc_flag"] = _molset.HaQCMod_stop_calc_flag_set
    __swig_getmethods__["stop_calc_flag"] = _molset.HaQCMod_stop_calc_flag_get
    if _newclass:
        stop_calc_flag = _swig_property(_molset.HaQCMod_stop_calc_flag_get, _molset.HaQCMod_stop_calc_flag_set)

    def SetSinglePtCalc(self):
        return _molset.HaQCMod_SetSinglePtCalc(self)

    def SetEneMinCalc(self):
        return _molset.HaQCMod_SetEneMinCalc(self)

    def SetTransStateCalc(self):
        return _molset.HaQCMod_SetTransStateCalc(self)

    def IsSinglePtCalc(self):
        return _molset.HaQCMod_IsSinglePtCalc(self)

    def IsEneMinCalc(self):
        return _molset.HaQCMod_IsEneMinCalc(self)

    def IsTransStateCalc(self):
        return _molset.HaQCMod_IsTransStateCalc(self)

    def CalcEnergy(self):
        return _molset.HaQCMod_CalcEnergy(self)

    def RunMinEne(self):
        return _molset.HaQCMod_RunMinEne(self)

    def IsGenBasisSet(self):
        return _molset.HaQCMod_IsGenBasisSet(self)

    def SetBasisSetGen(self):
        return _molset.HaQCMod_SetBasisSetGen(self)

    def IsUsingSymmetry(self):
        return _molset.HaQCMod_IsUsingSymmetry(self)

    def SetUseSymmetry(self, use_symmetry_par):
        return _molset.HaQCMod_SetUseSymmetry(self, use_symmetry_par)

    def SetHF(self):
        return _molset.HaQCMod_SetHF(self)

    def SetMP2(self):
        return _molset.HaQCMod_SetMP2(self)

    def SetDFT(self):
        return _molset.HaQCMod_SetDFT(self)

    def SetB3LYP(self):
        return _molset.HaQCMod_SetB3LYP(self)

    def SetCCSD_T(self):
        return _molset.HaQCMod_SetCCSD_T(self)

    def IsHF(self):
        return _molset.HaQCMod_IsHF(self)

    def IsDFT(self):
        return _molset.HaQCMod_IsDFT(self)

    def IsB3LYP(self):
        return _molset.HaQCMod_IsB3LYP(self)

    def IsMP2(self):
        return _molset.HaQCMod_IsMP2(self)

    def IsCCSD_T(self):
        return _molset.HaQCMod_IsCCSD_T(self)

    def SetCalcPolar(self, set_par=True):
        return _molset.HaQCMod_SetCalcPolar(self, set_par)

    def ToCalcPolar(self):
        return _molset.HaQCMod_ToCalcPolar(self)

    def IsUsingSCRF(self):
        return _molset.HaQCMod_IsUsingSCRF(self)

    def SetSCRF(self):
        return _molset.HaQCMod_SetSCRF(self)

    def SetSCRFMethod(self, set_method_par):
        return _molset.HaQCMod_SetSCRFMethod(self, set_method_par)
    __swig_setmethods__["scrf_method"] = _molset.HaQCMod_scrf_method_set
    __swig_getmethods__["scrf_method"] = _molset.HaQCMod_scrf_method_get
    if _newclass:
        scrf_method = _swig_property(_molset.HaQCMod_scrf_method_get, _molset.HaQCMod_scrf_method_set)

    def SetExtCharge(self, *args):
        return _molset.HaQCMod_SetExtCharge(self, *args)

    def SetExtChCrdOffset(self, crd_offset):
        return _molset.HaQCMod_SetExtChCrdOffset(self, crd_offset)
    __swig_setmethods__["wave_fun_type"] = _molset.HaQCMod_wave_fun_type_set
    __swig_getmethods__["wave_fun_type"] = _molset.HaQCMod_wave_fun_type_get
    if _newclass:
        wave_fun_type = _swig_property(_molset.HaQCMod_wave_fun_type_get, _molset.HaQCMod_wave_fun_type_set)
    __swig_setmethods__["ndo_method"] = _molset.HaQCMod_ndo_method_set
    __swig_getmethods__["ndo_method"] = _molset.HaQCMod_ndo_method_get
    if _newclass:
        ndo_method = _swig_property(_molset.HaQCMod_ndo_method_get, _molset.HaQCMod_ndo_method_set)

    def GetZMat(self):
        return _molset.HaQCMod_GetZMat(self)

    def SetPrefix(self, prefix):
        return _molset.HaQCMod_SetPrefix(self, prefix)

    def GetPrefix(self):
        return _molset.HaQCMod_GetPrefix(self)

    def InitHuckParsStd(self):
        return _molset.HaQCMod_InitHuckParsStd(self)

    def InitHuckParsVela(self):
        return _molset.HaQCMod_InitHuckParsVela(self)

    def InitHuckHam(self, hmat, ss, bas):
        return _molset.HaQCMod_InitHuckHam(self, hmat, ss, bas)

    def GetNDOValEl(self, elem, ns_val, np_val, nd_val, nf_val):
        return _molset.HaQCMod_GetNDOValEl(self, elem, ns_val, np_val, nd_val, nf_val)

    def FormFockNDO(self, natoms, ian, ifst_bf_at, ilst_bf_at, da, db, fm, gss, gsd, gdd, at_coul_int):
        return _molset.HaQCMod_FormFockNDO(self, natoms, ian, ifst_bf_at, ilst_bf_at, da, db, fm, gss, gsd, gdd, at_coul_int)

    def CalcNucRepEne(self, natoms, ian, c, core_ch, gss):
        return _molset.HaQCMod_CalcNucRepEne(self, natoms, ian, c, core_ch, gss)
    __swig_setmethods__["AtBasis"] = _molset.HaQCMod_AtBasis_set
    __swig_getmethods__["AtBasis"] = _molset.HaQCMod_AtBasis_get
    if _newclass:
        AtBasis = _swig_property(_molset.HaQCMod_AtBasis_get, _molset.HaQCMod_AtBasis_set)
    __swig_setmethods__["ActBas"] = _molset.HaQCMod_ActBas_set
    __swig_getmethods__["ActBas"] = _molset.HaQCMod_ActBas_get
    if _newclass:
        ActBas = _swig_property(_molset.HaQCMod_ActBas_get, _molset.HaQCMod_ActBas_set)
    __swig_setmethods__["allocated_act_basis"] = _molset.HaQCMod_allocated_act_basis_set
    __swig_getmethods__["allocated_act_basis"] = _molset.HaQCMod_allocated_act_basis_get
    if _newclass:
        allocated_act_basis = _swig_property(_molset.HaQCMod_allocated_act_basis_get, _molset.HaQCMod_allocated_act_basis_set)
    __swig_setmethods__["m_bas_name"] = _molset.HaQCMod_m_bas_name_set
    __swig_getmethods__["m_bas_name"] = _molset.HaQCMod_m_bas_name_get
    if _newclass:
        m_bas_name = _swig_property(_molset.HaQCMod_m_bas_name_get, _molset.HaQCMod_m_bas_name_set)
    __swig_setmethods__["m_loc_orb_set_id"] = _molset.HaQCMod_m_loc_orb_set_id_set
    __swig_getmethods__["m_loc_orb_set_id"] = _molset.HaQCMod_m_loc_orb_set_id_get
    if _newclass:
        m_loc_orb_set_id = _swig_property(_molset.HaQCMod_m_loc_orb_set_id_get, _molset.HaQCMod_m_loc_orb_set_id_set)
    __swig_setmethods__["charge"] = _molset.HaQCMod_charge_set
    __swig_getmethods__["charge"] = _molset.HaQCMod_charge_get
    if _newclass:
        charge = _swig_property(_molset.HaQCMod_charge_get, _molset.HaQCMod_charge_set)
    __swig_setmethods__["mult"] = _molset.HaQCMod_mult_set
    __swig_getmethods__["mult"] = _molset.HaQCMod_mult_get
    if _newclass:
        mult = _swig_property(_molset.HaQCMod_mult_get, _molset.HaQCMod_mult_set)

    def GetDipole(self):
        return _molset.HaQCMod_GetDipole(self)

    def GetTotDipole(self):
        return _molset.HaQCMod_GetTotDipole(self)

    def GetQpole(self):
        return _molset.HaQCMod_GetQpole(self)

    def GetTotQpole(self):
        return _molset.HaQCMod_GetTotQpole(self)

    def GetPolarTensor(self):
        return _molset.HaQCMod_GetPolarTensor(self)
    __swig_setmethods__["p_ndo_pars_db"] = _molset.HaQCMod_p_ndo_pars_db_set
    __swig_getmethods__["p_ndo_pars_db"] = _molset.HaQCMod_p_ndo_pars_db_get
    if _newclass:
        p_ndo_pars_db = _swig_property(_molset.HaQCMod_p_ndo_pars_db_get, _molset.HaQCMod_p_ndo_pars_db_set)

    def SetEne(self, ene):
        return _molset.HaQCMod_SetEne(self, ene)

    def SetHFEne(self, ene_hf):
        return _molset.HaQCMod_SetHFEne(self, ene_hf)

    def SetDFTEne(self, ene_dft):
        return _molset.HaQCMod_SetDFTEne(self, ene_dft)

    def GetEne(self):
        return _molset.HaQCMod_GetEne(self)

    def GetHFEne(self):
        return _molset.HaQCMod_GetHFEne(self)

    def GetDFTEne(self):
        return _molset.HaQCMod_GetDFTEne(self)
    __swig_setmethods__["ovlp_mat"] = _molset.HaQCMod_ovlp_mat_set
    __swig_getmethods__["ovlp_mat"] = _molset.HaQCMod_ovlp_mat_get
    if _newclass:
        ovlp_mat = _swig_property(_molset.HaQCMod_ovlp_mat_get, _molset.HaQCMod_ovlp_mat_set)
    __swig_setmethods__["huck_ham"] = _molset.HaQCMod_huck_ham_set
    __swig_getmethods__["huck_ham"] = _molset.HaQCMod_huck_ham_get
    if _newclass:
        huck_ham = _swig_property(_molset.HaQCMod_huck_ham_get, _molset.HaQCMod_huck_ham_set)
    __swig_setmethods__["MO_coef"] = _molset.HaQCMod_MO_coef_set
    __swig_getmethods__["MO_coef"] = _molset.HaQCMod_MO_coef_get
    if _newclass:
        MO_coef = _swig_property(_molset.HaQCMod_MO_coef_get, _molset.HaQCMod_MO_coef_set)
    __swig_setmethods__["MOene"] = _molset.HaQCMod_MOene_set
    __swig_getmethods__["MOene"] = _molset.HaQCMod_MOene_get
    if _newclass:
        MOene = _swig_property(_molset.HaQCMod_MOene_get, _molset.HaQCMod_MOene_set)
HaQCMod_swigregister = _molset.HaQCMod_swigregister
HaQCMod_swigregister(HaQCMod)
INT_ENGINE_GAUSS = cvar.INT_ENGINE_GAUSS
INT_ENGINE_IPACK = cvar.INT_ENGINE_IPACK

def HaQCMod_EvalLinCombOnGrid(orb_coef, bas_set, mo_grid):
    return _molset.HaQCMod_EvalLinCombOnGrid(orb_coef, bas_set, mo_grid)
HaQCMod_EvalLinCombOnGrid = _molset.HaQCMod_EvalLinCombOnGrid

def HaQCMod_GetQCIntEngine():
    return _molset.HaQCMod_GetQCIntEngine()
HaQCMod_GetQCIntEngine = _molset.HaQCMod_GetQCIntEngine

def HaQCMod_SetQCIntEngine(int_engine_new):
    return _molset.HaQCMod_SetQCIntEngine(int_engine_new)
HaQCMod_SetQCIntEngine = _molset.HaQCMod_SetQCIntEngine

def HaQCMod_LoadGauCom(gbas):
    return _molset.HaQCMod_LoadGauCom(gbas)
HaQCMod_LoadGauCom = _molset.HaQCMod_LoadGauCom

def HaQCMod_InitIPack():
    return _molset.HaQCMod_InitIPack()
HaQCMod_InitIPack = _molset.HaQCMod_InitIPack

def HaQCMod_set_max_gauss_mem(new_max_mem):
    return _molset.HaQCMod_set_max_gauss_mem(new_max_mem)
HaQCMod_set_max_gauss_mem = _molset.HaQCMod_set_max_gauss_mem


def cbincf_(bin_cf, fact):
    return _molset.cbincf_(bin_cf, fact)
cbincf_ = _molset.cbincf_

def ssz_(nn1, nn2, ll1, ll2, m, amu, bmu, fact, bincf, lg):
    return _molset.ssz_(nn1, nn2, ll1, ll2, m, amu, bmu, fact, bincf, lg)
ssz_ = _molset.ssz_

def gint1_(exp1, exp2, n1, n2, r, fact, bincf):
    return _molset.gint1_(exp1, exp2, n1, n2, r, fact, bincf)
gint1_ = _molset.gint1_
class ETEdge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ETEdge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ETEdge, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_ETEdge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ETEdge
    __del__ = lambda self: None

    def __eq__(self, rhs):
        return _molset.ETEdge___eq__(self, rhs)

    def __lt__(self, rhs):
        return _molset.ETEdge___lt__(self, rhs)
    __swig_setmethods__["coupling"] = _molset.ETEdge_coupling_set
    __swig_getmethods__["coupling"] = _molset.ETEdge_coupling_get
    if _newclass:
        coupling = _swig_property(_molset.ETEdge_coupling_get, _molset.ETEdge_coupling_set)
    __swig_setmethods__["inode1"] = _molset.ETEdge_inode1_set
    __swig_getmethods__["inode1"] = _molset.ETEdge_inode1_get
    if _newclass:
        inode1 = _swig_property(_molset.ETEdge_inode1_get, _molset.ETEdge_inode1_set)
    __swig_setmethods__["inode2"] = _molset.ETEdge_inode2_set
    __swig_getmethods__["inode2"] = _molset.ETEdge_inode2_get
    if _newclass:
        inode2 = _swig_property(_molset.ETEdge_inode2_get, _molset.ETEdge_inode2_set)
ETEdge_swigregister = _molset.ETEdge_swigregister
ETEdge_swigregister(ETEdge)

class ETPath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ETPath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ETPath, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_ETPath()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ETPath
    __del__ = lambda self: None

    def clear(self):
        return _molset.ETPath_clear(self)

    def empty(self):
        return _molset.ETPath_empty(self)
    __swig_setmethods__["coupling"] = _molset.ETPath_coupling_set
    __swig_getmethods__["coupling"] = _molset.ETPath_coupling_get
    if _newclass:
        coupling = _swig_property(_molset.ETPath_coupling_get, _molset.ETPath_coupling_set)
    __swig_setmethods__["trace"] = _molset.ETPath_trace_set
    __swig_getmethods__["trace"] = _molset.ETPath_trace_get
    if _newclass:
        trace = _swig_property(_molset.ETPath_trace_get, _molset.ETPath_trace_set)
ETPath_swigregister = _molset.ETPath_swigregister
ETPath_swigregister(ETPath)

class PathStep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathStep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PathStep, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_PathStep(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_PathStep
    __del__ = lambda self: None

    def __lt__(self, rhs):
        return _molset.PathStep___lt__(self, rhs)
    __swig_setmethods__["coupling"] = _molset.PathStep_coupling_set
    __swig_getmethods__["coupling"] = _molset.PathStep_coupling_get
    if _newclass:
        coupling = _swig_property(_molset.PathStep_coupling_get, _molset.PathStep_coupling_set)
    __swig_setmethods__["destination"] = _molset.PathStep_destination_set
    __swig_getmethods__["destination"] = _molset.PathStep_destination_get
    if _newclass:
        destination = _swig_property(_molset.PathStep_destination_get, _molset.PathStep_destination_set)
    __swig_setmethods__["source"] = _molset.PathStep_source_set
    __swig_getmethods__["source"] = _molset.PathStep_source_get
    if _newclass:
        source = _swig_property(_molset.PathStep_source_get, _molset.PathStep_source_set)
PathStep_swigregister = _molset.PathStep_swigregister
PathStep_swigregister(PathStep)

REDOX_ORB_DONOR = _molset.REDOX_ORB_DONOR
REDOX_ORB_ACCEPTOR = _molset.REDOX_ORB_ACCEPTOR
class ETCouplMod(HaCompMod):
    __swig_setmethods__ = {}
    for _s in [HaCompMod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ETCouplMod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaCompMod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ETCouplMod, name)
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset=None):
        this = _molset.new_ETCouplMod(new_phost_mset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ETCouplMod
    __del__ = lambda self: None

    def GetQCMod(self):
        return _molset.ETCouplMod_GetQCMod(self)

    def SetDebugLevel(self, new_debug_level):
        return _molset.ETCouplMod_SetDebugLevel(self, new_debug_level)

    def OnDelAtoms(self, del_atoms):
        return _molset.ETCouplMod_OnDelAtoms(self, del_atoms)

    def Clear(self):
        return _molset.ETCouplMod_Clear(self)
    __swig_setmethods__["pathways_calc_type"] = _molset.ETCouplMod_pathways_calc_type_set
    __swig_getmethods__["pathways_calc_type"] = _molset.ETCouplMod_pathways_calc_type_get
    if _newclass:
        pathways_calc_type = _swig_property(_molset.ETCouplMod_pathways_calc_type_get, _molset.ETCouplMod_pathways_calc_type_set)

    def path_coupl_calc(self):
        return _molset.ETCouplMod_path_coupl_calc(self)

    def select_important(self, thresh):
        return _molset.ETCouplMod_select_important(self, thresh)

    def calc_intermol_path_coupl(self):
        return _molset.ETCouplMod_calc_intermol_path_coupl(self)

    def InitiatePathwaysGraph(self):
        return _molset.ETCouplMod_InitiatePathwaysGraph(self)

    def CalcAtomContactCoupling(self, aptr1, aptr2):
        return _molset.ETCouplMod_CalcAtomContactCoupling(self, aptr1, aptr2)

    def ClearPathwaysGraph(self):
        return _molset.ETCouplMod_ClearPathwaysGraph(self)

    def ColorMolSurfETCoupl(self):
        return _molset.ETCouplMod_ColorMolSurfETCoupl(self)
    __swig_setmethods__["nodes"] = _molset.ETCouplMod_nodes_set
    __swig_getmethods__["nodes"] = _molset.ETCouplMod_nodes_get
    if _newclass:
        nodes = _swig_property(_molset.ETCouplMod_nodes_get, _molset.ETCouplMod_nodes_set)
    __swig_setmethods__["edges"] = _molset.ETCouplMod_edges_set
    __swig_getmethods__["edges"] = _molset.ETCouplMod_edges_get
    if _newclass:
        edges = _swig_property(_molset.ETCouplMod_edges_get, _molset.ETCouplMod_edges_set)
    __swig_setmethods__["pathways_graph_init_flag"] = _molset.ETCouplMod_pathways_graph_init_flag_set
    __swig_getmethods__["pathways_graph_init_flag"] = _molset.ETCouplMod_pathways_graph_init_flag_get
    if _newclass:
        pathways_graph_init_flag = _swig_property(_molset.ETCouplMod_pathways_graph_init_flag_get, _molset.ETCouplMod_pathways_graph_init_flag_set)
    __swig_setmethods__["m_hbond_paths_flag"] = _molset.ETCouplMod_m_hbond_paths_flag_set
    __swig_getmethods__["m_hbond_paths_flag"] = _molset.ETCouplMod_m_hbond_paths_flag_get
    if _newclass:
        m_hbond_paths_flag = _swig_property(_molset.ETCouplMod_m_hbond_paths_flag_get, _molset.ETCouplMod_m_hbond_paths_flag_set)
    __swig_setmethods__["best_path"] = _molset.ETCouplMod_best_path_set
    __swig_getmethods__["best_path"] = _molset.ETCouplMod_best_path_get
    if _newclass:
        best_path = _swig_property(_molset.ETCouplMod_best_path_get, _molset.ETCouplMod_best_path_set)
    __swig_setmethods__["coupl_map"] = _molset.ETCouplMod_coupl_map_set
    __swig_getmethods__["coupl_map"] = _molset.ETCouplMod_coupl_map_get
    if _newclass:
        coupl_map = _swig_property(_molset.ETCouplMod_coupl_map_get, _molset.ETCouplMod_coupl_map_set)
    __swig_setmethods__["pw_nb_decay"] = _molset.ETCouplMod_pw_nb_decay_set
    __swig_getmethods__["pw_nb_decay"] = _molset.ETCouplMod_pw_nb_decay_get
    if _newclass:
        pw_nb_decay = _swig_property(_molset.ETCouplMod_pw_nb_decay_get, _molset.ETCouplMod_pw_nb_decay_set)
    __swig_setmethods__["pw_nb_min_dist"] = _molset.ETCouplMod_pw_nb_min_dist_set
    __swig_getmethods__["pw_nb_min_dist"] = _molset.ETCouplMod_pw_nb_min_dist_get
    if _newclass:
        pw_nb_min_dist = _swig_property(_molset.ETCouplMod_pw_nb_min_dist_get, _molset.ETCouplMod_pw_nb_min_dist_set)
    __swig_setmethods__["pw_hb_decay"] = _molset.ETCouplMod_pw_hb_decay_set
    __swig_getmethods__["pw_hb_decay"] = _molset.ETCouplMod_pw_hb_decay_get
    if _newclass:
        pw_hb_decay = _swig_property(_molset.ETCouplMod_pw_hb_decay_get, _molset.ETCouplMod_pw_hb_decay_set)
    __swig_setmethods__["pw_hb_min_dist"] = _molset.ETCouplMod_pw_hb_min_dist_set
    __swig_getmethods__["pw_hb_min_dist"] = _molset.ETCouplMod_pw_hb_min_dist_get
    if _newclass:
        pw_hb_min_dist = _swig_property(_molset.ETCouplMod_pw_hb_min_dist_get, _molset.ETCouplMod_pw_hb_min_dist_set)
    __swig_setmethods__["pw_ln_cov_decay"] = _molset.ETCouplMod_pw_ln_cov_decay_set
    __swig_getmethods__["pw_ln_cov_decay"] = _molset.ETCouplMod_pw_ln_cov_decay_get
    if _newclass:
        pw_ln_cov_decay = _swig_property(_molset.ETCouplMod_pw_ln_cov_decay_get, _molset.ETCouplMod_pw_ln_cov_decay_set)
    __swig_setmethods__["best_path_coupl"] = _molset.ETCouplMod_best_path_coupl_set
    __swig_getmethods__["best_path_coupl"] = _molset.ETCouplMod_best_path_coupl_get
    if _newclass:
        best_path_coupl = _swig_property(_molset.ETCouplMod_best_path_coupl_get, _molset.ETCouplMod_best_path_coupl_set)
    __swig_setmethods__["log_calc_result"] = _molset.ETCouplMod_log_calc_result_set
    __swig_getmethods__["log_calc_result"] = _molset.ETCouplMod_log_calc_result_get
    if _newclass:
        log_calc_result = _swig_property(_molset.ETCouplMod_log_calc_result_get, _molset.ETCouplMod_log_calc_result_set)
    __swig_setmethods__["pw_nb_decay_intermol"] = _molset.ETCouplMod_pw_nb_decay_intermol_set
    __swig_getmethods__["pw_nb_decay_intermol"] = _molset.ETCouplMod_pw_nb_decay_intermol_get
    if _newclass:
        pw_nb_decay_intermol = _swig_property(_molset.ETCouplMod_pw_nb_decay_intermol_get, _molset.ETCouplMod_pw_nb_decay_intermol_set)
    __swig_setmethods__["nb_dist_limit"] = _molset.ETCouplMod_nb_dist_limit_set
    __swig_getmethods__["nb_dist_limit"] = _molset.ETCouplMod_nb_dist_limit_get
    if _newclass:
        nb_dist_limit = _swig_property(_molset.ETCouplMod_nb_dist_limit_get, _molset.ETCouplMod_nb_dist_limit_set)
    __swig_setmethods__["rebuild_mol_coupl_map"] = _molset.ETCouplMod_rebuild_mol_coupl_map_set
    __swig_getmethods__["rebuild_mol_coupl_map"] = _molset.ETCouplMod_rebuild_mol_coupl_map_get
    if _newclass:
        rebuild_mol_coupl_map = _swig_property(_molset.ETCouplMod_rebuild_mol_coupl_map_get, _molset.ETCouplMod_rebuild_mol_coupl_map_set)
    __swig_setmethods__["mol1_coupl_map"] = _molset.ETCouplMod_mol1_coupl_map_set
    __swig_getmethods__["mol1_coupl_map"] = _molset.ETCouplMod_mol1_coupl_map_get
    if _newclass:
        mol1_coupl_map = _swig_property(_molset.ETCouplMod_mol1_coupl_map_get, _molset.ETCouplMod_mol1_coupl_map_set)
    __swig_setmethods__["mol2_coupl_map"] = _molset.ETCouplMod_mol2_coupl_map_set
    __swig_getmethods__["mol2_coupl_map"] = _molset.ETCouplMod_mol2_coupl_map_get
    if _newclass:
        mol2_coupl_map = _swig_property(_molset.ETCouplMod_mol2_coupl_map_get, _molset.ETCouplMod_mol2_coupl_map_set)

    def calc_edge_dist(self):
        return _molset.ETCouplMod_calc_edge_dist(self)

    def DuttonModelCalc(self):
        return _molset.ETCouplMod_DuttonModelCalc(self)
    __swig_setmethods__["rho"] = _molset.ETCouplMod_rho_set
    __swig_getmethods__["rho"] = _molset.ETCouplMod_rho_get
    if _newclass:
        rho = _swig_property(_molset.ETCouplMod_rho_get, _molset.ETCouplMod_rho_set)
    __swig_setmethods__["beta"] = _molset.ETCouplMod_beta_set
    __swig_getmethods__["beta"] = _molset.ETCouplMod_beta_get
    if _newclass:
        beta = _swig_property(_molset.ETCouplMod_beta_get, _molset.ETCouplMod_beta_set)
    __swig_setmethods__["dim_less_coupling"] = _molset.ETCouplMod_dim_less_coupling_set
    __swig_getmethods__["dim_less_coupling"] = _molset.ETCouplMod_dim_less_coupling_get
    if _newclass:
        dim_less_coupling = _swig_property(_molset.ETCouplMod_dim_less_coupling_get, _molset.ETCouplMod_dim_less_coupling_set)
    __swig_setmethods__["max_rate"] = _molset.ETCouplMod_max_rate_set
    __swig_getmethods__["max_rate"] = _molset.ETCouplMod_max_rate_get
    if _newclass:
        max_rate = _swig_property(_molset.ETCouplMod_max_rate_get, _molset.ETCouplMod_max_rate_set)

    def CalcGFDonAccOrb(self):
        return _molset.ETCouplMod_CalcGFDonAccOrb(self)

    def CalcGFDonAccOrbHeff(self):
        return _molset.ETCouplMod_CalcGFDonAccOrbHeff(self)

    def PrintOvlpElem(self):
        return _molset.ETCouplMod_PrintOvlpElem(self)

    def PrintHeffElem(self):
        return _molset.ETCouplMod_PrintHeffElem(self)

    def SetDAdipoleMat(self):
        return _molset.ETCouplMod_SetDAdipoleMat(self)

    def GetDAfield(self):
        return _molset.ETCouplMod_GetDAfield(self)

    def SetDAfield(self, field):
        return _molset.ETCouplMod_SetDAfield(self, field)

    def SetTunEne(self, tun_ene_new):
        return _molset.ETCouplMod_SetTunEne(self, tun_ene_new)

    def GetTunEne(self):
        return _molset.ETCouplMod_GetTunEne(self)

    def CalcHDAEneSplit(self):
        return _molset.ETCouplMod_CalcHDAEneSplit(self)

    def AddRedoxOrbFromEigVec(self, mo_idx):
        return _molset.ETCouplMod_AddRedoxOrbFromEigVec(self, mo_idx)

    def GetRedoxOrbsFromFrag(self, pfrag):
        return _molset.ETCouplMod_GetRedoxOrbsFromFrag(self, pfrag)

    def FindRedoxOrbsOvlpEigVecs(self, lbl_idx_map, ovlp_val_map, redox_orb_type=REDOX_ORB_DONOR):
        return _molset.ETCouplMod_FindRedoxOrbsOvlpEigVecs(self, lbl_idx_map, ovlp_val_map, redox_orb_type)

    def FindRedoxOrbSpaceOvlpEigVecs(self, lbl_idx_map, ovlp_val_map, eigv_space_max_ovlp_val, redox_orb_type=REDOX_ORB_DONOR):
        return _molset.ETCouplMod_FindRedoxOrbSpaceOvlpEigVecs(self, lbl_idx_map, ovlp_val_map, eigv_space_max_ovlp_val, redox_orb_type)

    def FindDonAccEigVecs(self, idx_don, idx_acc):
        return _molset.ETCouplMod_FindDonAccEigVecs(self, idx_don, idx_acc)

    def RotateRedoxOrb(self, rot_mat):
        return _molset.ETCouplMod_RotateRedoxOrb(self, rot_mat)

    def CreateEigVecContour(self, idx, flvl, grid_size):
        return _molset.ETCouplMod_CreateEigVecContour(self, idx, flvl, grid_size)

    def PrintEigVecCoef(self, idx):
        return _molset.ETCouplMod_PrintEigVecCoef(self, idx)

    def ScanEigEneField(self, first_eig_val, last_eig_val, ifield_val, ffield_val, step_val):
        return _molset.ETCouplMod_ScanEigEneField(self, first_eig_val, last_eig_val, ifield_val, ffield_val, step_val)

    def CalcHDAfromGF(self):
        return _molset.ETCouplMod_CalcHDAfromGF(self)

    def CalcHDAPert(self, hda_coupl):
        return _molset.ETCouplMod_CalcHDAPert(self, hda_coupl)

    def CopyEigVecsFromMO(self):
        return _molset.ETCouplMod_CopyEigVecsFromMO(self)

    def RecalcHeff(self):
        return _molset.ETCouplMod_RecalcHeff(self)

    def DiagHeff(self):
        return _molset.ETCouplMod_DiagHeff(self)

    def ZeroLongInter(self, cutoff):
        return _molset.ETCouplMod_ZeroLongInter(self, cutoff)

    def SaveHeffXml(self, file_out):
        return _molset.ETCouplMod_SaveHeffXml(self, file_out)

    def LoadFragmHeffXml(self, file_inp):
        return _molset.ETCouplMod_LoadFragmHeffXml(self, file_inp)

    def GetActBasOvlpMat(self):
        return _molset.ETCouplMod_GetActBasOvlpMat(self)
    __swig_setmethods__["ham_trunc_type"] = _molset.ETCouplMod_ham_trunc_type_set
    __swig_getmethods__["ham_trunc_type"] = _molset.ETCouplMod_ham_trunc_type_get
    if _newclass:
        ham_trunc_type = _swig_property(_molset.ETCouplMod_ham_trunc_type_get, _molset.ETCouplMod_ham_trunc_type_set)
    __swig_setmethods__["heff_mat"] = _molset.ETCouplMod_heff_mat_set
    __swig_getmethods__["heff_mat"] = _molset.ETCouplMod_heff_mat_get
    if _newclass:
        heff_mat = _swig_property(_molset.ETCouplMod_heff_mat_get, _molset.ETCouplMod_heff_mat_set)
    __swig_setmethods__["ssl"] = _molset.ETCouplMod_ssl_set
    __swig_getmethods__["ssl"] = _molset.ETCouplMod_ssl_get
    if _newclass:
        ssl = _swig_property(_molset.ETCouplMod_ssl_get, _molset.ETCouplMod_ssl_set)
    __swig_setmethods__["eigv"] = _molset.ETCouplMod_eigv_set
    __swig_getmethods__["eigv"] = _molset.ETCouplMod_eigv_get
    if _newclass:
        eigv = _swig_property(_molset.ETCouplMod_eigv_get, _molset.ETCouplMod_eigv_set)
    __swig_setmethods__["enel"] = _molset.ETCouplMod_enel_set
    __swig_getmethods__["enel"] = _molset.ETCouplMod_enel_get
    if _newclass:
        enel = _swig_property(_molset.ETCouplMod_enel_get, _molset.ETCouplMod_enel_set)
    __swig_setmethods__["heff_pert_mat"] = _molset.ETCouplMod_heff_pert_mat_set
    __swig_getmethods__["heff_pert_mat"] = _molset.ETCouplMod_heff_pert_mat_get
    if _newclass:
        heff_pert_mat = _swig_property(_molset.ETCouplMod_heff_pert_mat_get, _molset.ETCouplMod_heff_pert_mat_set)
    __swig_setmethods__["use_pert_mat"] = _molset.ETCouplMod_use_pert_mat_set
    __swig_getmethods__["use_pert_mat"] = _molset.ETCouplMod_use_pert_mat_get
    if _newclass:
        use_pert_mat = _swig_property(_molset.ETCouplMod_use_pert_mat_get, _molset.ETCouplMod_use_pert_mat_set)
    __swig_setmethods__["donor_orbs"] = _molset.ETCouplMod_donor_orbs_set
    __swig_getmethods__["donor_orbs"] = _molset.ETCouplMod_donor_orbs_get
    if _newclass:
        donor_orbs = _swig_property(_molset.ETCouplMod_donor_orbs_get, _molset.ETCouplMod_donor_orbs_set)
    __swig_setmethods__["acc_orbs"] = _molset.ETCouplMod_acc_orbs_set
    __swig_getmethods__["acc_orbs"] = _molset.ETCouplMod_acc_orbs_get
    if _newclass:
        acc_orbs = _swig_property(_molset.ETCouplMod_acc_orbs_get, _molset.ETCouplMod_acc_orbs_set)
    __swig_setmethods__["ieig_don"] = _molset.ETCouplMod_ieig_don_set
    __swig_getmethods__["ieig_don"] = _molset.ETCouplMod_ieig_don_get
    if _newclass:
        ieig_don = _swig_property(_molset.ETCouplMod_ieig_don_get, _molset.ETCouplMod_ieig_don_set)
    __swig_setmethods__["ieig_acc"] = _molset.ETCouplMod_ieig_acc_set
    __swig_getmethods__["ieig_acc"] = _molset.ETCouplMod_ieig_acc_get
    if _newclass:
        ieig_acc = _swig_property(_molset.ETCouplMod_ieig_acc_get, _molset.ETCouplMod_ieig_acc_set)
    __swig_setmethods__["don_acc_gf"] = _molset.ETCouplMod_don_acc_gf_set
    __swig_getmethods__["don_acc_gf"] = _molset.ETCouplMod_don_acc_gf_get
    if _newclass:
        don_acc_gf = _swig_property(_molset.ETCouplMod_don_acc_gf_get, _molset.ETCouplMod_don_acc_gf_set)
    __swig_setmethods__["el_field_min"] = _molset.ETCouplMod_el_field_min_set
    __swig_getmethods__["el_field_min"] = _molset.ETCouplMod_el_field_min_get
    if _newclass:
        el_field_min = _swig_property(_molset.ETCouplMod_el_field_min_get, _molset.ETCouplMod_el_field_min_set)
    __swig_setmethods__["da_coupl_val"] = _molset.ETCouplMod_da_coupl_val_set
    __swig_getmethods__["da_coupl_val"] = _molset.ETCouplMod_da_coupl_val_get
    if _newclass:
        da_coupl_val = _swig_property(_molset.ETCouplMod_da_coupl_val_get, _molset.ETCouplMod_da_coupl_val_set)
    __swig_setmethods__["extern_field"] = _molset.ETCouplMod_extern_field_set
    __swig_getmethods__["extern_field"] = _molset.ETCouplMod_extern_field_get
    if _newclass:
        extern_field = _swig_property(_molset.ETCouplMod_extern_field_get, _molset.ETCouplMod_extern_field_set)
    __swig_setmethods__["DA_dipole"] = _molset.ETCouplMod_DA_dipole_set
    __swig_getmethods__["DA_dipole"] = _molset.ETCouplMod_DA_dipole_get
    if _newclass:
        DA_dipole = _swig_property(_molset.ETCouplMod_DA_dipole_get, _molset.ETCouplMod_DA_dipole_set)
    __swig_setmethods__["DA_field"] = _molset.ETCouplMod_DA_field_set
    __swig_getmethods__["DA_field"] = _molset.ETCouplMod_DA_field_get
    if _newclass:
        DA_field = _swig_property(_molset.ETCouplMod_DA_field_get, _molset.ETCouplMod_DA_field_set)
    __swig_setmethods__["set_dab_huck_inter"] = _molset.ETCouplMod_set_dab_huck_inter_set
    __swig_getmethods__["set_dab_huck_inter"] = _molset.ETCouplMod_set_dab_huck_inter_get
    if _newclass:
        set_dab_huck_inter = _swig_property(_molset.ETCouplMod_set_dab_huck_inter_get, _molset.ETCouplMod_set_dab_huck_inter_set)
    __swig_setmethods__["tun_ene"] = _molset.ETCouplMod_tun_ene_set
    __swig_getmethods__["tun_ene"] = _molset.ETCouplMod_tun_ene_get
    if _newclass:
        tun_ene = _swig_property(_molset.ETCouplMod_tun_ene_get, _molset.ETCouplMod_tun_ene_set)
    __swig_setmethods__["ptr_qc_mod"] = _molset.ETCouplMod_ptr_qc_mod_set
    __swig_getmethods__["ptr_qc_mod"] = _molset.ETCouplMod_ptr_qc_mod_get
    if _newclass:
        ptr_qc_mod = _swig_property(_molset.ETCouplMod_ptr_qc_mod_get, _molset.ETCouplMod_ptr_qc_mod_set)

    def PutSubMatToDB(self):
        return _molset.ETCouplMod_PutSubMatToDB(self)

    def GetSubMatFromDB(self):
        return _molset.ETCouplMod_GetSubMatFromDB(self)

    def PrintProtectMat(self):
        return _molset.ETCouplMod_PrintProtectMat(self)
    __swig_setmethods__["protect_mat"] = _molset.ETCouplMod_protect_mat_set
    __swig_getmethods__["protect_mat"] = _molset.ETCouplMod_protect_mat_get
    if _newclass:
        protect_mat = _swig_property(_molset.ETCouplMod_protect_mat_get, _molset.ETCouplMod_protect_mat_set)
    __swig_setmethods__["db_file_name"] = _molset.ETCouplMod_db_file_name_set
    __swig_getmethods__["db_file_name"] = _molset.ETCouplMod_db_file_name_get
    if _newclass:
        db_file_name = _swig_property(_molset.ETCouplMod_db_file_name_get, _molset.ETCouplMod_db_file_name_set)
ETCouplMod_swigregister = _molset.ETCouplMod_swigregister
ETCouplMod_swigregister(ETCouplMod)
BEST_PATH = cvar.BEST_PATH
COUPL_MAP = cvar.COUPL_MAP
HAM_S_DIP_TR = cvar.HAM_S_DIP_TR
HAM_TR = cvar.HAM_TR

HLM_F3D_BIN = _molset.HLM_F3D_BIN
HLM_F3D_FORM = _molset.HLM_F3D_FORM
ELPOT_DELPHI_BIN = _molset.ELPOT_DELPHI_BIN
class ElectrostMod(HaCompMod):
    __swig_setmethods__ = {}
    for _s in [HaCompMod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectrostMod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaCompMod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ElectrostMod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_ElectrostMod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ElectrostMod
    __del__ = lambda self: None

    def clear(self):
        return _molset.ElectrostMod_clear(self)

    def SetStdParam(self):
        return _molset.ElectrostMod_SetStdParam(self)

    def SaveParamFile(self):
        return _molset.ElectrostMod_SaveParamFile(self)

    def SaveChargeFile(self):
        return _molset.ElectrostMod_SaveChargeFile(self)

    def SaveRadiusFile(self):
        return _molset.ElectrostMod_SaveRadiusFile(self)

    def SaveCoordFile(self):
        return _molset.ElectrostMod_SaveCoordFile(self)

    def RunDelphi(self, rmode):
        return _molset.ElectrostMod_RunDelphi(self, rmode)

    def run(self, rmode=RUN_FOREGROUND):
        return _molset.ElectrostMod_run(self, rmode)

    def CalcETReorgEne(self):
        return _molset.ElectrostMod_CalcETReorgEne(self)

    def CalcAltStatePK(self, alt_res_st, active_atoms=None):
        return _molset.ElectrostMod_CalcAltStatePK(self, alt_res_st, active_atoms)

    def CalcRedoxPotShft(self):
        return _molset.ElectrostMod_CalcRedoxPotShft(self)

    def CalcAvgPotOn(self, ptlist):
        return _molset.ElectrostMod_CalcAvgPotOn(self, ptlist)

    def ReadTotEne(self, *args):
        return _molset.ElectrostMod_ReadTotEne(self, *args)

    def LoadElPotFromFile(self, format=HLM_F3D_BIN):
        return _molset.ElectrostMod_LoadElPotFromFile(self, format)

    def BuildPotIsoSurface(self):
        return _molset.ElectrostMod_BuildPotIsoSurface(self)

    def CalcIndCharge(self):
        return _molset.ElectrostMod_CalcIndCharge(self)

    def PlotIndCharge(self):
        return _molset.ElectrostMod_PlotIndCharge(self)

    def FillChargeMap(self):
        return _molset.ElectrostMod_FillChargeMap(self)

    def BuildPotVdwDots(self):
        return _molset.ElectrostMod_BuildPotVdwDots(self)

    def ColorMolSurfElPot(self):
        return _molset.ElectrostMod_ColorMolSurfElPot(self)

    def ColorDotStruct(self, dotstruct):
        return _molset.ElectrostMod_ColorDotStruct(self, dotstruct)

    def AddBoundaryAtoms(self):
        return _molset.ElectrostMod_AddBoundaryAtoms(self)
    __swig_setmethods__["min_coord"] = _molset.ElectrostMod_min_coord_set
    __swig_getmethods__["min_coord"] = _molset.ElectrostMod_min_coord_get
    if _newclass:
        min_coord = _swig_property(_molset.ElectrostMod_min_coord_get, _molset.ElectrostMod_min_coord_set)
    __swig_setmethods__["max_coord"] = _molset.ElectrostMod_max_coord_set
    __swig_getmethods__["max_coord"] = _molset.ElectrostMod_max_coord_get
    if _newclass:
        max_coord = _swig_property(_molset.ElectrostMod_max_coord_get, _molset.ElectrostMod_max_coord_set)

    def SetBoundaryAtoms(self, xmin, ymin, zmin, xmax, ymax, zmax):
        return _molset.ElectrostMod_SetBoundaryAtoms(self, xmin, ymin, zmin, xmax, ymax, zmax)

    def ClearBoundaryAtoms(self):
        return _molset.ElectrostMod_ClearBoundaryAtoms(self)
    __swig_setmethods__["param_file_title"] = _molset.ElectrostMod_param_file_title_set
    __swig_getmethods__["param_file_title"] = _molset.ElectrostMod_param_file_title_get
    if _newclass:
        param_file_title = _swig_property(_molset.ElectrostMod_param_file_title_get, _molset.ElectrostMod_param_file_title_set)
    __swig_setmethods__["nx"] = _molset.ElectrostMod_nx_set
    __swig_getmethods__["nx"] = _molset.ElectrostMod_nx_get
    if _newclass:
        nx = _swig_property(_molset.ElectrostMod_nx_get, _molset.ElectrostMod_nx_set)
    __swig_setmethods__["ny"] = _molset.ElectrostMod_ny_set
    __swig_getmethods__["ny"] = _molset.ElectrostMod_ny_get
    if _newclass:
        ny = _swig_property(_molset.ElectrostMod_ny_get, _molset.ElectrostMod_ny_set)
    __swig_setmethods__["nz"] = _molset.ElectrostMod_nz_set
    __swig_getmethods__["nz"] = _molset.ElectrostMod_nz_get
    if _newclass:
        nz = _swig_property(_molset.ElectrostMod_nz_get, _molset.ElectrostMod_nz_set)
    __swig_setmethods__["perfil"] = _molset.ElectrostMod_perfil_set
    __swig_getmethods__["perfil"] = _molset.ElectrostMod_perfil_get
    if _newclass:
        perfil = _swig_property(_molset.ElectrostMod_perfil_get, _molset.ElectrostMod_perfil_set)
    __swig_setmethods__["offset"] = _molset.ElectrostMod_offset_set
    __swig_getmethods__["offset"] = _molset.ElectrostMod_offset_get
    if _newclass:
        offset = _swig_property(_molset.ElectrostMod_offset_get, _molset.ElectrostMod_offset_set)
    __swig_setmethods__["epsi"] = _molset.ElectrostMod_epsi_set
    __swig_getmethods__["epsi"] = _molset.ElectrostMod_epsi_get
    if _newclass:
        epsi = _swig_property(_molset.ElectrostMod_epsi_get, _molset.ElectrostMod_epsi_set)
    __swig_setmethods__["epsout"] = _molset.ElectrostMod_epsout_set
    __swig_getmethods__["epsout"] = _molset.ElectrostMod_epsout_get
    if _newclass:
        epsout = _swig_property(_molset.ElectrostMod_epsout_get, _molset.ElectrostMod_epsout_set)
    __swig_setmethods__["rionst"] = _molset.ElectrostMod_rionst_set
    __swig_getmethods__["rionst"] = _molset.ElectrostMod_rionst_get
    if _newclass:
        rionst = _swig_property(_molset.ElectrostMod_rionst_get, _molset.ElectrostMod_rionst_set)
    __swig_setmethods__["exrad"] = _molset.ElectrostMod_exrad_set
    __swig_getmethods__["exrad"] = _molset.ElectrostMod_exrad_get
    if _newclass:
        exrad = _swig_property(_molset.ElectrostMod_exrad_get, _molset.ElectrostMod_exrad_set)
    __swig_setmethods__["radprb"] = _molset.ElectrostMod_radprb_set
    __swig_getmethods__["radprb"] = _molset.ElectrostMod_radprb_get
    if _newclass:
        radprb = _swig_property(_molset.ElectrostMod_radprb_get, _molset.ElectrostMod_radprb_set)
    __swig_setmethods__["boundary"] = _molset.ElectrostMod_boundary_set
    __swig_getmethods__["boundary"] = _molset.ElectrostMod_boundary_get
    if _newclass:
        boundary = _swig_property(_molset.ElectrostMod_boundary_get, _molset.ElectrostMod_boundary_set)
    __swig_setmethods__["iper"] = _molset.ElectrostMod_iper_set
    __swig_getmethods__["iper"] = _molset.ElectrostMod_iper_get
    if _newclass:
        iper = _swig_property(_molset.ElectrostMod_iper_get, _molset.ElectrostMod_iper_set)
    __swig_setmethods__["nlit"] = _molset.ElectrostMod_nlit_set
    __swig_getmethods__["nlit"] = _molset.ElectrostMod_nlit_get
    if _newclass:
        nlit = _swig_property(_molset.ElectrostMod_nlit_get, _molset.ElectrostMod_nlit_set)
    __swig_setmethods__["nnit"] = _molset.ElectrostMod_nnit_set
    __swig_getmethods__["nnit"] = _molset.ElectrostMod_nnit_get
    if _newclass:
        nnit = _swig_property(_molset.ElectrostMod_nnit_get, _molset.ElectrostMod_nnit_set)
    __swig_setmethods__["iconc"] = _molset.ElectrostMod_iconc_set
    __swig_getmethods__["iconc"] = _molset.ElectrostMod_iconc_get
    if _newclass:
        iconc = _swig_property(_molset.ElectrostMod_iconc_get, _molset.ElectrostMod_iconc_set)
    __swig_setmethods__["ibios"] = _molset.ElectrostMod_ibios_set
    __swig_getmethods__["ibios"] = _molset.ElectrostMod_ibios_get
    if _newclass:
        ibios = _swig_property(_molset.ElectrostMod_ibios_get, _molset.ElectrostMod_ibios_set)
    __swig_setmethods__["isite"] = _molset.ElectrostMod_isite_set
    __swig_getmethods__["isite"] = _molset.ElectrostMod_isite_get
    if _newclass:
        isite = _swig_property(_molset.ElectrostMod_isite_get, _molset.ElectrostMod_isite_set)
    __swig_setmethods__["iatout"] = _molset.ElectrostMod_iatout_set
    __swig_getmethods__["iatout"] = _molset.ElectrostMod_iatout_get
    if _newclass:
        iatout = _swig_property(_molset.ElectrostMod_iatout_get, _molset.ElectrostMod_iatout_set)
    __swig_setmethods__["toplbl"] = _molset.ElectrostMod_toplbl_set
    __swig_getmethods__["toplbl"] = _molset.ElectrostMod_toplbl_get
    if _newclass:
        toplbl = _swig_property(_molset.ElectrostMod_toplbl_get, _molset.ElectrostMod_toplbl_set)
    __swig_setmethods__["isph"] = _molset.ElectrostMod_isph_set
    __swig_getmethods__["isph"] = _molset.ElectrostMod_isph_get
    if _newclass:
        isph = _swig_property(_molset.ElectrostMod_isph_get, _molset.ElectrostMod_isph_set)
    __swig_setmethods__["ipdbwrt"] = _molset.ElectrostMod_ipdbwrt_set
    __swig_getmethods__["ipdbwrt"] = _molset.ElectrostMod_ipdbwrt_get
    if _newclass:
        ipdbwrt = _swig_property(_molset.ElectrostMod_ipdbwrt_get, _molset.ElectrostMod_ipdbwrt_set)
    __swig_setmethods__["ifrcwrt"] = _molset.ElectrostMod_ifrcwrt_set
    __swig_getmethods__["ifrcwrt"] = _molset.ElectrostMod_ifrcwrt_get
    if _newclass:
        ifrcwrt = _swig_property(_molset.ElectrostMod_ifrcwrt_get, _molset.ElectrostMod_ifrcwrt_set)
    __swig_setmethods__["enc"] = _molset.ElectrostMod_enc_set
    __swig_getmethods__["enc"] = _molset.ElectrostMod_enc_get
    if _newclass:
        enc = _swig_property(_molset.ElectrostMod_enc_get, _molset.ElectrostMod_enc_set)
    __swig_setmethods__["igraph"] = _molset.ElectrostMod_igraph_set
    __swig_getmethods__["igraph"] = _molset.ElectrostMod_igraph_get
    if _newclass:
        igraph = _swig_property(_molset.ElectrostMod_igraph_get, _molset.ElectrostMod_igraph_set)
    __swig_setmethods__["ipotent"] = _molset.ElectrostMod_ipotent_set
    __swig_getmethods__["ipotent"] = _molset.ElectrostMod_ipotent_get
    if _newclass:
        ipotent = _swig_property(_molset.ElectrostMod_ipotent_get, _molset.ElectrostMod_ipotent_set)
    __swig_setmethods__["icon1"] = _molset.ElectrostMod_icon1_set
    __swig_getmethods__["icon1"] = _molset.ElectrostMod_icon1_get
    if _newclass:
        icon1 = _swig_property(_molset.ElectrostMod_icon1_get, _molset.ElectrostMod_icon1_set)
    __swig_setmethods__["icon2"] = _molset.ElectrostMod_icon2_set
    __swig_getmethods__["icon2"] = _molset.ElectrostMod_icon2_get
    if _newclass:
        icon2 = _swig_property(_molset.ElectrostMod_icon2_get, _molset.ElectrostMod_icon2_set)
    __swig_setmethods__["imem"] = _molset.ElectrostMod_imem_set
    __swig_getmethods__["imem"] = _molset.ElectrostMod_imem_get
    if _newclass:
        imem = _swig_property(_molset.ElectrostMod_imem_get, _molset.ElectrostMod_imem_set)
    __swig_setmethods__["phiwrt"] = _molset.ElectrostMod_phiwrt_set
    __swig_getmethods__["phiwrt"] = _molset.ElectrostMod_phiwrt_get
    if _newclass:
        phiwrt = _swig_property(_molset.ElectrostMod_phiwrt_get, _molset.ElectrostMod_phiwrt_set)
    __swig_setmethods__["ihs"] = _molset.ElectrostMod_ihs_set
    __swig_getmethods__["ihs"] = _molset.ElectrostMod_ihs_get
    if _newclass:
        ihs = _swig_property(_molset.ElectrostMod_ihs_get, _molset.ElectrostMod_ihs_set)
    __swig_setmethods__["isen"] = _molset.ElectrostMod_isen_set
    __swig_getmethods__["isen"] = _molset.ElectrostMod_isen_get
    if _newclass:
        isen = _swig_property(_molset.ElectrostMod_isen_get, _molset.ElectrostMod_isen_set)
    __swig_setmethods__["ish"] = _molset.ElectrostMod_ish_set
    __swig_getmethods__["ish"] = _molset.ElectrostMod_ish_get
    if _newclass:
        ish = _swig_property(_molset.ElectrostMod_ish_get, _molset.ElectrostMod_ish_set)
    __swig_setmethods__["elpot_low_val"] = _molset.ElectrostMod_elpot_low_val_set
    __swig_getmethods__["elpot_low_val"] = _molset.ElectrostMod_elpot_low_val_get
    if _newclass:
        elpot_low_val = _swig_property(_molset.ElectrostMod_elpot_low_val_get, _molset.ElectrostMod_elpot_low_val_set)
    __swig_setmethods__["elpot_high_val"] = _molset.ElectrostMod_elpot_high_val_set
    __swig_getmethods__["elpot_high_val"] = _molset.ElectrostMod_elpot_high_val_get
    if _newclass:
        elpot_high_val = _swig_property(_molset.ElectrostMod_elpot_high_val_get, _molset.ElectrostMod_elpot_high_val_set)
    __swig_setmethods__["param_file_name"] = _molset.ElectrostMod_param_file_name_set
    __swig_getmethods__["param_file_name"] = _molset.ElectrostMod_param_file_name_get
    if _newclass:
        param_file_name = _swig_property(_molset.ElectrostMod_param_file_name_get, _molset.ElectrostMod_param_file_name_set)
    __swig_setmethods__["charge_file_name"] = _molset.ElectrostMod_charge_file_name_set
    __swig_getmethods__["charge_file_name"] = _molset.ElectrostMod_charge_file_name_get
    if _newclass:
        charge_file_name = _swig_property(_molset.ElectrostMod_charge_file_name_get, _molset.ElectrostMod_charge_file_name_set)
    __swig_setmethods__["radius_file_name"] = _molset.ElectrostMod_radius_file_name_set
    __swig_getmethods__["radius_file_name"] = _molset.ElectrostMod_radius_file_name_get
    if _newclass:
        radius_file_name = _swig_property(_molset.ElectrostMod_radius_file_name_get, _molset.ElectrostMod_radius_file_name_set)
    __swig_setmethods__["coord_file_name"] = _molset.ElectrostMod_coord_file_name_set
    __swig_getmethods__["coord_file_name"] = _molset.ElectrostMod_coord_file_name_get
    if _newclass:
        coord_file_name = _swig_property(_molset.ElectrostMod_coord_file_name_get, _molset.ElectrostMod_coord_file_name_set)
    __swig_setmethods__["log_file_name"] = _molset.ElectrostMod_log_file_name_set
    __swig_getmethods__["log_file_name"] = _molset.ElectrostMod_log_file_name_get
    if _newclass:
        log_file_name = _swig_property(_molset.ElectrostMod_log_file_name_get, _molset.ElectrostMod_log_file_name_set)
    __swig_setmethods__["elfield_fname"] = _molset.ElectrostMod_elfield_fname_set
    __swig_getmethods__["elfield_fname"] = _molset.ElectrostMod_elfield_fname_get
    if _newclass:
        elfield_fname = _swig_property(_molset.ElectrostMod_elfield_fname_get, _molset.ElectrostMod_elfield_fname_set)
    __swig_setmethods__["pot_isolevel"] = _molset.ElectrostMod_pot_isolevel_set
    __swig_getmethods__["pot_isolevel"] = _molset.ElectrostMod_pot_isolevel_get
    if _newclass:
        pot_isolevel = _swig_property(_molset.ElectrostMod_pot_isolevel_get, _molset.ElectrostMod_pot_isolevel_set)
    __swig_setmethods__["dots_number"] = _molset.ElectrostMod_dots_number_set
    __swig_getmethods__["dots_number"] = _molset.ElectrostMod_dots_number_get
    if _newclass:
        dots_number = _swig_property(_molset.ElectrostMod_dots_number_get, _molset.ElectrostMod_dots_number_set)
    __swig_setmethods__["tot_ene"] = _molset.ElectrostMod_tot_ene_set
    __swig_getmethods__["tot_ene"] = _molset.ElectrostMod_tot_ene_get
    if _newclass:
        tot_ene = _swig_property(_molset.ElectrostMod_tot_ene_get, _molset.ElectrostMod_tot_ene_set)
    __swig_setmethods__["el_pot_map"] = _molset.ElectrostMod_el_pot_map_set
    __swig_getmethods__["el_pot_map"] = _molset.ElectrostMod_el_pot_map_get
    if _newclass:
        el_pot_map = _swig_property(_molset.ElectrostMod_el_pot_map_get, _molset.ElectrostMod_el_pot_map_set)
    __swig_setmethods__["Surfaces"] = _molset.ElectrostMod_Surfaces_set
    __swig_getmethods__["Surfaces"] = _molset.ElectrostMod_Surfaces_get
    if _newclass:
        Surfaces = _swig_property(_molset.ElectrostMod_Surfaces_get, _molset.ElectrostMod_Surfaces_set)
    __swig_setmethods__["fill_charge_mode"] = _molset.ElectrostMod_fill_charge_mode_set
    __swig_getmethods__["fill_charge_mode"] = _molset.ElectrostMod_fill_charge_mode_get
    if _newclass:
        fill_charge_mode = _swig_property(_molset.ElectrostMod_fill_charge_mode_get, _molset.ElectrostMod_fill_charge_mode_set)
    __swig_setmethods__["charge_map"] = _molset.ElectrostMod_charge_map_set
    __swig_getmethods__["charge_map"] = _molset.ElectrostMod_charge_map_get
    if _newclass:
        charge_map = _swig_property(_molset.ElectrostMod_charge_map_get, _molset.ElectrostMod_charge_map_set)
    __swig_setmethods__["ind_charge_map"] = _molset.ElectrostMod_ind_charge_map_set
    __swig_getmethods__["ind_charge_map"] = _molset.ElectrostMod_ind_charge_map_get
    if _newclass:
        ind_charge_map = _swig_property(_molset.ElectrostMod_ind_charge_map_get, _molset.ElectrostMod_ind_charge_map_set)
    __swig_setmethods__["ConcMap0"] = _molset.ElectrostMod_ConcMap0_set
    __swig_getmethods__["ConcMap0"] = _molset.ElectrostMod_ConcMap0_get
    if _newclass:
        ConcMap0 = _swig_property(_molset.ElectrostMod_ConcMap0_get, _molset.ElectrostMod_ConcMap0_set)
    __swig_setmethods__["ConcMap1"] = _molset.ElectrostMod_ConcMap1_set
    __swig_getmethods__["ConcMap1"] = _molset.ElectrostMod_ConcMap1_get
    if _newclass:
        ConcMap1 = _swig_property(_molset.ElectrostMod_ConcMap1_get, _molset.ElectrostMod_ConcMap1_set)
    __swig_setmethods__["rdx_shft_mode"] = _molset.ElectrostMod_rdx_shft_mode_set
    __swig_getmethods__["rdx_shft_mode"] = _molset.ElectrostMod_rdx_shft_mode_get
    if _newclass:
        rdx_shft_mode = _swig_property(_molset.ElectrostMod_rdx_shft_mode_get, _molset.ElectrostMod_rdx_shft_mode_set)
    __swig_setmethods__["rdx_shift"] = _molset.ElectrostMod_rdx_shift_set
    __swig_getmethods__["rdx_shift"] = _molset.ElectrostMod_rdx_shift_get
    if _newclass:
        rdx_shift = _swig_property(_molset.ElectrostMod_rdx_shift_get, _molset.ElectrostMod_rdx_shift_set)
    __swig_setmethods__["ddG"] = _molset.ElectrostMod_ddG_set
    __swig_getmethods__["ddG"] = _molset.ElectrostMod_ddG_get
    if _newclass:
        ddG = _swig_property(_molset.ElectrostMod_ddG_get, _molset.ElectrostMod_ddG_set)
    __swig_setmethods__["delta_pK"] = _molset.ElectrostMod_delta_pK_set
    __swig_getmethods__["delta_pK"] = _molset.ElectrostMod_delta_pK_get
    if _newclass:
        delta_pK = _swig_property(_molset.ElectrostMod_delta_pK_get, _molset.ElectrostMod_delta_pK_set)
    __swig_setmethods__["axx_ene"] = _molset.ElectrostMod_axx_ene_set
    __swig_getmethods__["axx_ene"] = _molset.ElectrostMod_axx_ene_get
    if _newclass:
        axx_ene = _swig_property(_molset.ElectrostMod_axx_ene_get, _molset.ElectrostMod_axx_ene_set)
    __swig_setmethods__["ActiveElectrMod"] = _molset.ElectrostMod_ActiveElectrMod_set
    __swig_getmethods__["ActiveElectrMod"] = _molset.ElectrostMod_ActiveElectrMod_get
    if _newclass:
        ActiveElectrMod = _swig_property(_molset.ElectrostMod_ActiveElectrMod_get, _molset.ElectrostMod_ActiveElectrMod_set)
ElectrostMod_swigregister = _molset.ElectrostMod_swigregister
ElectrostMod_swigregister(ElectrostMod)
RDX_SHFT_VS_VAC = cvar.RDX_SHFT_VS_VAC
RDX_SHFT_VS_SOLV = cvar.RDX_SHFT_VS_SOLV
FILL_CHARGE_PROD_REV_DIST = cvar.FILL_CHARGE_PROD_REV_DIST
FILL_CHARGE_SUM_REV_DIST = cvar.FILL_CHARGE_SUM_REV_DIST


def openpm_(pnx_f, pny_f, pnz_f, pxmin_f, pxmax_f, pymin_f, ymax_f, zmin_f, zmax_f, fname, fnmlen):
    return _molset.openpm_(pnx_f, pny_f, pnz_f, pxmin_f, pxmax_f, pymin_f, ymax_f, zmin_f, zmax_f, fname, fnmlen)
openpm_ = _molset.openpm_

def loadpm_(pnx_f, pny_f, pnz_f, fmap):
    return _molset.loadpm_(pnx_f, pny_f, pnz_f, fmap)
loadpm_ = _molset.loadpm_
class HaAtomParmEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaAtomParmEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaAtomParmEntry, name)
    __repr__ = _swig_repr

    def __init__(self, cName, _dbl0, _dbl1):
        this = _molset.new_HaAtomParmEntry(cName, _dbl0, _dbl1)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaAtomParmEntry
    __del__ = lambda self: None

    def SetValues(self, _dbl0, _dbl1):
        return _molset.HaAtomParmEntry_SetValues(self, _dbl0, _dbl1)
    __swig_setmethods__["dbl0"] = _molset.HaAtomParmEntry_dbl0_set
    __swig_getmethods__["dbl0"] = _molset.HaAtomParmEntry_dbl0_get
    if _newclass:
        dbl0 = _swig_property(_molset.HaAtomParmEntry_dbl0_get, _molset.HaAtomParmEntry_dbl0_set)
    __swig_setmethods__["dbl1"] = _molset.HaAtomParmEntry_dbl1_set
    __swig_getmethods__["dbl1"] = _molset.HaAtomParmEntry_dbl1_get
    if _newclass:
        dbl1 = _swig_property(_molset.HaAtomParmEntry_dbl1_get, _molset.HaAtomParmEntry_dbl1_set)
    __swig_setmethods__["Name"] = _molset.HaAtomParmEntry_Name_set
    __swig_getmethods__["Name"] = _molset.HaAtomParmEntry_Name_get
    if _newclass:
        Name = _swig_property(_molset.HaAtomParmEntry_Name_get, _molset.HaAtomParmEntry_Name_set)
HaAtomParmEntry_swigregister = _molset.HaAtomParmEntry_swigregister
HaAtomParmEntry_swigregister(HaAtomParmEntry)

class HaResParmEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaResParmEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaResParmEntry, name)
    __repr__ = _swig_repr

    def __init__(self, cName, cMod):
        this = _molset.new_HaResParmEntry(cName, cMod)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaResParmEntry
    __del__ = lambda self: None

    def SetAtom(self, cName, _dbl0, _dbl1):
        return _molset.HaResParmEntry_SetAtom(self, cName, _dbl0, _dbl1)

    def GetAtom(self, cName):
        return _molset.HaResParmEntry_GetAtom(self, cName)

    def GetAtomListNum(self, cName):
        return _molset.HaResParmEntry_GetAtomListNum(self, cName)

    def DelAtom(self, cName):
        return _molset.HaResParmEntry_DelAtom(self, cName)

    def CopyAtomsFromRes(self, CpRes):
        return _molset.HaResParmEntry_CopyAtomsFromRes(self, CpRes)

    def PrintInfo(self):
        return _molset.HaResParmEntry_PrintInfo(self)

    def PrintSumDbl0(self):
        return _molset.HaResParmEntry_PrintSumDbl0(self)
    __swig_setmethods__["Atms"] = _molset.HaResParmEntry_Atms_set
    __swig_getmethods__["Atms"] = _molset.HaResParmEntry_Atms_get
    if _newclass:
        Atms = _swig_property(_molset.HaResParmEntry_Atms_get, _molset.HaResParmEntry_Atms_set)
    __swig_setmethods__["Name"] = _molset.HaResParmEntry_Name_set
    __swig_getmethods__["Name"] = _molset.HaResParmEntry_Name_get
    if _newclass:
        Name = _swig_property(_molset.HaResParmEntry_Name_get, _molset.HaResParmEntry_Name_set)
    __swig_setmethods__["Mod"] = _molset.HaResParmEntry_Mod_set
    __swig_getmethods__["Mod"] = _molset.HaResParmEntry_Mod_get
    if _newclass:
        Mod = _swig_property(_molset.HaResParmEntry_Mod_get, _molset.HaResParmEntry_Mod_set)
HaResParmEntry_swigregister = _molset.HaResParmEntry_swigregister
HaResParmEntry_swigregister(HaResParmEntry)

class HaAtomsParmFF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaAtomsParmFF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaAtomsParmFF, name)
    __repr__ = _swig_repr

    def __init__(self, cName, cRef, cNotes):
        this = _molset.new_HaAtomsParmFF(cName, cRef, cNotes)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaAtomsParmFF
    __del__ = lambda self: None

    def NewRes(self, cName, cMod):
        return _molset.HaAtomsParmFF_NewRes(self, cName, cMod)

    def SetRes(self, cName, cMod):
        return _molset.HaAtomsParmFF_SetRes(self, cName, cMod)

    def GetRes(self, cName, cMod):
        return _molset.HaAtomsParmFF_GetRes(self, cName, cMod)

    def CopyRes(self, cName, cMod, cNameFrom, cModFrom):
        return _molset.HaAtomsParmFF_CopyRes(self, cName, cMod, cNameFrom, cModFrom)

    def PrintFFInfo(self):
        return _molset.HaAtomsParmFF_PrintFFInfo(self)

    def PrintSumDbl0(self):
        return _molset.HaAtomsParmFF_PrintSumDbl0(self)

    def PrintEntries(self):
        return _molset.HaAtomsParmFF_PrintEntries(self)
    __swig_setmethods__["Ress"] = _molset.HaAtomsParmFF_Ress_set
    __swig_getmethods__["Ress"] = _molset.HaAtomsParmFF_Ress_get
    if _newclass:
        Ress = _swig_property(_molset.HaAtomsParmFF_Ress_get, _molset.HaAtomsParmFF_Ress_set)
    __swig_setmethods__["Name"] = _molset.HaAtomsParmFF_Name_set
    __swig_getmethods__["Name"] = _molset.HaAtomsParmFF_Name_get
    if _newclass:
        Name = _swig_property(_molset.HaAtomsParmFF_Name_get, _molset.HaAtomsParmFF_Name_set)
    __swig_setmethods__["Ref"] = _molset.HaAtomsParmFF_Ref_set
    __swig_getmethods__["Ref"] = _molset.HaAtomsParmFF_Ref_get
    if _newclass:
        Ref = _swig_property(_molset.HaAtomsParmFF_Ref_get, _molset.HaAtomsParmFF_Ref_set)
    __swig_setmethods__["Notes"] = _molset.HaAtomsParmFF_Notes_set
    __swig_getmethods__["Notes"] = _molset.HaAtomsParmFF_Notes_get
    if _newclass:
        Notes = _swig_property(_molset.HaAtomsParmFF_Notes_get, _molset.HaAtomsParmFF_Notes_set)
HaAtomsParmFF_swigregister = _molset.HaAtomsParmFF_swigregister
HaAtomsParmFF_swigregister(HaAtomsParmFF)

class HaAtomsParmDB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaAtomsParmDB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaAtomsParmDB, name)
    __repr__ = _swig_repr

    def __init__(self, cName):
        this = _molset.new_HaAtomsParmDB(cName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaAtomsParmDB
    __del__ = lambda self: None

    def NewFF(self, cName, cRef, cNotes):
        return _molset.HaAtomsParmDB_NewFF(self, cName, cRef, cNotes)

    def GetFF(self, cName):
        return _molset.HaAtomsParmDB_GetFF(self, cName)

    def NumFF(self):
        return _molset.HaAtomsParmDB_NumFF(self)

    def GetFFbyNum(self, i):
        return _molset.HaAtomsParmDB_GetFFbyNum(self, i)

    def SetAtomsParam(self, pmset, FFName):
        return _molset.HaAtomsParmDB_SetAtomsParam(self, pmset, FFName)

    def CompareAtomNamesInFFs(self, cName, cNameRef):
        return _molset.HaAtomsParmDB_CompareAtomNamesInFFs(self, cName, cNameRef)

    def PrintSideToSideFFs(self, cName, cNameRef):
        return _molset.HaAtomsParmDB_PrintSideToSideFFs(self, cName, cNameRef)

    def PrintFFsInfo(self):
        return _molset.HaAtomsParmDB_PrintFFsInfo(self)
    __swig_setmethods__["FFs"] = _molset.HaAtomsParmDB_FFs_set
    __swig_getmethods__["FFs"] = _molset.HaAtomsParmDB_FFs_get
    if _newclass:
        FFs = _swig_property(_molset.HaAtomsParmDB_FFs_get, _molset.HaAtomsParmDB_FFs_set)
    __swig_setmethods__["Name"] = _molset.HaAtomsParmDB_Name_set
    __swig_getmethods__["Name"] = _molset.HaAtomsParmDB_Name_get
    if _newclass:
        Name = _swig_property(_molset.HaAtomsParmDB_Name_get, _molset.HaAtomsParmDB_Name_set)
HaAtomsParmDB_swigregister = _molset.HaAtomsParmDB_swigregister
HaAtomsParmDB_swigregister(HaAtomsParmDB)


def GetQRDB():
    return _molset.GetQRDB()
GetQRDB = _molset.GetQRDB

def DeleteQRDB():
    return _molset.DeleteQRDB()
DeleteQRDB = _molset.DeleteQRDB
class pKaCalcMod(HaCompMod):
    __swig_setmethods__ = {}
    for _s in [HaCompMod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, pKaCalcMod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaCompMod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, pKaCalcMod, name)
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset=None):
        this = _molset.new_pKaCalcMod(new_phost_mset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_pKaCalcMod
    __del__ = lambda self: None

    def PrintResWithAltProtState(self):
        return _molset.pKaCalcMod_PrintResWithAltProtState(self)

    def PrintResults(self):
        return _molset.pKaCalcMod_PrintResults(self)

    def PrintPopulation(self):
        return _molset.pKaCalcMod_PrintPopulation(self)

    def PrintPop4Homooligamer(self, PrintOnlyIfAltPopMoreThenSmth=False, Smth=0.1):
        return _molset.pKaCalcMod_PrintPop4Homooligamer(self, PrintOnlyIfAltPopMoreThenSmth, Smth)

    def CalcpKaUsingElectrostMod(self):
        return _molset.pKaCalcMod_CalcpKaUsingElectrostMod(self)

    def CalcpKaUsingElMod(self):
        return _molset.pKaCalcMod_CalcpKaUsingElMod(self)

    def RunCalcUsingElectrostMod(self):
        return _molset.pKaCalcMod_RunCalcUsingElectrostMod(self)

    def RunCalcUsingElMod(self):
        return _molset.pKaCalcMod_RunCalcUsingElMod(self)

    def MakeAltStList(self):
        return _molset.pKaCalcMod_MakeAltStList(self)

    def ReadCalculatedEnergies(self, filename):
        return _molset.pKaCalcMod_ReadCalculatedEnergies(self, filename)

    def CalcIntrpKa(self):
        return _molset.pKaCalcMod_CalcIntrpKa(self)

    def CalcpKaWithInteraction(self):
        return _molset.pKaCalcMod_CalcpKaWithInteraction(self)

    def WritepKaCalcModToFile(self, filename):
        return _molset.pKaCalcMod_WritepKaCalcModToFile(self, filename)

    def ReadpKaCalcModFromFile(self, filename):
        return _molset.pKaCalcMod_ReadpKaCalcModFromFile(self, filename)

    def WritepKaCalcModToXmlElement(self, RootElt):
        return _molset.pKaCalcMod_WritepKaCalcModToXmlElement(self, RootElt)

    def ReadpKaCalcModFromXmlElement(self, RootElt):
        return _molset.pKaCalcMod_ReadpKaCalcModFromXmlElement(self, RootElt)

    def SetAltSt4ResInHomoolgmr(self, ResNum):
        return _molset.pKaCalcMod_SetAltSt4ResInHomoolgmr(self, ResNum)
    __swig_setmethods__["NumberOfAltStates"] = _molset.pKaCalcMod_NumberOfAltStates_set
    __swig_getmethods__["NumberOfAltStates"] = _molset.pKaCalcMod_NumberOfAltStates_get
    if _newclass:
        NumberOfAltStates = _swig_property(_molset.pKaCalcMod_NumberOfAltStates_get, _molset.pKaCalcMod_NumberOfAltStates_set)
    __swig_setmethods__["E1"] = _molset.pKaCalcMod_E1_set
    __swig_getmethods__["E1"] = _molset.pKaCalcMod_E1_get
    if _newclass:
        E1 = _swig_property(_molset.pKaCalcMod_E1_get, _molset.pKaCalcMod_E1_set)
    __swig_setmethods__["E2"] = _molset.pKaCalcMod_E2_set
    __swig_getmethods__["E2"] = _molset.pKaCalcMod_E2_get
    if _newclass:
        E2 = _swig_property(_molset.pKaCalcMod_E2_get, _molset.pKaCalcMod_E2_set)
    __swig_setmethods__["E3"] = _molset.pKaCalcMod_E3_set
    __swig_getmethods__["E3"] = _molset.pKaCalcMod_E3_get
    if _newclass:
        E3 = _swig_property(_molset.pKaCalcMod_E3_get, _molset.pKaCalcMod_E3_set)
    __swig_setmethods__["E4"] = _molset.pKaCalcMod_E4_set
    __swig_getmethods__["E4"] = _molset.pKaCalcMod_E4_get
    if _newclass:
        E4 = _swig_property(_molset.pKaCalcMod_E4_get, _molset.pKaCalcMod_E4_set)
    __swig_setmethods__["ddG"] = _molset.pKaCalcMod_ddG_set
    __swig_getmethods__["ddG"] = _molset.pKaCalcMod_ddG_get
    if _newclass:
        ddG = _swig_property(_molset.pKaCalcMod_ddG_get, _molset.pKaCalcMod_ddG_set)
    __swig_setmethods__["pKa"] = _molset.pKaCalcMod_pKa_set
    __swig_getmethods__["pKa"] = _molset.pKaCalcMod_pKa_get
    if _newclass:
        pKa = _swig_property(_molset.pKaCalcMod_pKa_get, _molset.pKaCalcMod_pKa_set)
    __swig_setmethods__["pKaFromPop"] = _molset.pKaCalcMod_pKaFromPop_set
    __swig_getmethods__["pKaFromPop"] = _molset.pKaCalcMod_pKaFromPop_get
    if _newclass:
        pKaFromPop = _swig_property(_molset.pKaCalcMod_pKaFromPop_get, _molset.pKaCalcMod_pKaFromPop_set)
    __swig_setmethods__["pKaIntr"] = _molset.pKaCalcMod_pKaIntr_set
    __swig_getmethods__["pKaIntr"] = _molset.pKaCalcMod_pKaIntr_get
    if _newclass:
        pKaIntr = _swig_property(_molset.pKaCalcMod_pKaIntr_get, _molset.pKaCalcMod_pKaIntr_set)
    __swig_setmethods__["pKaStd"] = _molset.pKaCalcMod_pKaStd_set
    __swig_getmethods__["pKaStd"] = _molset.pKaCalcMod_pKaStd_get
    if _newclass:
        pKaStd = _swig_property(_molset.pKaCalcMod_pKaStd_get, _molset.pKaCalcMod_pKaStd_set)
    __swig_setmethods__["dpKa"] = _molset.pKaCalcMod_dpKa_set
    __swig_getmethods__["dpKa"] = _molset.pKaCalcMod_dpKa_get
    if _newclass:
        dpKa = _swig_property(_molset.pKaCalcMod_dpKa_get, _molset.pKaCalcMod_dpKa_set)
    __swig_setmethods__["inter_mat"] = _molset.pKaCalcMod_inter_mat_set
    __swig_getmethods__["inter_mat"] = _molset.pKaCalcMod_inter_mat_get
    if _newclass:
        inter_mat = _swig_property(_molset.pKaCalcMod_inter_mat_get, _molset.pKaCalcMod_inter_mat_set)
    __swig_setmethods__["E1done"] = _molset.pKaCalcMod_E1done_set
    __swig_getmethods__["E1done"] = _molset.pKaCalcMod_E1done_get
    if _newclass:
        E1done = _swig_property(_molset.pKaCalcMod_E1done_get, _molset.pKaCalcMod_E1done_set)
    __swig_setmethods__["E2done"] = _molset.pKaCalcMod_E2done_set
    __swig_getmethods__["E2done"] = _molset.pKaCalcMod_E2done_get
    if _newclass:
        E2done = _swig_property(_molset.pKaCalcMod_E2done_get, _molset.pKaCalcMod_E2done_set)
    __swig_setmethods__["E3done"] = _molset.pKaCalcMod_E3done_set
    __swig_getmethods__["E3done"] = _molset.pKaCalcMod_E3done_get
    if _newclass:
        E3done = _swig_property(_molset.pKaCalcMod_E3done_get, _molset.pKaCalcMod_E3done_set)
    __swig_setmethods__["E4done"] = _molset.pKaCalcMod_E4done_set
    __swig_getmethods__["E4done"] = _molset.pKaCalcMod_E4done_get
    if _newclass:
        E4done = _swig_property(_molset.pKaCalcMod_E4done_get, _molset.pKaCalcMod_E4done_set)
    __swig_setmethods__["inter_mat_done"] = _molset.pKaCalcMod_inter_mat_done_set
    __swig_getmethods__["inter_mat_done"] = _molset.pKaCalcMod_inter_mat_done_get
    if _newclass:
        inter_mat_done = _swig_property(_molset.pKaCalcMod_inter_mat_done_get, _molset.pKaCalcMod_inter_mat_done_set)
    __swig_setmethods__["Pop"] = _molset.pKaCalcMod_Pop_set
    __swig_getmethods__["Pop"] = _molset.pKaCalcMod_Pop_get
    if _newclass:
        Pop = _swig_property(_molset.pKaCalcMod_Pop_get, _molset.pKaCalcMod_Pop_set)
    __swig_setmethods__["pHmin"] = _molset.pKaCalcMod_pHmin_set
    __swig_getmethods__["pHmin"] = _molset.pKaCalcMod_pHmin_get
    if _newclass:
        pHmin = _swig_property(_molset.pKaCalcMod_pHmin_get, _molset.pKaCalcMod_pHmin_set)
    __swig_setmethods__["pHmax"] = _molset.pKaCalcMod_pHmax_set
    __swig_getmethods__["pHmax"] = _molset.pKaCalcMod_pHmax_get
    if _newclass:
        pHmax = _swig_property(_molset.pKaCalcMod_pHmax_get, _molset.pKaCalcMod_pHmax_set)
    __swig_setmethods__["pHstep"] = _molset.pKaCalcMod_pHstep_set
    __swig_getmethods__["pHstep"] = _molset.pKaCalcMod_pHstep_get
    if _newclass:
        pHstep = _swig_property(_molset.pKaCalcMod_pHstep_get, _molset.pKaCalcMod_pHstep_set)
    __swig_setmethods__["pKaCalcMethod"] = _molset.pKaCalcMod_pKaCalcMethod_set
    __swig_getmethods__["pKaCalcMethod"] = _molset.pKaCalcMod_pKaCalcMethod_get
    if _newclass:
        pKaCalcMethod = _swig_property(_molset.pKaCalcMod_pKaCalcMethod_get, _molset.pKaCalcMod_pKaCalcMethod_set)
    SCF_MULTI_SITE_CALC = _molset.pKaCalcMod_SCF_MULTI_SITE_CALC
    MC_MULTI_SITE_CALC = _molset.pKaCalcMod_MC_MULTI_SITE_CALC
    __swig_setmethods__["pKaCalcMethodStr"] = _molset.pKaCalcMod_pKaCalcMethodStr_set
    __swig_getmethods__["pKaCalcMethodStr"] = _molset.pKaCalcMod_pKaCalcMethodStr_get
    if _newclass:
        pKaCalcMethodStr = _swig_property(_molset.pKaCalcMod_pKaCalcMethodStr_get, _molset.pKaCalcMod_pKaCalcMethodStr_set)
    __swig_setmethods__["MC_PKA_CALC_N_mc_cyc"] = _molset.pKaCalcMod_MC_PKA_CALC_N_mc_cyc_set
    __swig_getmethods__["MC_PKA_CALC_N_mc_cyc"] = _molset.pKaCalcMod_MC_PKA_CALC_N_mc_cyc_get
    if _newclass:
        MC_PKA_CALC_N_mc_cyc = _swig_property(_molset.pKaCalcMod_MC_PKA_CALC_N_mc_cyc_get, _molset.pKaCalcMod_MC_PKA_CALC_N_mc_cyc_set)
    __swig_setmethods__["SCF_PKA_CALC_max_iter"] = _molset.pKaCalcMod_SCF_PKA_CALC_max_iter_set
    __swig_getmethods__["SCF_PKA_CALC_max_iter"] = _molset.pKaCalcMod_SCF_PKA_CALC_max_iter_get
    if _newclass:
        SCF_PKA_CALC_max_iter = _swig_property(_molset.pKaCalcMod_SCF_PKA_CALC_max_iter_get, _molset.pKaCalcMod_SCF_PKA_CALC_max_iter_set)
    __swig_setmethods__["SCF_PKA_CALC_pop_err_max"] = _molset.pKaCalcMod_SCF_PKA_CALC_pop_err_max_set
    __swig_getmethods__["SCF_PKA_CALC_pop_err_max"] = _molset.pKaCalcMod_SCF_PKA_CALC_pop_err_max_get
    if _newclass:
        SCF_PKA_CALC_pop_err_max = _swig_property(_molset.pKaCalcMod_SCF_PKA_CALC_pop_err_max_get, _molset.pKaCalcMod_SCF_PKA_CALC_pop_err_max_set)
    __swig_setmethods__["SaveIntermediatePotNNI"] = _molset.pKaCalcMod_SaveIntermediatePotNNI_set
    __swig_getmethods__["SaveIntermediatePotNNI"] = _molset.pKaCalcMod_SaveIntermediatePotNNI_get
    if _newclass:
        SaveIntermediatePotNNI = _swig_property(_molset.pKaCalcMod_SaveIntermediatePotNNI_get, _molset.pKaCalcMod_SaveIntermediatePotNNI_set)
    __swig_setmethods__["SaveIntermediateResults"] = _molset.pKaCalcMod_SaveIntermediateResults_set
    __swig_getmethods__["SaveIntermediateResults"] = _molset.pKaCalcMod_SaveIntermediateResults_get
    if _newclass:
        SaveIntermediateResults = _swig_property(_molset.pKaCalcMod_SaveIntermediateResults_get, _molset.pKaCalcMod_SaveIntermediateResults_set)
pKaCalcMod_swigregister = _molset.pKaCalcMod_swigregister
pKaCalcMod_swigregister(pKaCalcMod)

class PNPMod(HaCompMod):
    __swig_setmethods__ = {}
    for _s in [HaCompMod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PNPMod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaCompMod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PNPMod, name)
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset=None):
        this = _molset.new_PNPMod(new_phost_mset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_PNPMod
    __del__ = lambda self: None

    def SetNIonsTypes(self, m_NIonsTypes):
        return _molset.PNPMod_SetNIonsTypes(self, m_NIonsTypes)

    def SetIonName(self, ion, name):
        return _molset.PNPMod_SetIonName(self, ion, name)

    def GetIonName(self, ion):
        return _molset.PNPMod_GetIonName(self, ion)

    def PrintLJAB(self):
        return _molset.PNPMod_PrintLJAB(self)

    def SavePABFile(self, filename):
        return _molset.PNPMod_SavePABFile(self, filename)

    def ReadAMBERFF(self, filename):
        return _molset.PNPMod_ReadAMBERFF(self, filename)

    def ReadAMBER94FF(self):
        return _molset.PNPMod_ReadAMBER94FF(self)

    def GetAtomTypeNumber(self, atomname):
        return _molset.PNPMod_GetAtomTypeNumber(self, atomname)

    def GetHalfSigma(self, atomname):
        return _molset.PNPMod_GetHalfSigma(self, atomname)

    def GetFourEpsilon(self, atomname):
        return _molset.PNPMod_GetFourEpsilon(self, atomname)

    def SavePREFile(self, filename):
        return _molset.PNPMod_SavePREFile(self, filename)

    def SavePREFreeFile(self, filename):
        return _molset.PNPMod_SavePREFreeFile(self, filename)

    def SetLJABfromAMBERFF(self):
        return _molset.PNPMod_SetLJABfromAMBERFF(self)
    __swig_setmethods__["AtomTypesDB"] = _molset.PNPMod_AtomTypesDB_set
    __swig_getmethods__["AtomTypesDB"] = _molset.PNPMod_AtomTypesDB_get
    if _newclass:
        AtomTypesDB = _swig_property(_molset.PNPMod_AtomTypesDB_get, _molset.PNPMod_AtomTypesDB_set)
    __swig_setmethods__["HalfSigmaDB"] = _molset.PNPMod_HalfSigmaDB_set
    __swig_getmethods__["HalfSigmaDB"] = _molset.PNPMod_HalfSigmaDB_get
    if _newclass:
        HalfSigmaDB = _swig_property(_molset.PNPMod_HalfSigmaDB_get, _molset.PNPMod_HalfSigmaDB_set)
    __swig_setmethods__["FourEpsilonDB"] = _molset.PNPMod_FourEpsilonDB_set
    __swig_getmethods__["FourEpsilonDB"] = _molset.PNPMod_FourEpsilonDB_get
    if _newclass:
        FourEpsilonDB = _swig_property(_molset.PNPMod_FourEpsilonDB_get, _molset.PNPMod_FourEpsilonDB_set)

    def SetLJABfromOPLS(self):
        return _molset.PNPMod_SetLJABfromOPLS(self)

    def ReadOPLSFF(self):
        return _molset.PNPMod_ReadOPLSFF(self)

    def PrintOPLSLJSigmaEpsilon(self):
        return _molset.PNPMod_PrintOPLSLJSigmaEpsilon(self)

    def PrintOPLSLJAB(self):
        return _molset.PNPMod_PrintOPLSLJAB(self)

    def SaveIER(self, filename, OnlyHeavyAtoms=True):
        return _molset.PNPMod_SaveIER(self, filename, OnlyHeavyAtoms)

    def ReadIER(self, filename, AddToDB):
        return _molset.PNPMod_ReadIER(self, filename, AddToDB)

    def GetIER(self, aptr, rK, rCl, OnlyHeavyAtoms):
        return _molset.PNPMod_GetIER(self, aptr, rK, rCl, OnlyHeavyAtoms)

    def GetResNumAtIERDB(self, ResName):
        return _molset.PNPMod_GetResNumAtIERDB(self, ResName)

    def GetAtmNumOfResAtIERDB(self, myres, AtmName):
        return _molset.PNPMod_GetAtmNumOfResAtIERDB(self, myres, AtmName)
    __swig_setmethods__["IERResNames"] = _molset.PNPMod_IERResNames_set
    __swig_getmethods__["IERResNames"] = _molset.PNPMod_IERResNames_get
    if _newclass:
        IERResNames = _swig_property(_molset.PNPMod_IERResNames_get, _molset.PNPMod_IERResNames_set)
    __swig_setmethods__["IERAtomName"] = _molset.PNPMod_IERAtomName_set
    __swig_getmethods__["IERAtomName"] = _molset.PNPMod_IERAtomName_get
    if _newclass:
        IERAtomName = _swig_property(_molset.PNPMod_IERAtomName_get, _molset.PNPMod_IERAtomName_set)
    __swig_setmethods__["IERRadiusK"] = _molset.PNPMod_IERRadiusK_set
    __swig_getmethods__["IERRadiusK"] = _molset.PNPMod_IERRadiusK_get
    if _newclass:
        IERRadiusK = _swig_property(_molset.PNPMod_IERRadiusK_get, _molset.PNPMod_IERRadiusK_set)
    __swig_setmethods__["IERRadiusCl"] = _molset.PNPMod_IERRadiusCl_set
    __swig_getmethods__["IERRadiusCl"] = _molset.PNPMod_IERRadiusCl_get
    if _newclass:
        IERRadiusCl = _swig_property(_molset.PNPMod_IERRadiusCl_get, _molset.PNPMod_IERRadiusCl_set)

    def SavePAN(self, filename, OnlyHeavyAtoms=True):
        return _molset.PNPMod_SavePAN(self, filename, OnlyHeavyAtoms)

    def AssignPAN(self, OnlyHeavyAtoms=True):
        return _molset.PNPMod_AssignPAN(self, OnlyHeavyAtoms)

    def ReadPANDB(self, filename, AddToDB):
        return _molset.PNPMod_ReadPANDB(self, filename, AddToDB)

    def GetSR_AN(self, aptr, AK, NK, ACl, NCl, OnlyHeavyAtoms):
        return _molset.PNPMod_GetSR_AN(self, aptr, AK, NK, ACl, NCl, OnlyHeavyAtoms)

    def GetResNumAtSR_AN_DB(self, ResName):
        return _molset.PNPMod_GetResNumAtSR_AN_DB(self, ResName)

    def GetAtmNumOfResAtSR_AN_DB(self, myres, AtmName):
        return _molset.PNPMod_GetAtmNumOfResAtSR_AN_DB(self, myres, AtmName)
    __swig_setmethods__["SR_AN_ResNames"] = _molset.PNPMod_SR_AN_ResNames_set
    __swig_getmethods__["SR_AN_ResNames"] = _molset.PNPMod_SR_AN_ResNames_get
    if _newclass:
        SR_AN_ResNames = _swig_property(_molset.PNPMod_SR_AN_ResNames_get, _molset.PNPMod_SR_AN_ResNames_set)
    __swig_setmethods__["SR_AN_AtomName"] = _molset.PNPMod_SR_AN_AtomName_set
    __swig_getmethods__["SR_AN_AtomName"] = _molset.PNPMod_SR_AN_AtomName_get
    if _newclass:
        SR_AN_AtomName = _swig_property(_molset.PNPMod_SR_AN_AtomName_get, _molset.PNPMod_SR_AN_AtomName_set)
    __swig_setmethods__["SR_A_K"] = _molset.PNPMod_SR_A_K_set
    __swig_getmethods__["SR_A_K"] = _molset.PNPMod_SR_A_K_get
    if _newclass:
        SR_A_K = _swig_property(_molset.PNPMod_SR_A_K_get, _molset.PNPMod_SR_A_K_set)
    __swig_setmethods__["SR_A_Cl"] = _molset.PNPMod_SR_A_Cl_set
    __swig_getmethods__["SR_A_Cl"] = _molset.PNPMod_SR_A_Cl_get
    if _newclass:
        SR_A_Cl = _swig_property(_molset.PNPMod_SR_A_Cl_get, _molset.PNPMod_SR_A_Cl_set)
    __swig_setmethods__["SR_N_K"] = _molset.PNPMod_SR_N_K_set
    __swig_getmethods__["SR_N_K"] = _molset.PNPMod_SR_N_K_get
    if _newclass:
        SR_N_K = _swig_property(_molset.PNPMod_SR_N_K_get, _molset.PNPMod_SR_N_K_set)
    __swig_setmethods__["SR_N_Cl"] = _molset.PNPMod_SR_N_Cl_set
    __swig_getmethods__["SR_N_Cl"] = _molset.PNPMod_SR_N_Cl_get
    if _newclass:
        SR_N_Cl = _swig_property(_molset.PNPMod_SR_N_Cl_get, _molset.PNPMod_SR_N_Cl_set)
    __swig_setmethods__["mSR_A_K"] = _molset.PNPMod_mSR_A_K_set
    __swig_getmethods__["mSR_A_K"] = _molset.PNPMod_mSR_A_K_get
    if _newclass:
        mSR_A_K = _swig_property(_molset.PNPMod_mSR_A_K_get, _molset.PNPMod_mSR_A_K_set)
    __swig_setmethods__["mSR_A_Cl"] = _molset.PNPMod_mSR_A_Cl_set
    __swig_getmethods__["mSR_A_Cl"] = _molset.PNPMod_mSR_A_Cl_get
    if _newclass:
        mSR_A_Cl = _swig_property(_molset.PNPMod_mSR_A_Cl_get, _molset.PNPMod_mSR_A_Cl_set)
    __swig_setmethods__["mSR_N_K"] = _molset.PNPMod_mSR_N_K_set
    __swig_getmethods__["mSR_N_K"] = _molset.PNPMod_mSR_N_K_get
    if _newclass:
        mSR_N_K = _swig_property(_molset.PNPMod_mSR_N_K_get, _molset.PNPMod_mSR_N_K_set)
    __swig_setmethods__["mSR_N_Cl"] = _molset.PNPMod_mSR_N_Cl_set
    __swig_getmethods__["mSR_N_Cl"] = _molset.PNPMod_mSR_N_Cl_get
    if _newclass:
        mSR_N_Cl = _swig_property(_molset.PNPMod_mSR_N_Cl_get, _molset.PNPMod_mSR_N_Cl_set)
    __swig_setmethods__["m_ContWorld"] = _molset.PNPMod_m_ContWorld_set
    __swig_getmethods__["m_ContWorld"] = _molset.PNPMod_m_ContWorld_get
    if _newclass:
        m_ContWorld = _swig_property(_molset.PNPMod_m_ContWorld_get, _molset.PNPMod_m_ContWorld_set)

    def RunPNPSFromString(self, string):
        return _molset.PNPMod_RunPNPSFromString(self, string)
PNPMod_swigregister = _molset.PNPMod_swigregister
PNPMod_swigregister(PNPMod)

class APBSMod(HaCompMod):
    __swig_setmethods__ = {}
    for _s in [HaCompMod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, APBSMod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaCompMod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, APBSMod, name)
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset=None):
        this = _molset.new_APBSMod(new_phost_mset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_APBSMod
    __del__ = lambda self: None
    __swig_setmethods__["E"] = _molset.APBSMod_E_set
    __swig_getmethods__["E"] = _molset.APBSMod_E_get
    if _newclass:
        E = _swig_property(_molset.APBSMod_E_get, _molset.APBSMod_E_set)
    __swig_setmethods__["nx"] = _molset.APBSMod_nx_set
    __swig_getmethods__["nx"] = _molset.APBSMod_nx_get
    if _newclass:
        nx = _swig_property(_molset.APBSMod_nx_get, _molset.APBSMod_nx_set)
    __swig_setmethods__["ny"] = _molset.APBSMod_ny_set
    __swig_getmethods__["ny"] = _molset.APBSMod_ny_get
    if _newclass:
        ny = _swig_property(_molset.APBSMod_ny_get, _molset.APBSMod_ny_set)
    __swig_setmethods__["nz"] = _molset.APBSMod_nz_set
    __swig_getmethods__["nz"] = _molset.APBSMod_nz_get
    if _newclass:
        nz = _swig_property(_molset.APBSMod_nz_get, _molset.APBSMod_nz_set)
    __swig_setmethods__["GridScale"] = _molset.APBSMod_GridScale_set
    __swig_getmethods__["GridScale"] = _molset.APBSMod_GridScale_get
    if _newclass:
        GridScale = _swig_property(_molset.APBSMod_GridScale_get, _molset.APBSMod_GridScale_set)
    __swig_setmethods__["epsi"] = _molset.APBSMod_epsi_set
    __swig_getmethods__["epsi"] = _molset.APBSMod_epsi_get
    if _newclass:
        epsi = _swig_property(_molset.APBSMod_epsi_get, _molset.APBSMod_epsi_set)
    __swig_setmethods__["epsout"] = _molset.APBSMod_epsout_set
    __swig_getmethods__["epsout"] = _molset.APBSMod_epsout_get
    if _newclass:
        epsout = _swig_property(_molset.APBSMod_epsout_get, _molset.APBSMod_epsout_set)
    __swig_setmethods__["rionst"] = _molset.APBSMod_rionst_set
    __swig_getmethods__["rionst"] = _molset.APBSMod_rionst_get
    if _newclass:
        rionst = _swig_property(_molset.APBSMod_rionst_get, _molset.APBSMod_rionst_set)
    __swig_setmethods__["exrad"] = _molset.APBSMod_exrad_set
    __swig_getmethods__["exrad"] = _molset.APBSMod_exrad_get
    if _newclass:
        exrad = _swig_property(_molset.APBSMod_exrad_get, _molset.APBSMod_exrad_set)
    __swig_setmethods__["radprb"] = _molset.APBSMod_radprb_set
    __swig_getmethods__["radprb"] = _molset.APBSMod_radprb_get
    if _newclass:
        radprb = _swig_property(_molset.APBSMod_radprb_get, _molset.APBSMod_radprb_set)
    __swig_setmethods__["boundary"] = _molset.APBSMod_boundary_set
    __swig_getmethods__["boundary"] = _molset.APBSMod_boundary_get
    if _newclass:
        boundary = _swig_property(_molset.APBSMod_boundary_get, _molset.APBSMod_boundary_set)
    __swig_setmethods__["iper"] = _molset.APBSMod_iper_set
    __swig_getmethods__["iper"] = _molset.APBSMod_iper_get
    if _newclass:
        iper = _swig_property(_molset.APBSMod_iper_get, _molset.APBSMod_iper_set)
    __swig_setmethods__["nlit"] = _molset.APBSMod_nlit_set
    __swig_getmethods__["nlit"] = _molset.APBSMod_nlit_get
    if _newclass:
        nlit = _swig_property(_molset.APBSMod_nlit_get, _molset.APBSMod_nlit_set)
    __swig_setmethods__["nnit"] = _molset.APBSMod_nnit_set
    __swig_getmethods__["nnit"] = _molset.APBSMod_nnit_get
    if _newclass:
        nnit = _swig_property(_molset.APBSMod_nnit_get, _molset.APBSMod_nnit_set)
    __swig_setmethods__["chgm"] = _molset.APBSMod_chgm_set
    __swig_getmethods__["chgm"] = _molset.APBSMod_chgm_get
    if _newclass:
        chgm = _swig_property(_molset.APBSMod_chgm_get, _molset.APBSMod_chgm_set)
    __swig_setmethods__["bcfl"] = _molset.APBSMod_bcfl_set
    __swig_getmethods__["bcfl"] = _molset.APBSMod_bcfl_get
    if _newclass:
        bcfl = _swig_property(_molset.APBSMod_bcfl_get, _molset.APBSMod_bcfl_set)
    __swig_setmethods__["PBEType"] = _molset.APBSMod_PBEType_set
    __swig_getmethods__["PBEType"] = _molset.APBSMod_PBEType_get
    if _newclass:
        PBEType = _swig_property(_molset.APBSMod_PBEType_get, _molset.APBSMod_PBEType_set)
    __swig_setmethods__["d"] = _molset.APBSMod_d_set
    __swig_getmethods__["d"] = _molset.APBSMod_d_get
    if _newclass:
        d = _swig_property(_molset.APBSMod_d_get, _molset.APBSMod_d_set)
    __swig_setmethods__["nlev"] = _molset.APBSMod_nlev_set
    __swig_getmethods__["nlev"] = _molset.APBSMod_nlev_get
    if _newclass:
        nlev = _swig_property(_molset.APBSMod_nlev_get, _molset.APBSMod_nlev_set)

    def Run(self):
        return _molset.APBSMod_Run(self)
APBSMod_swigregister = _molset.APBSMod_swigregister
APBSMod_swigregister(APBSMod)

class HaGaussMod(HaCompMod):
    __swig_setmethods__ = {}
    for _s in [HaCompMod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaGaussMod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaCompMod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaGaussMod, name)
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset):
        this = _molset.new_HaGaussMod(new_phost_mset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaGaussMod
    __del__ = lambda self: None

    def SetStdFileNames(self):
        return _molset.HaGaussMod_SetStdFileNames(self)

    def SetStdJobFlags(self):
        return _molset.HaGaussMod_SetStdJobFlags(self)

    def SaveInpFile(self):
        return _molset.HaGaussMod_SaveInpFile(self)

    def LoadOutput(self):
        return _molset.HaGaussMod_LoadOutput(self)

    def LoadOutFile(self, out_fname):
        return _molset.HaGaussMod_LoadOutFile(self, out_fname)

    def LoadOutFromStream(self, arg2):
        return _molset.HaGaussMod_LoadOutFromStream(self, arg2)

    def LoadOutSummary(self, summary_str):
        return _molset.HaGaussMod_LoadOutSummary(self, summary_str)

    def Run(self, popt=None):
        return _molset.HaGaussMod_Run(self, popt)

    def RunFormChk(self, fname_chk, fname_fchk):
        return _molset.HaGaussMod_RunFormChk(self, fname_chk, fname_fchk)
    if _newclass:
        PrintCurBcommon = staticmethod(_molset.HaGaussMod_PrintCurBcommon)
    else:
        PrintCurBcommon = _molset.HaGaussMod_PrintCurBcommon
    __swig_setmethods__["gaussian_version"] = _molset.HaGaussMod_gaussian_version_set
    __swig_getmethods__["gaussian_version"] = _molset.HaGaussMod_gaussian_version_get
    if _newclass:
        gaussian_version = _swig_property(_molset.HaGaussMod_gaussian_version_get, _molset.HaGaussMod_gaussian_version_set)
    __swig_setmethods__["gaussian_exe"] = _molset.HaGaussMod_gaussian_exe_set
    __swig_getmethods__["gaussian_exe"] = _molset.HaGaussMod_gaussian_exe_get
    if _newclass:
        gaussian_exe = _swig_property(_molset.HaGaussMod_gaussian_exe_get, _molset.HaGaussMod_gaussian_exe_set)

    def SetFilePrefix(self, prefix):
        return _molset.HaGaussMod_SetFilePrefix(self, prefix)

    def GetFilePrefix(self):
        return _molset.HaGaussMod_GetFilePrefix(self)

    def GetInpFileName(self):
        return _molset.HaGaussMod_GetInpFileName(self)

    def GetCHKFileName(self):
        return _molset.HaGaussMod_GetCHKFileName(self)

    def GetFCHKFileName(self):
        return _molset.HaGaussMod_GetFCHKFileName(self)

    def GetRWFFileName(self):
        return _molset.HaGaussMod_GetRWFFileName(self)

    def GetOutFileName(self):
        return _molset.HaGaussMod_GetOutFileName(self)

    def SetAddKWStr(self, add_kw_str):
        return _molset.HaGaussMod_SetAddKWStr(self, add_kw_str)

    def SetNumSharedMemCores(self, n_sh_cores_new):
        return _molset.HaGaussMod_SetNumSharedMemCores(self, n_sh_cores_new)

    def SetNumProc(self, n_proc_new):
        return _molset.HaGaussMod_SetNumProc(self, n_proc_new)

    def SetMaxMem(self, max_mem):
        return _molset.HaGaussMod_SetMaxMem(self, max_mem)

    def GetNumSharedMemCores(self):
        return _molset.HaGaussMod_GetNumSharedMemCores(self)

    def GetNumProc(self):
        return _molset.HaGaussMod_GetNumProc(self)

    def GetMaxMem(self):
        return _molset.HaGaussMod_GetMaxMem(self)

    def SetLoadNonOptGeom(self, set_par=True):
        return _molset.HaGaussMod_SetLoadNonOptGeom(self, set_par)

    def SetLoadGeomZMatOrient(self, set_par=True):
        return _molset.HaGaussMod_SetLoadGeomZMatOrient(self, set_par)

    def SetLoadGeomStdOrient(self, set_par=True):
        return _molset.HaGaussMod_SetLoadGeomStdOrient(self, set_par)

    def SetReadInitGeomChkFile(self, set_par=True):
        return _molset.HaGaussMod_SetReadInitGeomChkFile(self, set_par)

    def SetReadHFGuessChkFile(self, set_par=True):
        return _molset.HaGaussMod_SetReadHFGuessChkFile(self, set_par)

    def SetNoStdOrient(self, set_par=True):
        return _molset.HaGaussMod_SetNoStdOrient(self, set_par)

    def SetSaveBasisSetGen(self, set_par=True):
        return _molset.HaGaussMod_SetSaveBasisSetGen(self, set_par)
HaGaussMod_swigregister = _molset.HaGaussMod_swigregister
HaGaussMod_swigregister(HaGaussMod)

def HaGaussMod_PrintCurBcommon():
    return _molset.HaGaussMod_PrintCurBcommon()
HaGaussMod_PrintCurBcommon = _molset.HaGaussMod_PrintCurBcommon

class HaZindoMod(HaCompMod):
    __swig_setmethods__ = {}
    for _s in [HaCompMod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaZindoMod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaCompMod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaZindoMod, name)
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset):
        this = _molset.new_HaZindoMod(new_phost_mset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaZindoMod
    __del__ = lambda self: None

    def SaveParamFile(self, fname):
        return _molset.HaZindoMod_SaveParamFile(self, fname)
HaZindoMod_swigregister = _molset.HaZindoMod_swigregister
HaZindoMod_swigregister(HaZindoMod)

class Coord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Coord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Coord, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetClassName(self):
        return _molset.Coord_GetClassName(self)

    def clone(self):
        return _molset.Coord_clone(self)

    def AsVecDouble(self):
        return _molset.Coord_AsVecDouble(self)

    def SetFrom(self, pcrd):
        return _molset.Coord_SetFrom(self, pcrd)

    def SetFromVecDouble(self, dbl_vec):
        return _molset.Coord_SetFromVecDouble(self, dbl_vec)

    def LoadFromStream(self, arg2, popt=None):
        return _molset.Coord_LoadFromStream(self, arg2, popt)

    def SaveToStream(self, os, popt=None):
        return _molset.Coord_SaveToStream(self, os, popt)
    __swig_destroy__ = _molset.delete_Coord
    __del__ = lambda self: None
Coord_swigregister = _molset.Coord_swigregister
Coord_swigregister(Coord)

class LoadCrdOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadCrdOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoadCrdOptions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_LoadCrdOptions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_LoadCrdOptions
    __del__ = lambda self: None

    def SetStdOptions(self):
        return _molset.LoadCrdOptions_SetStdOptions(self)

    def Copy(self, ref):
        return _molset.LoadCrdOptions_Copy(self, ref)

    def clone(self):
        return _molset.LoadCrdOptions_clone(self)

    def SetLoadNotFrozenCrd(self, set_par):
        return _molset.LoadCrdOptions_SetLoadNotFrozenCrd(self, set_par)

    def ToLoadNotFrozenCrd(self):
        return _molset.LoadCrdOptions_ToLoadNotFrozenCrd(self)

    def SetLoadAllCrd(self, set_par):
        return _molset.LoadCrdOptions_SetLoadAllCrd(self, set_par)

    def ToLoadAllCrd(self):
        return _molset.LoadCrdOptions_ToLoadAllCrd(self)
LoadCrdOptions_swigregister = _molset.LoadCrdOptions_swigregister
LoadCrdOptions_swigregister(LoadCrdOptions)

class SaveCrdOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SaveCrdOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SaveCrdOptions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_SaveCrdOptions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_SaveCrdOptions
    __del__ = lambda self: None

    def SetStdOptions(self):
        return _molset.SaveCrdOptions_SetStdOptions(self)

    def Copy(self, ref):
        return _molset.SaveCrdOptions_Copy(self, ref)

    def clone(self):
        return _molset.SaveCrdOptions_clone(self)

    def SetSaveNotFrozenCrd(self, set_par):
        return _molset.SaveCrdOptions_SetSaveNotFrozenCrd(self, set_par)

    def ToSaveNotFrozenCrd(self):
        return _molset.SaveCrdOptions_ToSaveNotFrozenCrd(self)

    def SetSaveAllCrd(self, set_par):
        return _molset.SaveCrdOptions_SetSaveAllCrd(self, set_par)

    def ToSaveAllCrd(self):
        return _molset.SaveCrdOptions_ToSaveAllCrd(self)
SaveCrdOptions_swigregister = _molset.SaveCrdOptions_swigregister
SaveCrdOptions_swigregister(SaveCrdOptions)

class CrdAssignRule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrdAssignRule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CrdAssignRule, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_CrdAssignRule
    __del__ = lambda self: None

    def GetPriority(self):
        return _molset.CrdAssignRule_GetPriority(self)

    def SetPriority(self, priority_new):
        return _molset.CrdAssignRule_SetPriority(self, priority_new)

    def SaveXMLToStream(self, os, popt=None):
        return _molset.CrdAssignRule_SaveXMLToStream(self, os, popt)

    def SetManagedAtomCrd(self):
        return _molset.CrdAssignRule_SetManagedAtomCrd(self)
CrdAssignRule_swigregister = _molset.CrdAssignRule_swigregister
CrdAssignRule_swigregister(CrdAssignRule)

class SingleAtomCrdRule(CrdAssignRule):
    __swig_setmethods__ = {}
    for _s in [CrdAssignRule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SingleAtomCrdRule, name, value)
    __swig_getmethods__ = {}
    for _s in [CrdAssignRule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SingleAtomCrdRule, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_SingleAtomCrdRule
    __del__ = lambda self: None

    def GetManagedAtom(self):
        return _molset.SingleAtomCrdRule_GetManagedAtom(self)

    def SetManagedAtom(self, aptr):
        return _molset.SingleAtomCrdRule_SetManagedAtom(self, aptr)

    def SaveXMLToStream(self, os, popt=None):
        return _molset.SingleAtomCrdRule_SaveXMLToStream(self, os, popt)

    def ReplaceRefPt(self, p_ref_old, p_ref_new):
        return _molset.SingleAtomCrdRule_ReplaceRefPt(self, p_ref_old, p_ref_new)
SingleAtomCrdRule_swigregister = _molset.SingleAtomCrdRule_swigregister
SingleAtomCrdRule_swigregister(SingleAtomCrdRule)

class FixedCrdRule(SingleAtomCrdRule):
    __swig_setmethods__ = {}
    for _s in [SingleAtomCrdRule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedCrdRule, name, value)
    __swig_getmethods__ = {}
    for _s in [SingleAtomCrdRule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FixedCrdRule, name)
    __repr__ = _swig_repr

    def __init__(self, p_mng_atom_par):
        this = _molset.new_FixedCrdRule(p_mng_atom_par)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_FixedCrdRule
    __del__ = lambda self: None

    def SetManagedAtomCrd(self):
        return _molset.FixedCrdRule_SetManagedAtomCrd(self)

    def SaveXMLToStream(self, os, popt=None):
        return _molset.FixedCrdRule_SaveXMLToStream(self, os, popt)

    def ReplaceRefPt(self, p_ref_old, p_ref_new):
        return _molset.FixedCrdRule_ReplaceRefPt(self, p_ref_old, p_ref_new)

    def SetCrd(self, crd):
        return _molset.FixedCrdRule_SetCrd(self, crd)

    def SetParFromCurPos(self):
        return _molset.FixedCrdRule_SetParFromCurPos(self)

    def SetX(self, val):
        return _molset.FixedCrdRule_SetX(self, val)

    def SetY(self, val):
        return _molset.FixedCrdRule_SetY(self, val)

    def SetZ(self, val):
        return _molset.FixedCrdRule_SetZ(self, val)

    def GetX(self):
        return _molset.FixedCrdRule_GetX(self)

    def GetY(self):
        return _molset.FixedCrdRule_GetY(self)

    def GetZ(self):
        return _molset.FixedCrdRule_GetZ(self)
FixedCrdRule_swigregister = _molset.FixedCrdRule_swigregister
FixedCrdRule_swigregister(FixedCrdRule)

class SameAtomCrdRule(SingleAtomCrdRule):
    __swig_setmethods__ = {}
    for _s in [SingleAtomCrdRule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SameAtomCrdRule, name, value)
    __swig_getmethods__ = {}
    for _s in [SingleAtomCrdRule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SameAtomCrdRule, name)
    __repr__ = _swig_repr

    def __init__(self, p_mng_atom, p_ref_atom):
        this = _molset.new_SameAtomCrdRule(p_mng_atom, p_ref_atom)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_SameAtomCrdRule
    __del__ = lambda self: None

    def SetManagedAtomCrd(self):
        return _molset.SameAtomCrdRule_SetManagedAtomCrd(self)

    def SetX(self, val):
        return _molset.SameAtomCrdRule_SetX(self, val)

    def SetY(self, val):
        return _molset.SameAtomCrdRule_SetY(self, val)

    def SetZ(self, val):
        return _molset.SameAtomCrdRule_SetZ(self, val)

    def SaveXMLToStream(self, os, popt=None):
        return _molset.SameAtomCrdRule_SaveXMLToStream(self, os, popt)

    def GetRefAtom(self):
        return _molset.SameAtomCrdRule_GetRefAtom(self)

    def ReplaceRefPt(self, p_ref_old, p_ref_new):
        return _molset.SameAtomCrdRule_ReplaceRefPt(self, p_ref_old, p_ref_new)
SameAtomCrdRule_swigregister = _molset.SameAtomCrdRule_swigregister
SameAtomCrdRule_swigregister(SameAtomCrdRule)

class Pt2CrdRule(SingleAtomCrdRule):
    __swig_setmethods__ = {}
    for _s in [SingleAtomCrdRule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pt2CrdRule, name, value)
    __swig_getmethods__ = {}
    for _s in [SingleAtomCrdRule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pt2CrdRule, name)
    __repr__ = _swig_repr

    def __init__(self, p_mng_atom, p_ref_1, p_ref_2):
        this = _molset.new_Pt2CrdRule(p_mng_atom, p_ref_1, p_ref_2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_Pt2CrdRule
    __del__ = lambda self: None

    def SetManagedAtomCrd(self):
        return _molset.Pt2CrdRule_SetManagedAtomCrd(self)

    def GetRefAtom1(self):
        return _molset.Pt2CrdRule_GetRefAtom1(self)

    def GetRefAtom2(self):
        return _molset.Pt2CrdRule_GetRefAtom2(self)

    def ReplaceRefPt(self, p_ref_old, p_ref_new):
        return _molset.Pt2CrdRule_ReplaceRefPt(self, p_ref_old, p_ref_new)

    def SetBondLen(self, bond_len_new):
        return _molset.Pt2CrdRule_SetBondLen(self, bond_len_new)

    def SaveXMLToStream(self, os, popt=None):
        return _molset.Pt2CrdRule_SaveXMLToStream(self, os, popt)
Pt2CrdRule_swigregister = _molset.Pt2CrdRule_swigregister
Pt2CrdRule_swigregister(Pt2CrdRule)

class Pt3CrdRule(SingleAtomCrdRule):
    __swig_setmethods__ = {}
    for _s in [SingleAtomCrdRule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pt3CrdRule, name, value)
    __swig_getmethods__ = {}
    for _s in [SingleAtomCrdRule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pt3CrdRule, name)
    __repr__ = _swig_repr

    def __init__(self, p_mng_atom, p_ref_1, p_ref_2, p_ref_3):
        this = _molset.new_Pt3CrdRule(p_mng_atom, p_ref_1, p_ref_2, p_ref_3)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_Pt3CrdRule
    __del__ = lambda self: None

    def SetManagedAtomCrd(self):
        return _molset.Pt3CrdRule_SetManagedAtomCrd(self)

    def SetParFromPtPos(self, pt_mng, pt_ref_1, pt_ref_2, pt_ref_3):
        return _molset.Pt3CrdRule_SetParFromPtPos(self, pt_mng, pt_ref_1, pt_ref_2, pt_ref_3)

    def SetParFromCurPos(self):
        return _molset.Pt3CrdRule_SetParFromCurPos(self)

    def SetBondLen(self, bond_len):
        return _molset.Pt3CrdRule_SetBondLen(self, bond_len)

    def SetValAng(self, val_ang):
        return _molset.Pt3CrdRule_SetValAng(self, val_ang)

    def SetDihAng(self, dih_ang):
        return _molset.Pt3CrdRule_SetDihAng(self, dih_ang)

    def GetBondLen(self):
        return _molset.Pt3CrdRule_GetBondLen(self)

    def GetValAng(self):
        return _molset.Pt3CrdRule_GetValAng(self)

    def GetDihAng(self):
        return _molset.Pt3CrdRule_GetDihAng(self)

    def GetRefPt1(self):
        return _molset.Pt3CrdRule_GetRefPt1(self)

    def GetRefPt2(self):
        return _molset.Pt3CrdRule_GetRefPt2(self)

    def GetRefPt3(self):
        return _molset.Pt3CrdRule_GetRefPt3(self)

    def ReplaceRefPt(self, p_ref_old, p_ref_new):
        return _molset.Pt3CrdRule_ReplaceRefPt(self, p_ref_old, p_ref_new)

    def SaveXMLToStream(self, os, popt=None):
        return _molset.Pt3CrdRule_SaveXMLToStream(self, os, popt)
Pt3CrdRule_swigregister = _molset.Pt3CrdRule_swigregister
Pt3CrdRule_swigregister(Pt3CrdRule)

class DihedralAngleCoord(Coord):
    __swig_setmethods__ = {}
    for _s in [Coord]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DihedralAngleCoord, name, value)
    __swig_getmethods__ = {}
    for _s in [Coord]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DihedralAngleCoord, name)
    __repr__ = _swig_repr

    def __init__(self, new_aptr1, new_aptr2, new_aptr3, aptr4):
        this = _molset.new_DihedralAngleCoord(new_aptr1, new_aptr2, new_aptr3, aptr4)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_DihedralAngleCoord
    __del__ = lambda self: None

    def GetClassName(self):
        return _molset.DihedralAngleCoord_GetClassName(self)

    def clone(self):
        return _molset.DihedralAngleCoord_clone(self)

    def AsVecDouble(self):
        return _molset.DihedralAngleCoord_AsVecDouble(self)

    def SetFrom(self, pcrd):
        return _molset.DihedralAngleCoord_SetFrom(self, pcrd)

    def SetFromVecDouble(self, dbl_vec):
        return _molset.DihedralAngleCoord_SetFromVecDouble(self, dbl_vec)

    def LoadFromStream(self, arg2, popt=None):
        return _molset.DihedralAngleCoord_LoadFromStream(self, arg2, popt)

    def SaveToStream(self, os, popt=None):
        return _molset.DihedralAngleCoord_SaveToStream(self, os, popt)
    __swig_setmethods__["aptr1"] = _molset.DihedralAngleCoord_aptr1_set
    __swig_getmethods__["aptr1"] = _molset.DihedralAngleCoord_aptr1_get
    if _newclass:
        aptr1 = _swig_property(_molset.DihedralAngleCoord_aptr1_get, _molset.DihedralAngleCoord_aptr1_set)
    __swig_setmethods__["aptr2"] = _molset.DihedralAngleCoord_aptr2_set
    __swig_getmethods__["aptr2"] = _molset.DihedralAngleCoord_aptr2_get
    if _newclass:
        aptr2 = _swig_property(_molset.DihedralAngleCoord_aptr2_get, _molset.DihedralAngleCoord_aptr2_set)
    __swig_setmethods__["aptr3"] = _molset.DihedralAngleCoord_aptr3_set
    __swig_getmethods__["aptr3"] = _molset.DihedralAngleCoord_aptr3_get
    if _newclass:
        aptr3 = _swig_property(_molset.DihedralAngleCoord_aptr3_get, _molset.DihedralAngleCoord_aptr3_set)
    __swig_setmethods__["aptr4"] = _molset.DihedralAngleCoord_aptr4_set
    __swig_getmethods__["aptr4"] = _molset.DihedralAngleCoord_aptr4_get
    if _newclass:
        aptr4 = _swig_property(_molset.DihedralAngleCoord_aptr4_get, _molset.DihedralAngleCoord_aptr4_set)

    def GetDihVal(self):
        return _molset.DihedralAngleCoord_GetDihVal(self)

    def SetDihVal(self, new_dih_val):
        return _molset.DihedralAngleCoord_SetDihVal(self, new_dih_val)

    def FindMovingAtoms(self):
        return _molset.DihedralAngleCoord_FindMovingAtoms(self)
    __swig_setmethods__["moving_atoms"] = _molset.DihedralAngleCoord_moving_atoms_set
    __swig_getmethods__["moving_atoms"] = _molset.DihedralAngleCoord_moving_atoms_get
    if _newclass:
        moving_atoms = _swig_property(_molset.DihedralAngleCoord_moving_atoms_get, _molset.DihedralAngleCoord_moving_atoms_set)
DihedralAngleCoord_swigregister = _molset.DihedralAngleCoord_swigregister
DihedralAngleCoord_swigregister(DihedralAngleCoord)

UNDEF_ELEM_CRD = _molset.UNDEF_ELEM_CRD
X_ELEM_CRD = _molset.X_ELEM_CRD
Y_ELEM_CRD = _molset.Y_ELEM_CRD
Z_ELEM_CRD = _molset.Z_ELEM_CRD
LEN_ELEM_CRD = _molset.LEN_ELEM_CRD
ANG_ELEM_CRD = _molset.ANG_ELEM_CRD
DIH_ELEM_CRD = _molset.DIH_ELEM_CRD
class ElemCrd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElemCrd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElemCrd, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_ElemCrd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ElemCrd
    __del__ = lambda self: None

    def GetType(self):
        return _molset.ElemCrd_GetType(self)

    def GetCrdRule(self):
        return _molset.ElemCrd_GetCrdRule(self)

    def SetValue(self, val):
        return _molset.ElemCrd_SetValue(self, val)

    def GetValue(self):
        return _molset.ElemCrd_GetValue(self)

    def SetDisplayValue(self, val):
        return _molset.ElemCrd_SetDisplayValue(self, val)

    def GetDisplayValue(self):
        return _molset.ElemCrd_GetDisplayValue(self)

    def GetManagedAtom(self):
        return _molset.ElemCrd_GetManagedAtom(self)

    def GetCrdAssignRule(self):
        return _molset.ElemCrd_GetCrdAssignRule(self)

    def SetTag(self, tag_new):
        return _molset.ElemCrd_SetTag(self, tag_new)

    def GetTag(self):
        return _molset.ElemCrd_GetTag(self)

    def SetFrozen(self, set_flag=True):
        return _molset.ElemCrd_SetFrozen(self, set_flag)

    def IsFrozen(self):
        return _molset.ElemCrd_IsFrozen(self)
ElemCrd_swigregister = _molset.ElemCrd_swigregister
ElemCrd_swigregister(ElemCrd)

class ZMatLoadOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZMatLoadOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZMatLoadOptions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_ZMatLoadOptions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ZMatLoadOptions
    __del__ = lambda self: None

    def Copy(self, ref):
        return _molset.ZMatLoadOptions_Copy(self, ref)

    def clone(self):
        return _molset.ZMatLoadOptions_clone(self)

    def SetStdOptions(self):
        return _molset.ZMatLoadOptions_SetStdOptions(self)

    def SetLoadAtID(self, set_flag=True):
        return _molset.ZMatLoadOptions_SetLoadAtID(self, set_flag)

    def ToLoadAtID(self):
        return _molset.ZMatLoadOptions_ToLoadAtID(self)

    def SetLoadAtElem(self, set_flag=True):
        return _molset.ZMatLoadOptions_SetLoadAtElem(self, set_flag)

    def ToLoadAtElem(self):
        return _molset.ZMatLoadOptions_ToLoadAtElem(self)
ZMatLoadOptions_swigregister = _molset.ZMatLoadOptions_swigregister
ZMatLoadOptions_swigregister(ZMatLoadOptions)

class ZMatSaveOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZMatSaveOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZMatSaveOptions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_ZMatSaveOptions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ZMatSaveOptions
    __del__ = lambda self: None

    def Copy(self, ref):
        return _molset.ZMatSaveOptions_Copy(self, ref)

    def clone(self):
        return _molset.ZMatSaveOptions_clone(self)

    def SetStdOptions(self):
        return _molset.ZMatSaveOptions_SetStdOptions(self)

    def SetSaveAtSeqNum(self, set_flag=True):
        return _molset.ZMatSaveOptions_SetSaveAtSeqNum(self, set_flag)

    def ToSaveAtSeqNum(self):
        return _molset.ZMatSaveOptions_ToSaveAtSeqNum(self)

    def SetSaveAtElem(self, set_flag=True):
        return _molset.ZMatSaveOptions_SetSaveAtElem(self, set_flag)

    def ToSaveAtElem(self):
        return _molset.ZMatSaveOptions_ToSaveAtElem(self)

    def SetSaveAtSymbol(self, set_flag=True):
        return _molset.ZMatSaveOptions_SetSaveAtSymbol(self, set_flag)

    def ToSaveAtSymbol(self):
        return _molset.ZMatSaveOptions_ToSaveAtSymbol(self)

    def SetSaveTags(self, set_flag=True):
        return _molset.ZMatSaveOptions_SetSaveTags(self, set_flag)

    def ToSaveTags(self):
        return _molset.ZMatSaveOptions_ToSaveTags(self)
ZMatSaveOptions_swigregister = _molset.ZMatSaveOptions_swigregister
ZMatSaveOptions_swigregister(ZMatSaveOptions)

class ZMatCrd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZMatCrd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZMatCrd, name)
    __repr__ = _swig_repr

    def __init__(self, pmset_new):
        this = _molset.new_ZMatCrd(pmset_new)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ZMatCrd
    __del__ = lambda self: None

    def Clear(self):
        return _molset.ZMatCrd_Clear(self)

    def IsEmpty(self):
        return _molset.ZMatCrd_IsEmpty(self)

    def InitStdZMat(self):
        return _molset.ZMatCrd_InitStdZMat(self)

    def InitAllXYZ(self):
        return _molset.ZMatCrd_InitAllXYZ(self)

    def OnDelAtoms(self, del_atoms):
        return _molset.ZMatCrd_OnDelAtoms(self, del_atoms)

    def LoadFromString(self, str, popt=None):
        return _molset.ZMatCrd_LoadFromString(self, str, popt)

    def LoadFromStream(self, arg2, popt=None):
        return _molset.ZMatCrd_LoadFromStream(self, arg2, popt)

    def SetAtomCrd(self):
        return _molset.ZMatCrd_SetAtomCrd(self)

    def GetCrdSnapshot(self, crd_arr):
        return _molset.ZMatCrd_GetCrdSnapshot(self, crd_arr)

    def SetFromAtomCrd(self):
        return _molset.ZMatCrd_SetFromAtomCrd(self)

    def SetFromCrdSnapshot(self, crd_arr):
        return _molset.ZMatCrd_SetFromCrdSnapshot(self, crd_arr)

    def GetElemCrdVal(self, elem_crd_val_arr, unfrozen=True):
        return _molset.ZMatCrd_GetElemCrdVal(self, elem_crd_val_arr, unfrozen)

    def SetFromElemCrdVal(self, elem_crd_val_arr, unfrozen=True):
        return _molset.ZMatCrd_SetFromElemCrdVal(self, elem_crd_val_arr, unfrozen)

    def TransDerivToIntCrd(self, deriv_cart_crd, deriv_int_crd, unfrozen=True):
        return _molset.ZMatCrd_TransDerivToIntCrd(self, deriv_cart_crd, deriv_int_crd, unfrozen)

    def SaveToStream(self, os, popt=None):
        return _molset.ZMatCrd_SaveToStream(self, os, popt)

    def SaveToString(self, popt=None):
        return _molset.ZMatCrd_SaveToString(self, popt)

    def SaveXMLToStream(self, os, popt=None):
        return _molset.ZMatCrd_SaveXMLToStream(self, os, popt)

    def LoadXMLNode(self, node_zmat, popt=None):
        return _molset.ZMatCrd_LoadXMLNode(self, node_zmat, popt)

    def GetNZ(self):
        return _molset.ZMatCrd_GetNZ(self)

    def GetNCrd(self):
        return _molset.ZMatCrd_GetNCrd(self)

    def GetNCrdUnFrozen(self):
        return _molset.ZMatCrd_GetNCrdUnFrozen(self)

    def FreezeCrdAll(self):
        return _molset.ZMatCrd_FreezeCrdAll(self)

    def UnFreezeCrdAll(self):
        return _molset.ZMatCrd_UnFreezeCrdAll(self)

    def CalcBGMatr(self):
        return _molset.ZMatCrd_CalcBGMatr(self)

    def SetXYZCrd(self, iat, x, y, z):
        return _molset.ZMatCrd_SetXYZCrd(self, iat, x, y, z)

    def SetCrdDesc(self, *args):
        return _molset.ZMatCrd_SetCrdDesc(self, *args)

    def GetRCrdForAtom(self, aptr):
        return _molset.ZMatCrd_GetRCrdForAtom(self, aptr)

    def GetAngCrdForAtom(self, aptr):
        return _molset.ZMatCrd_GetAngCrdForAtom(self, aptr)

    def GetDihCrdForAtom(self, aptr):
        return _molset.ZMatCrd_GetDihCrdForAtom(self, aptr)

    def GetCrdByTag(self, tag):
        return _molset.ZMatCrd_GetCrdByTag(self, tag)

    def GetCrdByIdx(self, idx):
        return _molset.ZMatCrd_GetCrdByIdx(self, idx)

    def SetTagRCrd(self, aptr, tag):
        return _molset.ZMatCrd_SetTagRCrd(self, aptr, tag)

    def SetTagAngCrd(self, aptr, tag):
        return _molset.ZMatCrd_SetTagAngCrd(self, aptr, tag)

    def SetTagDihCrd(self, aptr, tag):
        return _molset.ZMatCrd_SetTagDihCrd(self, aptr, tag)

    def SetRVal(self, *args):
        return _molset.ZMatCrd_SetRVal(self, *args)

    def SetAngVal(self, *args):
        return _molset.ZMatCrd_SetAngVal(self, *args)

    def SetDihVal(self, *args):
        return _molset.ZMatCrd_SetDihVal(self, *args)

    def AddDummyAtom(self, *args):
        return _molset.ZMatCrd_AddDummyAtom(self, *args)
ZMatCrd_swigregister = _molset.ZMatCrd_swigregister
ZMatCrd_swigregister(ZMatCrd)

class RigidBodyCoord(Coord):
    __swig_setmethods__ = {}
    for _s in [Coord]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigidBodyCoord, name, value)
    __swig_getmethods__ = {}
    for _s in [Coord]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RigidBodyCoord, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_RigidBodyCoord(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_RigidBodyCoord
    __del__ = lambda self: None

    def GetClassName(self):
        return _molset.RigidBodyCoord_GetClassName(self)

    def clone(self):
        return _molset.RigidBodyCoord_clone(self)

    def SetFrom(self, pcrd):
        return _molset.RigidBodyCoord_SetFrom(self, pcrd)

    def AsVecDouble(self):
        return _molset.RigidBodyCoord_AsVecDouble(self)

    def SetFromVecDouble(self, dbl_vec):
        return _molset.RigidBodyCoord_SetFromVecDouble(self, dbl_vec)

    def GetNumCrd(self):
        return _molset.RigidBodyCoord_GetNumCrd(self)

    def FreezeCrd(self, idx):
        return _molset.RigidBodyCoord_FreezeCrd(self, idx)

    def IsCrdFrozen(self, idx):
        return _molset.RigidBodyCoord_IsCrdFrozen(self, idx)

    def LoadFromStream(self, arg2, popt=None):
        return _molset.RigidBodyCoord_LoadFromStream(self, arg2, popt)

    def SaveToStream(self, os, popt=None):
        return _molset.RigidBodyCoord_SaveToStream(self, os, popt)

    def SetFromCurrAtomCrd(self, *args):
        return _molset.RigidBodyCoord_SetFromCurrAtomCrd(self, *args)

    def SetNumObj(self, n_obj_new):
        return _molset.RigidBodyCoord_SetNumObj(self, n_obj_new)

    def GetNumObj(self):
        return _molset.RigidBodyCoord_GetNumObj(self)

    def GetPhi(self, iobj):
        return _molset.RigidBodyCoord_GetPhi(self, iobj)

    def GetCosTheta(self, iobj):
        return _molset.RigidBodyCoord_GetCosTheta(self, iobj)

    def GetPsi(self, iobj):
        return _molset.RigidBodyCoord_GetPsi(self, iobj)

    def GetTransX(self, iobj):
        return _molset.RigidBodyCoord_GetTransX(self, iobj)

    def GetTransY(self, iobj):
        return _molset.RigidBodyCoord_GetTransY(self, iobj)

    def GetTransZ(self, iobj):
        return _molset.RigidBodyCoord_GetTransZ(self, iobj)

    def SetPhi(self, iobj, phi_new):
        return _molset.RigidBodyCoord_SetPhi(self, iobj, phi_new)

    def SetCosTheta(self, iobj, cos_theta_new):
        return _molset.RigidBodyCoord_SetCosTheta(self, iobj, cos_theta_new)

    def SetPsi(self, iobj, psi_new):
        return _molset.RigidBodyCoord_SetPsi(self, iobj, psi_new)

    def SetTransX(self, iobj, x_new):
        return _molset.RigidBodyCoord_SetTransX(self, iobj, x_new)

    def SetTransY(self, iobj, y_new):
        return _molset.RigidBodyCoord_SetTransY(self, iobj, y_new)

    def SetTransZ(self, iobj, z_new):
        return _molset.RigidBodyCoord_SetTransZ(self, iobj, z_new)

    def FreezeObject(self, iobj):
        return _molset.RigidBodyCoord_FreezeObject(self, iobj)

    def IsObjectFrozen(self, iobj):
        return _molset.RigidBodyCoord_IsObjectFrozen(self, iobj)
RigidBodyCoord_swigregister = _molset.RigidBodyCoord_swigregister
RigidBodyCoord_swigregister(RigidBodyCoord)

class RigidBodyCoordDiscretized(RigidBodyCoord):
    __swig_setmethods__ = {}
    for _s in [RigidBodyCoord]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigidBodyCoordDiscretized, name, value)
    __swig_getmethods__ = {}
    for _s in [RigidBodyCoord]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RigidBodyCoordDiscretized, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_RigidBodyCoordDiscretized(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_RigidBodyCoordDiscretized
    __del__ = lambda self: None

    def clone(self):
        return _molset.RigidBodyCoordDiscretized_clone(self)

    def SetFrom(self, pcrd):
        return _molset.RigidBodyCoordDiscretized_SetFrom(self, pcrd)

    def GetClassName(self):
        return _molset.RigidBodyCoordDiscretized_GetClassName(self)

    def SetNumObj(self, n_obj_new):
        return _molset.RigidBodyCoordDiscretized_SetNumObj(self, n_obj_new)

    def ConvertDiscrCrdToFloat(self):
        return _molset.RigidBodyCoordDiscretized_ConvertDiscrCrdToFloat(self)

    def ConvertFloatCrdToDiscr(self):
        return _molset.RigidBodyCoordDiscretized_ConvertFloatCrdToDiscr(self)

    def SetStandardLimits(self):
        return _molset.RigidBodyCoordDiscretized_SetStandardLimits(self)

    def SetDiscrNumForCrd(self, idx, npt):
        return _molset.RigidBodyCoordDiscretized_SetDiscrNumForCrd(self, idx, npt)

    def SetLimits(self, idx, amin, amax):
        return _molset.RigidBodyCoordDiscretized_SetLimits(self, idx, amin, amax)
    __swig_setmethods__["crd_v_int"] = _molset.RigidBodyCoordDiscretized_crd_v_int_set
    __swig_getmethods__["crd_v_int"] = _molset.RigidBodyCoordDiscretized_crd_v_int_get
    if _newclass:
        crd_v_int = _swig_property(_molset.RigidBodyCoordDiscretized_crd_v_int_get, _molset.RigidBodyCoordDiscretized_crd_v_int_set)
    __swig_setmethods__["dim_crd"] = _molset.RigidBodyCoordDiscretized_dim_crd_set
    __swig_getmethods__["dim_crd"] = _molset.RigidBodyCoordDiscretized_dim_crd_get
    if _newclass:
        dim_crd = _swig_property(_molset.RigidBodyCoordDiscretized_dim_crd_get, _molset.RigidBodyCoordDiscretized_dim_crd_set)
RigidBodyCoordDiscretized_swigregister = _molset.RigidBodyCoordDiscretized_swigregister
RigidBodyCoordDiscretized_swigregister(RigidBodyCoordDiscretized)

class TrajPointInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrajPointInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrajPointInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_TrajPointInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_TrajPointInfo
    __del__ = lambda self: None

    def Clear(self):
        return _molset.TrajPointInfo_Clear(self)
    __swig_setmethods__["do_skip"] = _molset.TrajPointInfo_do_skip_set
    __swig_getmethods__["do_skip"] = _molset.TrajPointInfo_do_skip_get
    if _newclass:
        do_skip = _swig_property(_molset.TrajPointInfo_do_skip_get, _molset.TrajPointInfo_do_skip_set)
    __swig_setmethods__["ipt"] = _molset.TrajPointInfo_ipt_set
    __swig_getmethods__["ipt"] = _molset.TrajPointInfo_ipt_get
    if _newclass:
        ipt = _swig_property(_molset.TrajPointInfo_ipt_get, _molset.TrajPointInfo_ipt_set)
    __swig_setmethods__["pcrd"] = _molset.TrajPointInfo_pcrd_set
    __swig_getmethods__["pcrd"] = _molset.TrajPointInfo_pcrd_get
    if _newclass:
        pcrd = _swig_property(_molset.TrajPointInfo_pcrd_get, _molset.TrajPointInfo_pcrd_set)
    __swig_setmethods__["is_accepted"] = _molset.TrajPointInfo_is_accepted_set
    __swig_getmethods__["is_accepted"] = _molset.TrajPointInfo_is_accepted_get
    if _newclass:
        is_accepted = _swig_property(_molset.TrajPointInfo_is_accepted_get, _molset.TrajPointInfo_is_accepted_set)
    __swig_setmethods__["pcrd_rejected"] = _molset.TrajPointInfo_pcrd_rejected_set
    __swig_getmethods__["pcrd_rejected"] = _molset.TrajPointInfo_pcrd_rejected_get
    if _newclass:
        pcrd_rejected = _swig_property(_molset.TrajPointInfo_pcrd_rejected_get, _molset.TrajPointInfo_pcrd_rejected_set)
    __swig_setmethods__["tot_energy"] = _molset.TrajPointInfo_tot_energy_set
    __swig_getmethods__["tot_energy"] = _molset.TrajPointInfo_tot_energy_get
    if _newclass:
        tot_energy = _swig_property(_molset.TrajPointInfo_tot_energy_get, _molset.TrajPointInfo_tot_energy_set)
    __swig_setmethods__["energy_rejected"] = _molset.TrajPointInfo_energy_rejected_set
    __swig_getmethods__["energy_rejected"] = _molset.TrajPointInfo_energy_rejected_get
    if _newclass:
        energy_rejected = _swig_property(_molset.TrajPointInfo_energy_rejected_get, _molset.TrajPointInfo_energy_rejected_set)
TrajPointInfo_swigregister = _molset.TrajPointInfo_swigregister
TrajPointInfo_swigregister(TrajPointInfo)

class TrajAnalAgent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrajAnalAgent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrajAnalAgent, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetClassName(self):
        return _molset.TrajAnalAgent_GetClassName(self)

    def IsActive(self):
        return _molset.TrajAnalAgent_IsActive(self)

    def SetActive(self, active_flag):
        return _molset.TrajAnalAgent_SetActive(self, active_flag)

    def Init(self, ppt_info=None):
        return _molset.TrajAnalAgent_Init(self, ppt_info)

    def AnalyzePt(self, ppt_info=None):
        return _molset.TrajAnalAgent_AnalyzePt(self, ppt_info)

    def Finalize(self):
        return _molset.TrajAnalAgent_Finalize(self)
    __swig_destroy__ = _molset.delete_TrajAnalAgent
    __del__ = lambda self: None
TrajAnalAgent_swigregister = _molset.TrajAnalAgent_swigregister
TrajAnalAgent_swigregister(TrajAnalAgent)

class TrajIOAgent(TrajAnalAgent):
    __swig_setmethods__ = {}
    for _s in [TrajAnalAgent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrajIOAgent, name, value)
    __swig_getmethods__ = {}
    for _s in [TrajAnalAgent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrajIOAgent, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_TrajIOAgent
    __del__ = lambda self: None

    def GetClassName(self):
        return _molset.TrajIOAgent_GetClassName(self)

    def IsActive(self):
        return _molset.TrajIOAgent_IsActive(self)

    def SetActive(self, active_flag):
        return _molset.TrajIOAgent_SetActive(self, active_flag)

    def Init(self, ppt_info):
        return _molset.TrajIOAgent_Init(self, ppt_info)

    def AnalyzePt(self, ppt_info):
        return _molset.TrajIOAgent_AnalyzePt(self, ppt_info)

    def Finalize(self):
        return _molset.TrajIOAgent_Finalize(self)
    __swig_setmethods__["traj_io_mode"] = _molset.TrajIOAgent_traj_io_mode_set
    __swig_getmethods__["traj_io_mode"] = _molset.TrajIOAgent_traj_io_mode_get
    if _newclass:
        traj_io_mode = _swig_property(_molset.TrajIOAgent_traj_io_mode_get, _molset.TrajIOAgent_traj_io_mode_set)
    __swig_setmethods__["output_rejected_points"] = _molset.TrajIOAgent_output_rejected_points_set
    __swig_getmethods__["output_rejected_points"] = _molset.TrajIOAgent_output_rejected_points_get
    if _newclass:
        output_rejected_points = _swig_property(_molset.TrajIOAgent_output_rejected_points_get, _molset.TrajIOAgent_output_rejected_points_set)
    __swig_setmethods__["traj_file_name"] = _molset.TrajIOAgent_traj_file_name_set
    __swig_getmethods__["traj_file_name"] = _molset.TrajIOAgent_traj_file_name_get
    if _newclass:
        traj_file_name = _swig_property(_molset.TrajIOAgent_traj_file_name_get, _molset.TrajIOAgent_traj_file_name_set)
    __swig_setmethods__["traj_all_pts_file_name"] = _molset.TrajIOAgent_traj_all_pts_file_name_set
    __swig_getmethods__["traj_all_pts_file_name"] = _molset.TrajIOAgent_traj_all_pts_file_name_get
    if _newclass:
        traj_all_pts_file_name = _swig_property(_molset.TrajIOAgent_traj_all_pts_file_name_get, _molset.TrajIOAgent_traj_all_pts_file_name_set)
    __swig_setmethods__["traj_ene_file_name"] = _molset.TrajIOAgent_traj_ene_file_name_set
    __swig_getmethods__["traj_ene_file_name"] = _molset.TrajIOAgent_traj_ene_file_name_get
    if _newclass:
        traj_ene_file_name = _swig_property(_molset.TrajIOAgent_traj_ene_file_name_get, _molset.TrajIOAgent_traj_ene_file_name_set)
    __swig_setmethods__["save_image_seq_gif"] = _molset.TrajIOAgent_save_image_seq_gif_set
    __swig_getmethods__["save_image_seq_gif"] = _molset.TrajIOAgent_save_image_seq_gif_get
    if _newclass:
        save_image_seq_gif = _swig_property(_molset.TrajIOAgent_save_image_seq_gif_get, _molset.TrajIOAgent_save_image_seq_gif_set)
    __swig_setmethods__["save_image_seq_pict"] = _molset.TrajIOAgent_save_image_seq_pict_set
    __swig_getmethods__["save_image_seq_pict"] = _molset.TrajIOAgent_save_image_seq_pict_get
    if _newclass:
        save_image_seq_pict = _swig_property(_molset.TrajIOAgent_save_image_seq_pict_get, _molset.TrajIOAgent_save_image_seq_pict_set)
    __swig_setmethods__["npt"] = _molset.TrajIOAgent_npt_set
    __swig_getmethods__["npt"] = _molset.TrajIOAgent_npt_get
    if _newclass:
        npt = _swig_property(_molset.TrajIOAgent_npt_get, _molset.TrajIOAgent_npt_set)
    __swig_setmethods__["average_ene"] = _molset.TrajIOAgent_average_ene_set
    __swig_getmethods__["average_ene"] = _molset.TrajIOAgent_average_ene_get
    if _newclass:
        average_ene = _swig_property(_molset.TrajIOAgent_average_ene_get, _molset.TrajIOAgent_average_ene_set)

    def SetReadCoord(self, set_on=1):
        return _molset.TrajIOAgent_SetReadCoord(self, set_on)

    def SetWriteCoord(self, set_on=1):
        return _molset.TrajIOAgent_SetWriteCoord(self, set_on)

    def SetReadEnergy(self, set_on=1):
        return _molset.TrajIOAgent_SetReadEnergy(self, set_on)

    def SetWriteEnergy(self, set_on=1):
        return _molset.TrajIOAgent_SetWriteEnergy(self, set_on)

    def IsReadCoord(self):
        return _molset.TrajIOAgent_IsReadCoord(self)

    def IsWriteCoord(self):
        return _molset.TrajIOAgent_IsWriteCoord(self)

    def IsReadEnergy(self):
        return _molset.TrajIOAgent_IsReadEnergy(self)

    def IsWriteEnergy(self):
        return _molset.TrajIOAgent_IsWriteEnergy(self)
    ENERGY_WRITE = _molset.TrajIOAgent_ENERGY_WRITE
    ENERGY_READ = _molset.TrajIOAgent_ENERGY_READ
    COORD_WRITE = _molset.TrajIOAgent_COORD_WRITE
    COORD_READ = _molset.TrajIOAgent_COORD_READ
    __swig_setmethods__["p_sim"] = _molset.TrajIOAgent_p_sim_set
    __swig_getmethods__["p_sim"] = _molset.TrajIOAgent_p_sim_get
    if _newclass:
        p_sim = _swig_property(_molset.TrajIOAgent_p_sim_get, _molset.TrajIOAgent_p_sim_set)
TrajIOAgent_swigregister = _molset.TrajIOAgent_swigregister
TrajIOAgent_swigregister(TrajIOAgent)

class TraceMolAgent(TrajAnalAgent):
    __swig_setmethods__ = {}
    for _s in [TrajAnalAgent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraceMolAgent, name, value)
    __swig_getmethods__ = {}
    for _s in [TrajAnalAgent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraceMolAgent, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_TraceMolAgent
    __del__ = lambda self: None

    def GetClassName(self):
        return _molset.TraceMolAgent_GetClassName(self)

    def IsActive(self):
        return _molset.TraceMolAgent_IsActive(self)

    def SetActive(self, active_flag):
        return _molset.TraceMolAgent_SetActive(self, active_flag)

    def Init(self, ppt_info):
        return _molset.TraceMolAgent_Init(self, ppt_info)

    def AnalyzePt(self, ppt_info):
        return _molset.TraceMolAgent_AnalyzePt(self, ppt_info)

    def Finalize(self):
        return _molset.TraceMolAgent_Finalize(self)
    __swig_setmethods__["pmset"] = _molset.TraceMolAgent_pmset_set
    __swig_getmethods__["pmset"] = _molset.TraceMolAgent_pmset_get
    if _newclass:
        pmset = _swig_property(_molset.TraceMolAgent_pmset_get, _molset.TraceMolAgent_pmset_set)
    __swig_setmethods__["traced_atoms"] = _molset.TraceMolAgent_traced_atoms_set
    __swig_getmethods__["traced_atoms"] = _molset.TraceMolAgent_traced_atoms_get
    if _newclass:
        traced_atoms = _swig_property(_molset.TraceMolAgent_traced_atoms_get, _molset.TraceMolAgent_traced_atoms_set)
    __swig_setmethods__["trace_mol"] = _molset.TraceMolAgent_trace_mol_set
    __swig_getmethods__["trace_mol"] = _molset.TraceMolAgent_trace_mol_get
    if _newclass:
        trace_mol = _swig_property(_molset.TraceMolAgent_trace_mol_get, _molset.TraceMolAgent_trace_mol_set)
    __swig_setmethods__["trace_res"] = _molset.TraceMolAgent_trace_res_set
    __swig_getmethods__["trace_res"] = _molset.TraceMolAgent_trace_res_get
    if _newclass:
        trace_res = _swig_property(_molset.TraceMolAgent_trace_res_get, _molset.TraceMolAgent_trace_res_set)
    __swig_setmethods__["trace_chain"] = _molset.TraceMolAgent_trace_chain_set
    __swig_getmethods__["trace_chain"] = _molset.TraceMolAgent_trace_chain_get
    if _newclass:
        trace_chain = _swig_property(_molset.TraceMolAgent_trace_chain_get, _molset.TraceMolAgent_trace_chain_set)
    __swig_setmethods__["itr_res"] = _molset.TraceMolAgent_itr_res_set
    __swig_getmethods__["itr_res"] = _molset.TraceMolAgent_itr_res_get
    if _newclass:
        itr_res = _swig_property(_molset.TraceMolAgent_itr_res_get, _molset.TraceMolAgent_itr_res_set)
TraceMolAgent_swigregister = _molset.TraceMolAgent_swigregister
TraceMolAgent_swigregister(TraceMolAgent)

class UpdateMolViewNotifyAgent(TrajAnalAgent):
    __swig_setmethods__ = {}
    for _s in [TrajAnalAgent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpdateMolViewNotifyAgent, name, value)
    __swig_getmethods__ = {}
    for _s in [TrajAnalAgent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpdateMolViewNotifyAgent, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_UpdateMolViewNotifyAgent
    __del__ = lambda self: None

    def GetClassName(self):
        return _molset.UpdateMolViewNotifyAgent_GetClassName(self)

    def IsActive(self):
        return _molset.UpdateMolViewNotifyAgent_IsActive(self)

    def SetActive(self, active_flag):
        return _molset.UpdateMolViewNotifyAgent_SetActive(self, active_flag)

    def Init(self, ppt_info):
        return _molset.UpdateMolViewNotifyAgent_Init(self, ppt_info)

    def AnalyzePt(self, ppt_info):
        return _molset.UpdateMolViewNotifyAgent_AnalyzePt(self, ppt_info)

    def Finalize(self):
        return _molset.UpdateMolViewNotifyAgent_Finalize(self)
    __swig_setmethods__["pmset"] = _molset.UpdateMolViewNotifyAgent_pmset_set
    __swig_getmethods__["pmset"] = _molset.UpdateMolViewNotifyAgent_pmset_get
    if _newclass:
        pmset = _swig_property(_molset.UpdateMolViewNotifyAgent_pmset_get, _molset.UpdateMolViewNotifyAgent_pmset_set)
    __swig_setmethods__["is_moved"] = _molset.UpdateMolViewNotifyAgent_is_moved_set
    __swig_getmethods__["is_moved"] = _molset.UpdateMolViewNotifyAgent_is_moved_get
    if _newclass:
        is_moved = _swig_property(_molset.UpdateMolViewNotifyAgent_is_moved_get, _molset.UpdateMolViewNotifyAgent_is_moved_set)
    __swig_setmethods__["update_interval"] = _molset.UpdateMolViewNotifyAgent_update_interval_set
    __swig_getmethods__["update_interval"] = _molset.UpdateMolViewNotifyAgent_update_interval_get
    if _newclass:
        update_interval = _swig_property(_molset.UpdateMolViewNotifyAgent_update_interval_get, _molset.UpdateMolViewNotifyAgent_update_interval_set)
    __swig_setmethods__["next_update_time"] = _molset.UpdateMolViewNotifyAgent_next_update_time_set
    __swig_getmethods__["next_update_time"] = _molset.UpdateMolViewNotifyAgent_next_update_time_get
    if _newclass:
        next_update_time = _swig_property(_molset.UpdateMolViewNotifyAgent_next_update_time_get, _molset.UpdateMolViewNotifyAgent_next_update_time_set)
UpdateMolViewNotifyAgent_swigregister = _molset.UpdateMolViewNotifyAgent_swigregister
UpdateMolViewNotifyAgent_swigregister(UpdateMolViewNotifyAgent)

class HaEnergyFunc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaEnergyFunc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaEnergyFunc, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ComputeEnergy(self, pcrd):
        return _molset.HaEnergyFunc_ComputeEnergy(self, pcrd)
    __swig_destroy__ = _molset.delete_HaEnergyFunc
    __del__ = lambda self: None
HaEnergyFunc_swigregister = _molset.HaEnergyFunc_swigregister
HaEnergyFunc_swigregister(HaEnergyFunc)

class MCSimulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCSimulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCSimulator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_MCSimulator
    __del__ = lambda self: None
    __swig_setmethods__["num_mc_steps"] = _molset.MCSimulator_num_mc_steps_set
    __swig_getmethods__["num_mc_steps"] = _molset.MCSimulator_num_mc_steps_get
    if _newclass:
        num_mc_steps = _swig_property(_molset.MCSimulator_num_mc_steps_get, _molset.MCSimulator_num_mc_steps_set)
    __swig_setmethods__["stop_calc_flag"] = _molset.MCSimulator_stop_calc_flag_set
    __swig_getmethods__["stop_calc_flag"] = _molset.MCSimulator_stop_calc_flag_get
    if _newclass:
        stop_calc_flag = _swig_property(_molset.MCSimulator_stop_calc_flag_get, _molset.MCSimulator_stop_calc_flag_set)
    __swig_setmethods__["p_crd"] = _molset.MCSimulator_p_crd_set
    __swig_getmethods__["p_crd"] = _molset.MCSimulator_p_crd_get
    if _newclass:
        p_crd = _swig_property(_molset.MCSimulator_p_crd_get, _molset.MCSimulator_p_crd_set)
    __swig_setmethods__["delay_time"] = _molset.MCSimulator_delay_time_set
    __swig_getmethods__["delay_time"] = _molset.MCSimulator_delay_time_get
    if _newclass:
        delay_time = _swig_property(_molset.MCSimulator_delay_time_get, _molset.MCSimulator_delay_time_set)
    __swig_setmethods__["npt_begin"] = _molset.MCSimulator_npt_begin_set
    __swig_getmethods__["npt_begin"] = _molset.MCSimulator_npt_begin_get
    if _newclass:
        npt_begin = _swig_property(_molset.MCSimulator_npt_begin_get, _molset.MCSimulator_npt_begin_set)
    __swig_setmethods__["npt_step"] = _molset.MCSimulator_npt_step_set
    __swig_getmethods__["npt_step"] = _molset.MCSimulator_npt_step_get
    if _newclass:
        npt_step = _swig_property(_molset.MCSimulator_npt_step_get, _molset.MCSimulator_npt_step_set)
    __swig_setmethods__["npt_end"] = _molset.MCSimulator_npt_end_set
    __swig_getmethods__["npt_end"] = _molset.MCSimulator_npt_end_get
    if _newclass:
        npt_end = _swig_property(_molset.MCSimulator_npt_end_get, _molset.MCSimulator_npt_end_set)
    __swig_setmethods__["dont_calc_ene_flag"] = _molset.MCSimulator_dont_calc_ene_flag_set
    __swig_getmethods__["dont_calc_ene_flag"] = _molset.MCSimulator_dont_calc_ene_flag_get
    if _newclass:
        dont_calc_ene_flag = _swig_property(_molset.MCSimulator_dont_calc_ene_flag_get, _molset.MCSimulator_dont_calc_ene_flag_set)
    __swig_setmethods__["sim_thread"] = _molset.MCSimulator_sim_thread_set
    __swig_getmethods__["sim_thread"] = _molset.MCSimulator_sim_thread_get
    if _newclass:
        sim_thread = _swig_property(_molset.MCSimulator_sim_thread_get, _molset.MCSimulator_sim_thread_set)

    def SetEnergyFunc(self, p_ene_func_new):
        return _molset.MCSimulator_SetEnergyFunc(self, p_ene_func_new)

    def InitEnergyFunc(self):
        return _molset.MCSimulator_InitEnergyFunc(self)

    def ComputeEnergy(self, pcrd):
        return _molset.MCSimulator_ComputeEnergy(self, pcrd)

    def SetInitPoint(self, pcrd_new=None):
        return _molset.MCSimulator_SetInitPoint(self, pcrd_new)

    def SetTemperature(self, temp_new):
        return _molset.MCSimulator_SetTemperature(self, temp_new)

    def GetTemperature(self):
        return _molset.MCSimulator_GetTemperature(self)

    def RunMC(self):
        return _molset.MCSimulator_RunMC(self)

    def RunMCThread(self):
        return _molset.MCSimulator_RunMCThread(self)

    def PauseMC(self):
        return _molset.MCSimulator_PauseMC(self)

    def ResumeMC(self):
        return _molset.MCSimulator_ResumeMC(self)

    def StopMC(self):
        return _molset.MCSimulator_StopMC(self)

    def IncrementCrd(self, pcrd):
        return _molset.MCSimulator_IncrementCrd(self, pcrd)

    def SetCoord(self, pcrd):
        return _molset.MCSimulator_SetCoord(self, pcrd)

    def InitTrajAnalysis(self, ppt_info):
        return _molset.MCSimulator_InitTrajAnalysis(self, ppt_info)

    def ComputePropTrajPoint(self, ppt_info):
        return _molset.MCSimulator_ComputePropTrajPoint(self, ppt_info)

    def FinalizeTrajAnalysis(self):
        return _molset.MCSimulator_FinalizeTrajAnalysis(self)

    def AnalyzeTrajectory(self):
        return _molset.MCSimulator_AnalyzeTrajectory(self)
    __swig_setmethods__["agents"] = _molset.MCSimulator_agents_set
    __swig_getmethods__["agents"] = _molset.MCSimulator_agents_get
    if _newclass:
        agents = _swig_property(_molset.MCSimulator_agents_get, _molset.MCSimulator_agents_set)

    def GetTrajectoryIOAgent(self):
        return _molset.MCSimulator_GetTrajectoryIOAgent(self)

    def DeleteTrajAnalAgent(self, p_ag):
        return _molset.MCSimulator_DeleteTrajAnalAgent(self, p_ag)

    def GetTrajectoryTraceAgent(self, create_agent=0):
        return _molset.MCSimulator_GetTrajectoryTraceAgent(self, create_agent)

    def GetMolViewNotifyAgent(self, create_agent=0):
        return _molset.MCSimulator_GetMolViewNotifyAgent(self, create_agent)
    __swig_setmethods__["p_ene_func"] = _molset.MCSimulator_p_ene_func_set
    __swig_getmethods__["p_ene_func"] = _molset.MCSimulator_p_ene_func_get
    if _newclass:
        p_ene_func = _swig_property(_molset.MCSimulator_p_ene_func_get, _molset.MCSimulator_p_ene_func_set)

    def GetMolSet(self):
        return _molset.MCSimulator_GetMolSet(self)
    __swig_setmethods__["pmset"] = _molset.MCSimulator_pmset_set
    __swig_getmethods__["pmset"] = _molset.MCSimulator_pmset_get
    if _newclass:
        pmset = _swig_property(_molset.MCSimulator_pmset_get, _molset.MCSimulator_pmset_set)
MCSimulator_swigregister = _molset.MCSimulator_swigregister
MCSimulator_swigregister(MCSimulator)

class HaInterMolMod(HaCompMod):
    __swig_setmethods__ = {}
    for _s in [HaCompMod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaInterMolMod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaCompMod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaInterMolMod, name)
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset):
        this = _molset.new_HaInterMolMod(new_phost_mset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaInterMolMod
    __del__ = lambda self: None

    def SetStdParams(self):
        return _molset.HaInterMolMod_SetStdParams(self)

    def Initialize(self):
        return _molset.HaInterMolMod_Initialize(self)

    def ClearInternalStruct(self):
        return _molset.HaInterMolMod_ClearInternalStruct(self)

    def SetInteractGroupsFromMolecules(self):
        return _molset.HaInterMolMod_SetInteractGroupsFromMolecules(self)

    def ClearInteractGroups(self):
        return _molset.HaInterMolMod_ClearInteractGroups(self)

    def AddInteractGroup(self, p_atgrp):
        return _molset.HaInterMolMod_AddInteractGroup(self, p_atgrp)
    __swig_setmethods__["module_to_init_flag"] = _molset.HaInterMolMod_module_to_init_flag_set
    __swig_getmethods__["module_to_init_flag"] = _molset.HaInterMolMod_module_to_init_flag_get
    if _newclass:
        module_to_init_flag = _swig_property(_molset.HaInterMolMod_module_to_init_flag_get, _molset.HaInterMolMod_module_to_init_flag_set)

    def SetCoord(self, pcrd):
        return _molset.HaInterMolMod_SetCoord(self, pcrd)

    def SetRigidBodyCoord(self, pcrd):
        return _molset.HaInterMolMod_SetRigidBodyCoord(self, pcrd)

    def CalculateMMEnergy(self):
        return _molset.HaInterMolMod_CalculateMMEnergy(self)

    def CalcElStaticInter(self):
        return _molset.HaInterMolMod_CalcElStaticInter(self)

    def CalcContElectrEne(self, inter_groups):
        return _molset.HaInterMolMod_CalcContElectrEne(self, inter_groups)

    def CalcEffInterEne(self):
        return _molset.HaInterMolMod_CalcEffInterEne(self)

    def Hessian(self, energy_type, pMol):
        return _molset.HaInterMolMod_Hessian(self, energy_type, pMol)

    def Jacobian(self, energy_type, pMol):
        return _molset.HaInterMolMod_Jacobian(self, energy_type, pMol)

    def NormalModes(self, energy_type, ptmol):
        return _molset.HaInterMolMod_NormalModes(self, energy_type, ptmol)
    __swig_setmethods__["to_build_nb_contact_list"] = _molset.HaInterMolMod_to_build_nb_contact_list_set
    __swig_getmethods__["to_build_nb_contact_list"] = _molset.HaInterMolMod_to_build_nb_contact_list_get
    if _newclass:
        to_build_nb_contact_list = _swig_property(_molset.HaInterMolMod_to_build_nb_contact_list_get, _molset.HaInterMolMod_to_build_nb_contact_list_set)
    __swig_setmethods__["to_build_intermol_excl_atom_list"] = _molset.HaInterMolMod_to_build_intermol_excl_atom_list_set
    __swig_getmethods__["to_build_intermol_excl_atom_list"] = _molset.HaInterMolMod_to_build_intermol_excl_atom_list_get
    if _newclass:
        to_build_intermol_excl_atom_list = _swig_property(_molset.HaInterMolMod_to_build_intermol_excl_atom_list_get, _molset.HaInterMolMod_to_build_intermol_excl_atom_list_set)
    __swig_setmethods__["cur_intermol_ene"] = _molset.HaInterMolMod_cur_intermol_ene_set
    __swig_getmethods__["cur_intermol_ene"] = _molset.HaInterMolMod_cur_intermol_ene_get
    if _newclass:
        cur_intermol_ene = _swig_property(_molset.HaInterMolMod_cur_intermol_ene_get, _molset.HaInterMolMod_cur_intermol_ene_set)
    __swig_setmethods__["electr_inter_ene"] = _molset.HaInterMolMod_electr_inter_ene_set
    __swig_getmethods__["electr_inter_ene"] = _molset.HaInterMolMod_electr_inter_ene_get
    if _newclass:
        electr_inter_ene = _swig_property(_molset.HaInterMolMod_electr_inter_ene_get, _molset.HaInterMolMod_electr_inter_ene_set)
    __swig_setmethods__["vdw_inter_ene"] = _molset.HaInterMolMod_vdw_inter_ene_set
    __swig_getmethods__["vdw_inter_ene"] = _molset.HaInterMolMod_vdw_inter_ene_get
    if _newclass:
        vdw_inter_ene = _swig_property(_molset.HaInterMolMod_vdw_inter_ene_get, _molset.HaInterMolMod_vdw_inter_ene_set)
    __swig_setmethods__["add_eff_ene"] = _molset.HaInterMolMod_add_eff_ene_set
    __swig_getmethods__["add_eff_ene"] = _molset.HaInterMolMod_add_eff_ene_get
    if _newclass:
        add_eff_ene = _swig_property(_molset.HaInterMolMod_add_eff_ene_get, _molset.HaInterMolMod_add_eff_ene_set)

    def InitMolecularFields(self):
        return _molset.HaInterMolMod_InitMolecularFields(self)

    def CalcChargesInFieldEne(self):
        return _molset.HaInterMolMod_CalcChargesInFieldEne(self)

    def SetElectrModel(self, new_elecr_model_idx):
        return _molset.HaInterMolMod_SetElectrModel(self, new_elecr_model_idx)
    __swig_setmethods__["compute_pk"] = _molset.HaInterMolMod_compute_pk_set
    __swig_getmethods__["compute_pk"] = _molset.HaInterMolMod_compute_pk_get
    if _newclass:
        compute_pk = _swig_property(_molset.HaInterMolMod_compute_pk_get, _molset.HaInterMolMod_compute_pk_set)
    __swig_setmethods__["electr_model"] = _molset.HaInterMolMod_electr_model_set
    __swig_getmethods__["electr_model"] = _molset.HaInterMolMod_electr_model_get
    if _newclass:
        electr_model = _swig_property(_molset.HaInterMolMod_electr_model_get, _molset.HaInterMolMod_electr_model_set)
    __swig_setmethods__["calc_et_rate"] = _molset.HaInterMolMod_calc_et_rate_set
    __swig_getmethods__["calc_et_rate"] = _molset.HaInterMolMod_calc_et_rate_get
    if _newclass:
        calc_et_rate = _swig_property(_molset.HaInterMolMod_calc_et_rate_get, _molset.HaInterMolMod_calc_et_rate_set)
    __swig_setmethods__["empirical_flag"] = _molset.HaInterMolMod_empirical_flag_set
    __swig_getmethods__["empirical_flag"] = _molset.HaInterMolMod_empirical_flag_get
    if _newclass:
        empirical_flag = _swig_property(_molset.HaInterMolMod_empirical_flag_get, _molset.HaInterMolMod_empirical_flag_set)
    __swig_setmethods__["p_mc_sim"] = _molset.HaInterMolMod_p_mc_sim_set
    __swig_getmethods__["p_mc_sim"] = _molset.HaInterMolMod_p_mc_sim_get
    if _newclass:
        p_mc_sim = _swig_property(_molset.HaInterMolMod_p_mc_sim_get, _molset.HaInterMolMod_p_mc_sim_set)
    __swig_setmethods__["p_ene_minimizer"] = _molset.HaInterMolMod_p_ene_minimizer_set
    __swig_getmethods__["p_ene_minimizer"] = _molset.HaInterMolMod_p_ene_minimizer_get
    if _newclass:
        p_ene_minimizer = _swig_property(_molset.HaInterMolMod_p_ene_minimizer_get, _molset.HaInterMolMod_p_ene_minimizer_set)
    __swig_setmethods__["p_rex_sim"] = _molset.HaInterMolMod_p_rex_sim_set
    __swig_getmethods__["p_rex_sim"] = _molset.HaInterMolMod_p_rex_sim_get
    if _newclass:
        p_rex_sim = _swig_property(_molset.HaInterMolMod_p_rex_sim_get, _molset.HaInterMolMod_p_rex_sim_set)
    __swig_setmethods__["p_prot_rdx_mod"] = _molset.HaInterMolMod_p_prot_rdx_mod_set
    __swig_getmethods__["p_prot_rdx_mod"] = _molset.HaInterMolMod_p_prot_rdx_mod_get
    if _newclass:
        p_prot_rdx_mod = _swig_property(_molset.HaInterMolMod_p_prot_rdx_mod_get, _molset.HaInterMolMod_p_prot_rdx_mod_set)
    __swig_setmethods__["interact_groups"] = _molset.HaInterMolMod_interact_groups_set
    __swig_getmethods__["interact_groups"] = _molset.HaInterMolMod_interact_groups_get
    if _newclass:
        interact_groups = _swig_property(_molset.HaInterMolMod_interact_groups_get, _molset.HaInterMolMod_interact_groups_set)
    __swig_setmethods__["el_pot_field"] = _molset.HaInterMolMod_el_pot_field_set
    __swig_getmethods__["el_pot_field"] = _molset.HaInterMolMod_el_pot_field_get
    if _newclass:
        el_pot_field = _swig_property(_molset.HaInterMolMod_el_pot_field_get, _molset.HaInterMolMod_el_pot_field_set)
    __swig_setmethods__["vdw_pot_field"] = _molset.HaInterMolMod_vdw_pot_field_set
    __swig_getmethods__["vdw_pot_field"] = _molset.HaInterMolMod_vdw_pot_field_get
    if _newclass:
        vdw_pot_field = _swig_property(_molset.HaInterMolMod_vdw_pot_field_get, _molset.HaInterMolMod_vdw_pot_field_set)
    __swig_setmethods__["normalmode_vec"] = _molset.HaInterMolMod_normalmode_vec_set
    __swig_getmethods__["normalmode_vec"] = _molset.HaInterMolMod_normalmode_vec_get
    if _newclass:
        normalmode_vec = _swig_property(_molset.HaInterMolMod_normalmode_vec_get, _molset.HaInterMolMod_normalmode_vec_set)
    __swig_setmethods__["normalmode_val"] = _molset.HaInterMolMod_normalmode_val_set
    __swig_getmethods__["normalmode_val"] = _molset.HaInterMolMod_normalmode_val_get
    if _newclass:
        normalmode_val = _swig_property(_molset.HaInterMolMod_normalmode_val_get, _molset.HaInterMolMod_normalmode_val_set)
HaInterMolMod_swigregister = _molset.HaInterMolMod_swigregister
HaInterMolMod_swigregister(HaInterMolMod)
NO_ELECTR = cvar.NO_ELECTR
CONTINUUM_ELECTR = cvar.CONTINUUM_ELECTR
COULOMB_ELECTR = cvar.COULOMB_ELECTR
CHARGES_IN_FIELD_ELECTR = cvar.CHARGES_IN_FIELD_ELECTR

class InterMolMCSimulator(MCSimulator):
    __swig_setmethods__ = {}
    for _s in [MCSimulator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterMolMCSimulator, name, value)
    __swig_getmethods__ = {}
    for _s in [MCSimulator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterMolMCSimulator, name)
    __repr__ = _swig_repr

    def __init__(self, p_im_mod_new):
        this = _molset.new_InterMolMCSimulator(p_im_mod_new)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_InterMolMCSimulator
    __del__ = lambda self: None

    def SetStdParams(self):
        return _molset.InterMolMCSimulator_SetStdParams(self)
    __swig_setmethods__["freeze_first_mol"] = _molset.InterMolMCSimulator_freeze_first_mol_set
    __swig_getmethods__["freeze_first_mol"] = _molset.InterMolMCSimulator_freeze_first_mol_get
    if _newclass:
        freeze_first_mol = _swig_property(_molset.InterMolMCSimulator_freeze_first_mol_get, _molset.InterMolMCSimulator_freeze_first_mol_set)
    __swig_setmethods__["ang_ratio"] = _molset.InterMolMCSimulator_ang_ratio_set
    __swig_getmethods__["ang_ratio"] = _molset.InterMolMCSimulator_ang_ratio_get
    if _newclass:
        ang_ratio = _swig_property(_molset.InterMolMCSimulator_ang_ratio_get, _molset.InterMolMCSimulator_ang_ratio_set)
    __swig_setmethods__["tr_ratio"] = _molset.InterMolMCSimulator_tr_ratio_set
    __swig_getmethods__["tr_ratio"] = _molset.InterMolMCSimulator_tr_ratio_get
    if _newclass:
        tr_ratio = _swig_property(_molset.InterMolMCSimulator_tr_ratio_get, _molset.InterMolMCSimulator_tr_ratio_set)
    __swig_setmethods__["equil_conf_vol_vdw"] = _molset.InterMolMCSimulator_equil_conf_vol_vdw_set
    __swig_getmethods__["equil_conf_vol_vdw"] = _molset.InterMolMCSimulator_equil_conf_vol_vdw_get
    if _newclass:
        equil_conf_vol_vdw = _swig_property(_molset.InterMolMCSimulator_equil_conf_vol_vdw_get, _molset.InterMolMCSimulator_equil_conf_vol_vdw_set)
    __swig_setmethods__["amber_flag"] = _molset.InterMolMCSimulator_amber_flag_set
    __swig_getmethods__["amber_flag"] = _molset.InterMolMCSimulator_amber_flag_get
    if _newclass:
        amber_flag = _swig_property(_molset.InterMolMCSimulator_amber_flag_get, _molset.InterMolMCSimulator_amber_flag_set)
    __swig_setmethods__["rex_flag"] = _molset.InterMolMCSimulator_rex_flag_set
    __swig_getmethods__["rex_flag"] = _molset.InterMolMCSimulator_rex_flag_get
    if _newclass:
        rex_flag = _swig_property(_molset.InterMolMCSimulator_rex_flag_get, _molset.InterMolMCSimulator_rex_flag_set)
    __swig_setmethods__["xy_mc_flag"] = _molset.InterMolMCSimulator_xy_mc_flag_set
    __swig_getmethods__["xy_mc_flag"] = _molset.InterMolMCSimulator_xy_mc_flag_get
    if _newclass:
        xy_mc_flag = _swig_property(_molset.InterMolMCSimulator_xy_mc_flag_get, _molset.InterMolMCSimulator_xy_mc_flag_set)
    __swig_setmethods__["mc_steps_betw_loc_min"] = _molset.InterMolMCSimulator_mc_steps_betw_loc_min_set
    __swig_getmethods__["mc_steps_betw_loc_min"] = _molset.InterMolMCSimulator_mc_steps_betw_loc_min_get
    if _newclass:
        mc_steps_betw_loc_min = _swig_property(_molset.InterMolMCSimulator_mc_steps_betw_loc_min_get, _molset.InterMolMCSimulator_mc_steps_betw_loc_min_set)
    __swig_setmethods__["x_orig"] = _molset.InterMolMCSimulator_x_orig_set
    __swig_getmethods__["x_orig"] = _molset.InterMolMCSimulator_x_orig_get
    if _newclass:
        x_orig = _swig_property(_molset.InterMolMCSimulator_x_orig_get, _molset.InterMolMCSimulator_x_orig_set)
    __swig_setmethods__["y_orig"] = _molset.InterMolMCSimulator_y_orig_set
    __swig_getmethods__["y_orig"] = _molset.InterMolMCSimulator_y_orig_get
    if _newclass:
        y_orig = _swig_property(_molset.InterMolMCSimulator_y_orig_get, _molset.InterMolMCSimulator_y_orig_set)
    __swig_setmethods__["z_orig"] = _molset.InterMolMCSimulator_z_orig_set
    __swig_getmethods__["z_orig"] = _molset.InterMolMCSimulator_z_orig_get
    if _newclass:
        z_orig = _swig_property(_molset.InterMolMCSimulator_z_orig_get, _molset.InterMolMCSimulator_z_orig_set)

    def GetInterMolMod(self):
        return _molset.InterMolMCSimulator_GetInterMolMod(self)

    def InitEnergyFunc(self):
        return _molset.InterMolMCSimulator_InitEnergyFunc(self)

    def ComputeEnergy(self, pcrd):
        return _molset.InterMolMCSimulator_ComputeEnergy(self, pcrd)

    def SetInitPoint(self, pcrd_new=None):
        return _molset.InterMolMCSimulator_SetInitPoint(self, pcrd_new)

    def IncrementCrd(self, pcrd):
        return _molset.InterMolMCSimulator_IncrementCrd(self, pcrd)

    def SetCoord(self, pcrd):
        return _molset.InterMolMCSimulator_SetCoord(self, pcrd)

    def RunMCEmpirical(self):
        return _molset.InterMolMCSimulator_RunMCEmpirical(self)

    def RunMCQuantSampling(self):
        return _molset.InterMolMCSimulator_RunMCQuantSampling(self)

    def RunMCEmpiricalXY(self):
        return _molset.InterMolMCSimulator_RunMCEmpiricalXY(self)

    def RunMCEmpiricalNMA(self):
        return _molset.InterMolMCSimulator_RunMCEmpiricalNMA(self)

    def RunQuasiREM(self):
        return _molset.InterMolMCSimulator_RunQuasiREM(self)

    def SetDiscretizedMoves(self):
        return _molset.InterMolMCSimulator_SetDiscretizedMoves(self)

    def IsDiscretizedMoves(self):
        return _molset.InterMolMCSimulator_IsDiscretizedMoves(self)
InterMolMCSimulator_swigregister = _molset.InterMolMCSimulator_swigregister
InterMolMCSimulator_swigregister(InterMolMCSimulator)

class InterMolEnergyMinimizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterMolEnergyMinimizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterMolEnergyMinimizer, name)
    __repr__ = _swig_repr

    def __init__(self, p_inter_mol_new):
        this = _molset.new_InterMolEnergyMinimizer(p_inter_mol_new)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_InterMolEnergyMinimizer
    __del__ = lambda self: None

    def SetStdParams(self):
        return _molset.InterMolEnergyMinimizer_SetStdParams(self)

    def MinimizeEnergy(self, energy_type, ptmol):
        return _molset.InterMolEnergyMinimizer_MinimizeEnergy(self, energy_type, ptmol)

    def LineSearch(self, energy_type, ptmol, g, p, f, stpmax):
        return _molset.InterMolEnergyMinimizer_LineSearch(self, energy_type, ptmol, g, p, f, stpmax)

    def SteepestDescentMinimizer(self, nsteps):
        return _molset.InterMolEnergyMinimizer_SteepestDescentMinimizer(self, nsteps)

    def GoldenSectionSearch(self, xold, force_array, torque_array, tol):
        return _molset.InterMolEnergyMinimizer_GoldenSectionSearch(self, xold, force_array, torque_array, tol)

    def StepAlongGradient(self, xold, alpha, force_array, torque_array):
        return _molset.InterMolEnergyMinimizer_StepAlongGradient(self, xold, alpha, force_array, torque_array)
InterMolEnergyMinimizer_swigregister = _molset.InterMolEnergyMinimizer_swigregister
InterMolEnergyMinimizer_swigregister(InterMolEnergyMinimizer)

class InterMolRepExchSimulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterMolRepExchSimulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterMolRepExchSimulator, name)
    __repr__ = _swig_repr

    def __init__(self, p_inter_mol_new):
        this = _molset.new_InterMolRepExchSimulator(p_inter_mol_new)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_InterMolRepExchSimulator
    __del__ = lambda self: None

    def SetStdParams(self):
        return _molset.InterMolRepExchSimulator_SetStdParams(self)
    __swig_setmethods__["nreplicas"] = _molset.InterMolRepExchSimulator_nreplicas_set
    __swig_getmethods__["nreplicas"] = _molset.InterMolRepExchSimulator_nreplicas_get
    if _newclass:
        nreplicas = _swig_property(_molset.InterMolRepExchSimulator_nreplicas_get, _molset.InterMolRepExchSimulator_nreplicas_set)
    __swig_setmethods__["rem_steps"] = _molset.InterMolRepExchSimulator_rem_steps_set
    __swig_getmethods__["rem_steps"] = _molset.InterMolRepExchSimulator_rem_steps_get
    if _newclass:
        rem_steps = _swig_property(_molset.InterMolRepExchSimulator_rem_steps_get, _molset.InterMolRepExchSimulator_rem_steps_set)
    __swig_setmethods__["temperature_max"] = _molset.InterMolRepExchSimulator_temperature_max_set
    __swig_getmethods__["temperature_max"] = _molset.InterMolRepExchSimulator_temperature_max_get
    if _newclass:
        temperature_max = _swig_property(_molset.InterMolRepExchSimulator_temperature_max_get, _molset.InterMolRepExchSimulator_temperature_max_set)
    __swig_setmethods__["vary_temperature_flag"] = _molset.InterMolRepExchSimulator_vary_temperature_flag_set
    __swig_getmethods__["vary_temperature_flag"] = _molset.InterMolRepExchSimulator_vary_temperature_flag_get
    if _newclass:
        vary_temperature_flag = _swig_property(_molset.InterMolRepExchSimulator_vary_temperature_flag_get, _molset.InterMolRepExchSimulator_vary_temperature_flag_set)
    __swig_setmethods__["ireplica"] = _molset.InterMolRepExchSimulator_ireplica_set
    __swig_getmethods__["ireplica"] = _molset.InterMolRepExchSimulator_ireplica_get
    if _newclass:
        ireplica = _swig_property(_molset.InterMolRepExchSimulator_ireplica_get, _molset.InterMolRepExchSimulator_ireplica_set)
    __swig_setmethods__["position_mat"] = _molset.InterMolRepExchSimulator_position_mat_set
    __swig_getmethods__["position_mat"] = _molset.InterMolRepExchSimulator_position_mat_get
    if _newclass:
        position_mat = _swig_property(_molset.InterMolRepExchSimulator_position_mat_get, _molset.InterMolRepExchSimulator_position_mat_set)
    __swig_setmethods__["energy_arr"] = _molset.InterMolRepExchSimulator_energy_arr_set
    __swig_getmethods__["energy_arr"] = _molset.InterMolRepExchSimulator_energy_arr_get
    if _newclass:
        energy_arr = _swig_property(_molset.InterMolRepExchSimulator_energy_arr_get, _molset.InterMolRepExchSimulator_energy_arr_set)
    __swig_setmethods__["exchange_arr"] = _molset.InterMolRepExchSimulator_exchange_arr_set
    __swig_getmethods__["exchange_arr"] = _molset.InterMolRepExchSimulator_exchange_arr_get
    if _newclass:
        exchange_arr = _swig_property(_molset.InterMolRepExchSimulator_exchange_arr_get, _molset.InterMolRepExchSimulator_exchange_arr_set)
    __swig_setmethods__["MC_traj_file_replica_basename"] = _molset.InterMolRepExchSimulator_MC_traj_file_replica_basename_set
    __swig_getmethods__["MC_traj_file_replica_basename"] = _molset.InterMolRepExchSimulator_MC_traj_file_replica_basename_get
    if _newclass:
        MC_traj_file_replica_basename = _swig_property(_molset.InterMolRepExchSimulator_MC_traj_file_replica_basename_get, _molset.InterMolRepExchSimulator_MC_traj_file_replica_basename_set)
    __swig_setmethods__["MC_energy_file_replica_basename"] = _molset.InterMolRepExchSimulator_MC_energy_file_replica_basename_set
    __swig_getmethods__["MC_energy_file_replica_basename"] = _molset.InterMolRepExchSimulator_MC_energy_file_replica_basename_get
    if _newclass:
        MC_energy_file_replica_basename = _swig_property(_molset.InterMolRepExchSimulator_MC_energy_file_replica_basename_get, _molset.InterMolRepExchSimulator_MC_energy_file_replica_basename_set)
    __swig_setmethods__["MC_rst_file_basename"] = _molset.InterMolRepExchSimulator_MC_rst_file_basename_set
    __swig_getmethods__["MC_rst_file_basename"] = _molset.InterMolRepExchSimulator_MC_rst_file_basename_get
    if _newclass:
        MC_rst_file_basename = _swig_property(_molset.InterMolRepExchSimulator_MC_rst_file_basename_get, _molset.InterMolRepExchSimulator_MC_rst_file_basename_set)
    __swig_setmethods__["n_playback_replica"] = _molset.InterMolRepExchSimulator_n_playback_replica_set
    __swig_getmethods__["n_playback_replica"] = _molset.InterMolRepExchSimulator_n_playback_replica_get
    if _newclass:
        n_playback_replica = _swig_property(_molset.InterMolRepExchSimulator_n_playback_replica_get, _molset.InterMolRepExchSimulator_n_playback_replica_set)
    __swig_setmethods__["p_acc_ratio"] = _molset.InterMolRepExchSimulator_p_acc_ratio_set
    __swig_getmethods__["p_acc_ratio"] = _molset.InterMolRepExchSimulator_p_acc_ratio_get
    if _newclass:
        p_acc_ratio = _swig_property(_molset.InterMolRepExchSimulator_p_acc_ratio_get, _molset.InterMolRepExchSimulator_p_acc_ratio_set)
InterMolRepExchSimulator_swigregister = _molset.InterMolRepExchSimulator_swigregister
InterMolRepExchSimulator_swigregister(InterMolRepExchSimulator)

class HaEmpiricalMod(HaCompMod):
    __swig_setmethods__ = {}
    for _s in [HaCompMod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaEmpiricalMod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaCompMod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaEmpiricalMod, name)
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset):
        this = _molset.new_HaEmpiricalMod(new_phost_mset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaEmpiricalMod
    __del__ = lambda self: None

    def SetStdParams(self):
        return _molset.HaEmpiricalMod_SetStdParams(self)

    def Initialize(self):
        return _molset.HaEmpiricalMod_Initialize(self)

    def ScoreEnergy(self):
        return _molset.HaEmpiricalMod_ScoreEnergy(self)

    def GeometryScoreEnergy(self):
        return _molset.HaEmpiricalMod_GeometryScoreEnergy(self)

    def PenaltyConstraints(self):
        return _molset.HaEmpiricalMod_PenaltyConstraints(self)

    def PenaltyPackDistance(self):
        return _molset.HaEmpiricalMod_PenaltyPackDistance(self)

    def PenaltyPackAngle(self):
        return _molset.HaEmpiricalMod_PenaltyPackAngle(self)

    def CalcPackAngleForceTorque(self, torque_array):
        return _molset.HaEmpiricalMod_CalcPackAngleForceTorque(self, torque_array)

    def PenaltyContact(self):
        return _molset.HaEmpiricalMod_PenaltyContact(self)

    def PenaltyBured(self):
        return _molset.HaEmpiricalMod_PenaltyBured(self)

    def PenaltyPairwise(self):
        return _molset.HaEmpiricalMod_PenaltyPairwise(self)

    def PenaltyVDW(self):
        return _molset.HaEmpiricalMod_PenaltyVDW(self)

    def PenaltyVDW_Bured(self):
        return _molset.HaEmpiricalMod_PenaltyVDW_Bured(self)

    def PenaltyDensity(self):
        return _molset.HaEmpiricalMod_PenaltyDensity(self)

    def PenaltySymmetry(self):
        return _molset.HaEmpiricalMod_PenaltySymmetry(self)

    def PenaltySolventAccessible(self):
        return _molset.HaEmpiricalMod_PenaltySolventAccessible(self)

    def PenaltyHelicePack(self):
        return _molset.HaEmpiricalMod_PenaltyHelicePack(self)

    def LoadEmpConstrains(self):
        return _molset.HaEmpiricalMod_LoadEmpConstrains(self)

    def LoadSolventAccessibleAtoms(self):
        return _molset.HaEmpiricalMod_LoadSolventAccessibleAtoms(self)

    def EstablishChains(self):
        return _molset.HaEmpiricalMod_EstablishChains(self)

    def SoftSqrWellPotential(self, current_value, average, stdev, weight):
        return _molset.HaEmpiricalMod_SoftSqrWellPotential(self, current_value, average, stdev, weight)

    def SqrPotential(self, current_value, average, stdev, weight):
        return _molset.HaEmpiricalMod_SqrPotential(self, current_value, average, stdev, weight)

    def CenterOfMass(self):
        return _molset.HaEmpiricalMod_CenterOfMass(self)

    def FindAxes(self):
        return _molset.HaEmpiricalMod_FindAxes(self)

    def LoadEmpParam(self):
        return _molset.HaEmpiricalMod_LoadEmpParam(self)

    def CbettaSetUp(self):
        return _molset.HaEmpiricalMod_CbettaSetUp(self)

    def FindCentralAxis(self):
        return _molset.HaEmpiricalMod_FindCentralAxis(self)

    def Neighborhood(self):
        return _molset.HaEmpiricalMod_Neighborhood(self)

    def CheckNeighbor(self, i, j):
        return _molset.HaEmpiricalMod_CheckNeighbor(self, i, j)

    def ResidueTypeList(self):
        return _molset.HaEmpiricalMod_ResidueTypeList(self)

    def LineSegments(self):
        return _molset.HaEmpiricalMod_LineSegments(self)

    def HarmonicEnergy(self):
        return _molset.HaEmpiricalMod_HarmonicEnergy(self)

    def ToyEnergy(self):
        return _molset.HaEmpiricalMod_ToyEnergy(self)

    def MinEnergy(self):
        return _molset.HaEmpiricalMod_MinEnergy(self)

    def PenaltyCentralAttract(self):
        return _molset.HaEmpiricalMod_PenaltyCentralAttract(self)

    def CalcForceCentralAttract(self, force_cntl_array):
        return _molset.HaEmpiricalMod_CalcForceCentralAttract(self, force_cntl_array)

    def CalculateCoarseGrainedBackbone(self):
        return _molset.HaEmpiricalMod_CalculateCoarseGrainedBackbone(self)

    def CalcRepulForceTorque(self, force_array, torque_array):
        return _molset.HaEmpiricalMod_CalcRepulForceTorque(self, force_array, torque_array)

    def PenaltyRepulsion(self):
        return _molset.HaEmpiricalMod_PenaltyRepulsion(self)

    def GetRepulEnergy(self, aptr1, aptr2):
        return _molset.HaEmpiricalMod_GetRepulEnergy(self, aptr1, aptr2)

    def GetRepulDerivative(self, aptr1, aptr2):
        return _molset.HaEmpiricalMod_GetRepulDerivative(self, aptr1, aptr2)

    def GetMaxDimension(self):
        return _molset.HaEmpiricalMod_GetMaxDimension(self)

    def GetGeomCenter(self):
        return _molset.HaEmpiricalMod_GetGeomCenter(self)

    def GetGeomCenterToy(self):
        return _molset.HaEmpiricalMod_GetGeomCenterToy(self)

    def QuantSampling(self):
        return _molset.HaEmpiricalMod_QuantSampling(self)

    def LJ_ene(self):
        return _molset.HaEmpiricalMod_LJ_ene(self)

    def LJState_ene(self):
        return _molset.HaEmpiricalMod_LJState_ene(self)

    def LennardJonesEnergy(self):
        return _molset.HaEmpiricalMod_LennardJonesEnergy(self)

    def BuriedEnergy(self):
        return _molset.HaEmpiricalMod_BuriedEnergy(self)

    def InitCylinders(self):
        return _molset.HaEmpiricalMod_InitCylinders(self)

    def LJ_eneCylinder(self):
        return _molset.HaEmpiricalMod_LJ_eneCylinder(self)

    def BuriedEnergyCyl(self):
        return _molset.HaEmpiricalMod_BuriedEnergyCyl(self)

    def PenaltyRepulsionCyl(self):
        return _molset.HaEmpiricalMod_PenaltyRepulsionCyl(self)

    def Segments_Dist_3D(self, p1, p2, p3, p4):
        return _molset.HaEmpiricalMod_Segments_Dist_3D(self, p1, p2, p3, p4)

    def Segment_Point_Near_3D(self, p1, p2, p, pn, dist, t):
        return _molset.HaEmpiricalMod_Segment_Point_Near_3D(self, p1, p2, p, pn, dist, t)

    def Segment_Point_Dist_3D(self, p1, p2, p):
        return _molset.HaEmpiricalMod_Segment_Point_Dist_3D(self, p1, p2, p)

    def Dvec_Eq(self, n, a1, a2):
        return _molset.HaEmpiricalMod_Dvec_Eq(self, n, a1, a2)

    def Dvec_Copy(self, n, a1, a2):
        return _molset.HaEmpiricalMod_Dvec_Copy(self, n, a1, a2)

    def D_Max(self, x, y):
        return _molset.HaEmpiricalMod_D_Max(self, x, y)

    def D_Min(self, x, y):
        return _molset.HaEmpiricalMod_D_Min(self, x, y)

    def Minquad(self, x1, y1, x2, y2, x3, y3, xmin, ymin):
        return _molset.HaEmpiricalMod_Minquad(self, x1, y1, x2, y2, x3, y3, xmin, ymin)

    def Parabola_Ex(self, x1, y1, x2, y2, x3, y3, x, y):
        return _molset.HaEmpiricalMod_Parabola_Ex(self, x1, y1, x2, y2, x3, y3, x, y)
    __swig_setmethods__["module_to_init_flag"] = _molset.HaEmpiricalMod_module_to_init_flag_set
    __swig_getmethods__["module_to_init_flag"] = _molset.HaEmpiricalMod_module_to_init_flag_get
    if _newclass:
        module_to_init_flag = _swig_property(_molset.HaEmpiricalMod_module_to_init_flag_get, _molset.HaEmpiricalMod_module_to_init_flag_set)
    __swig_setmethods__["sigma_constr"] = _molset.HaEmpiricalMod_sigma_constr_set
    __swig_getmethods__["sigma_constr"] = _molset.HaEmpiricalMod_sigma_constr_get
    if _newclass:
        sigma_constr = _swig_property(_molset.HaEmpiricalMod_sigma_constr_get, _molset.HaEmpiricalMod_sigma_constr_set)
    __swig_setmethods__["pack_dist_com"] = _molset.HaEmpiricalMod_pack_dist_com_set
    __swig_getmethods__["pack_dist_com"] = _molset.HaEmpiricalMod_pack_dist_com_get
    if _newclass:
        pack_dist_com = _swig_property(_molset.HaEmpiricalMod_pack_dist_com_get, _molset.HaEmpiricalMod_pack_dist_com_set)
    __swig_setmethods__["pack_dist_axis"] = _molset.HaEmpiricalMod_pack_dist_axis_set
    __swig_getmethods__["pack_dist_axis"] = _molset.HaEmpiricalMod_pack_dist_axis_get
    if _newclass:
        pack_dist_axis = _swig_property(_molset.HaEmpiricalMod_pack_dist_axis_get, _molset.HaEmpiricalMod_pack_dist_axis_set)
    __swig_setmethods__["sigma_pack_dist_com"] = _molset.HaEmpiricalMod_sigma_pack_dist_com_set
    __swig_getmethods__["sigma_pack_dist_com"] = _molset.HaEmpiricalMod_sigma_pack_dist_com_get
    if _newclass:
        sigma_pack_dist_com = _swig_property(_molset.HaEmpiricalMod_sigma_pack_dist_com_get, _molset.HaEmpiricalMod_sigma_pack_dist_com_set)
    __swig_setmethods__["sigma_pack_dist_axis"] = _molset.HaEmpiricalMod_sigma_pack_dist_axis_set
    __swig_getmethods__["sigma_pack_dist_axis"] = _molset.HaEmpiricalMod_sigma_pack_dist_axis_get
    if _newclass:
        sigma_pack_dist_axis = _swig_property(_molset.HaEmpiricalMod_sigma_pack_dist_axis_get, _molset.HaEmpiricalMod_sigma_pack_dist_axis_set)
    __swig_setmethods__["pack_angle"] = _molset.HaEmpiricalMod_pack_angle_set
    __swig_getmethods__["pack_angle"] = _molset.HaEmpiricalMod_pack_angle_get
    if _newclass:
        pack_angle = _swig_property(_molset.HaEmpiricalMod_pack_angle_get, _molset.HaEmpiricalMod_pack_angle_set)
    __swig_setmethods__["sigma_pack_angle"] = _molset.HaEmpiricalMod_sigma_pack_angle_set
    __swig_getmethods__["sigma_pack_angle"] = _molset.HaEmpiricalMod_sigma_pack_angle_get
    if _newclass:
        sigma_pack_angle = _swig_property(_molset.HaEmpiricalMod_sigma_pack_angle_get, _molset.HaEmpiricalMod_sigma_pack_angle_set)
    __swig_setmethods__["weight_constraints"] = _molset.HaEmpiricalMod_weight_constraints_set
    __swig_getmethods__["weight_constraints"] = _molset.HaEmpiricalMod_weight_constraints_get
    if _newclass:
        weight_constraints = _swig_property(_molset.HaEmpiricalMod_weight_constraints_get, _molset.HaEmpiricalMod_weight_constraints_set)
    __swig_setmethods__["weight_pack_distance"] = _molset.HaEmpiricalMod_weight_pack_distance_set
    __swig_getmethods__["weight_pack_distance"] = _molset.HaEmpiricalMod_weight_pack_distance_get
    if _newclass:
        weight_pack_distance = _swig_property(_molset.HaEmpiricalMod_weight_pack_distance_get, _molset.HaEmpiricalMod_weight_pack_distance_set)
    __swig_setmethods__["weight_pack_angle"] = _molset.HaEmpiricalMod_weight_pack_angle_set
    __swig_getmethods__["weight_pack_angle"] = _molset.HaEmpiricalMod_weight_pack_angle_get
    if _newclass:
        weight_pack_angle = _swig_property(_molset.HaEmpiricalMod_weight_pack_angle_get, _molset.HaEmpiricalMod_weight_pack_angle_set)
    __swig_setmethods__["dist_contct_com"] = _molset.HaEmpiricalMod_dist_contct_com_set
    __swig_getmethods__["dist_contct_com"] = _molset.HaEmpiricalMod_dist_contct_com_get
    if _newclass:
        dist_contct_com = _swig_property(_molset.HaEmpiricalMod_dist_contct_com_get, _molset.HaEmpiricalMod_dist_contct_com_set)
    __swig_setmethods__["sigma_dist_contct_com"] = _molset.HaEmpiricalMod_sigma_dist_contct_com_set
    __swig_getmethods__["sigma_dist_contct_com"] = _molset.HaEmpiricalMod_sigma_dist_contct_com_get
    if _newclass:
        sigma_dist_contct_com = _swig_property(_molset.HaEmpiricalMod_sigma_dist_contct_com_get, _molset.HaEmpiricalMod_sigma_dist_contct_com_set)
    __swig_setmethods__["num_contact_com"] = _molset.HaEmpiricalMod_num_contact_com_set
    __swig_getmethods__["num_contact_com"] = _molset.HaEmpiricalMod_num_contact_com_get
    if _newclass:
        num_contact_com = _swig_property(_molset.HaEmpiricalMod_num_contact_com_get, _molset.HaEmpiricalMod_num_contact_com_set)
    __swig_setmethods__["weight_num_contact"] = _molset.HaEmpiricalMod_weight_num_contact_set
    __swig_getmethods__["weight_num_contact"] = _molset.HaEmpiricalMod_weight_num_contact_get
    if _newclass:
        weight_num_contact = _swig_property(_molset.HaEmpiricalMod_weight_num_contact_get, _molset.HaEmpiricalMod_weight_num_contact_set)
    __swig_setmethods__["weight_vdw"] = _molset.HaEmpiricalMod_weight_vdw_set
    __swig_getmethods__["weight_vdw"] = _molset.HaEmpiricalMod_weight_vdw_get
    if _newclass:
        weight_vdw = _swig_property(_molset.HaEmpiricalMod_weight_vdw_get, _molset.HaEmpiricalMod_weight_vdw_set)
    __swig_setmethods__["weight_bured"] = _molset.HaEmpiricalMod_weight_bured_set
    __swig_getmethods__["weight_bured"] = _molset.HaEmpiricalMod_weight_bured_get
    if _newclass:
        weight_bured = _swig_property(_molset.HaEmpiricalMod_weight_bured_get, _molset.HaEmpiricalMod_weight_bured_set)
    __swig_setmethods__["pack_dens"] = _molset.HaEmpiricalMod_pack_dens_set
    __swig_getmethods__["pack_dens"] = _molset.HaEmpiricalMod_pack_dens_get
    if _newclass:
        pack_dens = _swig_property(_molset.HaEmpiricalMod_pack_dens_get, _molset.HaEmpiricalMod_pack_dens_set)
    __swig_setmethods__["sigma_pack_dens"] = _molset.HaEmpiricalMod_sigma_pack_dens_set
    __swig_getmethods__["sigma_pack_dens"] = _molset.HaEmpiricalMod_sigma_pack_dens_get
    if _newclass:
        sigma_pack_dens = _swig_property(_molset.HaEmpiricalMod_sigma_pack_dens_get, _molset.HaEmpiricalMod_sigma_pack_dens_set)
    __swig_setmethods__["weight_pack_dens"] = _molset.HaEmpiricalMod_weight_pack_dens_set
    __swig_getmethods__["weight_pack_dens"] = _molset.HaEmpiricalMod_weight_pack_dens_get
    if _newclass:
        weight_pack_dens = _swig_property(_molset.HaEmpiricalMod_weight_pack_dens_get, _molset.HaEmpiricalMod_weight_pack_dens_set)
    __swig_setmethods__["sigma_sym"] = _molset.HaEmpiricalMod_sigma_sym_set
    __swig_getmethods__["sigma_sym"] = _molset.HaEmpiricalMod_sigma_sym_get
    if _newclass:
        sigma_sym = _swig_property(_molset.HaEmpiricalMod_sigma_sym_get, _molset.HaEmpiricalMod_sigma_sym_set)
    __swig_setmethods__["weight_sym"] = _molset.HaEmpiricalMod_weight_sym_set
    __swig_getmethods__["weight_sym"] = _molset.HaEmpiricalMod_weight_sym_get
    if _newclass:
        weight_sym = _swig_property(_molset.HaEmpiricalMod_weight_sym_get, _molset.HaEmpiricalMod_weight_sym_set)
    __swig_setmethods__["face_up_bound"] = _molset.HaEmpiricalMod_face_up_bound_set
    __swig_getmethods__["face_up_bound"] = _molset.HaEmpiricalMod_face_up_bound_get
    if _newclass:
        face_up_bound = _swig_property(_molset.HaEmpiricalMod_face_up_bound_get, _molset.HaEmpiricalMod_face_up_bound_set)
    __swig_setmethods__["weight_sa"] = _molset.HaEmpiricalMod_weight_sa_set
    __swig_getmethods__["weight_sa"] = _molset.HaEmpiricalMod_weight_sa_get
    if _newclass:
        weight_sa = _swig_property(_molset.HaEmpiricalMod_weight_sa_get, _molset.HaEmpiricalMod_weight_sa_set)
    __swig_setmethods__["dist_neighborhood"] = _molset.HaEmpiricalMod_dist_neighborhood_set
    __swig_getmethods__["dist_neighborhood"] = _molset.HaEmpiricalMod_dist_neighborhood_get
    if _newclass:
        dist_neighborhood = _swig_property(_molset.HaEmpiricalMod_dist_neighborhood_get, _molset.HaEmpiricalMod_dist_neighborhood_set)
    __swig_setmethods__["lenght_factor"] = _molset.HaEmpiricalMod_lenght_factor_set
    __swig_getmethods__["lenght_factor"] = _molset.HaEmpiricalMod_lenght_factor_get
    if _newclass:
        lenght_factor = _swig_property(_molset.HaEmpiricalMod_lenght_factor_get, _molset.HaEmpiricalMod_lenght_factor_set)
    __swig_setmethods__["chain_arr"] = _molset.HaEmpiricalMod_chain_arr_set
    __swig_getmethods__["chain_arr"] = _molset.HaEmpiricalMod_chain_arr_get
    if _newclass:
        chain_arr = _swig_property(_molset.HaEmpiricalMod_chain_arr_get, _molset.HaEmpiricalMod_chain_arr_set)
    __swig_setmethods__["nchain"] = _molset.HaEmpiricalMod_nchain_set
    __swig_getmethods__["nchain"] = _molset.HaEmpiricalMod_nchain_get
    if _newclass:
        nchain = _swig_property(_molset.HaEmpiricalMod_nchain_get, _molset.HaEmpiricalMod_nchain_set)
    __swig_setmethods__["state_old"] = _molset.HaEmpiricalMod_state_old_set
    __swig_getmethods__["state_old"] = _molset.HaEmpiricalMod_state_old_get
    if _newclass:
        state_old = _swig_property(_molset.HaEmpiricalMod_state_old_get, _molset.HaEmpiricalMod_state_old_set)
    __swig_setmethods__["state_new"] = _molset.HaEmpiricalMod_state_new_set
    __swig_getmethods__["state_new"] = _molset.HaEmpiricalMod_state_new_get
    if _newclass:
        state_new = _swig_property(_molset.HaEmpiricalMod_state_new_get, _molset.HaEmpiricalMod_state_new_set)
    __swig_setmethods__["exch12"] = _molset.HaEmpiricalMod_exch12_set
    __swig_getmethods__["exch12"] = _molset.HaEmpiricalMod_exch12_get
    if _newclass:
        exch12 = _swig_property(_molset.HaEmpiricalMod_exch12_get, _molset.HaEmpiricalMod_exch12_set)
    __swig_setmethods__["curr_state"] = _molset.HaEmpiricalMod_curr_state_set
    __swig_getmethods__["curr_state"] = _molset.HaEmpiricalMod_curr_state_get
    if _newclass:
        curr_state = _swig_property(_molset.HaEmpiricalMod_curr_state_get, _molset.HaEmpiricalMod_curr_state_set)
HaEmpiricalMod_swigregister = _molset.HaEmpiricalMod_swigregister
HaEmpiricalMod_swigregister(HaEmpiricalMod)

class HaMolMembraneMod(HaCompMod):
    __swig_setmethods__ = {}
    for _s in [HaCompMod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaMolMembraneMod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaCompMod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaMolMembraneMod, name)
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset=None):
        this = _molset.new_HaMolMembraneMod(new_phost_mset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaMolMembraneMod
    __del__ = lambda self: None

    def SetStdParams(self):
        return _molset.HaMolMembraneMod_SetStdParams(self)
    __swig_setmethods__["module_to_init_flag"] = _molset.HaMolMembraneMod_module_to_init_flag_set
    __swig_getmethods__["module_to_init_flag"] = _molset.HaMolMembraneMod_module_to_init_flag_get
    if _newclass:
        module_to_init_flag = _swig_property(_molset.HaMolMembraneMod_module_to_init_flag_get, _molset.HaMolMembraneMod_module_to_init_flag_set)
    __swig_setmethods__["module_to_init_HaMolMechMod"] = _molset.HaMolMembraneMod_module_to_init_HaMolMechMod_set
    __swig_getmethods__["module_to_init_HaMolMechMod"] = _molset.HaMolMembraneMod_module_to_init_HaMolMechMod_get
    if _newclass:
        module_to_init_HaMolMechMod = _swig_property(_molset.HaMolMembraneMod_module_to_init_HaMolMechMod_get, _molset.HaMolMembraneMod_module_to_init_HaMolMechMod_set)
    __swig_setmethods__["nonbond_DFIRE_cutoff_dist"] = _molset.HaMolMembraneMod_nonbond_DFIRE_cutoff_dist_set
    __swig_getmethods__["nonbond_DFIRE_cutoff_dist"] = _molset.HaMolMembraneMod_nonbond_DFIRE_cutoff_dist_get
    if _newclass:
        nonbond_DFIRE_cutoff_dist = _swig_property(_molset.HaMolMembraneMod_nonbond_DFIRE_cutoff_dist_get, _molset.HaMolMembraneMod_nonbond_DFIRE_cutoff_dist_set)
    __swig_setmethods__["pairwiseDfire_flag"] = _molset.HaMolMembraneMod_pairwiseDfire_flag_set
    __swig_getmethods__["pairwiseDfire_flag"] = _molset.HaMolMembraneMod_pairwiseDfire_flag_get
    if _newclass:
        pairwiseDfire_flag = _swig_property(_molset.HaMolMembraneMod_pairwiseDfire_flag_get, _molset.HaMolMembraneMod_pairwiseDfire_flag_set)
    __swig_setmethods__["pairwiseDfire_core"] = _molset.HaMolMembraneMod_pairwiseDfire_core_set
    __swig_getmethods__["pairwiseDfire_core"] = _molset.HaMolMembraneMod_pairwiseDfire_core_get
    if _newclass:
        pairwiseDfire_core = _swig_property(_molset.HaMolMembraneMod_pairwiseDfire_core_get, _molset.HaMolMembraneMod_pairwiseDfire_core_set)
    __swig_setmethods__["pairwiseDfire_sa"] = _molset.HaMolMembraneMod_pairwiseDfire_sa_set
    __swig_getmethods__["pairwiseDfire_sa"] = _molset.HaMolMembraneMod_pairwiseDfire_sa_get
    if _newclass:
        pairwiseDfire_sa = _swig_property(_molset.HaMolMembraneMod_pairwiseDfire_sa_get, _molset.HaMolMembraneMod_pairwiseDfire_sa_set)
    __swig_setmethods__["build_nb_coarsegrained_contact_list"] = _molset.HaMolMembraneMod_build_nb_coarsegrained_contact_list_set
    __swig_getmethods__["build_nb_coarsegrained_contact_list"] = _molset.HaMolMembraneMod_build_nb_coarsegrained_contact_list_get
    if _newclass:
        build_nb_coarsegrained_contact_list = _swig_property(_molset.HaMolMembraneMod_build_nb_coarsegrained_contact_list_get, _molset.HaMolMembraneMod_build_nb_coarsegrained_contact_list_set)
    __swig_setmethods__["display_results_flag"] = _molset.HaMolMembraneMod_display_results_flag_set
    __swig_getmethods__["display_results_flag"] = _molset.HaMolMembraneMod_display_results_flag_get
    if _newclass:
        display_results_flag = _swig_property(_molset.HaMolMembraneMod_display_results_flag_get, _molset.HaMolMembraneMod_display_results_flag_set)

    def SetCoarseGrainedDFireCoreParams(self):
        return _molset.HaMolMembraneMod_SetCoarseGrainedDFireCoreParams(self)

    def Initialize(self):
        return _molset.HaMolMembraneMod_Initialize(self)
    __swig_setmethods__["AtomsCentroids"] = _molset.HaMolMembraneMod_AtomsCentroids_set
    __swig_getmethods__["AtomsCentroids"] = _molset.HaMolMembraneMod_AtomsCentroids_get
    if _newclass:
        AtomsCentroids = _swig_property(_molset.HaMolMembraneMod_AtomsCentroids_get, _molset.HaMolMembraneMod_AtomsCentroids_set)
    __swig_setmethods__["Residues"] = _molset.HaMolMembraneMod_Residues_set
    __swig_getmethods__["Residues"] = _molset.HaMolMembraneMod_Residues_get
    if _newclass:
        Residues = _swig_property(_molset.HaMolMembraneMod_Residues_get, _molset.HaMolMembraneMod_Residues_set)
    __swig_setmethods__["LipidInterfaceAtoms"] = _molset.HaMolMembraneMod_LipidInterfaceAtoms_set
    __swig_getmethods__["LipidInterfaceAtoms"] = _molset.HaMolMembraneMod_LipidInterfaceAtoms_get
    if _newclass:
        LipidInterfaceAtoms = _swig_property(_molset.HaMolMembraneMod_LipidInterfaceAtoms_get, _molset.HaMolMembraneMod_LipidInterfaceAtoms_set)
    __swig_setmethods__["CentreAtoms"] = _molset.HaMolMembraneMod_CentreAtoms_set
    __swig_getmethods__["CentreAtoms"] = _molset.HaMolMembraneMod_CentreAtoms_get
    if _newclass:
        CentreAtoms = _swig_property(_molset.HaMolMembraneMod_CentreAtoms_get, _molset.HaMolMembraneMod_CentreAtoms_set)

    def ClearMembraneModel(self):
        return _molset.HaMolMembraneMod_ClearMembraneModel(self)

    def BuildNonBondSCContactList(self):
        return _molset.HaMolMembraneMod_BuildNonBondSCContactList(self)
    __swig_setmethods__["nonbond_SC_contact_list"] = _molset.HaMolMembraneMod_nonbond_SC_contact_list_set
    __swig_getmethods__["nonbond_SC_contact_list"] = _molset.HaMolMembraneMod_nonbond_SC_contact_list_get
    if _newclass:
        nonbond_SC_contact_list = _swig_property(_molset.HaMolMembraneMod_nonbond_SC_contact_list_get, _molset.HaMolMembraneMod_nonbond_SC_contact_list_set)

    def BuildNonBondCAContactList(self):
        return _molset.HaMolMembraneMod_BuildNonBondCAContactList(self)
    __swig_setmethods__["nonbond_CA_contact_list"] = _molset.HaMolMembraneMod_nonbond_CA_contact_list_set
    __swig_getmethods__["nonbond_CA_contact_list"] = _molset.HaMolMembraneMod_nonbond_CA_contact_list_get
    if _newclass:
        nonbond_CA_contact_list = _swig_property(_molset.HaMolMembraneMod_nonbond_CA_contact_list_get, _molset.HaMolMembraneMod_nonbond_CA_contact_list_set)

    def BuildClashAtomList(self):
        return _molset.HaMolMembraneMod_BuildClashAtomList(self)
    __swig_setmethods__["nonbond_atom_clash_list"] = _molset.HaMolMembraneMod_nonbond_atom_clash_list_set
    __swig_getmethods__["nonbond_atom_clash_list"] = _molset.HaMolMembraneMod_nonbond_atom_clash_list_get
    if _newclass:
        nonbond_atom_clash_list = _swig_property(_molset.HaMolMembraneMod_nonbond_atom_clash_list_get, _molset.HaMolMembraneMod_nonbond_atom_clash_list_set)

    def LoadDFireCoreParams(self):
        return _molset.HaMolMembraneMod_LoadDFireCoreParams(self)
    __swig_setmethods__["la_value"] = _molset.HaMolMembraneMod_la_value_set
    __swig_getmethods__["la_value"] = _molset.HaMolMembraneMod_la_value_get
    if _newclass:
        la_value = _swig_property(_molset.HaMolMembraneMod_la_value_get, _molset.HaMolMembraneMod_la_value_set)
    __swig_setmethods__["la_weight_value"] = _molset.HaMolMembraneMod_la_weight_value_set
    __swig_getmethods__["la_weight_value"] = _molset.HaMolMembraneMod_la_weight_value_get
    if _newclass:
        la_weight_value = _swig_property(_molset.HaMolMembraneMod_la_weight_value_get, _molset.HaMolMembraneMod_la_weight_value_set)
    __swig_setmethods__["sc_vdwradius"] = _molset.HaMolMembraneMod_sc_vdwradius_set
    __swig_getmethods__["sc_vdwradius"] = _molset.HaMolMembraneMod_sc_vdwradius_get
    if _newclass:
        sc_vdwradius = _swig_property(_molset.HaMolMembraneMod_sc_vdwradius_get, _molset.HaMolMembraneMod_sc_vdwradius_set)
    __swig_setmethods__["pairwise_energy_vec"] = _molset.HaMolMembraneMod_pairwise_energy_vec_set
    __swig_getmethods__["pairwise_energy_vec"] = _molset.HaMolMembraneMod_pairwise_energy_vec_get
    if _newclass:
        pairwise_energy_vec = _swig_property(_molset.HaMolMembraneMod_pairwise_energy_vec_get, _molset.HaMolMembraneMod_pairwise_energy_vec_set)
    __swig_setmethods__["pairwise_energy_vec_sa"] = _molset.HaMolMembraneMod_pairwise_energy_vec_sa_set
    __swig_getmethods__["pairwise_energy_vec_sa"] = _molset.HaMolMembraneMod_pairwise_energy_vec_sa_get
    if _newclass:
        pairwise_energy_vec_sa = _swig_property(_molset.HaMolMembraneMod_pairwise_energy_vec_sa_get, _molset.HaMolMembraneMod_pairwise_energy_vec_sa_set)

    def ScoreEnergy(self):
        return _molset.HaMolMembraneMod_ScoreEnergy(self)
    __swig_setmethods__["pairwise_ene_cg"] = _molset.HaMolMembraneMod_pairwise_ene_cg_set
    __swig_getmethods__["pairwise_ene_cg"] = _molset.HaMolMembraneMod_pairwise_ene_cg_get
    if _newclass:
        pairwise_ene_cg = _swig_property(_molset.HaMolMembraneMod_pairwise_ene_cg_get, _molset.HaMolMembraneMod_pairwise_ene_cg_set)
    __swig_setmethods__["vdw_at_repul"] = _molset.HaMolMembraneMod_vdw_at_repul_set
    __swig_getmethods__["vdw_at_repul"] = _molset.HaMolMembraneMod_vdw_at_repul_get
    if _newclass:
        vdw_at_repul = _swig_property(_molset.HaMolMembraneMod_vdw_at_repul_get, _molset.HaMolMembraneMod_vdw_at_repul_set)
    __swig_setmethods__["vdw_ene_repul"] = _molset.HaMolMembraneMod_vdw_ene_repul_set
    __swig_getmethods__["vdw_ene_repul"] = _molset.HaMolMembraneMod_vdw_ene_repul_get
    if _newclass:
        vdw_ene_repul = _swig_property(_molset.HaMolMembraneMod_vdw_ene_repul_get, _molset.HaMolMembraneMod_vdw_ene_repul_set)
    __swig_setmethods__["lipid_polar_ene"] = _molset.HaMolMembraneMod_lipid_polar_ene_set
    __swig_getmethods__["lipid_polar_ene"] = _molset.HaMolMembraneMod_lipid_polar_ene_get
    if _newclass:
        lipid_polar_ene = _swig_property(_molset.HaMolMembraneMod_lipid_polar_ene_get, _molset.HaMolMembraneMod_lipid_polar_ene_set)
    __swig_setmethods__["constraint_ene_mol"] = _molset.HaMolMembraneMod_constraint_ene_mol_set
    __swig_getmethods__["constraint_ene_mol"] = _molset.HaMolMembraneMod_constraint_ene_mol_get
    if _newclass:
        constraint_ene_mol = _swig_property(_molset.HaMolMembraneMod_constraint_ene_mol_get, _molset.HaMolMembraneMod_constraint_ene_mol_set)
    __swig_setmethods__["constraint_ene"] = _molset.HaMolMembraneMod_constraint_ene_set
    __swig_getmethods__["constraint_ene"] = _molset.HaMolMembraneMod_constraint_ene_get
    if _newclass:
        constraint_ene = _swig_property(_molset.HaMolMembraneMod_constraint_ene_get, _molset.HaMolMembraneMod_constraint_ene_set)
    __swig_setmethods__["MAX_radius"] = _molset.HaMolMembraneMod_MAX_radius_set
    __swig_getmethods__["MAX_radius"] = _molset.HaMolMembraneMod_MAX_radius_get
    if _newclass:
        MAX_radius = _swig_property(_molset.HaMolMembraneMod_MAX_radius_get, _molset.HaMolMembraneMod_MAX_radius_set)
    __swig_setmethods__["tot_energy"] = _molset.HaMolMembraneMod_tot_energy_set
    __swig_getmethods__["tot_energy"] = _molset.HaMolMembraneMod_tot_energy_get
    if _newclass:
        tot_energy = _swig_property(_molset.HaMolMembraneMod_tot_energy_get, _molset.HaMolMembraneMod_tot_energy_set)

    def CalcVdwRep(self, pt1, pt2, vdw_at_ene):
        return _molset.HaMolMembraneMod_CalcVdwRep(self, pt1, pt2, vdw_at_ene)

    def PairwiseEnergy(self, pt1, pt2):
        return _molset.HaMolMembraneMod_PairwiseEnergy(self, pt1, pt2)
    __swig_setmethods__["vdw_x4_flag"] = _molset.HaMolMembraneMod_vdw_x4_flag_set
    __swig_getmethods__["vdw_x4_flag"] = _molset.HaMolMembraneMod_vdw_x4_flag_get
    if _newclass:
        vdw_x4_flag = _swig_property(_molset.HaMolMembraneMod_vdw_x4_flag_get, _molset.HaMolMembraneMod_vdw_x4_flag_set)
    __swig_setmethods__["vdw_x12_flag"] = _molset.HaMolMembraneMod_vdw_x12_flag_set
    __swig_getmethods__["vdw_x12_flag"] = _molset.HaMolMembraneMod_vdw_x12_flag_get
    if _newclass:
        vdw_x12_flag = _swig_property(_molset.HaMolMembraneMod_vdw_x12_flag_get, _molset.HaMolMembraneMod_vdw_x12_flag_set)
    __swig_setmethods__["vdw_x4_f_flag"] = _molset.HaMolMembraneMod_vdw_x4_f_flag_set
    __swig_getmethods__["vdw_x4_f_flag"] = _molset.HaMolMembraneMod_vdw_x4_f_flag_get
    if _newclass:
        vdw_x4_f_flag = _swig_property(_molset.HaMolMembraneMod_vdw_x4_f_flag_get, _molset.HaMolMembraneMod_vdw_x4_f_flag_set)
    __swig_setmethods__["vdw_HardSphere"] = _molset.HaMolMembraneMod_vdw_HardSphere_set
    __swig_getmethods__["vdw_HardSphere"] = _molset.HaMolMembraneMod_vdw_HardSphere_get
    if _newclass:
        vdw_HardSphere = _swig_property(_molset.HaMolMembraneMod_vdw_HardSphere_get, _molset.HaMolMembraneMod_vdw_HardSphere_set)

    def LoopClosure(self):
        return _molset.HaMolMembraneMod_LoopClosure(self)

    def EntropySCM(self):
        return _molset.HaMolMembraneMod_EntropySCM(self)

    def OPEP(self):
        return _molset.HaMolMembraneMod_OPEP(self)

    def SetCoarseGrainedOPEPParams(self):
        return _molset.HaMolMembraneMod_SetCoarseGrainedOPEPParams(self)

    def SoftSqrWellPotentiala(self, a, b, c, d):
        return _molset.HaMolMembraneMod_SoftSqrWellPotentiala(self, a, b, c, d)

    def CbettaSetUp(self):
        return _molset.HaMolMembraneMod_CbettaSetUp(self)

    def LineSegments(self):
        return _molset.HaMolMembraneMod_LineSegments(self)

    def FindAxes(self):
        return _molset.HaMolMembraneMod_FindAxes(self)
    __swig_setmethods__["angle_stat"] = _molset.HaMolMembraneMod_angle_stat_set
    __swig_getmethods__["angle_stat"] = _molset.HaMolMembraneMod_angle_stat_get
    if _newclass:
        angle_stat = _swig_property(_molset.HaMolMembraneMod_angle_stat_get, _molset.HaMolMembraneMod_angle_stat_set)
    __swig_setmethods__["stdev"] = _molset.HaMolMembraneMod_stdev_set
    __swig_getmethods__["stdev"] = _molset.HaMolMembraneMod_stdev_get
    if _newclass:
        stdev = _swig_property(_molset.HaMolMembraneMod_stdev_get, _molset.HaMolMembraneMod_stdev_set)
    __swig_setmethods__["angle_pack"] = _molset.HaMolMembraneMod_angle_pack_set
    __swig_getmethods__["angle_pack"] = _molset.HaMolMembraneMod_angle_pack_get
    if _newclass:
        angle_pack = _swig_property(_molset.HaMolMembraneMod_angle_pack_get, _molset.HaMolMembraneMod_angle_pack_set)
    __swig_setmethods__["axis_arr"] = _molset.HaMolMembraneMod_axis_arr_set
    __swig_getmethods__["axis_arr"] = _molset.HaMolMembraneMod_axis_arr_get
    if _newclass:
        axis_arr = _swig_property(_molset.HaMolMembraneMod_axis_arr_get, _molset.HaMolMembraneMod_axis_arr_set)
    __swig_setmethods__["segment_vec"] = _molset.HaMolMembraneMod_segment_vec_set
    __swig_getmethods__["segment_vec"] = _molset.HaMolMembraneMod_segment_vec_get
    if _newclass:
        segment_vec = _swig_property(_molset.HaMolMembraneMod_segment_vec_get, _molset.HaMolMembraneMod_segment_vec_set)
    __swig_setmethods__["atm_sc_array"] = _molset.HaMolMembraneMod_atm_sc_array_set
    __swig_getmethods__["atm_sc_array"] = _molset.HaMolMembraneMod_atm_sc_array_get
    if _newclass:
        atm_sc_array = _swig_property(_molset.HaMolMembraneMod_atm_sc_array_get, _molset.HaMolMembraneMod_atm_sc_array_set)
    __swig_setmethods__["atm_ca_array"] = _molset.HaMolMembraneMod_atm_ca_array_set
    __swig_getmethods__["atm_ca_array"] = _molset.HaMolMembraneMod_atm_ca_array_get
    if _newclass:
        atm_ca_array = _swig_property(_molset.HaMolMembraneMod_atm_ca_array_get, _molset.HaMolMembraneMod_atm_ca_array_set)
    __swig_setmethods__["residue_unres_arr"] = _molset.HaMolMembraneMod_residue_unres_arr_set
    __swig_getmethods__["residue_unres_arr"] = _molset.HaMolMembraneMod_residue_unres_arr_get
    if _newclass:
        residue_unres_arr = _swig_property(_molset.HaMolMembraneMod_residue_unres_arr_get, _molset.HaMolMembraneMod_residue_unres_arr_set)
    __swig_setmethods__["anglevar"] = _molset.HaMolMembraneMod_anglevar_set
    __swig_getmethods__["anglevar"] = _molset.HaMolMembraneMod_anglevar_get
    if _newclass:
        anglevar = _swig_property(_molset.HaMolMembraneMod_anglevar_get, _molset.HaMolMembraneMod_anglevar_set)
HaMolMembraneMod_swigregister = _molset.HaMolMembraneMod_swigregister
HaMolMembraneMod_swigregister(HaMolMembraneMod)


def unhash(id):
    return _molset.unhash(id)
unhash = _molset.unhash

def hash(name):
    return _molset.hash(name)
hash = _molset.hash
class HashMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashMap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_HashMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HashMap
    __del__ = lambda self: None

    def Copy(self, ref):
        return _molset.HashMap_Copy(self, ref)

    def clone(self):
        return _molset.HashMap_clone(self)

    def set_i(self, *args):
        return _molset.HashMap_set_i(self, *args)

    def set_d(self, *args):
        return _molset.HashMap_set_d(self, *args)

    def set_s(self, *args):
        return _molset.HashMap_set_s(self, *args)

    def set_a(self, *args):
        return _molset.HashMap_set_a(self, *args)

    def get_i(self, *args):
        return _molset.HashMap_get_i(self, *args)

    def get_d(self, *args):
        return _molset.HashMap_get_d(self, *args)

    def get_s(self, *args):
        return _molset.HashMap_get_s(self, *args)

    def get_a(self, *args):
        return _molset.HashMap_get_a(self, *args)

    def has_i(self, *args):
        return _molset.HashMap_has_i(self, *args)

    def has_d(self, *args):
        return _molset.HashMap_has_d(self, *args)

    def has_s(self, *args):
        return _molset.HashMap_has_s(self, *args)

    def has_a(self, *args):
        return _molset.HashMap_has_a(self, *args)
HashMap_swigregister = _molset.HashMap_swigregister
HashMap_swigregister(HashMap)

class SaveOptions(HashMap):
    __swig_setmethods__ = {}
    for _s in [HashMap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SaveOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [HashMap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SaveOptions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_SaveOptions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_SaveOptions
    __del__ = lambda self: None

    def Copy(self, ref):
        return _molset.SaveOptions_Copy(self, ref)

    def clone(self):
        return _molset.SaveOptions_clone(self)

    def ToSaveHeader(self):
        return _molset.SaveOptions_ToSaveHeader(self)

    def SetSaveHeader(self, set_par=True):
        return _molset.SaveOptions_SetSaveHeader(self, set_par)

    def ToSaveFooter(self):
        return _molset.SaveOptions_ToSaveFooter(self)

    def SetSaveFooter(self, set_par=True):
        return _molset.SaveOptions_SetSaveFooter(self, set_par)
SaveOptions_swigregister = _molset.SaveOptions_swigregister
SaveOptions_swigregister(SaveOptions)

class HaEnum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaEnum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaEnum, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def value(self):
        return _molset.HaEnum_value(self)

    def label(self):
        return _molset.HaEnum_label(self)

    def SetWithValue(self, value):
        return _molset.HaEnum_SetWithValue(self, value)

    def SetWithLabel(self, label):
        return _molset.HaEnum_SetWithLabel(self, label)

    def Bcast(self, comm, root=0):
        return _molset.HaEnum_Bcast(self, comm, root)

    def all_values(self):
        return _molset.HaEnum_all_values(self)

    def GetAllLabels(self):
        return _molset.HaEnum_GetAllLabels(self)

    def GetActiveLabels(self):
        return _molset.HaEnum_GetActiveLabels(self)
    __swig_destroy__ = _molset.delete_HaEnum
    __del__ = lambda self: None
HaEnum_swigregister = _molset.HaEnum_swigregister
HaEnum_swigregister(HaEnum)

class HaEnum1(HaEnum):
    __swig_setmethods__ = {}
    for _s in [HaEnum]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaEnum1, name, value)
    __swig_getmethods__ = {}
    for _s in [HaEnum]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaEnum1, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def all_values(self):
        return _molset.HaEnum1_all_values(self)

    def GetAllLabels(self):
        return _molset.HaEnum1_GetAllLabels(self)
    __swig_destroy__ = _molset.delete_HaEnum1
    __del__ = lambda self: None
HaEnum1_swigregister = _molset.HaEnum1_swigregister
HaEnum1_swigregister(HaEnum1)

class AtomFFParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomFFParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtomFFParam, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_AtomFFParam(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomFFParam
    __del__ = lambda self: None

    def Clear(self):
        return _molset.AtomFFParam_Clear(self)

    def LoadXml(self, xml_element, option=0):
        return _molset.AtomFFParam_LoadXml(self, xml_element, option)

    def HasDipole(self):
        return _molset.AtomFFParam_HasDipole(self)

    def HasQPole(self):
        return _molset.AtomFFParam_HasQPole(self)

    def HasPolar(self):
        return _molset.AtomFFParam_HasPolar(self)

    def HasHPolar(self):
        return _molset.AtomFFParam_HasHPolar(self)

    def HasFrameAtomNames(self):
        return _molset.AtomFFParam_HasFrameAtomNames(self)

    def IsFrameSet(self):
        return _molset.AtomFFParam_IsFrameSet(self)

    def AlterPolarizability(self):
        return _molset.AtomFFParam_AlterPolarizability(self)

    def IsPolarPositionDep(self):
        return _molset.AtomFFParam_IsPolarPositionDep(self)

    def HasScreenPolar(self):
        return _molset.AtomFFParam_HasScreenPolar(self)

    def GetCharge(self):
        return _molset.AtomFFParam_GetCharge(self)

    def GetDipole(self):
        return _molset.AtomFFParam_GetDipole(self)

    def GetQPole(self):
        return _molset.AtomFFParam_GetQPole(self)

    def IsChiralFrame(self):
        return _molset.AtomFFParam_IsChiralFrame(self)

    def IsBisectFrame(self):
        return _molset.AtomFFParam_IsBisectFrame(self)

    def SetFrameFromAtomNames(self):
        return _molset.AtomFFParam_SetFrameFromAtomNames(self)
    __swig_setmethods__["charge"] = _molset.AtomFFParam_charge_set
    __swig_getmethods__["charge"] = _molset.AtomFFParam_charge_get
    if _newclass:
        charge = _swig_property(_molset.AtomFFParam_charge_get, _molset.AtomFFParam_charge_set)
    __swig_setmethods__["dipole"] = _molset.AtomFFParam_dipole_set
    __swig_getmethods__["dipole"] = _molset.AtomFFParam_dipole_get
    if _newclass:
        dipole = _swig_property(_molset.AtomFFParam_dipole_get, _molset.AtomFFParam_dipole_set)
    __swig_setmethods__["qpole"] = _molset.AtomFFParam_qpole_set
    __swig_getmethods__["qpole"] = _molset.AtomFFParam_qpole_get
    if _newclass:
        qpole = _swig_property(_molset.AtomFFParam_qpole_get, _molset.AtomFFParam_qpole_set)
    __swig_setmethods__["polar"] = _molset.AtomFFParam_polar_set
    __swig_getmethods__["polar"] = _molset.AtomFFParam_polar_get
    if _newclass:
        polar = _swig_property(_molset.AtomFFParam_polar_get, _molset.AtomFFParam_polar_set)
    __swig_setmethods__["hpolar"] = _molset.AtomFFParam_hpolar_set
    __swig_getmethods__["hpolar"] = _molset.AtomFFParam_hpolar_get
    if _newclass:
        hpolar = _swig_property(_molset.AtomFFParam_hpolar_get, _molset.AtomFFParam_hpolar_set)
    __swig_setmethods__["damp_polar_strength"] = _molset.AtomFFParam_damp_polar_strength_set
    __swig_getmethods__["damp_polar_strength"] = _molset.AtomFFParam_damp_polar_strength_get
    if _newclass:
        damp_polar_strength = _swig_property(_molset.AtomFFParam_damp_polar_strength_get, _molset.AtomFFParam_damp_polar_strength_set)
    __swig_setmethods__["damp_polar_sensitivity"] = _molset.AtomFFParam_damp_polar_sensitivity_set
    __swig_getmethods__["damp_polar_sensitivity"] = _molset.AtomFFParam_damp_polar_sensitivity_get
    if _newclass:
        damp_polar_sensitivity = _swig_property(_molset.AtomFFParam_damp_polar_sensitivity_get, _molset.AtomFFParam_damp_polar_sensitivity_set)
    __swig_setmethods__["damp_polar_rad"] = _molset.AtomFFParam_damp_polar_rad_set
    __swig_getmethods__["damp_polar_rad"] = _molset.AtomFFParam_damp_polar_rad_get
    if _newclass:
        damp_polar_rad = _swig_property(_molset.AtomFFParam_damp_polar_rad_get, _molset.AtomFFParam_damp_polar_rad_set)
    __swig_setmethods__["screen_polar"] = _molset.AtomFFParam_screen_polar_set
    __swig_getmethods__["screen_polar"] = _molset.AtomFFParam_screen_polar_get
    if _newclass:
        screen_polar = _swig_property(_molset.AtomFFParam_screen_polar_get, _molset.AtomFFParam_screen_polar_set)
    __swig_setmethods__["at_name"] = _molset.AtomFFParam_at_name_set
    __swig_getmethods__["at_name"] = _molset.AtomFFParam_at_name_get
    if _newclass:
        at_name = _swig_property(_molset.AtomFFParam_at_name_get, _molset.AtomFFParam_at_name_set)
    __swig_setmethods__["ff_symbol"] = _molset.AtomFFParam_ff_symbol_set
    __swig_getmethods__["ff_symbol"] = _molset.AtomFFParam_ff_symbol_get
    if _newclass:
        ff_symbol = _swig_property(_molset.AtomFFParam_ff_symbol_get, _molset.AtomFFParam_ff_symbol_set)
    __swig_setmethods__["ff_polar_symbol"] = _molset.AtomFFParam_ff_polar_symbol_set
    __swig_getmethods__["ff_polar_symbol"] = _molset.AtomFFParam_ff_polar_symbol_get
    if _newclass:
        ff_polar_symbol = _swig_property(_molset.AtomFFParam_ff_polar_symbol_get, _molset.AtomFFParam_ff_polar_symbol_set)
    __swig_setmethods__["frame_atom_names"] = _molset.AtomFFParam_frame_atom_names_set
    __swig_getmethods__["frame_atom_names"] = _molset.AtomFFParam_frame_atom_names_get
    if _newclass:
        frame_atom_names = _swig_property(_molset.AtomFFParam_frame_atom_names_get, _molset.AtomFFParam_frame_atom_names_set)
    __swig_setmethods__["frame_atoms"] = _molset.AtomFFParam_frame_atoms_set
    __swig_getmethods__["frame_atoms"] = _molset.AtomFFParam_frame_atoms_get
    if _newclass:
        frame_atoms = _swig_property(_molset.AtomFFParam_frame_atoms_get, _molset.AtomFFParam_frame_atoms_set)
    __swig_setmethods__["bisect_flag"] = _molset.AtomFFParam_bisect_flag_set
    __swig_getmethods__["bisect_flag"] = _molset.AtomFFParam_bisect_flag_get
    if _newclass:
        bisect_flag = _swig_property(_molset.AtomFFParam_bisect_flag_get, _molset.AtomFFParam_bisect_flag_set)
    __swig_setmethods__["aptr_ref"] = _molset.AtomFFParam_aptr_ref_set
    __swig_getmethods__["aptr_ref"] = _molset.AtomFFParam_aptr_ref_get
    if _newclass:
        aptr_ref = _swig_property(_molset.AtomFFParam_aptr_ref_get, _molset.AtomFFParam_aptr_ref_set)
AtomFFParam_swigregister = _molset.AtomFFParam_swigregister
AtomFFParam_swigregister(AtomFFParam)

class ResFFTemplate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResFFTemplate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResFFTemplate, name)
    __repr__ = _swig_repr

    def __init__(self, p_res_templ_new):
        this = _molset.new_ResFFTemplate(p_res_templ_new)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ResFFTemplate
    __del__ = lambda self: None

    def Clear(self):
        return _molset.ResFFTemplate_Clear(self)

    def LoadXml(self, xml_element, option=0):
        return _molset.ResFFTemplate_LoadXml(self, xml_element, option)

    def GetAtomFFParam(self, at_name):
        return _molset.ResFFTemplate_GetAtomFFParam(self, at_name)

    def SetAtomFFParam(self, at_name, p_at_ff_param):
        return _molset.ResFFTemplate_SetAtomFFParam(self, at_name, p_at_ff_param)

    def SetResFFVersion(self, res_ff_version_new):
        return _molset.ResFFTemplate_SetResFFVersion(self, res_ff_version_new)

    def GetFullName(self):
        return _molset.ResFFTemplate_GetFullName(self)

    def GetResTemplate(self):
        return _molset.ResFFTemplate_GetResTemplate(self)
    __swig_setmethods__["atom_params"] = _molset.ResFFTemplate_atom_params_set
    __swig_getmethods__["atom_params"] = _molset.ResFFTemplate_atom_params_get
    if _newclass:
        atom_params = _swig_property(_molset.ResFFTemplate_atom_params_get, _molset.ResFFTemplate_atom_params_set)
    __swig_setmethods__["bonds"] = _molset.ResFFTemplate_bonds_set
    __swig_getmethods__["bonds"] = _molset.ResFFTemplate_bonds_get
    if _newclass:
        bonds = _swig_property(_molset.ResFFTemplate_bonds_get, _molset.ResFFTemplate_bonds_set)
    __swig_setmethods__["angles"] = _molset.ResFFTemplate_angles_set
    __swig_getmethods__["angles"] = _molset.ResFFTemplate_angles_get
    if _newclass:
        angles = _swig_property(_molset.ResFFTemplate_angles_get, _molset.ResFFTemplate_angles_set)
    __swig_setmethods__["dihedrals"] = _molset.ResFFTemplate_dihedrals_set
    __swig_getmethods__["dihedrals"] = _molset.ResFFTemplate_dihedrals_get
    if _newclass:
        dihedrals = _swig_property(_molset.ResFFTemplate_dihedrals_get, _molset.ResFFTemplate_dihedrals_set)
    __swig_setmethods__["improper_dihedrals"] = _molset.ResFFTemplate_improper_dihedrals_set
    __swig_getmethods__["improper_dihedrals"] = _molset.ResFFTemplate_improper_dihedrals_get
    if _newclass:
        improper_dihedrals = _swig_property(_molset.ResFFTemplate_improper_dihedrals_get, _molset.ResFFTemplate_improper_dihedrals_set)
ResFFTemplate_swigregister = _molset.ResFFTemplate_swigregister
ResFFTemplate_swigregister(ResFFTemplate)

class MMBond(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMBond, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MMBond, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_MMBond(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_MMBond
    __del__ = lambda self: None

    def __eq__(self, rhs):
        return _molset.MMBond___eq__(self, rhs)

    def __lt__(self, rhs):
        return _molset.MMBond___lt__(self, rhs)
    __swig_setmethods__["r0"] = _molset.MMBond_r0_set
    __swig_getmethods__["r0"] = _molset.MMBond_r0_get
    if _newclass:
        r0 = _swig_property(_molset.MMBond_r0_get, _molset.MMBond_r0_set)
    __swig_setmethods__["fc"] = _molset.MMBond_fc_set
    __swig_getmethods__["fc"] = _molset.MMBond_fc_get
    if _newclass:
        fc = _swig_property(_molset.MMBond_fc_get, _molset.MMBond_fc_set)
    __swig_setmethods__["set_type"] = _molset.MMBond_set_type_set
    __swig_getmethods__["set_type"] = _molset.MMBond_set_type_get
    if _newclass:
        set_type = _swig_property(_molset.MMBond_set_type_get, _molset.MMBond_set_type_set)
    __swig_setmethods__["pt1"] = _molset.MMBond_pt1_set
    __swig_getmethods__["pt1"] = _molset.MMBond_pt1_get
    if _newclass:
        pt1 = _swig_property(_molset.MMBond_pt1_get, _molset.MMBond_pt1_set)
    __swig_setmethods__["pt2"] = _molset.MMBond_pt2_set
    __swig_getmethods__["pt2"] = _molset.MMBond_pt2_get
    if _newclass:
        pt2 = _swig_property(_molset.MMBond_pt2_get, _molset.MMBond_pt2_set)
MMBond_swigregister = _molset.MMBond_swigregister
MMBond_swigregister(MMBond)

class MMValAngle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMValAngle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MMValAngle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_MMValAngle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_MMValAngle
    __del__ = lambda self: None
    __swig_setmethods__["pt1"] = _molset.MMValAngle_pt1_set
    __swig_getmethods__["pt1"] = _molset.MMValAngle_pt1_get
    if _newclass:
        pt1 = _swig_property(_molset.MMValAngle_pt1_get, _molset.MMValAngle_pt1_set)
    __swig_setmethods__["pt2"] = _molset.MMValAngle_pt2_set
    __swig_getmethods__["pt2"] = _molset.MMValAngle_pt2_get
    if _newclass:
        pt2 = _swig_property(_molset.MMValAngle_pt2_get, _molset.MMValAngle_pt2_set)
    __swig_setmethods__["pt3"] = _molset.MMValAngle_pt3_set
    __swig_getmethods__["pt3"] = _molset.MMValAngle_pt3_get
    if _newclass:
        pt3 = _swig_property(_molset.MMValAngle_pt3_get, _molset.MMValAngle_pt3_set)
    __swig_setmethods__["a0"] = _molset.MMValAngle_a0_set
    __swig_getmethods__["a0"] = _molset.MMValAngle_a0_get
    if _newclass:
        a0 = _swig_property(_molset.MMValAngle_a0_get, _molset.MMValAngle_a0_set)
    __swig_setmethods__["fc"] = _molset.MMValAngle_fc_set
    __swig_getmethods__["fc"] = _molset.MMValAngle_fc_get
    if _newclass:
        fc = _swig_property(_molset.MMValAngle_fc_get, _molset.MMValAngle_fc_set)
    __swig_setmethods__["set_type"] = _molset.MMValAngle_set_type_set
    __swig_getmethods__["set_type"] = _molset.MMValAngle_set_type_get
    if _newclass:
        set_type = _swig_property(_molset.MMValAngle_set_type_get, _molset.MMValAngle_set_type_set)

    def __eq__(self, rhs):
        return _molset.MMValAngle___eq__(self, rhs)

    def __lt__(self, rhs):
        return _molset.MMValAngle___lt__(self, rhs)
MMValAngle_swigregister = _molset.MMValAngle_swigregister
MMValAngle_swigregister(MMValAngle)

class MMDihedral(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMDihedral, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MMDihedral, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_MMDihedral(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_MMDihedral
    __del__ = lambda self: None
    __swig_setmethods__["improper"] = _molset.MMDihedral_improper_set
    __swig_getmethods__["improper"] = _molset.MMDihedral_improper_get
    if _newclass:
        improper = _swig_property(_molset.MMDihedral_improper_get, _molset.MMDihedral_improper_set)
    __swig_setmethods__["calc_14"] = _molset.MMDihedral_calc_14_set
    __swig_getmethods__["calc_14"] = _molset.MMDihedral_calc_14_get
    if _newclass:
        calc_14 = _swig_property(_molset.MMDihedral_calc_14_get, _molset.MMDihedral_calc_14_set)
    __swig_setmethods__["pt1"] = _molset.MMDihedral_pt1_set
    __swig_getmethods__["pt1"] = _molset.MMDihedral_pt1_get
    if _newclass:
        pt1 = _swig_property(_molset.MMDihedral_pt1_get, _molset.MMDihedral_pt1_set)
    __swig_setmethods__["pt2"] = _molset.MMDihedral_pt2_set
    __swig_getmethods__["pt2"] = _molset.MMDihedral_pt2_get
    if _newclass:
        pt2 = _swig_property(_molset.MMDihedral_pt2_get, _molset.MMDihedral_pt2_set)
    __swig_setmethods__["pt3"] = _molset.MMDihedral_pt3_set
    __swig_getmethods__["pt3"] = _molset.MMDihedral_pt3_get
    if _newclass:
        pt3 = _swig_property(_molset.MMDihedral_pt3_get, _molset.MMDihedral_pt3_set)
    __swig_setmethods__["pt4"] = _molset.MMDihedral_pt4_set
    __swig_getmethods__["pt4"] = _molset.MMDihedral_pt4_get
    if _newclass:
        pt4 = _swig_property(_molset.MMDihedral_pt4_get, _molset.MMDihedral_pt4_set)
    __swig_setmethods__["set_type"] = _molset.MMDihedral_set_type_set
    __swig_getmethods__["set_type"] = _molset.MMDihedral_set_type_get
    if _newclass:
        set_type = _swig_property(_molset.MMDihedral_set_type_get, _molset.MMDihedral_set_type_set)

    def GetNTerms(self):
        return _molset.MMDihedral_GetNTerms(self)

    def ClearParams(self):
        return _molset.MMDihedral_ClearParams(self)
    __swig_setmethods__["pn"] = _molset.MMDihedral_pn_set
    __swig_getmethods__["pn"] = _molset.MMDihedral_pn_get
    if _newclass:
        pn = _swig_property(_molset.MMDihedral_pn_get, _molset.MMDihedral_pn_set)
    __swig_setmethods__["phase"] = _molset.MMDihedral_phase_set
    __swig_getmethods__["phase"] = _molset.MMDihedral_phase_get
    if _newclass:
        phase = _swig_property(_molset.MMDihedral_phase_get, _molset.MMDihedral_phase_set)
    __swig_setmethods__["pk"] = _molset.MMDihedral_pk_set
    __swig_getmethods__["pk"] = _molset.MMDihedral_pk_get
    if _newclass:
        pk = _swig_property(_molset.MMDihedral_pk_get, _molset.MMDihedral_pk_set)
    __swig_setmethods__["idivf"] = _molset.MMDihedral_idivf_set
    __swig_getmethods__["idivf"] = _molset.MMDihedral_idivf_get
    if _newclass:
        idivf = _swig_property(_molset.MMDihedral_idivf_get, _molset.MMDihedral_idivf_set)

    def AddTerm(self, pn_new, phase_new, pk_new, idivf_new=1.0):
        return _molset.MMDihedral_AddTerm(self, pn_new, phase_new, pk_new, idivf_new)

    def __eq__(self, rhs):
        return _molset.MMDihedral___eq__(self, rhs)

    def __lt__(self, rhs):
        return _molset.MMDihedral___lt__(self, rhs)
MMDihedral_swigregister = _molset.MMDihedral_swigregister
MMDihedral_swigregister(MMDihedral)

class AtomContact(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomContact, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtomContact, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_AtomContact(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomContact
    __del__ = lambda self: None

    def __eq__(self, rhs):
        return _molset.AtomContact___eq__(self, rhs)

    def __lt__(self, rhs):
        return _molset.AtomContact___lt__(self, rhs)
    __swig_setmethods__["cf"] = _molset.AtomContact_cf_set
    __swig_getmethods__["cf"] = _molset.AtomContact_cf_get
    if _newclass:
        cf = _swig_property(_molset.AtomContact_cf_get, _molset.AtomContact_cf_set)
    __swig_setmethods__["cnt_type"] = _molset.AtomContact_cnt_type_set
    __swig_getmethods__["cnt_type"] = _molset.AtomContact_cnt_type_get
    if _newclass:
        cnt_type = _swig_property(_molset.AtomContact_cnt_type_get, _molset.AtomContact_cnt_type_set)

    def SetParamsEneR(self, ene_min, rmin):
        return _molset.AtomContact_SetParamsEneR(self, ene_min, rmin)

    def GetRMin(self):
        return _molset.AtomContact_GetRMin(self)

    def GetEneMin(self):
        return _molset.AtomContact_GetEneMin(self)

    def GetHarmForceConst(self):
        return _molset.AtomContact_GetHarmForceConst(self)

    def IsHarmonic(self):
        return _molset.AtomContact_IsHarmonic(self)
    __swig_setmethods__["set_type"] = _molset.AtomContact_set_type_set
    __swig_getmethods__["set_type"] = _molset.AtomContact_set_type_get
    if _newclass:
        set_type = _swig_property(_molset.AtomContact_set_type_get, _molset.AtomContact_set_type_set)
    __swig_setmethods__["pt1"] = _molset.AtomContact_pt1_set
    __swig_getmethods__["pt1"] = _molset.AtomContact_pt1_get
    if _newclass:
        pt1 = _swig_property(_molset.AtomContact_pt1_get, _molset.AtomContact_pt1_set)
    __swig_setmethods__["pt2"] = _molset.AtomContact_pt2_set
    __swig_getmethods__["pt2"] = _molset.AtomContact_pt2_get
    if _newclass:
        pt2 = _swig_property(_molset.AtomContact_pt2_get, _molset.AtomContact_pt2_set)
AtomContact_swigregister = _molset.AtomContact_swigregister
AtomContact_swigregister(AtomContact)

class vector_MMDihedral(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_MMDihedral, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_MMDihedral, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _molset.vector_MMDihedral_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _molset.vector_MMDihedral___nonzero__(self)

    def __bool__(self):
        return _molset.vector_MMDihedral___bool__(self)

    def __len__(self):
        return _molset.vector_MMDihedral___len__(self)

    def __getslice__(self, i, j):
        return _molset.vector_MMDihedral___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _molset.vector_MMDihedral___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _molset.vector_MMDihedral___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _molset.vector_MMDihedral___delitem__(self, *args)

    def __getitem__(self, *args):
        return _molset.vector_MMDihedral___getitem__(self, *args)

    def __setitem__(self, *args):
        return _molset.vector_MMDihedral___setitem__(self, *args)

    def pop(self):
        return _molset.vector_MMDihedral_pop(self)

    def append(self, x):
        return _molset.vector_MMDihedral_append(self, x)

    def empty(self):
        return _molset.vector_MMDihedral_empty(self)

    def size(self):
        return _molset.vector_MMDihedral_size(self)

    def swap(self, v):
        return _molset.vector_MMDihedral_swap(self, v)

    def begin(self):
        return _molset.vector_MMDihedral_begin(self)

    def end(self):
        return _molset.vector_MMDihedral_end(self)

    def rbegin(self):
        return _molset.vector_MMDihedral_rbegin(self)

    def rend(self):
        return _molset.vector_MMDihedral_rend(self)

    def clear(self):
        return _molset.vector_MMDihedral_clear(self)

    def get_allocator(self):
        return _molset.vector_MMDihedral_get_allocator(self)

    def pop_back(self):
        return _molset.vector_MMDihedral_pop_back(self)

    def erase(self, *args):
        return _molset.vector_MMDihedral_erase(self, *args)

    def __init__(self, *args):
        this = _molset.new_vector_MMDihedral(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _molset.vector_MMDihedral_push_back(self, x)

    def front(self):
        return _molset.vector_MMDihedral_front(self)

    def back(self):
        return _molset.vector_MMDihedral_back(self)

    def assign(self, n, x):
        return _molset.vector_MMDihedral_assign(self, n, x)

    def resize(self, *args):
        return _molset.vector_MMDihedral_resize(self, *args)

    def insert(self, *args):
        return _molset.vector_MMDihedral_insert(self, *args)

    def reserve(self, n):
        return _molset.vector_MMDihedral_reserve(self, n)

    def capacity(self):
        return _molset.vector_MMDihedral_capacity(self)
    __swig_destroy__ = _molset.delete_vector_MMDihedral
    __del__ = lambda self: None
vector_MMDihedral_swigregister = _molset.vector_MMDihedral_swigregister
vector_MMDihedral_swigregister(vector_MMDihedral)

class vector_VdWContact(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_VdWContact, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_VdWContact, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _molset.vector_VdWContact_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _molset.vector_VdWContact___nonzero__(self)

    def __bool__(self):
        return _molset.vector_VdWContact___bool__(self)

    def __len__(self):
        return _molset.vector_VdWContact___len__(self)

    def __getslice__(self, i, j):
        return _molset.vector_VdWContact___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _molset.vector_VdWContact___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _molset.vector_VdWContact___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _molset.vector_VdWContact___delitem__(self, *args)

    def __getitem__(self, *args):
        return _molset.vector_VdWContact___getitem__(self, *args)

    def __setitem__(self, *args):
        return _molset.vector_VdWContact___setitem__(self, *args)

    def pop(self):
        return _molset.vector_VdWContact_pop(self)

    def append(self, x):
        return _molset.vector_VdWContact_append(self, x)

    def empty(self):
        return _molset.vector_VdWContact_empty(self)

    def size(self):
        return _molset.vector_VdWContact_size(self)

    def swap(self, v):
        return _molset.vector_VdWContact_swap(self, v)

    def begin(self):
        return _molset.vector_VdWContact_begin(self)

    def end(self):
        return _molset.vector_VdWContact_end(self)

    def rbegin(self):
        return _molset.vector_VdWContact_rbegin(self)

    def rend(self):
        return _molset.vector_VdWContact_rend(self)

    def clear(self):
        return _molset.vector_VdWContact_clear(self)

    def get_allocator(self):
        return _molset.vector_VdWContact_get_allocator(self)

    def pop_back(self):
        return _molset.vector_VdWContact_pop_back(self)

    def erase(self, *args):
        return _molset.vector_VdWContact_erase(self, *args)

    def __init__(self, *args):
        this = _molset.new_vector_VdWContact(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _molset.vector_VdWContact_push_back(self, x)

    def front(self):
        return _molset.vector_VdWContact_front(self)

    def back(self):
        return _molset.vector_VdWContact_back(self)

    def assign(self, n, x):
        return _molset.vector_VdWContact_assign(self, n, x)

    def resize(self, *args):
        return _molset.vector_VdWContact_resize(self, *args)

    def insert(self, *args):
        return _molset.vector_VdWContact_insert(self, *args)

    def reserve(self, n):
        return _molset.vector_VdWContact_reserve(self, n)

    def capacity(self):
        return _molset.vector_VdWContact_capacity(self)
    __swig_destroy__ = _molset.delete_vector_VdWContact
    __del__ = lambda self: None
vector_VdWContact_swigregister = _molset.vector_VdWContact_swigregister
vector_VdWContact_swigregister(vector_VdWContact)

class vector_MMBond(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_MMBond, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_MMBond, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _molset.vector_MMBond_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _molset.vector_MMBond___nonzero__(self)

    def __bool__(self):
        return _molset.vector_MMBond___bool__(self)

    def __len__(self):
        return _molset.vector_MMBond___len__(self)

    def __getslice__(self, i, j):
        return _molset.vector_MMBond___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _molset.vector_MMBond___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _molset.vector_MMBond___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _molset.vector_MMBond___delitem__(self, *args)

    def __getitem__(self, *args):
        return _molset.vector_MMBond___getitem__(self, *args)

    def __setitem__(self, *args):
        return _molset.vector_MMBond___setitem__(self, *args)

    def pop(self):
        return _molset.vector_MMBond_pop(self)

    def append(self, x):
        return _molset.vector_MMBond_append(self, x)

    def empty(self):
        return _molset.vector_MMBond_empty(self)

    def size(self):
        return _molset.vector_MMBond_size(self)

    def swap(self, v):
        return _molset.vector_MMBond_swap(self, v)

    def begin(self):
        return _molset.vector_MMBond_begin(self)

    def end(self):
        return _molset.vector_MMBond_end(self)

    def rbegin(self):
        return _molset.vector_MMBond_rbegin(self)

    def rend(self):
        return _molset.vector_MMBond_rend(self)

    def clear(self):
        return _molset.vector_MMBond_clear(self)

    def get_allocator(self):
        return _molset.vector_MMBond_get_allocator(self)

    def pop_back(self):
        return _molset.vector_MMBond_pop_back(self)

    def erase(self, *args):
        return _molset.vector_MMBond_erase(self, *args)

    def __init__(self, *args):
        this = _molset.new_vector_MMBond(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _molset.vector_MMBond_push_back(self, x)

    def front(self):
        return _molset.vector_MMBond_front(self)

    def back(self):
        return _molset.vector_MMBond_back(self)

    def assign(self, n, x):
        return _molset.vector_MMBond_assign(self, n, x)

    def resize(self, *args):
        return _molset.vector_MMBond_resize(self, *args)

    def insert(self, *args):
        return _molset.vector_MMBond_insert(self, *args)

    def reserve(self, n):
        return _molset.vector_MMBond_reserve(self, n)

    def capacity(self):
        return _molset.vector_MMBond_capacity(self)
    __swig_destroy__ = _molset.delete_vector_MMBond
    __del__ = lambda self: None
vector_MMBond_swigregister = _molset.vector_MMBond_swigregister
vector_MMBond_swigregister(vector_MMBond)

class MolMechModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MolMechModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MolMechModel, name)
    __repr__ = _swig_repr

    def __init__(self, p_mm_mod_new):
        this = _molset.new_MolMechModel(p_mm_mod_new)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_MolMechModel
    __del__ = lambda self: None

    def InitModel(self, *args):
        return _molset.MolMechModel_InitModel(self, *args)

    def UpdateModel(self):
        return _molset.MolMechModel_UpdateModel(self)

    def Clear(self):
        return _molset.MolMechModel_Clear(self)

    def SetStdParams(self):
        return _molset.MolMechModel_SetStdParams(self)

    def UpdateConstraints(self):
        return _molset.MolMechModel_UpdateConstraints(self)

    def UpdateConstraints_2(self):
        return _molset.MolMechModel_UpdateConstraints_2(self)

    def ClearMortModel(self):
        return _molset.MolMechModel_ClearMortModel(self)

    def Bcast(self, comm):
        return _molset.MolMechModel_Bcast(self, comm)

    def SaveXMLToStream(self, os, popt=None):
        return _molset.MolMechModel_SaveXMLToStream(self, os, popt)

    def GetMolSet(self, *args):
        return _molset.MolMechModel_GetMolSet(self, *args)
    __swig_setmethods__["ff_type"] = _molset.MolMechModel_ff_type_set
    __swig_getmethods__["ff_type"] = _molset.MolMechModel_ff_type_get
    if _newclass:
        ff_type = _swig_property(_molset.MolMechModel_ff_type_get, _molset.MolMechModel_ff_type_set)
    __swig_setmethods__["to_init_mm_model"] = _molset.MolMechModel_to_init_mm_model_set
    __swig_getmethods__["to_init_mm_model"] = _molset.MolMechModel_to_init_mm_model_get
    if _newclass:
        to_init_mm_model = _swig_property(_molset.MolMechModel_to_init_mm_model_get, _molset.MolMechModel_to_init_mm_model_set)

    def IsAmoebaFF(self):
        return _molset.MolMechModel_IsAmoebaFF(self)
    NOT_SET = _molset.MolMechModel_NOT_SET
    SET_DEFAULT = _molset.MolMechModel_SET_DEFAULT
    SET_FF_FIELD = _molset.MolMechModel_SET_FF_FIELD
    SET_RES_TEMPL = _molset.MolMechModel_SET_RES_TEMPL
    SET_SPEC = _molset.MolMechModel_SET_SPEC

    def GetNA(self):
        return _molset.MolMechModel_GetNA(self)
    __swig_setmethods__["Atoms"] = _molset.MolMechModel_Atoms_set
    __swig_getmethods__["Atoms"] = _molset.MolMechModel_Atoms_get
    if _newclass:
        Atoms = _swig_property(_molset.MolMechModel_Atoms_get, _molset.MolMechModel_Atoms_set)
    __swig_setmethods__["MBonds"] = _molset.MolMechModel_MBonds_set
    __swig_getmethods__["MBonds"] = _molset.MolMechModel_MBonds_get
    if _newclass:
        MBonds = _swig_property(_molset.MolMechModel_MBonds_get, _molset.MolMechModel_MBonds_set)
    __swig_setmethods__["ValAngles"] = _molset.MolMechModel_ValAngles_set
    __swig_getmethods__["ValAngles"] = _molset.MolMechModel_ValAngles_get
    if _newclass:
        ValAngles = _swig_property(_molset.MolMechModel_ValAngles_get, _molset.MolMechModel_ValAngles_set)
    __swig_setmethods__["Dihedrals"] = _molset.MolMechModel_Dihedrals_set
    __swig_getmethods__["Dihedrals"] = _molset.MolMechModel_Dihedrals_get
    if _newclass:
        Dihedrals = _swig_property(_molset.MolMechModel_Dihedrals_get, _molset.MolMechModel_Dihedrals_set)
    __swig_setmethods__["ImprDihedrals"] = _molset.MolMechModel_ImprDihedrals_set
    __swig_getmethods__["ImprDihedrals"] = _molset.MolMechModel_ImprDihedrals_get
    if _newclass:
        ImprDihedrals = _swig_property(_molset.MolMechModel_ImprDihedrals_get, _molset.MolMechModel_ImprDihedrals_set)
    __swig_setmethods__["excluded_atom_list"] = _molset.MolMechModel_excluded_atom_list_set
    __swig_getmethods__["excluded_atom_list"] = _molset.MolMechModel_excluded_atom_list_get
    if _newclass:
        excluded_atom_list = _swig_property(_molset.MolMechModel_excluded_atom_list_get, _molset.MolMechModel_excluded_atom_list_set)
    __swig_setmethods__["nonbond_contact_list"] = _molset.MolMechModel_nonbond_contact_list_set
    __swig_getmethods__["nonbond_contact_list"] = _molset.MolMechModel_nonbond_contact_list_get
    if _newclass:
        nonbond_contact_list = _swig_property(_molset.MolMechModel_nonbond_contact_list_get, _molset.MolMechModel_nonbond_contact_list_set)

    def GetAtIdxMap(self, recalc=0):
        return _molset.MolMechModel_GetAtIdxMap(self, recalc)
    __swig_setmethods__["at_idx_map"] = _molset.MolMechModel_at_idx_map_set
    __swig_getmethods__["at_idx_map"] = _molset.MolMechModel_at_idx_map_get
    if _newclass:
        at_idx_map = _swig_property(_molset.MolMechModel_at_idx_map_get, _molset.MolMechModel_at_idx_map_set)

    def GetMMBond(self, pt1, pt2):
        return _molset.MolMechModel_GetMMBond(self, pt1, pt2)

    def GetValAngle(self, pt1, pt2, pt3):
        return _molset.MolMechModel_GetValAngle(self, pt1, pt2, pt3)

    def GetDihedral(self, pt1, pt2, pt3, pt4):
        return _molset.MolMechModel_GetDihedral(self, pt1, pt2, pt3, pt4)

    def GetImprDihedral(self, pt1, pt2, pt3, pt4):
        return _molset.MolMechModel_GetImprDihedral(self, pt1, pt2, pt3, pt4)

    def SetMMBond(self, *args):
        return _molset.MolMechModel_SetMMBond(self, *args)

    def SetValAngle(self, *args):
        return _molset.MolMechModel_SetValAngle(self, *args)

    def AddImprDihedral(self, pt1, pt2, pt3, pt4):
        return _molset.MolMechModel_AddImprDihedral(self, pt1, pt2, pt3, pt4)
    __swig_setmethods__["res_impr_dih_map"] = _molset.MolMechModel_res_impr_dih_map_set
    __swig_getmethods__["res_impr_dih_map"] = _molset.MolMechModel_res_impr_dih_map_get
    if _newclass:
        res_impr_dih_map = _swig_property(_molset.MolMechModel_res_impr_dih_map_get, _molset.MolMechModel_res_impr_dih_map_set)

    def SetUseMortLib(self, set_par):
        return _molset.MolMechModel_SetUseMortLib(self, set_par)
    __swig_setmethods__["build_nb_contact_list_flag"] = _molset.MolMechModel_build_nb_contact_list_flag_set
    __swig_getmethods__["build_nb_contact_list_flag"] = _molset.MolMechModel_build_nb_contact_list_flag_get
    if _newclass:
        build_nb_contact_list_flag = _swig_property(_molset.MolMechModel_build_nb_contact_list_flag_get, _molset.MolMechModel_build_nb_contact_list_flag_set)
    __swig_setmethods__["init_charges_flag"] = _molset.MolMechModel_init_charges_flag_set
    __swig_getmethods__["init_charges_flag"] = _molset.MolMechModel_init_charges_flag_get
    if _newclass:
        init_charges_flag = _swig_property(_molset.MolMechModel_init_charges_flag_get, _molset.MolMechModel_init_charges_flag_set)
    __swig_setmethods__["setup_params_from_mort_flag"] = _molset.MolMechModel_setup_params_from_mort_flag_set
    __swig_getmethods__["setup_params_from_mort_flag"] = _molset.MolMechModel_setup_params_from_mort_flag_get
    if _newclass:
        setup_params_from_mort_flag = _swig_property(_molset.MolMechModel_setup_params_from_mort_flag_get, _molset.MolMechModel_setup_params_from_mort_flag_set)

    def SetCoarseGrainedOPEPParams(self):
        return _molset.MolMechModel_SetCoarseGrainedOPEPParams(self)

    def SetCoarseGrainedDNAParams(self):
        return _molset.MolMechModel_SetCoarseGrainedDNAParams(self)

    def SetCoarseGrainedAAParams(self):
        return _molset.MolMechModel_SetCoarseGrainedAAParams(self)

    def SetStdValParams(self):
        return _molset.MolMechModel_SetStdValParams(self)

    def SetStdVdWParams(self):
        return _molset.MolMechModel_SetStdVdWParams(self)

    def AddAtomsToExcludedAtomList(self, aptr1, aptr2, atoms_idx):
        return _molset.MolMechModel_AddAtomsToExcludedAtomList(self, aptr1, aptr2, atoms_idx)

    def BuildExcludedAtomList(self):
        return _molset.MolMechModel_BuildExcludedAtomList(self)

    def BuildNonBondContactList(self):
        return _molset.MolMechModel_BuildNonBondContactList(self)

    def BuildGrpGrpExcludedList(self, group1, group2):
        return _molset.MolMechModel_BuildGrpGrpExcludedList(self, group1, group2)

    def BuildGrpGrpNonBondList(self, group1, group2):
        return _molset.MolMechModel_BuildGrpGrpNonBondList(self, group1, group2)

    def GetResImprAngles(self, pres, res_idih_list):
        return _molset.MolMechModel_GetResImprAngles(self, pres, res_idih_list)

    def Set14interDihFlags(self):
        return _molset.MolMechModel_Set14interDihFlags(self)

    def SetBoundaryBox(self, offset=0.0):
        return _molset.MolMechModel_SetBoundaryBox(self, offset)

    def CalcNonBondPt(self, pt1, pt2, vdw_at_ene, el_at_ene):
        return _molset.MolMechModel_CalcNonBondPt(self, pt1, pt2, vdw_at_ene, el_at_ene)

    def SetOmitInteractionsParam(self, omit_interactions_new):
        return _molset.MolMechModel_SetOmitInteractionsParam(self, omit_interactions_new)

    def SetMMElectrMethod(self, electr_method_new):
        return _molset.MolMechModel_SetMMElectrMethod(self, electr_method_new)

    def SetCalcDirectInter(self, set_par=True):
        return _molset.MolMechModel_SetCalcDirectInter(self, set_par)

    def SetCalcRecipSpaceInter(self, set_par=True):
        return _molset.MolMechModel_SetCalcRecipSpaceInter(self, set_par)

    def SetCalcSelfInter(self, set_par=True):
        return _molset.MolMechModel_SetCalcSelfInter(self, set_par)

    def SetCalcAdjustInter(self, set_par=True):
        return _molset.MolMechModel_SetCalcAdjustInter(self, set_par)

    def SetCalcVdWInter(self, set_par=True):
        return _molset.MolMechModel_SetCalcVdWInter(self, set_par)

    def SetCalcInducedInter(self, set_par=True):
        return _molset.MolMechModel_SetCalcInducedInter(self, set_par)

    def GetScale14Electr(self):
        return _molset.MolMechModel_GetScale14Electr(self)

    def GetScale14VdW(self):
        return _molset.MolMechModel_GetScale14VdW(self)

    def GetNBCutDist(self):
        return _molset.MolMechModel_GetNBCutDist(self)

    def GetDielConst(self):
        return _molset.MolMechModel_GetDielConst(self)

    def GetIonStrength(self):
        return _molset.MolMechModel_GetIonStrength(self)

    def GetDipoleScfIterMax(self):
        return _molset.MolMechModel_GetDipoleScfIterMax(self)

    def GetDipoleScfTol(self):
        return _molset.MolMechModel_GetDipoleScfTol(self)

    def GetEEDsumCut(self):
        return _molset.MolMechModel_GetEEDsumCut(self)

    def GetEEDampedCut(self):
        return _molset.MolMechModel_GetEEDampedCut(self)

    def GetSorCoef(self):
        return _molset.MolMechModel_GetSorCoef(self)

    def GetTholeExponCoef(self):
        return _molset.MolMechModel_GetTholeExponCoef(self)

    def GetVdwTaper(self):
        return _molset.MolMechModel_GetVdwTaper(self)

    def SetScale14Electr(self, scale_14_electr_new):
        return _molset.MolMechModel_SetScale14Electr(self, scale_14_electr_new)

    def SetScale14VdW(self, scale_14_vdw_new):
        return _molset.MolMechModel_SetScale14VdW(self, scale_14_vdw_new)

    def SetScale14Inter(self, scale_14):
        return _molset.MolMechModel_SetScale14Inter(self, scale_14)

    def SetNBCutDist(self, nb_cut_dist_new):
        return _molset.MolMechModel_SetNBCutDist(self, nb_cut_dist_new)

    def SetDielConst(self, diel_const_new):
        return _molset.MolMechModel_SetDielConst(self, diel_const_new)

    def SetIonStrength(self, ion_strength_new):
        return _molset.MolMechModel_SetIonStrength(self, ion_strength_new)

    def SetDipoleScfIterMax(self, dipole_scf_iter_max_new):
        return _molset.MolMechModel_SetDipoleScfIterMax(self, dipole_scf_iter_max_new)

    def SetDipoleScfTol(self, dipole_scf_tol_new):
        return _molset.MolMechModel_SetDipoleScfTol(self, dipole_scf_tol_new)

    def SetEEDsumCut(self, ee_dsum_cut_new):
        return _molset.MolMechModel_SetEEDsumCut(self, ee_dsum_cut_new)

    def SetEEDampedCut(self, ee_damped_cut_new):
        return _molset.MolMechModel_SetEEDampedCut(self, ee_damped_cut_new)

    def SetSorCoef(self, sor_coef_new):
        return _molset.MolMechModel_SetSorCoef(self, sor_coef_new)

    def SetTholeExponCoef(self, thole_expon_coeff_new):
        return _molset.MolMechModel_SetTholeExponCoef(self, thole_expon_coeff_new)

    def SetVdwTaper(self, vdw_taper_new):
        return _molset.MolMechModel_SetVdwTaper(self, vdw_taper_new)
    BONDI_GB_PARAM = _molset.MolMechModel_BONDI_GB_PARAM
    AMBER6_BONDI_GB_PARAM = _molset.MolMechModel_AMBER6_BONDI_GB_PARAM
    MOD_BONDI_GB_PARAM = _molset.MolMechModel_MOD_BONDI_GB_PARAM
    HUO_KOLLMAN_GB_PARAM = _molset.MolMechModel_HUO_KOLLMAN_GB_PARAM
    JAYARAM_GB_PARAM = _molset.MolMechModel_JAYARAM_GB_PARAM
    MOD_JAYARAM_GB_PARAM = _molset.MolMechModel_MOD_JAYARAM_GB_PARAM
    HN_MOD_BONDI_GB_PARAM = _molset.MolMechModel_HN_MOD_BONDI_GB_PARAM
    __swig_setmethods__["gb_param_type"] = _molset.MolMechModel_gb_param_type_set
    __swig_getmethods__["gb_param_type"] = _molset.MolMechModel_gb_param_type_get
    if _newclass:
        gb_param_type = _swig_property(_molset.MolMechModel_gb_param_type_get, _molset.MolMechModel_gb_param_type_set)
    if _newclass:
        GetGBAtomRad = staticmethod(_molset.MolMechModel_GetGBAtomRad)
    else:
        GetGBAtomRad = _molset.MolMechModel_GetGBAtomRad
    if _newclass:
        GetGBAtomScreening = staticmethod(_molset.MolMechModel_GetGBAtomScreening)
    else:
        GetGBAtomScreening = _molset.MolMechModel_GetGBAtomScreening

    def SetMovingAtoms(self, mov_atom_array_name):
        return _molset.MolMechModel_SetMovingAtoms(self, mov_atom_array_name)

    def SetMoveAll(self):
        return _molset.MolMechModel_SetMoveAll(self)

    def GetMovingAtoms(self):
        return _molset.MolMechModel_GetMovingAtoms(self)
    __swig_setmethods__["moving_atoms"] = _molset.MolMechModel_moving_atoms_set
    __swig_getmethods__["moving_atoms"] = _molset.MolMechModel_moving_atoms_get
    if _newclass:
        moving_atoms = _swig_property(_molset.MolMechModel_moving_atoms_get, _molset.MolMechModel_moving_atoms_set)

    def SetRestrainedAtoms(self, restr_atom_group_name):
        return _molset.MolMechModel_SetRestrainedAtoms(self, restr_atom_group_name)

    def GetRestrAtoms(self):
        return _molset.MolMechModel_GetRestrAtoms(self)

    def SaveAtomRestrArbalestIndForm(self, restr_desc_fname, restr_list_fname):
        return _molset.MolMechModel_SaveAtomRestrArbalestIndForm(self, restr_desc_fname, restr_list_fname)

    def SetRestrRefCrdFromXYZFile(self, ref_crd_file_name_new):
        return _molset.MolMechModel_SetRestrRefCrdFromXYZFile(self, ref_crd_file_name_new)

    def SetRestrRefCrdFromStr(self, crd_str):
        return _molset.MolMechModel_SetRestrRefCrdFromStr(self, crd_str)

    def SetAtomRestrForceConst(self, restr_const_new):
        return _molset.MolMechModel_SetAtomRestrForceConst(self, restr_const_new)

    def GetAtomRestrForceConst(self):
        return _molset.MolMechModel_GetAtomRestrForceConst(self)
    RESTR_REFC_CURRENT_CRD = _molset.MolMechModel_RESTR_REFC_CURRENT_CRD
    RESTR_REFC_XYZ_CRD_FILE = _molset.MolMechModel_RESTR_REFC_XYZ_CRD_FILE
    RESTR_REFC_XYZ_CRD_STR = _molset.MolMechModel_RESTR_REFC_XYZ_CRD_STR
    __swig_setmethods__["restr_ref_crd_type"] = _molset.MolMechModel_restr_ref_crd_type_set
    __swig_getmethods__["restr_ref_crd_type"] = _molset.MolMechModel_restr_ref_crd_type_get
    if _newclass:
        restr_ref_crd_type = _swig_property(_molset.MolMechModel_restr_ref_crd_type_get, _molset.MolMechModel_restr_ref_crd_type_set)
    __swig_setmethods__["restrained_atoms"] = _molset.MolMechModel_restrained_atoms_set
    __swig_getmethods__["restrained_atoms"] = _molset.MolMechModel_restrained_atoms_get
    if _newclass:
        restrained_atoms = _swig_property(_molset.MolMechModel_restrained_atoms_get, _molset.MolMechModel_restrained_atoms_set)
    __swig_setmethods__["restr_ref_coords"] = _molset.MolMechModel_restr_ref_coords_set
    __swig_getmethods__["restr_ref_coords"] = _molset.MolMechModel_restr_ref_coords_get
    if _newclass:
        restr_ref_coords = _swig_property(_molset.MolMechModel_restr_ref_coords_get, _molset.MolMechModel_restr_ref_coords_set)

    def SetDistConstrFromFile(self, constr_file_name):
        return _molset.MolMechModel_SetDistConstrFromFile(self, constr_file_name)

    def GetNumHarmConstr(self):
        return _molset.MolMechModel_GetNumHarmConstr(self)
    __swig_setmethods__["DistConstraints"] = _molset.MolMechModel_DistConstraints_set
    __swig_getmethods__["DistConstraints"] = _molset.MolMechModel_DistConstraints_get
    if _newclass:
        DistConstraints = _swig_property(_molset.MolMechModel_DistConstraints_get, _molset.MolMechModel_DistConstraints_set)

    def SetHBondConstraints(self, force_const):
        return _molset.MolMechModel_SetHBondConstraints(self, force_const)

    def AddHarmConstraint(self, atom1, atom2, eq_dist, force_const):
        return _molset.MolMechModel_AddHarmConstraint(self, atom1, atom2, eq_dist, force_const)

    def SetHarmConstraint(self, *args):
        return _molset.MolMechModel_SetHarmConstraint(self, *args)

    def ClearConstraints(self):
        return _molset.MolMechModel_ClearConstraints(self)
    __swig_setmethods__["water_cap_flag"] = _molset.MolMechModel_water_cap_flag_set
    __swig_getmethods__["water_cap_flag"] = _molset.MolMechModel_water_cap_flag_get
    if _newclass:
        water_cap_flag = _swig_property(_molset.MolMechModel_water_cap_flag_get, _molset.MolMechModel_water_cap_flag_set)
    __swig_setmethods__["cap_atom_num"] = _molset.MolMechModel_cap_atom_num_set
    __swig_getmethods__["cap_atom_num"] = _molset.MolMechModel_cap_atom_num_get
    if _newclass:
        cap_atom_num = _swig_property(_molset.MolMechModel_cap_atom_num_get, _molset.MolMechModel_cap_atom_num_set)
    __swig_setmethods__["cap_fconst"] = _molset.MolMechModel_cap_fconst_set
    __swig_getmethods__["cap_fconst"] = _molset.MolMechModel_cap_fconst_get
    if _newclass:
        cap_fconst = _swig_property(_molset.MolMechModel_cap_fconst_get, _molset.MolMechModel_cap_fconst_set)

    def SetFFTGridsPerAng(self, fft_grids_per_ang):
        return _molset.MolMechModel_SetFFTGridsPerAng(self, fft_grids_per_ang)
    __swig_setmethods__["pmesh_ewald_flag"] = _molset.MolMechModel_pmesh_ewald_flag_set
    __swig_getmethods__["pmesh_ewald_flag"] = _molset.MolMechModel_pmesh_ewald_flag_get
    if _newclass:
        pmesh_ewald_flag = _swig_property(_molset.MolMechModel_pmesh_ewald_flag_get, _molset.MolMechModel_pmesh_ewald_flag_set)
    __swig_setmethods__["pme_grid_nx"] = _molset.MolMechModel_pme_grid_nx_set
    __swig_getmethods__["pme_grid_nx"] = _molset.MolMechModel_pme_grid_nx_get
    if _newclass:
        pme_grid_nx = _swig_property(_molset.MolMechModel_pme_grid_nx_get, _molset.MolMechModel_pme_grid_nx_set)
    __swig_setmethods__["pme_grid_ny"] = _molset.MolMechModel_pme_grid_ny_set
    __swig_getmethods__["pme_grid_ny"] = _molset.MolMechModel_pme_grid_ny_get
    if _newclass:
        pme_grid_ny = _swig_property(_molset.MolMechModel_pme_grid_ny_get, _molset.MolMechModel_pme_grid_ny_set)
    __swig_setmethods__["pme_grid_nz"] = _molset.MolMechModel_pme_grid_nz_set
    __swig_getmethods__["pme_grid_nz"] = _molset.MolMechModel_pme_grid_nz_get
    if _newclass:
        pme_grid_nz = _swig_property(_molset.MolMechModel_pme_grid_nz_get, _molset.MolMechModel_pme_grid_nz_set)
    __swig_setmethods__["pme_spline_order"] = _molset.MolMechModel_pme_spline_order_set
    __swig_getmethods__["pme_spline_order"] = _molset.MolMechModel_pme_spline_order_get
    if _newclass:
        pme_spline_order = _swig_property(_molset.MolMechModel_pme_spline_order_get, _molset.MolMechModel_pme_spline_order_set)
    __swig_setmethods__["pme_neutralize_system"] = _molset.MolMechModel_pme_neutralize_system_set
    __swig_getmethods__["pme_neutralize_system"] = _molset.MolMechModel_pme_neutralize_system_get
    if _newclass:
        pme_neutralize_system = _swig_property(_molset.MolMechModel_pme_neutralize_system_get, _molset.MolMechModel_pme_neutralize_system_set)
    __swig_setmethods__["pme_verbose"] = _molset.MolMechModel_pme_verbose_set
    __swig_getmethods__["pme_verbose"] = _molset.MolMechModel_pme_verbose_get
    if _newclass:
        pme_verbose = _swig_property(_molset.MolMechModel_pme_verbose_get, _molset.MolMechModel_pme_verbose_set)
    __swig_setmethods__["exact_ewald_flag"] = _molset.MolMechModel_exact_ewald_flag_set
    __swig_getmethods__["exact_ewald_flag"] = _molset.MolMechModel_exact_ewald_flag_get
    if _newclass:
        exact_ewald_flag = _swig_property(_molset.MolMechModel_exact_ewald_flag_get, _molset.MolMechModel_exact_ewald_flag_set)
    __swig_setmethods__["vdw_correction_flag"] = _molset.MolMechModel_vdw_correction_flag_set
    __swig_getmethods__["vdw_correction_flag"] = _molset.MolMechModel_vdw_correction_flag_get
    if _newclass:
        vdw_correction_flag = _swig_property(_molset.MolMechModel_vdw_correction_flag_get, _molset.MolMechModel_vdw_correction_flag_set)
    __swig_setmethods__["pme_dsum_tol"] = _molset.MolMechModel_pme_dsum_tol_set
    __swig_getmethods__["pme_dsum_tol"] = _molset.MolMechModel_pme_dsum_tol_get
    if _newclass:
        pme_dsum_tol = _swig_property(_molset.MolMechModel_pme_dsum_tol_get, _molset.MolMechModel_pme_dsum_tol_set)
    __swig_setmethods__["pme_ew_coeff"] = _molset.MolMechModel_pme_ew_coeff_set
    __swig_getmethods__["pme_ew_coeff"] = _molset.MolMechModel_pme_ew_coeff_get
    if _newclass:
        pme_ew_coeff = _swig_property(_molset.MolMechModel_pme_ew_coeff_get, _molset.MolMechModel_pme_ew_coeff_set)
    __swig_setmethods__["pme_eedtbdns"] = _molset.MolMechModel_pme_eedtbdns_set
    __swig_getmethods__["pme_eedtbdns"] = _molset.MolMechModel_pme_eedtbdns_get
    if _newclass:
        pme_eedtbdns = _swig_property(_molset.MolMechModel_pme_eedtbdns_get, _molset.MolMechModel_pme_eedtbdns_set)
    __swig_setmethods__["skin_nb"] = _molset.MolMechModel_skin_nb_set
    __swig_getmethods__["skin_nb"] = _molset.MolMechModel_skin_nb_get
    if _newclass:
        skin_nb = _swig_property(_molset.MolMechModel_skin_nb_get, _molset.MolMechModel_skin_nb_set)
    __swig_setmethods__["fft_grids_per_ang"] = _molset.MolMechModel_fft_grids_per_ang_set
    __swig_getmethods__["fft_grids_per_ang"] = _molset.MolMechModel_fft_grids_per_ang_get
    if _newclass:
        fft_grids_per_ang = _swig_property(_molset.MolMechModel_fft_grids_per_ang_get, _molset.MolMechModel_fft_grids_per_ang_set)
    __swig_setmethods__["subtract_avg_force_flag"] = _molset.MolMechModel_subtract_avg_force_flag_set
    __swig_getmethods__["subtract_avg_force_flag"] = _molset.MolMechModel_subtract_avg_force_flag_get
    if _newclass:
        subtract_avg_force_flag = _swig_property(_molset.MolMechModel_subtract_avg_force_flag_get, _molset.MolMechModel_subtract_avg_force_flag_set)

    def SetPMECoef(self, pme_ew_coeff_new):
        return _molset.MolMechModel_SetPMECoef(self, pme_ew_coeff_new)
    __swig_setmethods__["p_amber_model"] = _molset.MolMechModel_p_amber_model_set
    __swig_getmethods__["p_amber_model"] = _molset.MolMechModel_p_amber_model_get
    if _newclass:
        p_amber_model = _swig_property(_molset.MolMechModel_p_amber_model_get, _molset.MolMechModel_p_amber_model_set)
    __swig_setmethods__["p_mm_mod"] = _molset.MolMechModel_p_mm_mod_set
    __swig_getmethods__["p_mm_mod"] = _molset.MolMechModel_p_mm_mod_get
    if _newclass:
        p_mm_mod = _swig_property(_molset.MolMechModel_p_mm_mod_get, _molset.MolMechModel_p_mm_mod_set)
    __swig_setmethods__["pmset"] = _molset.MolMechModel_pmset_set
    __swig_getmethods__["pmset"] = _molset.MolMechModel_pmset_get
    if _newclass:
        pmset = _swig_property(_molset.MolMechModel_pmset_get, _molset.MolMechModel_pmset_set)
    __swig_setmethods__["p_mort_model"] = _molset.MolMechModel_p_mort_model_set
    __swig_getmethods__["p_mort_model"] = _molset.MolMechModel_p_mort_model_get
    if _newclass:
        p_mort_model = _swig_property(_molset.MolMechModel_p_mort_model_get, _molset.MolMechModel_p_mort_model_set)

    def UpdateDataFromFort(self):
        return _molset.MolMechModel_UpdateDataFromFort(self)

    def GetIndDipolesFromFort(self):
        return _molset.MolMechModel_GetIndDipolesFromFort(self)

    def GetMultipolesFromFort(self):
        return _molset.MolMechModel_GetMultipolesFromFort(self)

    def PrintIndDipoles(self):
        return _molset.MolMechModel_PrintIndDipoles(self)

    def PrintMultipoles(self):
        return _molset.MolMechModel_PrintMultipoles(self)

    def PrintTotMultipoles(self, pt_orig=None):
        return _molset.MolMechModel_PrintTotMultipoles(self, pt_orig)

    def GetTotIndDipole(self, pt_orig=None):
        return _molset.MolMechModel_GetTotIndDipole(self, pt_orig)

    def GetTotIndDipole1(self, pt_orig=None):
        return _molset.MolMechModel_GetTotIndDipole1(self, pt_orig)

    def GetTotIndDipole2(self, pt_orig=None):
        return _molset.MolMechModel_GetTotIndDipole2(self, pt_orig)

    def GetTotDipole(self, pt_orig=None):
        return _molset.MolMechModel_GetTotDipole(self, pt_orig)

    def GetTotQpole(self, pt_orig=None):
        return _molset.MolMechModel_GetTotQpole(self, pt_orig)
    __swig_setmethods__["ind_dip_p"] = _molset.MolMechModel_ind_dip_p_set
    __swig_getmethods__["ind_dip_p"] = _molset.MolMechModel_ind_dip_p_get
    if _newclass:
        ind_dip_p = _swig_property(_molset.MolMechModel_ind_dip_p_get, _molset.MolMechModel_ind_dip_p_set)
    __swig_setmethods__["ind_dip_d"] = _molset.MolMechModel_ind_dip_d_set
    __swig_getmethods__["ind_dip_d"] = _molset.MolMechModel_ind_dip_d_get
    if _newclass:
        ind_dip_d = _swig_property(_molset.MolMechModel_ind_dip_d_get, _molset.MolMechModel_ind_dip_d_set)
    __swig_setmethods__["global_multipole"] = _molset.MolMechModel_global_multipole_set
    __swig_getmethods__["global_multipole"] = _molset.MolMechModel_global_multipole_get
    if _newclass:
        global_multipole = _swig_property(_molset.MolMechModel_global_multipole_get, _molset.MolMechModel_global_multipole_set)
MolMechModel_swigregister = _molset.MolMechModel_swigregister
MolMechModel_swigregister(MolMechModel)

def MolMechModel_GetGBAtomRad(*args):
    return _molset.MolMechModel_GetGBAtomRad(*args)
MolMechModel_GetGBAtomRad = _molset.MolMechModel_GetGBAtomRad

def MolMechModel_GetGBAtomScreening(*args):
    return _molset.MolMechModel_GetGBAtomScreening(*args)
MolMechModel_GetGBAtomScreening = _molset.MolMechModel_GetGBAtomScreening

class MMRunType(HaEnum1):
    __swig_setmethods__ = {}
    for _s in [HaEnum1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMRunType, name, value)
    __swig_getmethods__ = {}
    for _s in [HaEnum1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MMRunType, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_MMRunType
    __del__ = lambda self: None
    MD_RUN = _molset.MMRunType_MD_RUN
    MIN_RUN = _molset.MMRunType_MIN_RUN
    ENER_RUN = _molset.MMRunType_ENER_RUN

    def __eq__(self, val):
        return _molset.MMRunType___eq__(self, val)

    def __ne__(self, val):
        return _molset.MMRunType___ne__(self, val)

    def GetLabelsMap(self):
        return _molset.MMRunType_GetLabelsMap(self)

    def value(self):
        return _molset.MMRunType_value(self)

    def label(self):
        return _molset.MMRunType_label(self)

    def SetWithValue(self, val):
        return _molset.MMRunType_SetWithValue(self, val)

    def SetWithLabel(self, label):
        return _molset.MMRunType_SetWithLabel(self, label)

    def __init__(self, *args):
        this = _molset.new_MMRunType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
MMRunType_swigregister = _molset.MMRunType_swigregister
MMRunType_swigregister(MMRunType)

class TempCtrlMethod(HaEnum1):
    __swig_setmethods__ = {}
    for _s in [HaEnum1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TempCtrlMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaEnum1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TempCtrlMethod, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_TempCtrlMethod
    __del__ = lambda self: None
    CONST_ENE_MD = _molset.TempCtrlMethod_CONST_ENE_MD
    CONST_TEMP_BERENDSEN = _molset.TempCtrlMethod_CONST_TEMP_BERENDSEN
    CONST_TEMP_RANDOMIZED = _molset.TempCtrlMethod_CONST_TEMP_RANDOMIZED
    CONST_TEMP_LANGEVIN = _molset.TempCtrlMethod_CONST_TEMP_LANGEVIN

    def __eq__(self, val):
        return _molset.TempCtrlMethod___eq__(self, val)

    def __ne__(self, val):
        return _molset.TempCtrlMethod___ne__(self, val)

    def GetLabelsMap(self):
        return _molset.TempCtrlMethod_GetLabelsMap(self)

    def value(self):
        return _molset.TempCtrlMethod_value(self)

    def label(self):
        return _molset.TempCtrlMethod_label(self)

    def SetWithValue(self, val):
        return _molset.TempCtrlMethod_SetWithValue(self, val)

    def SetWithLabel(self, label):
        return _molset.TempCtrlMethod_SetWithLabel(self, label)

    def __init__(self, *args):
        this = _molset.new_TempCtrlMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
TempCtrlMethod_swigregister = _molset.TempCtrlMethod_swigregister
TempCtrlMethod_swigregister(TempCtrlMethod)
MD_RUN = cvar.MD_RUN
MIN_RUN = cvar.MIN_RUN
ENER_RUN = cvar.ENER_RUN

class EneMinMethod(HaEnum1):
    __swig_setmethods__ = {}
    for _s in [HaEnum1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EneMinMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaEnum1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EneMinMethod, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_EneMinMethod
    __del__ = lambda self: None
    CONJ_GRAD = _molset.EneMinMethod_CONJ_GRAD
    SD_AND_CG = _molset.EneMinMethod_SD_AND_CG
    STEEPEST_DESCENT = _molset.EneMinMethod_STEEPEST_DESCENT

    def __eq__(self, val):
        return _molset.EneMinMethod___eq__(self, val)

    def __ne__(self, val):
        return _molset.EneMinMethod___ne__(self, val)

    def GetLabelsMap(self):
        return _molset.EneMinMethod_GetLabelsMap(self)

    def value(self):
        return _molset.EneMinMethod_value(self)

    def label(self):
        return _molset.EneMinMethod_label(self)

    def SetWithValue(self, val):
        return _molset.EneMinMethod_SetWithValue(self, val)

    def SetWithLabel(self, label):
        return _molset.EneMinMethod_SetWithLabel(self, label)

    def __init__(self, *args):
        this = _molset.new_EneMinMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
EneMinMethod_swigregister = _molset.EneMinMethod_swigregister
EneMinMethod_swigregister(EneMinMethod)
CONST_ENE_MD = cvar.CONST_ENE_MD
CONST_TEMP_BERENDSEN = cvar.CONST_TEMP_BERENDSEN
CONST_TEMP_RANDOMIZED = cvar.CONST_TEMP_RANDOMIZED
CONST_TEMP_LANGEVIN = cvar.CONST_TEMP_LANGEVIN

class MMReadInitCrdType(HaEnum1):
    __swig_setmethods__ = {}
    for _s in [HaEnum1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMReadInitCrdType, name, value)
    __swig_getmethods__ = {}
    for _s in [HaEnum1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MMReadInitCrdType, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_MMReadInitCrdType
    __del__ = lambda self: None
    READ_X_FORM = _molset.MMReadInitCrdType_READ_X_FORM
    READ_X_BIN = _molset.MMReadInitCrdType_READ_X_BIN
    READ_XV_BIN = _molset.MMReadInitCrdType_READ_XV_BIN
    READ_XV_FORM = _molset.MMReadInitCrdType_READ_XV_FORM
    READ_XVBOX_BIN = _molset.MMReadInitCrdType_READ_XVBOX_BIN
    READ_XVBOX_FORM = _molset.MMReadInitCrdType_READ_XVBOX_FORM

    def __eq__(self, val):
        return _molset.MMReadInitCrdType___eq__(self, val)

    def __ne__(self, val):
        return _molset.MMReadInitCrdType___ne__(self, val)

    def GetLabelsMap(self):
        return _molset.MMReadInitCrdType_GetLabelsMap(self)

    def value(self):
        return _molset.MMReadInitCrdType_value(self)

    def label(self):
        return _molset.MMReadInitCrdType_label(self)

    def SetWithValue(self, val):
        return _molset.MMReadInitCrdType_SetWithValue(self, val)

    def SetWithLabel(self, label):
        return _molset.MMReadInitCrdType_SetWithLabel(self, label)

    def __init__(self, *args):
        this = _molset.new_MMReadInitCrdType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
MMReadInitCrdType_swigregister = _molset.MMReadInitCrdType_swigregister
MMReadInitCrdType_swigregister(MMReadInitCrdType)
CONJ_GRAD = cvar.CONJ_GRAD
SD_AND_CG = cvar.SD_AND_CG
STEEPEST_DESCENT = cvar.STEEPEST_DESCENT

class CrdFormatParam(HaEnum1):
    __swig_setmethods__ = {}
    for _s in [HaEnum1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrdFormatParam, name, value)
    __swig_getmethods__ = {}
    for _s in [HaEnum1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrdFormatParam, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_CrdFormatParam
    __del__ = lambda self: None
    FORMATTED = _molset.CrdFormatParam_FORMATTED
    BINARY = _molset.CrdFormatParam_BINARY

    def __eq__(self, val):
        return _molset.CrdFormatParam___eq__(self, val)

    def __ne__(self, val):
        return _molset.CrdFormatParam___ne__(self, val)

    def GetLabelsMap(self):
        return _molset.CrdFormatParam_GetLabelsMap(self)

    def value(self):
        return _molset.CrdFormatParam_value(self)

    def label(self):
        return _molset.CrdFormatParam_label(self)

    def SetWithValue(self, val):
        return _molset.CrdFormatParam_SetWithValue(self, val)

    def SetWithLabel(self, label):
        return _molset.CrdFormatParam_SetWithLabel(self, label)

    def __init__(self, *args):
        this = _molset.new_CrdFormatParam(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
CrdFormatParam_swigregister = _molset.CrdFormatParam_swigregister
CrdFormatParam_swigregister(CrdFormatParam)
READ_X_FORM = cvar.READ_X_FORM
READ_X_BIN = cvar.READ_X_BIN
READ_XV_BIN = cvar.READ_XV_BIN
READ_XV_FORM = cvar.READ_XV_FORM
READ_XVBOX_BIN = cvar.READ_XVBOX_BIN
READ_XVBOX_FORM = cvar.READ_XVBOX_FORM

class PerBoundaryCondType(HaEnum1):
    __swig_setmethods__ = {}
    for _s in [HaEnum1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PerBoundaryCondType, name, value)
    __swig_getmethods__ = {}
    for _s in [HaEnum1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PerBoundaryCondType, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_PerBoundaryCondType
    __del__ = lambda self: None

    def SetMolMechMod(self, p_mm_mod):
        return _molset.PerBoundaryCondType_SetMolMechMod(self, p_mm_mod)
    NO_PERIODICITY = _molset.PerBoundaryCondType_NO_PERIODICITY
    CONST_VOL = _molset.PerBoundaryCondType_CONST_VOL
    CONST_PRES = _molset.PerBoundaryCondType_CONST_PRES

    def __eq__(self, val):
        return _molset.PerBoundaryCondType___eq__(self, val)

    def __ne__(self, val):
        return _molset.PerBoundaryCondType___ne__(self, val)

    def GetLabelsMap(self):
        return _molset.PerBoundaryCondType_GetLabelsMap(self)

    def value(self):
        return _molset.PerBoundaryCondType_value(self)

    def label(self):
        return _molset.PerBoundaryCondType_label(self)

    def SetWithValue(self, val):
        return _molset.PerBoundaryCondType_SetWithValue(self, val)

    def SetWithLabel(self, label):
        return _molset.PerBoundaryCondType_SetWithLabel(self, label)

    def GetActiveLabels(self):
        return _molset.PerBoundaryCondType_GetActiveLabels(self)

    def SetCompatValue(self):
        return _molset.PerBoundaryCondType_SetCompatValue(self)

    def __init__(self, *args):
        this = _molset.new_PerBoundaryCondType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
PerBoundaryCondType_swigregister = _molset.PerBoundaryCondType_swigregister
PerBoundaryCondType_swigregister(PerBoundaryCondType)

class PressureRegMethod(HaEnum1):
    __swig_setmethods__ = {}
    for _s in [HaEnum1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PressureRegMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaEnum1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PressureRegMethod, name)
    __repr__ = _swig_repr
    NO_CRD_SCALING = _molset.PressureRegMethod_NO_CRD_SCALING
    ISOTROP_CRD_SCALING = _molset.PressureRegMethod_ISOTROP_CRD_SCALING
    ANISOTROP_CRD_SCALING = _molset.PressureRegMethod_ANISOTROP_CRD_SCALING
    CRD_SCALING_XY_AND_Z = _molset.PressureRegMethod_CRD_SCALING_XY_AND_Z
    CRD_SCALING_ONLY_Z = _molset.PressureRegMethod_CRD_SCALING_ONLY_Z
    CRD_SCALING_XZ_AND_Y = _molset.PressureRegMethod_CRD_SCALING_XZ_AND_Y
    CRD_SCALING_YZ_AND_X = _molset.PressureRegMethod_CRD_SCALING_YZ_AND_X

    def __init__(self, *args):
        this = _molset.new_PressureRegMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_PressureRegMethod
    __del__ = lambda self: None

    def __eq__(self, val):
        return _molset.PressureRegMethod___eq__(self, val)

    def __ne__(self, val):
        return _molset.PressureRegMethod___ne__(self, val)

    def GetLabelsMap(self):
        return _molset.PressureRegMethod_GetLabelsMap(self)

    def value(self):
        return _molset.PressureRegMethod_value(self)

    def label(self):
        return _molset.PressureRegMethod_label(self)

    def SetWithValue(self, val):
        return _molset.PressureRegMethod_SetWithValue(self, val)

    def SetWithLabel(self, label):
        return _molset.PressureRegMethod_SetWithLabel(self, label)
PressureRegMethod_swigregister = _molset.PressureRegMethod_swigregister
PressureRegMethod_swigregister(PressureRegMethod)
NO_PERIODICITY = cvar.NO_PERIODICITY
CONST_VOL = cvar.CONST_VOL
CONST_PRES = cvar.CONST_PRES

class MMElectrMethod(HaEnum1):
    __swig_setmethods__ = {}
    for _s in [HaEnum1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMElectrMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaEnum1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MMElectrMethod, name)
    __repr__ = _swig_repr
    DIST_DEP_DIEL = _molset.MMElectrMethod_DIST_DEP_DIEL
    PME_METHOD = _molset.MMElectrMethod_PME_METHOD
    GEN_BORN = _molset.MMElectrMethod_GEN_BORN
    SCREENED_COULOMB = _molset.MMElectrMethod_SCREENED_COULOMB

    def __init__(self, *args):
        this = _molset.new_MMElectrMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_MMElectrMethod
    __del__ = lambda self: None

    def SetMMModel(self, p_mm_model):
        return _molset.MMElectrMethod_SetMMModel(self, p_mm_model)

    def __eq__(self, val):
        return _molset.MMElectrMethod___eq__(self, val)

    def __ne__(self, val):
        return _molset.MMElectrMethod___ne__(self, val)

    def GetLabelsMap(self):
        return _molset.MMElectrMethod_GetLabelsMap(self)

    def value(self):
        return _molset.MMElectrMethod_value(self)

    def label(self):
        return _molset.MMElectrMethod_label(self)

    def SetWithValue(self, val):
        return _molset.MMElectrMethod_SetWithValue(self, val)

    def SetWithLabel(self, label):
        return _molset.MMElectrMethod_SetWithLabel(self, label)

    def GetActiveLabels(self):
        return _molset.MMElectrMethod_GetActiveLabels(self)

    def SetCompatValue(self):
        return _molset.MMElectrMethod_SetCompatValue(self)
MMElectrMethod_swigregister = _molset.MMElectrMethod_swigregister
MMElectrMethod_swigregister(MMElectrMethod)
NO_CRD_SCALING = cvar.NO_CRD_SCALING
ISOTROP_CRD_SCALING = cvar.ISOTROP_CRD_SCALING
ANISOTROP_CRD_SCALING = cvar.ANISOTROP_CRD_SCALING
CRD_SCALING_XY_AND_Z = cvar.CRD_SCALING_XY_AND_Z
CRD_SCALING_ONLY_Z = cvar.CRD_SCALING_ONLY_Z
CRD_SCALING_XZ_AND_Y = cvar.CRD_SCALING_XZ_AND_Y
CRD_SCALING_YZ_AND_X = cvar.CRD_SCALING_YZ_AND_X

class StartVelMethod(HaEnum1):
    __swig_setmethods__ = {}
    for _s in [HaEnum1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StartVelMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaEnum1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StartVelMethod, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_StartVelMethod
    __del__ = lambda self: None
    MAXWELL_START_VEL = _molset.StartVelMethod_MAXWELL_START_VEL
    READ_START_VEL = _molset.StartVelMethod_READ_START_VEL

    def __eq__(self, val):
        return _molset.StartVelMethod___eq__(self, val)

    def __ne__(self, val):
        return _molset.StartVelMethod___ne__(self, val)

    def GetLabelsMap(self):
        return _molset.StartVelMethod_GetLabelsMap(self)

    def value(self):
        return _molset.StartVelMethod_value(self)

    def label(self):
        return _molset.StartVelMethod_label(self)

    def SetWithValue(self, val):
        return _molset.StartVelMethod_SetWithValue(self, val)

    def SetWithLabel(self, label):
        return _molset.StartVelMethod_SetWithLabel(self, label)

    def __init__(self, *args):
        this = _molset.new_StartVelMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
StartVelMethod_swigregister = _molset.StartVelMethod_swigregister
StartVelMethod_swigregister(StartVelMethod)
DIST_DEP_DIEL = cvar.DIST_DEP_DIEL
PME_METHOD = cvar.PME_METHOD
GEN_BORN = cvar.GEN_BORN
SCREENED_COULOMB = cvar.SCREENED_COULOMB

class OmitInteractionsParam(HaEnum1):
    __swig_setmethods__ = {}
    for _s in [HaEnum1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OmitInteractionsParam, name, value)
    __swig_getmethods__ = {}
    for _s in [HaEnum1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OmitInteractionsParam, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_OmitInteractionsParam
    __del__ = lambda self: None
    CALC_ALL_INTER = _molset.OmitInteractionsParam_CALC_ALL_INTER
    OMIT_BONDS_H = _molset.OmitInteractionsParam_OMIT_BONDS_H
    OMIT_BONDS = _molset.OmitInteractionsParam_OMIT_BONDS
    OMIT_BONDS_VANG_H = _molset.OmitInteractionsParam_OMIT_BONDS_VANG_H
    OMIT_BONDS_VANG = _molset.OmitInteractionsParam_OMIT_BONDS_VANG
    OMIT_BONDS_VANG_DIH_H = _molset.OmitInteractionsParam_OMIT_BONDS_VANG_DIH_H
    OMIT_BONDS_VANG_DIH = _molset.OmitInteractionsParam_OMIT_BONDS_VANG_DIH

    def __eq__(self, val):
        return _molset.OmitInteractionsParam___eq__(self, val)

    def __ne__(self, val):
        return _molset.OmitInteractionsParam___ne__(self, val)

    def GetLabelsMap(self):
        return _molset.OmitInteractionsParam_GetLabelsMap(self)

    def value(self):
        return _molset.OmitInteractionsParam_value(self)

    def label(self):
        return _molset.OmitInteractionsParam_label(self)

    def SetWithValue(self, val):
        return _molset.OmitInteractionsParam_SetWithValue(self, val)

    def SetWithLabel(self, label):
        return _molset.OmitInteractionsParam_SetWithLabel(self, label)

    def __init__(self, *args):
        this = _molset.new_OmitInteractionsParam(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
OmitInteractionsParam_swigregister = _molset.OmitInteractionsParam_swigregister
OmitInteractionsParam_swigregister(OmitInteractionsParam)
MAXWELL_START_VEL = cvar.MAXWELL_START_VEL
READ_START_VEL = cvar.READ_START_VEL

class MMShakeParam(HaEnum1):
    __swig_setmethods__ = {}
    for _s in [HaEnum1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMShakeParam, name, value)
    __swig_getmethods__ = {}
    for _s in [HaEnum1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MMShakeParam, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_MMShakeParam
    __del__ = lambda self: None
    NO_SHAKE = _molset.MMShakeParam_NO_SHAKE
    H_ATOM_SHAKE = _molset.MMShakeParam_H_ATOM_SHAKE
    ALL_BOND_SHAKE = _molset.MMShakeParam_ALL_BOND_SHAKE

    def __eq__(self, val):
        return _molset.MMShakeParam___eq__(self, val)

    def __ne__(self, val):
        return _molset.MMShakeParam___ne__(self, val)

    def GetLabelsMap(self):
        return _molset.MMShakeParam_GetLabelsMap(self)

    def value(self):
        return _molset.MMShakeParam_value(self)

    def label(self):
        return _molset.MMShakeParam_label(self)

    def SetWithValue(self, val):
        return _molset.MMShakeParam_SetWithValue(self, val)

    def SetWithLabel(self, label):
        return _molset.MMShakeParam_SetWithLabel(self, label)

    def __init__(self, *args):
        this = _molset.new_MMShakeParam(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
MMShakeParam_swigregister = _molset.MMShakeParam_swigregister
MMShakeParam_swigregister(MMShakeParam)
CALC_ALL_INTER = cvar.CALC_ALL_INTER
OMIT_BONDS_H = cvar.OMIT_BONDS_H
OMIT_BONDS = cvar.OMIT_BONDS
OMIT_BONDS_VANG_H = cvar.OMIT_BONDS_VANG_H
OMIT_BONDS_VANG_DIH_H = cvar.OMIT_BONDS_VANG_DIH_H
OMIT_BONDS_VANG_DIH = cvar.OMIT_BONDS_VANG_DIH

class MMExternalProg(HaEnum1):
    __swig_setmethods__ = {}
    for _s in [HaEnum1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMExternalProg, name, value)
    __swig_getmethods__ = {}
    for _s in [HaEnum1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MMExternalProg, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_MMExternalProg
    __del__ = lambda self: None
    PMEMD_9 = _molset.MMExternalProg_PMEMD_9
    SANDER_9 = _molset.MMExternalProg_SANDER_9
    PMEMD_10 = _molset.MMExternalProg_PMEMD_10
    SANDER_10 = _molset.MMExternalProg_SANDER_10
    PMEMD_12 = _molset.MMExternalProg_PMEMD_12
    SANDER_12 = _molset.MMExternalProg_SANDER_12
    TINKER_51 = _molset.MMExternalProg_TINKER_51
    GROMACS_51 = _molset.MMExternalProg_GROMACS_51

    def __eq__(self, val):
        return _molset.MMExternalProg___eq__(self, val)

    def __ne__(self, val):
        return _molset.MMExternalProg___ne__(self, val)

    def GetLabelsMap(self):
        return _molset.MMExternalProg_GetLabelsMap(self)

    def value(self):
        return _molset.MMExternalProg_value(self)

    def label(self):
        return _molset.MMExternalProg_label(self)

    def SetWithValue(self, val):
        return _molset.MMExternalProg_SetWithValue(self, val)

    def SetWithLabel(self, label):
        return _molset.MMExternalProg_SetWithLabel(self, label)

    def __init__(self, *args):
        this = _molset.new_MMExternalProg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
MMExternalProg_swigregister = _molset.MMExternalProg_swigregister
MMExternalProg_swigregister(MMExternalProg)
NO_SHAKE = cvar.NO_SHAKE
H_ATOM_SHAKE = cvar.H_ATOM_SHAKE
ALL_BOND_SHAKE = cvar.ALL_BOND_SHAKE

class ForceFieldType(HaEnum1):
    __swig_setmethods__ = {}
    for _s in [HaEnum1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceFieldType, name, value)
    __swig_getmethods__ = {}
    for _s in [HaEnum1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForceFieldType, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_ForceFieldType
    __del__ = lambda self: None
    AMBER_94 = _molset.ForceFieldType_AMBER_94
    AMBER_99_SB = _molset.ForceFieldType_AMBER_99_SB
    AMBER_99_BSC0 = _molset.ForceFieldType_AMBER_99_BSC0
    AMBER_03 = _molset.ForceFieldType_AMBER_03
    AMBER_10 = _molset.ForceFieldType_AMBER_10
    AMOEBA = _molset.ForceFieldType_AMOEBA
    ARROW_5_14_CT = _molset.ForceFieldType_ARROW_5_14_CT
    UNKNOWN_FF = _molset.ForceFieldType_UNKNOWN_FF

    def __eq__(self, val):
        return _molset.ForceFieldType___eq__(self, val)

    def __ne__(self, val):
        return _molset.ForceFieldType___ne__(self, val)

    def GetLabelsMap(self):
        return _molset.ForceFieldType_GetLabelsMap(self)

    def value(self):
        return _molset.ForceFieldType_value(self)

    def label(self):
        return _molset.ForceFieldType_label(self)

    def SetWithValue(self, val):
        return _molset.ForceFieldType_SetWithValue(self, val)

    def SetWithLabel(self, label):
        return _molset.ForceFieldType_SetWithLabel(self, label)

    def __init__(self, *args):
        this = _molset.new_ForceFieldType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ForceFieldType_swigregister = _molset.ForceFieldType_swigregister
ForceFieldType_swigregister(ForceFieldType)
PMEMD_9 = cvar.PMEMD_9
SANDER_9 = cvar.SANDER_9
PMEMD_10 = cvar.PMEMD_10
SANDER_10 = cvar.SANDER_10
PMEMD_12 = cvar.PMEMD_12
SANDER_12 = cvar.SANDER_12
TINKER_51 = cvar.TINKER_51
GROMACS_51 = cvar.GROMACS_51

class AtomContactType(HaEnum1):
    __swig_setmethods__ = {}
    for _s in [HaEnum1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomContactType, name, value)
    __swig_getmethods__ = {}
    for _s in [HaEnum1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomContactType, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_AtomContactType
    __del__ = lambda self: None
    HARMONIC_CNT = _molset.AtomContactType_HARMONIC_CNT
    VDW_CNT_6_12 = _molset.AtomContactType_VDW_CNT_6_12
    VDW_CNT_10_12 = _molset.AtomContactType_VDW_CNT_10_12
    VDW_CNT_6_12_NO_REP = _molset.AtomContactType_VDW_CNT_6_12_NO_REP

    def __eq__(self, val):
        return _molset.AtomContactType___eq__(self, val)

    def __ne__(self, val):
        return _molset.AtomContactType___ne__(self, val)

    def GetLabelsMap(self):
        return _molset.AtomContactType_GetLabelsMap(self)

    def value(self):
        return _molset.AtomContactType_value(self)

    def label(self):
        return _molset.AtomContactType_label(self)

    def SetWithValue(self, val):
        return _molset.AtomContactType_SetWithValue(self, val)

    def SetWithLabel(self, label):
        return _molset.AtomContactType_SetWithLabel(self, label)

    def __init__(self, *args):
        this = _molset.new_AtomContactType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
AtomContactType_swigregister = _molset.AtomContactType_swigregister
AtomContactType_swigregister(AtomContactType)
AMBER_94 = cvar.AMBER_94
AMBER_99_SB = cvar.AMBER_99_SB
AMBER_99_BSC0 = cvar.AMBER_99_BSC0
AMBER_03 = cvar.AMBER_03
AMBER_10 = cvar.AMBER_10
AMOEBA = cvar.AMOEBA
ARROW_5_14_CT = cvar.ARROW_5_14_CT
UNKNOWN_FF = cvar.UNKNOWN_FF

class MDTrajectory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDTrajectory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDTrajectory, name)
    __repr__ = _swig_repr

    def __init__(self, new_pmset):
        this = _molset.new_MDTrajectory(new_pmset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_MDTrajectory
    __del__ = lambda self: None
    FormatUnk = _molset.MDTrajectory_FormatUnk
    AMBER_CRD = _molset.MDTrajectory_AMBER_CRD
    GMX_XTC = _molset.MDTrajectory_GMX_XTC
    __swig_setmethods__["format"] = _molset.MDTrajectory_format_set
    __swig_getmethods__["format"] = _molset.MDTrajectory_format_get
    if _newclass:
        format = _swig_property(_molset.MDTrajectory_format_get, _molset.MDTrajectory_format_set)

    def Open(self):
        return _molset.MDTrajectory_Open(self)

    def Close(self):
        return _molset.MDTrajectory_Close(self)

    def ReadNextFrame(self):
        return _molset.MDTrajectory_ReadNextFrame(self)
    __swig_setmethods__["AMBER_CRD_withBoxSize"] = _molset.MDTrajectory_AMBER_CRD_withBoxSize_set
    __swig_getmethods__["AMBER_CRD_withBoxSize"] = _molset.MDTrajectory_AMBER_CRD_withBoxSize_get
    if _newclass:
        AMBER_CRD_withBoxSize = _swig_property(_molset.MDTrajectory_AMBER_CRD_withBoxSize_get, _molset.MDTrajectory_AMBER_CRD_withBoxSize_set)

    def RefreshAllViews(self):
        return _molset.MDTrajectory_RefreshAllViews(self)
    __swig_setmethods__["CrdFileName"] = _molset.MDTrajectory_CrdFileName_set
    __swig_getmethods__["CrdFileName"] = _molset.MDTrajectory_CrdFileName_get
    if _newclass:
        CrdFileName = _swig_property(_molset.MDTrajectory_CrdFileName_get, _molset.MDTrajectory_CrdFileName_set)
    __swig_setmethods__["VelFileName"] = _molset.MDTrajectory_VelFileName_set
    __swig_getmethods__["VelFileName"] = _molset.MDTrajectory_VelFileName_get
    if _newclass:
        VelFileName = _swig_property(_molset.MDTrajectory_VelFileName_get, _molset.MDTrajectory_VelFileName_set)
    __swig_setmethods__["EneFileName"] = _molset.MDTrajectory_EneFileName_set
    __swig_getmethods__["EneFileName"] = _molset.MDTrajectory_EneFileName_get
    if _newclass:
        EneFileName = _swig_property(_molset.MDTrajectory_EneFileName_get, _molset.MDTrajectory_EneFileName_set)
    __swig_setmethods__["CrdFile"] = _molset.MDTrajectory_CrdFile_set
    __swig_getmethods__["CrdFile"] = _molset.MDTrajectory_CrdFile_get
    if _newclass:
        CrdFile = _swig_property(_molset.MDTrajectory_CrdFile_get, _molset.MDTrajectory_CrdFile_set)
    __swig_setmethods__["VelFile"] = _molset.MDTrajectory_VelFile_set
    __swig_getmethods__["VelFile"] = _molset.MDTrajectory_VelFile_get
    if _newclass:
        VelFile = _swig_property(_molset.MDTrajectory_VelFile_get, _molset.MDTrajectory_VelFile_set)
    __swig_setmethods__["EneFile"] = _molset.MDTrajectory_EneFile_set
    __swig_getmethods__["EneFile"] = _molset.MDTrajectory_EneFile_get
    if _newclass:
        EneFile = _swig_property(_molset.MDTrajectory_EneFile_get, _molset.MDTrajectory_EneFile_set)
MDTrajectory_swigregister = _molset.MDTrajectory_swigregister
MDTrajectory_swigregister(MDTrajectory)
VDW_CNT_6_12 = cvar.VDW_CNT_6_12
VDW_CNT_10_12 = cvar.VDW_CNT_10_12
HARMONIC_CNT = cvar.HARMONIC_CNT

class MDTrajAnalMod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDTrajAnalMod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDTrajAnalMod, name)
    __repr__ = _swig_repr

    def __init__(self, p_mm_mod_new):
        this = _molset.new_MDTrajAnalMod(p_mm_mod_new)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_MDTrajAnalMod
    __del__ = lambda self: None
    SCRIPT_CONTINUE = _molset.MDTrajAnalMod_SCRIPT_CONTINUE
    SCRIPT_START = _molset.MDTrajAnalMod_SCRIPT_START
    SCRIPT_STOP = _molset.MDTrajAnalMod_SCRIPT_STOP
    PBOX_DO_NOT_READ = _molset.MDTrajAnalMod_PBOX_DO_NOT_READ
    PBOX_READ = _molset.MDTrajAnalMod_PBOX_READ
    PBOX_READ_IF_SET = _molset.MDTrajAnalMod_PBOX_READ_IF_SET
    PBOX_DO_NOT_WRITE = _molset.MDTrajAnalMod_PBOX_DO_NOT_WRITE
    PBOX_WRITE = _molset.MDTrajAnalMod_PBOX_WRITE
    PBOX_WRITE_IF_SET = _molset.MDTrajAnalMod_PBOX_WRITE_IF_SET

    def AnalyzeTrajectory(self, sync=1):
        return _molset.MDTrajAnalMod_AnalyzeTrajectory(self, sync)

    def AnalyzeTrajectoryInternal(self):
        return _molset.MDTrajAnalMod_AnalyzeTrajectoryInternal(self)

    def OpenAmberTrajFilesToRead(self):
        return _molset.MDTrajAnalMod_OpenAmberTrajFilesToRead(self)

    def CloseAmberTrajFiles(self):
        return _molset.MDTrajAnalMod_CloseAmberTrajFiles(self)

    def BuildTrajIndex(self):
        return _molset.MDTrajAnalMod_BuildTrajIndex(self)

    def ReadTrajPoint(self):
        return _molset.MDTrajAnalMod_ReadTrajPoint(self)

    def LoadCurrPt(self):
        return _molset.MDTrajAnalMod_LoadCurrPt(self)

    def ConvArbalestTrajToAmber(self, md_traj_arbalest, md_traj_amber):
        return _molset.MDTrajAnalMod_ConvArbalestTrajToAmber(self, md_traj_arbalest, md_traj_amber)

    def ReduceAmberMDTraj(self, sh_traj_name, p_sub_group=None):
        return _molset.MDTrajAnalMod_ReduceAmberMDTraj(self, sh_traj_name, p_sub_group)

    def SetAmberMDCrdTraj(self, md_crd_fname):
        return _molset.MDTrajAnalMod_SetAmberMDCrdTraj(self, md_crd_fname)

    def SetAmberMDVelTraj(self, md_vel_fname):
        return _molset.MDTrajAnalMod_SetAmberMDVelTraj(self, md_vel_fname)

    def SetAmberMDEneTraj(self, md_ene_fname):
        return _molset.MDTrajAnalMod_SetAmberMDEneTraj(self, md_ene_fname)

    def SetAlignToFstPt(self, set_par=True):
        return _molset.MDTrajAnalMod_SetAlignToFstPt(self, set_par)

    def SetAlignToCurrentCrd(self, set_par=True):
        return _molset.MDTrajAnalMod_SetAlignToCurrentCrd(self, set_par)

    def SetReadPBox(self, set_par=1):
        return _molset.MDTrajAnalMod_SetReadPBox(self, set_par)

    def SetWritePBox(self, set_par=1):
        return _molset.MDTrajAnalMod_SetWritePBox(self, set_par)

    def SetWrapCrd(self, set_par=1):
        return _molset.MDTrajAnalMod_SetWrapCrd(self, set_par)

    def SetPtBegin(self, npt_step):
        return _molset.MDTrajAnalMod_SetPtBegin(self, npt_step)

    def GetPtBegin(self):
        return _molset.MDTrajAnalMod_GetPtBegin(self)

    def SetPtStep(self, npt_step):
        return _molset.MDTrajAnalMod_SetPtStep(self, npt_step)

    def GetPtStep(self):
        return _molset.MDTrajAnalMod_GetPtStep(self)

    def SetPtEnd(self, npt_step):
        return _molset.MDTrajAnalMod_SetPtEnd(self, npt_step)

    def GetPtEnd(self):
        return _molset.MDTrajAnalMod_GetPtEnd(self)

    def GetCurrPtIdx(self):
        return _molset.MDTrajAnalMod_GetCurrPtIdx(self)
    __swig_setmethods__["delay_time"] = _molset.MDTrajAnalMod_delay_time_set
    __swig_getmethods__["delay_time"] = _molset.MDTrajAnalMod_delay_time_get
    if _newclass:
        delay_time = _swig_property(_molset.MDTrajAnalMod_delay_time_get, _molset.MDTrajAnalMod_delay_time_set)
    __swig_setmethods__["ipt_curr"] = _molset.MDTrajAnalMod_ipt_curr_set
    __swig_getmethods__["ipt_curr"] = _molset.MDTrajAnalMod_ipt_curr_get
    if _newclass:
        ipt_curr = _swig_property(_molset.MDTrajAnalMod_ipt_curr_get, _molset.MDTrajAnalMod_ipt_curr_set)
    __swig_setmethods__["traj_script"] = _molset.MDTrajAnalMod_traj_script_set
    __swig_getmethods__["traj_script"] = _molset.MDTrajAnalMod_traj_script_get
    if _newclass:
        traj_script = _swig_property(_molset.MDTrajAnalMod_traj_script_get, _molset.MDTrajAnalMod_traj_script_set)
    __swig_setmethods__["agents"] = _molset.MDTrajAnalMod_agents_set
    __swig_getmethods__["agents"] = _molset.MDTrajAnalMod_agents_get
    if _newclass:
        agents = _swig_property(_molset.MDTrajAnalMod_agents_get, _molset.MDTrajAnalMod_agents_set)
    __swig_setmethods__["py_agents"] = _molset.MDTrajAnalMod_py_agents_set
    __swig_getmethods__["py_agents"] = _molset.MDTrajAnalMod_py_agents_get
    if _newclass:
        py_agents = _swig_property(_molset.MDTrajAnalMod_py_agents_get, _molset.MDTrajAnalMod_py_agents_set)

    def AddAgent(self, p_agent):
        return _molset.MDTrajAnalMod_AddAgent(self, p_agent)

    def DeleteAgent(self, p_agent):
        return _molset.MDTrajAnalMod_DeleteAgent(self, p_agent)

    def AddPythonAgent(self, p_obj):
        return _molset.MDTrajAnalMod_AddPythonAgent(self, p_obj)

    def PrintAgents(self):
        return _molset.MDTrajAnalMod_PrintAgents(self)

    def GetTrajAnalAgent(self, agent_class_name, create_flag):
        return _molset.MDTrajAnalMod_GetTrajAnalAgent(self, agent_class_name, create_flag)

    def GetRMSDAgent(self, create_flag=0):
        return _molset.MDTrajAnalMod_GetRMSDAgent(self, create_flag)

    def GetAtomCorrAgent(self, create_flag=0):
        return _molset.MDTrajAnalMod_GetAtomCorrAgent(self, create_flag)
MDTrajAnalMod_swigregister = _molset.MDTrajAnalMod_swigregister
MDTrajAnalMod_swigregister(MDTrajAnalMod)

class MDTrajectoryIOAgent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDTrajectoryIOAgent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDTrajectoryIOAgent, name)
    __repr__ = _swig_repr

    def __init__(self, p_mm_driver_new):
        this = _molset.new_MDTrajectoryIOAgent(p_mm_driver_new)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_MDTrajectoryIOAgent
    __del__ = lambda self: None

    def GetClassName(self):
        return _molset.MDTrajectoryIOAgent_GetClassName(self)

    def Init(self):
        return _molset.MDTrajectoryIOAgent_Init(self)

    def AnalyzePt(self, nstep, si):
        return _molset.MDTrajectoryIOAgent_AnalyzePt(self, nstep, si)

    def Finalize(self, nstep):
        return _molset.MDTrajectoryIOAgent_Finalize(self, nstep)
    __swig_setmethods__["p_mm_driver"] = _molset.MDTrajectoryIOAgent_p_mm_driver_set
    __swig_getmethods__["p_mm_driver"] = _molset.MDTrajectoryIOAgent_p_mm_driver_get
    if _newclass:
        p_mm_driver = _swig_property(_molset.MDTrajectoryIOAgent_p_mm_driver_get, _molset.MDTrajectoryIOAgent_p_mm_driver_set)
    __swig_setmethods__["p_amber_model"] = _molset.MDTrajectoryIOAgent_p_amber_model_set
    __swig_getmethods__["p_amber_model"] = _molset.MDTrajectoryIOAgent_p_amber_model_get
    if _newclass:
        p_amber_model = _swig_property(_molset.MDTrajectoryIOAgent_p_amber_model_get, _molset.MDTrajectoryIOAgent_p_amber_model_set)
    __swig_setmethods__["p_mm_mod"] = _molset.MDTrajectoryIOAgent_p_mm_mod_set
    __swig_getmethods__["p_mm_mod"] = _molset.MDTrajectoryIOAgent_p_mm_mod_get
    if _newclass:
        p_mm_mod = _swig_property(_molset.MDTrajectoryIOAgent_p_mm_mod_get, _molset.MDTrajectoryIOAgent_p_mm_mod_set)
    __swig_setmethods__["p_mm_model"] = _molset.MDTrajectoryIOAgent_p_mm_model_set
    __swig_getmethods__["p_mm_model"] = _molset.MDTrajectoryIOAgent_p_mm_model_get
    if _newclass:
        p_mm_model = _swig_property(_molset.MDTrajectoryIOAgent_p_mm_model_get, _molset.MDTrajectoryIOAgent_p_mm_model_set)
    __swig_setmethods__["sit"] = _molset.MDTrajectoryIOAgent_sit_set
    __swig_getmethods__["sit"] = _molset.MDTrajectoryIOAgent_sit_get
    if _newclass:
        sit = _swig_property(_molset.MDTrajectoryIOAgent_sit_get, _molset.MDTrajectoryIOAgent_sit_set)
    __swig_setmethods__["sit2"] = _molset.MDTrajectoryIOAgent_sit2_set
    __swig_getmethods__["sit2"] = _molset.MDTrajectoryIOAgent_sit2_get
    if _newclass:
        sit2 = _swig_property(_molset.MDTrajectoryIOAgent_sit2_get, _molset.MDTrajectoryIOAgent_sit2_set)
    __swig_setmethods__["sit_tmp"] = _molset.MDTrajectoryIOAgent_sit_tmp_set
    __swig_getmethods__["sit_tmp"] = _molset.MDTrajectoryIOAgent_sit_tmp_get
    if _newclass:
        sit_tmp = _swig_property(_molset.MDTrajectoryIOAgent_sit_tmp_get, _molset.MDTrajectoryIOAgent_sit_tmp_set)
    __swig_setmethods__["sit2_tmp"] = _molset.MDTrajectoryIOAgent_sit2_tmp_set
    __swig_getmethods__["sit2_tmp"] = _molset.MDTrajectoryIOAgent_sit2_tmp_get
    if _newclass:
        sit2_tmp = _swig_property(_molset.MDTrajectoryIOAgent_sit2_tmp_get, _molset.MDTrajectoryIOAgent_sit2_tmp_set)
    __swig_setmethods__["nvalid"] = _molset.MDTrajectoryIOAgent_nvalid_set
    __swig_getmethods__["nvalid"] = _molset.MDTrajectoryIOAgent_nvalid_get
    if _newclass:
        nvalid = _swig_property(_molset.MDTrajectoryIOAgent_nvalid_get, _molset.MDTrajectoryIOAgent_nvalid_set)
    __swig_setmethods__["n_saved_crd"] = _molset.MDTrajectoryIOAgent_n_saved_crd_set
    __swig_getmethods__["n_saved_crd"] = _molset.MDTrajectoryIOAgent_n_saved_crd_get
    if _newclass:
        n_saved_crd = _swig_property(_molset.MDTrajectoryIOAgent_n_saved_crd_get, _molset.MDTrajectoryIOAgent_n_saved_crd_set)
MDTrajectoryIOAgent_swigregister = _molset.MDTrajectoryIOAgent_swigregister
MDTrajectoryIOAgent_swigregister(MDTrajectoryIOAgent)
SCRIPT_CONTINUE = cvar.SCRIPT_CONTINUE
SCRIPT_START = cvar.SCRIPT_START
SCRIPT_STOP = cvar.SCRIPT_STOP

class RMSDAgent(TrajAnalAgent):
    __swig_setmethods__ = {}
    for _s in [TrajAnalAgent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RMSDAgent, name, value)
    __swig_getmethods__ = {}
    for _s in [TrajAnalAgent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RMSDAgent, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_RMSDAgent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_RMSDAgent
    __del__ = lambda self: None

    def GetClassName(self):
        return _molset.RMSDAgent_GetClassName(self)

    def IsActive(self):
        return _molset.RMSDAgent_IsActive(self)

    def SetActive(self, active_flag):
        return _molset.RMSDAgent_SetActive(self, active_flag)

    def Init(self, ppt_info=None):
        return _molset.RMSDAgent_Init(self, ppt_info)

    def AnalyzePt(self, ppt_info=None):
        return _molset.RMSDAgent_AnalyzePt(self, ppt_info)

    def Finalize(self):
        return _molset.RMSDAgent_Finalize(self)

    def SetAtomsFit(self, *args):
        return _molset.RMSDAgent_SetAtomsFit(self, *args)

    def SetAtomsRMSD(self, *args):
        return _molset.RMSDAgent_SetAtomsRMSD(self, *args)

    def SetRefCrdFit(self, *args):
        return _molset.RMSDAgent_SetRefCrdFit(self, *args)

    def SetRefCrdFitFromXYZFile(self, ref_crd_file_name):
        return _molset.RMSDAgent_SetRefCrdFitFromXYZFile(self, ref_crd_file_name)

    def SetRefCrdFitFromAtomGroup(self, at_grp_id, pmset_ref):
        return _molset.RMSDAgent_SetRefCrdFitFromAtomGroup(self, at_grp_id, pmset_ref)

    def SetRefCrdRMSD(self, *args):
        return _molset.RMSDAgent_SetRefCrdRMSD(self, *args)

    def SetRefCrdRMSDFromXYZFile(self, ref_crd_file_name):
        return _molset.RMSDAgent_SetRefCrdRMSDFromXYZFile(self, ref_crd_file_name)

    def SetRefCrdRMSDFromAtomGroup(self, at_grp_id, pmset_ref):
        return _molset.RMSDAgent_SetRefCrdRMSDFromAtomGroup(self, at_grp_id, pmset_ref)

    def SetMolSet(self, pmset):
        return _molset.RMSDAgent_SetMolSet(self, pmset)
    __swig_setmethods__["fname_rmsd_out"] = _molset.RMSDAgent_fname_rmsd_out_set
    __swig_getmethods__["fname_rmsd_out"] = _molset.RMSDAgent_fname_rmsd_out_get
    if _newclass:
        fname_rmsd_out = _swig_property(_molset.RMSDAgent_fname_rmsd_out_get, _molset.RMSDAgent_fname_rmsd_out_set)
    __swig_setmethods__["fname_rmsd_atom_out"] = _molset.RMSDAgent_fname_rmsd_atom_out_set
    __swig_getmethods__["fname_rmsd_atom_out"] = _molset.RMSDAgent_fname_rmsd_atom_out_get
    if _newclass:
        fname_rmsd_atom_out = _swig_property(_molset.RMSDAgent_fname_rmsd_atom_out_get, _molset.RMSDAgent_fname_rmsd_atom_out_set)
    __swig_setmethods__["fname_rmsf_atom_out"] = _molset.RMSDAgent_fname_rmsf_atom_out_set
    __swig_getmethods__["fname_rmsf_atom_out"] = _molset.RMSDAgent_fname_rmsf_atom_out_get
    if _newclass:
        fname_rmsf_atom_out = _swig_property(_molset.RMSDAgent_fname_rmsf_atom_out_get, _molset.RMSDAgent_fname_rmsf_atom_out_set)
    __swig_setmethods__["avg_crd_file_name"] = _molset.RMSDAgent_avg_crd_file_name_set
    __swig_getmethods__["avg_crd_file_name"] = _molset.RMSDAgent_avg_crd_file_name_get
    if _newclass:
        avg_crd_file_name = _swig_property(_molset.RMSDAgent_avg_crd_file_name_get, _molset.RMSDAgent_avg_crd_file_name_set)
    REFC_CURRENT_CRD = _molset.RMSDAgent_REFC_CURRENT_CRD
    REFC_FIRST_PT = _molset.RMSDAgent_REFC_FIRST_PT
    REFC_XYZ_CRD_FILE = _molset.RMSDAgent_REFC_XYZ_CRD_FILE
    REFC_ATOM_ARRAY_ID = _molset.RMSDAgent_REFC_ATOM_ARRAY_ID
    REFC_SPECIAL = _molset.RMSDAgent_REFC_SPECIAL
    __swig_setmethods__["ref_crd_fit_type"] = _molset.RMSDAgent_ref_crd_fit_type_set
    __swig_getmethods__["ref_crd_fit_type"] = _molset.RMSDAgent_ref_crd_fit_type_get
    if _newclass:
        ref_crd_fit_type = _swig_property(_molset.RMSDAgent_ref_crd_fit_type_get, _molset.RMSDAgent_ref_crd_fit_type_set)
    __swig_setmethods__["ref_crd_rmsd_type"] = _molset.RMSDAgent_ref_crd_rmsd_type_set
    __swig_getmethods__["ref_crd_rmsd_type"] = _molset.RMSDAgent_ref_crd_rmsd_type_get
    if _newclass:
        ref_crd_rmsd_type = _swig_property(_molset.RMSDAgent_ref_crd_rmsd_type_get, _molset.RMSDAgent_ref_crd_rmsd_type_set)
    __swig_setmethods__["calc_rmsd_per_atom_flag"] = _molset.RMSDAgent_calc_rmsd_per_atom_flag_set
    __swig_getmethods__["calc_rmsd_per_atom_flag"] = _molset.RMSDAgent_calc_rmsd_per_atom_flag_get
    if _newclass:
        calc_rmsd_per_atom_flag = _swig_property(_molset.RMSDAgent_calc_rmsd_per_atom_flag_get, _molset.RMSDAgent_calc_rmsd_per_atom_flag_set)
    __swig_setmethods__["calc_rmsf_per_atom_flag"] = _molset.RMSDAgent_calc_rmsf_per_atom_flag_set
    __swig_getmethods__["calc_rmsf_per_atom_flag"] = _molset.RMSDAgent_calc_rmsf_per_atom_flag_get
    if _newclass:
        calc_rmsf_per_atom_flag = _swig_property(_molset.RMSDAgent_calc_rmsf_per_atom_flag_get, _molset.RMSDAgent_calc_rmsf_per_atom_flag_set)
    __swig_setmethods__["calc_avg_crd_flag"] = _molset.RMSDAgent_calc_avg_crd_flag_set
    __swig_getmethods__["calc_avg_crd_flag"] = _molset.RMSDAgent_calc_avg_crd_flag_get
    if _newclass:
        calc_avg_crd_flag = _swig_property(_molset.RMSDAgent_calc_avg_crd_flag_get, _molset.RMSDAgent_calc_avg_crd_flag_set)
RMSDAgent_swigregister = _molset.RMSDAgent_swigregister
RMSDAgent_swigregister(RMSDAgent)

class AtomCorrAgent(TrajAnalAgent):
    __swig_setmethods__ = {}
    for _s in [TrajAnalAgent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomCorrAgent, name, value)
    __swig_getmethods__ = {}
    for _s in [TrajAnalAgent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomCorrAgent, name)
    __repr__ = _swig_repr

    def __init__(self, pmset):
        this = _molset.new_AtomCorrAgent(pmset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AtomCorrAgent
    __del__ = lambda self: None

    def GetClassName(self):
        return _molset.AtomCorrAgent_GetClassName(self)

    def IsActive(self):
        return _molset.AtomCorrAgent_IsActive(self)

    def SetActive(self, active_flag):
        return _molset.AtomCorrAgent_SetActive(self, active_flag)

    def Init(self, ppt_info=None):
        return _molset.AtomCorrAgent_Init(self, ppt_info)

    def AnalyzePt(self, ppt_info=None):
        return _molset.AtomCorrAgent_AnalyzePt(self, ppt_info)

    def Finalize(self):
        return _molset.AtomCorrAgent_Finalize(self)

    def SetAtGroup1ByExpr(self, expr):
        return _molset.AtomCorrAgent_SetAtGroup1ByExpr(self, expr)

    def SetAtGroup2ByExpr(self, expr):
        return _molset.AtomCorrAgent_SetAtGroup2ByExpr(self, expr)

    def SetDistRange(self, rmin, rmax, nr=0):
        return _molset.AtomCorrAgent_SetDistRange(self, rmin, rmax, nr)

    def GetRCut(self):
        return _molset.AtomCorrAgent_GetRCut(self)

    def GetGR(self):
        return _molset.AtomCorrAgent_GetGR(self)

    def GetNAvg(self):
        return _molset.AtomCorrAgent_GetNAvg(self)

    def GetDeltN2(self):
        return _molset.AtomCorrAgent_GetDeltN2(self)
AtomCorrAgent_swigregister = _molset.AtomCorrAgent_swigregister
AtomCorrAgent_swigregister(AtomCorrAgent)

class MMForceField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMForceField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MMForceField, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_MMForceField()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_MMForceField
    __del__ = lambda self: None

    def Init(self):
        return _molset.MMForceField_Init(self)

    def SetFFType(self, ff_type):
        return _molset.MMForceField_SetFFType(self, ff_type)

    def GetFFType(self):
        return _molset.MMForceField_GetFFType(self)

    def Clear(self):
        return _molset.MMForceField_Clear(self)

    def SetDefaultVdW(self):
        return _molset.MMForceField_SetDefaultVdW(self)

    def SetDefaultParamFiles(self):
        return _molset.MMForceField_SetDefaultParamFiles(self)
    __swig_setmethods__["symb_mass_map"] = _molset.MMForceField_symb_mass_map_set
    __swig_getmethods__["symb_mass_map"] = _molset.MMForceField_symb_mass_map_get
    if _newclass:
        symb_mass_map = _swig_property(_molset.MMForceField_symb_mass_map_get, _molset.MMForceField_symb_mass_map_set)
    __swig_setmethods__["symb_ppar_map"] = _molset.MMForceField_symb_ppar_map_set
    __swig_getmethods__["symb_ppar_map"] = _molset.MMForceField_symb_ppar_map_get
    if _newclass:
        symb_ppar_map = _swig_property(_molset.MMForceField_symb_ppar_map_get, _molset.MMForceField_symb_ppar_map_set)
    __swig_setmethods__["symb_hpar_map"] = _molset.MMForceField_symb_hpar_map_set
    __swig_getmethods__["symb_hpar_map"] = _molset.MMForceField_symb_hpar_map_get
    if _newclass:
        symb_hpar_map = _swig_property(_molset.MMForceField_symb_hpar_map_get, _molset.MMForceField_symb_hpar_map_set)
    __swig_setmethods__["bond_param_map"] = _molset.MMForceField_bond_param_map_set
    __swig_getmethods__["bond_param_map"] = _molset.MMForceField_bond_param_map_get
    if _newclass:
        bond_param_map = _swig_property(_molset.MMForceField_bond_param_map_get, _molset.MMForceField_bond_param_map_set)
    __swig_setmethods__["vang_param_map"] = _molset.MMForceField_vang_param_map_set
    __swig_getmethods__["vang_param_map"] = _molset.MMForceField_vang_param_map_get
    if _newclass:
        vang_param_map = _swig_property(_molset.MMForceField_vang_param_map_get, _molset.MMForceField_vang_param_map_set)
    __swig_setmethods__["dih_param_map"] = _molset.MMForceField_dih_param_map_set
    __swig_getmethods__["dih_param_map"] = _molset.MMForceField_dih_param_map_get
    if _newclass:
        dih_param_map = _swig_property(_molset.MMForceField_dih_param_map_get, _molset.MMForceField_dih_param_map_set)
    __swig_setmethods__["impdih_param_map"] = _molset.MMForceField_impdih_param_map_set
    __swig_getmethods__["impdih_param_map"] = _molset.MMForceField_impdih_param_map_get
    if _newclass:
        impdih_param_map = _swig_property(_molset.MMForceField_impdih_param_map_get, _molset.MMForceField_impdih_param_map_set)

    def FindAtomMassFromSymbol(self, ats):
        return _molset.MMForceField_FindAtomMassFromSymbol(self, ats)

    def FindPointParamFromSymbol(self, ats1):
        return _molset.MMForceField_FindPointParamFromSymbol(self, ats1)

    def FindBondParamFromSymbol(self, ats1, ats2):
        return _molset.MMForceField_FindBondParamFromSymbol(self, ats1, ats2)

    def FindHBondParamFromSymbol(self, ats1, ats2):
        return _molset.MMForceField_FindHBondParamFromSymbol(self, ats1, ats2)

    def FindValAngleParamFromSymbol(self, ats1, ats2, ats3):
        return _molset.MMForceField_FindValAngleParamFromSymbol(self, ats1, ats2, ats3)

    def FindDihedralParamFromSymbol(self, ats1, ats2, ats3, ats4, improper_flag=False):
        return _molset.MMForceField_FindDihedralParamFromSymbol(self, ats1, ats2, ats3, ats4, improper_flag)

    def LoadAmberParamFile(self, ff_param_fname):
        return _molset.MMForceField_LoadAmberParamFile(self, ff_param_fname)

    def LoadTinkerParamFile(self, ff_param_fname):
        return _molset.MMForceField_LoadTinkerParamFile(self, ff_param_fname)

    def GetAmberParamFiles(self):
        return _molset.MMForceField_GetAmberParamFiles(self)
    __swig_setmethods__["ff_arr"] = _molset.MMForceField_ff_arr_set
    __swig_getmethods__["ff_arr"] = _molset.MMForceField_ff_arr_get
    if _newclass:
        ff_arr = _swig_property(_molset.MMForceField_ff_arr_get, _molset.MMForceField_ff_arr_set)
    if _newclass:
        GetMMForceField = staticmethod(_molset.MMForceField_GetMMForceField)
    else:
        GetMMForceField = _molset.MMForceField_GetMMForceField
    __swig_setmethods__["ff_type_default"] = _molset.MMForceField_ff_type_default_set
    __swig_getmethods__["ff_type_default"] = _molset.MMForceField_ff_type_default_get
    if _newclass:
        ff_type_default = _swig_property(_molset.MMForceField_ff_type_default_get, _molset.MMForceField_ff_type_default_set)
    if _newclass:
        GetAmberResName = staticmethod(_molset.MMForceField_GetAmberResName)
    else:
        GetAmberResName = _molset.MMForceField_GetAmberResName
    if _newclass:
        GetAmberAtName = staticmethod(_molset.MMForceField_GetAmberAtName)
    else:
        GetAmberAtName = _molset.MMForceField_GetAmberAtName
    if _newclass:
        GetAtNameFromAmber = staticmethod(_molset.MMForceField_GetAtNameFromAmber)
    else:
        GetAtNameFromAmber = _molset.MMForceField_GetAtNameFromAmber

    def IsMortFFInitiated(self):
        return _molset.MMForceField_IsMortFFInitiated(self)

    def InitMortFF(self):
        return _molset.MMForceField_InitMortFF(self)
    __swig_setmethods__["p_mort_ff"] = _molset.MMForceField_p_mort_ff_set
    __swig_getmethods__["p_mort_ff"] = _molset.MMForceField_p_mort_ff_get
    if _newclass:
        p_mort_ff = _swig_property(_molset.MMForceField_p_mort_ff_get, _molset.MMForceField_p_mort_ff_set)

    def SaveResFFTemplatesFromMort(self, fname, pmset_res):
        return _molset.MMForceField_SaveResFFTemplatesFromMort(self, fname, pmset_res)

    def LoadResFFTemplateXMLFile(self, fname):
        return _molset.MMForceField_LoadResFFTemplateXMLFile(self, fname)
    if _newclass:
        switch_amoeba_type = staticmethod(_molset.MMForceField_switch_amoeba_type)
    else:
        switch_amoeba_type = _molset.MMForceField_switch_amoeba_type

    def GetResidueTemplate(self, full_res_name):
        return _molset.MMForceField_GetResidueTemplate(self, full_res_name)
    __swig_setmethods__["resff_files_add"] = _molset.MMForceField_resff_files_add_set
    __swig_getmethods__["resff_files_add"] = _molset.MMForceField_resff_files_add_get
    if _newclass:
        resff_files_add = _swig_property(_molset.MMForceField_resff_files_add_get, _molset.MMForceField_resff_files_add_set)
    __swig_setmethods__["tinker_param_files_add"] = _molset.MMForceField_tinker_param_files_add_set
    __swig_getmethods__["tinker_param_files_add"] = _molset.MMForceField_tinker_param_files_add_get
    if _newclass:
        tinker_param_files_add = _swig_property(_molset.MMForceField_tinker_param_files_add_get, _molset.MMForceField_tinker_param_files_add_set)
    __swig_setmethods__["amber_param_files_add"] = _molset.MMForceField_amber_param_files_add_set
    __swig_getmethods__["amber_param_files_add"] = _molset.MMForceField_amber_param_files_add_get
    if _newclass:
        amber_param_files_add = _swig_property(_molset.MMForceField_amber_param_files_add_get, _molset.MMForceField_amber_param_files_add_set)
MMForceField_swigregister = _molset.MMForceField_swigregister
MMForceField_swigregister(MMForceField)

def MMForceField_GetMMForceField(ff_type, create=0):
    return _molset.MMForceField_GetMMForceField(ff_type, create)
MMForceField_GetMMForceField = _molset.MMForceField_GetMMForceField

def MMForceField_GetAmberResName(*args):
    return _molset.MMForceField_GetAmberResName(*args)
MMForceField_GetAmberResName = _molset.MMForceField_GetAmberResName

def MMForceField_GetAmberAtName(*args):
    return _molset.MMForceField_GetAmberAtName(*args)
MMForceField_GetAmberAtName = _molset.MMForceField_GetAmberAtName

def MMForceField_GetAtNameFromAmber(at_name_amber, full_res_name):
    return _molset.MMForceField_GetAtNameFromAmber(at_name_amber, full_res_name)
MMForceField_GetAtNameFromAmber = _molset.MMForceField_GetAtNameFromAmber

def MMForceField_switch_amoeba_type(mol, poleff):
    return _molset.MMForceField_switch_amoeba_type(mol, poleff)
MMForceField_switch_amoeba_type = _molset.MMForceField_switch_amoeba_type

class MMDriverAmber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMDriverAmber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MMDriverAmber, name)
    __repr__ = _swig_repr

    def __init__(self, p_mm_mod_new):
        this = _molset.new_MMDriverAmber(p_mm_mod_new)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_MMDriverAmber
    __del__ = lambda self: None

    def GetClassName(self):
        return _molset.MMDriverAmber_GetClassName(self)

    def CalcEnergy(self):
        return _molset.MMDriverAmber_CalcEnergy(self)
    __swig_setmethods__["p_tm"] = _molset.MMDriverAmber_p_tm_set
    __swig_getmethods__["p_tm"] = _molset.MMDriverAmber_p_tm_get
    if _newclass:
        p_tm = _swig_property(_molset.MMDriverAmber_p_tm_get, _molset.MMDriverAmber_p_tm_set)
    __swig_setmethods__["p_amber_model"] = _molset.MMDriverAmber_p_amber_model_set
    __swig_getmethods__["p_amber_model"] = _molset.MMDriverAmber_p_amber_model_get
    if _newclass:
        p_amber_model = _swig_property(_molset.MMDriverAmber_p_amber_model_get, _molset.MMDriverAmber_p_amber_model_set)
    __swig_setmethods__["sander_exe_fname"] = _molset.MMDriverAmber_sander_exe_fname_set
    __swig_getmethods__["sander_exe_fname"] = _molset.MMDriverAmber_sander_exe_fname_get
    if _newclass:
        sander_exe_fname = _swig_property(_molset.MMDriverAmber_sander_exe_fname_get, _molset.MMDriverAmber_sander_exe_fname_set)
    __swig_setmethods__["amber_version"] = _molset.MMDriverAmber_amber_version_set
    __swig_getmethods__["amber_version"] = _molset.MMDriverAmber_amber_version_get
    if _newclass:
        amber_version = _swig_property(_molset.MMDriverAmber_amber_version_get, _molset.MMDriverAmber_amber_version_set)
    __swig_setmethods__["min_md_cpp_flag"] = _molset.MMDriverAmber_min_md_cpp_flag_set
    __swig_getmethods__["min_md_cpp_flag"] = _molset.MMDriverAmber_min_md_cpp_flag_get
    if _newclass:
        min_md_cpp_flag = _swig_property(_molset.MMDriverAmber_min_md_cpp_flag_get, _molset.MMDriverAmber_min_md_cpp_flag_set)
    __swig_setmethods__["driver_mpi_comm"] = _molset.MMDriverAmber_driver_mpi_comm_set
    __swig_getmethods__["driver_mpi_comm"] = _molset.MMDriverAmber_driver_mpi_comm_get
    if _newclass:
        driver_mpi_comm = _swig_property(_molset.MMDriverAmber_driver_mpi_comm_get, _molset.MMDriverAmber_driver_mpi_comm_set)
    __swig_setmethods__["driver_mpi_group"] = _molset.MMDriverAmber_driver_mpi_group_set
    __swig_getmethods__["driver_mpi_group"] = _molset.MMDriverAmber_driver_mpi_group_get
    if _newclass:
        driver_mpi_group = _swig_property(_molset.MMDriverAmber_driver_mpi_group_get, _molset.MMDriverAmber_driver_mpi_group_set)

    def SaveAmberRunFile(self):
        return _molset.MMDriverAmber_SaveAmberRunFile(self)

    def SaveAmberInpFile(self):
        return _molset.MMDriverAmber_SaveAmberInpFile(self)

    def SaveAmberTopFile(self):
        return _molset.MMDriverAmber_SaveAmberTopFile(self)

    def SaveAmberCrdFile(self):
        return _molset.MMDriverAmber_SaveAmberCrdFile(self)

    def SaveAmberRstFile(self, fname):
        return _molset.MMDriverAmber_SaveAmberRstFile(self, fname)

    def SaveAllInpFiles(self):
        return _molset.MMDriverAmber_SaveAllInpFiles(self)

    def DeleteOutputFiles(self):
        return _molset.MMDriverAmber_DeleteOutputFiles(self)

    def RunAmberProg(self, sync):
        return _molset.MMDriverAmber_RunAmberProg(self, sync)

    def LoadAmberRestartFile(self, rst_file_name):
        return _molset.MMDriverAmber_LoadAmberRestartFile(self, rst_file_name)

    def LoadAmberMDInfoFile(self):
        return _molset.MMDriverAmber_LoadAmberMDInfoFile(self)
    __swig_setmethods__["master"] = _molset.MMDriverAmber_master_set
    __swig_getmethods__["master"] = _molset.MMDriverAmber_master_get
    if _newclass:
        master = _swig_property(_molset.MMDriverAmber_master_get, _molset.MMDriverAmber_master_set)
    __swig_setmethods__["numtasks"] = _molset.MMDriverAmber_numtasks_set
    __swig_getmethods__["numtasks"] = _molset.MMDriverAmber_numtasks_get
    if _newclass:
        numtasks = _swig_property(_molset.MMDriverAmber_numtasks_get, _molset.MMDriverAmber_numtasks_set)
    __swig_setmethods__["mytaskid"] = _molset.MMDriverAmber_mytaskid_set
    __swig_getmethods__["mytaskid"] = _molset.MMDriverAmber_mytaskid_get
    if _newclass:
        mytaskid = _swig_property(_molset.MMDriverAmber_mytaskid_get, _molset.MMDriverAmber_mytaskid_set)
    __swig_setmethods__["my_atm_cnt"] = _molset.MMDriverAmber_my_atm_cnt_set
    __swig_getmethods__["my_atm_cnt"] = _molset.MMDriverAmber_my_atm_cnt_get
    if _newclass:
        my_atm_cnt = _swig_property(_molset.MMDriverAmber_my_atm_cnt_get, _molset.MMDriverAmber_my_atm_cnt_set)
    __swig_setmethods__["gbl_my_atm_lst"] = _molset.MMDriverAmber_gbl_my_atm_lst_set
    __swig_getmethods__["gbl_my_atm_lst"] = _molset.MMDriverAmber_gbl_my_atm_lst_get
    if _newclass:
        gbl_my_atm_lst = _swig_property(_molset.MMDriverAmber_gbl_my_atm_lst_get, _molset.MMDriverAmber_gbl_my_atm_lst_set)
    __swig_setmethods__["gbl_atm_owner_map"] = _molset.MMDriverAmber_gbl_atm_owner_map_set
    __swig_getmethods__["gbl_atm_owner_map"] = _molset.MMDriverAmber_gbl_atm_owner_map_get
    if _newclass:
        gbl_atm_owner_map = _swig_property(_molset.MMDriverAmber_gbl_atm_owner_map_get, _molset.MMDriverAmber_gbl_atm_owner_map_set)

    def SetMPICommAllProcs(self):
        return _molset.MMDriverAmber_SetMPICommAllProcs(self)

    def InitParallelDatMod(self):
        return _molset.MMDriverAmber_InitParallelDatMod(self)

    def ResizeCrdVelFrcArrays(self, natom):
        return _molset.MMDriverAmber_ResizeCrdVelFrcArrays(self, natom)

    def BcastCrd(self, comm):
        return _molset.MMDriverAmber_BcastCrd(self, comm)

    def BcastVel(self, comm):
        return _molset.MMDriverAmber_BcastVel(self, comm)

    def BcastFrc(self, comm):
        return _molset.MMDriverAmber_BcastFrc(self, comm)

    def BcastPBox(self, comm):
        return _molset.MMDriverAmber_BcastPBox(self, comm)

    def SetupMasterNode(self):
        return _molset.MMDriverAmber_SetupMasterNode(self)

    def SetupShakePars(self):
        return _molset.MMDriverAmber_SetupShakePars(self)

    def SetupPME(self):
        return _molset.MMDriverAmber_SetupPME(self)

    def SetupGB(self):
        return _molset.MMDriverAmber_SetupGB(self)

    def ValidateCntrParams(self):
        return _molset.MMDriverAmber_ValidateCntrParams(self)

    def PrintMDCntrData(self):
        return _molset.MMDriverAmber_PrintMDCntrData(self)

    def InitPMEParams(self):
        return _molset.MMDriverAmber_InitPMEParams(self)

    def InitAddMDCtrlParams(self):
        return _molset.MMDriverAmber_InitAddMDCtrlParams(self)

    def BCastAddMDCtrlParams(self, comm):
        return _molset.MMDriverAmber_BCastAddMDCtrlParams(self, comm)

    def SetAddMDCtrParamsFortran(self):
        return _molset.MMDriverAmber_SetAddMDCtrParamsFortran(self)

    def AllGatherVec(self, vec):
        return _molset.MMDriverAmber_AllGatherVec(self, vec)

    def PrintLogMDOUT(self, format):
        return _molset.MMDriverAmber_PrintLogMDOUT(self, format)

    def FlushMDOUT(self):
        return _molset.MMDriverAmber_FlushMDOUT(self)
    __swig_setmethods__["stack_limit"] = _molset.MMDriverAmber_stack_limit_set
    __swig_getmethods__["stack_limit"] = _molset.MMDriverAmber_stack_limit_get
    if _newclass:
        stack_limit = _swig_property(_molset.MMDriverAmber_stack_limit_get, _molset.MMDriverAmber_stack_limit_set)

    def ResetStackLimits(self):
        return _molset.MMDriverAmber_ResetStackLimits(self)

    def InitSimulationsStep2(self):
        return _molset.MMDriverAmber_InitSimulationsStep2(self)

    def InitCtrlParams(self):
        return _molset.MMDriverAmber_InitCtrlParams(self)

    def SaveAmberTopToStream(self, os):
        return _molset.MMDriverAmber_SaveAmberTopToStream(self, os)

    def SetAtomCrdToInternalArrays(self):
        return _molset.MMDriverAmber_SetAtomCrdToInternalArrays(self)

    def GetAtomCrdFromInternalArrays(self):
        return _molset.MMDriverAmber_GetAtomCrdFromInternalArrays(self)

    def SaveModelToFortran(self):
        return _molset.MMDriverAmber_SaveModelToFortran(self)

    def SetPBoxDataToFortran(self):
        return _molset.MMDriverAmber_SetPBoxDataToFortran(self)

    def GetPBoxDataFromFortran(self):
        return _molset.MMDriverAmber_GetPBoxDataFromFortran(self)

    def CheckForStop(self):
        return _molset.MMDriverAmber_CheckForStop(self)

    def OpenOutputFiles(self):
        return _molset.MMDriverAmber_OpenOutputFiles(self)

    def CloseOutputFiles(self):
        return _molset.MMDriverAmber_CloseOutputFiles(self)

    def GBForce(self, atm_cnt, crd, frc, si, ncalls):
        return _molset.MMDriverAmber_GBForce(self, atm_cnt, crd, frc, si, ncalls)

    def PMEForce(self, atm_cnt, crd, vel, frc, new_list, si):
        return _molset.MMDriverAmber_PMEForce(self, atm_cnt, crd, vel, frc, new_list, si)

    def CalcForceAndEne(self, new_list, ncalls):
        return _molset.MMDriverAmber_CalcForceAndEne(self, new_list, ncalls)

    def CalcKinEne(self, only_cur_vel=0):
        return _molset.MMDriverAmber_CalcKinEne(self, only_cur_vel)

    def IncrementVelAndCrd(self, nstep, crd, vel, frc, reset_velocities):
        return _molset.MMDriverAmber_IncrementVelAndCrd(self, nstep, crd, vel, frc, reset_velocities)

    def CalcPressure(self, si):
        return _molset.MMDriverAmber_CalcPressure(self, si)

    def ScaleCoordConstPress(self, crd, box, si):
        return _molset.MMDriverAmber_ScaleCoordConstPress(self, crd, box, si)

    def PropagateVelHalfStepBack(self, vel, frc):
        return _molset.MMDriverAmber_PropagateVelHalfStepBack(self, vel, frc)

    def SaveVelToLastVel(self, all_vels_valid):
        return _molset.MMDriverAmber_SaveVelToLastVel(self, all_vels_valid)

    def InitPBC(self):
        return _molset.MMDriverAmber_InitPBC(self)

    def CalcNumDegFreedom(self):
        return _molset.MMDriverAmber_CalcNumDegFreedom(self)

    def CalcCenMassVel(self, crd, vel, xcm, vcm, ocm):
        return _molset.MMDriverAmber_CalcCenMassVel(self, crd, vel, xcm, vcm, ocm)

    def RemoveCOMVelocity(self):
        return _molset.MMDriverAmber_RemoveCOMVelocity(self)

    def RemoveCOMVelAndResetCenter(self, all_crds_valid, all_vels_valid, sys_cnt):
        return _molset.MMDriverAmber_RemoveCOMVelAndResetCenter(self, all_crds_valid, all_vels_valid, sys_cnt)

    def GetPosition(self, crd, cnt):
        return _molset.MMDriverAmber_GetPosition(self, crd, cnt)

    def RePosition(self, crd, cnt):
        return _molset.MMDriverAmber_RePosition(self, crd, cnt)

    def GrdMax(self, frc, iatmax, fdmax):
        return _molset.MMDriverAmber_GrdMax(self, frc, iatmax, fdmax)

    def ZeroVelFrozenAtoms(self):
        return _molset.MMDriverAmber_ZeroVelFrozenAtoms(self)

    def ZeroFrcFrozenAtoms(self):
        return _molset.MMDriverAmber_ZeroFrcFrozenAtoms(self)

    def CollectCoords(self, new_list, nstep, collect_crds, all_crds_valid):
        return _molset.MMDriverAmber_CollectCoords(self, new_list, nstep, collect_crds, all_crds_valid)

    def CollectVelocities(self, new_list, nstep, collect_crds, all_vels_valid):
        return _molset.MMDriverAmber_CollectVelocities(self, new_list, nstep, collect_crds, all_vels_valid)

    def ScaleVelConstTemp(self):
        return _molset.MMDriverAmber_ScaleVelConstTemp(self)

    def CheckForNewNonBondList(self):
        return _molset.MMDriverAmber_CheckForNewNonBondList(self)

    def CheckAllAtomMovement(self, atm_cnt, crd):
        return _molset.MMDriverAmber_CheckAllAtomMovement(self, atm_cnt, crd)

    def RunMinMaster(self):
        return _molset.MMDriverAmber_RunMinMaster(self)

    def RunMinSlave(self):
        return _molset.MMDriverAmber_RunMinSlave(self)

    def RunMD(self):
        return _molset.MMDriverAmber_RunMD(self)

    def CalcCurrEne(self):
        return _molset.MMDriverAmber_CalcCurrEne(self)

    def SetMMInfo(self, info, si):
        return _molset.MMDriverAmber_SetMMInfo(self, info, si)

    def SetPrmTopIntFortran(self):
        return _molset.MMDriverAmber_SetPrmTopIntFortran(self)

    def SetMDinCtrlDblFortran(self):
        return _molset.MMDriverAmber_SetMDinCtrlDblFortran(self)

    def SetMDinCtrlIntFortran(self):
        return _molset.MMDriverAmber_SetMDinCtrlIntFortran(self)

    def SetAddIntParsFortran(self):
        return _molset.MMDriverAmber_SetAddIntParsFortran(self)

    def SetPMEParsFortran(self):
        return _molset.MMDriverAmber_SetPMEParsFortran(self)
    if _newclass:
        ModifyFormatVal = staticmethod(_molset.MMDriverAmber_ModifyFormatVal)
    else:
        ModifyFormatVal = _molset.MMDriverAmber_ModifyFormatVal

    def PrintMDEneMDOUT(self, si_vec, nstep, t):
        return _molset.MMDriverAmber_PrintMDEneMDOUT(self, si_vec, nstep, t)

    def PrintMinEneMDOUT(self, si_vec, nstep, rms, fdmax, iatmax, labmax):
        return _molset.MMDriverAmber_PrintMinEneMDOUT(self, si_vec, nstep, rms, fdmax, iatmax, labmax)
    if _newclass:
        TestFFT1 = staticmethod(_molset.MMDriverAmber_TestFFT1)
    else:
        TestFFT1 = _molset.MMDriverAmber_TestFFT1
    if _newclass:
        OpenAmberMDTrajFortran = staticmethod(_molset.MMDriverAmber_OpenAmberMDTrajFortran)
    else:
        OpenAmberMDTrajFortran = _molset.MMDriverAmber_OpenAmberMDTrajFortran
    if _newclass:
        WriteCrdToAmberMDTrajFortran = staticmethod(_molset.MMDriverAmber_WriteCrdToAmberMDTrajFortran)
    else:
        WriteCrdToAmberMDTrajFortran = _molset.MMDriverAmber_WriteCrdToAmberMDTrajFortran
    if _newclass:
        CloseAmberMDTrajFortran = staticmethod(_molset.MMDriverAmber_CloseAmberMDTrajFortran)
    else:
        CloseAmberMDTrajFortran = _molset.MMDriverAmber_CloseAmberMDTrajFortran
    __swig_setmethods__["amber_run_file"] = _molset.MMDriverAmber_amber_run_file_set
    __swig_getmethods__["amber_run_file"] = _molset.MMDriverAmber_amber_run_file_get
    if _newclass:
        amber_run_file = _swig_property(_molset.MMDriverAmber_amber_run_file_get, _molset.MMDriverAmber_amber_run_file_set)
    __swig_setmethods__["amber_inp_file"] = _molset.MMDriverAmber_amber_inp_file_set
    __swig_getmethods__["amber_inp_file"] = _molset.MMDriverAmber_amber_inp_file_get
    if _newclass:
        amber_inp_file = _swig_property(_molset.MMDriverAmber_amber_inp_file_get, _molset.MMDriverAmber_amber_inp_file_set)
    __swig_setmethods__["amber_top_file"] = _molset.MMDriverAmber_amber_top_file_set
    __swig_getmethods__["amber_top_file"] = _molset.MMDriverAmber_amber_top_file_get
    if _newclass:
        amber_top_file = _swig_property(_molset.MMDriverAmber_amber_top_file_get, _molset.MMDriverAmber_amber_top_file_set)
    __swig_setmethods__["amber_crd_file"] = _molset.MMDriverAmber_amber_crd_file_set
    __swig_getmethods__["amber_crd_file"] = _molset.MMDriverAmber_amber_crd_file_get
    if _newclass:
        amber_crd_file = _swig_property(_molset.MMDriverAmber_amber_crd_file_get, _molset.MMDriverAmber_amber_crd_file_set)
    __swig_setmethods__["amber_out_file"] = _molset.MMDriverAmber_amber_out_file_set
    __swig_getmethods__["amber_out_file"] = _molset.MMDriverAmber_amber_out_file_get
    if _newclass:
        amber_out_file = _swig_property(_molset.MMDriverAmber_amber_out_file_get, _molset.MMDriverAmber_amber_out_file_set)
    __swig_setmethods__["amber_rst_file"] = _molset.MMDriverAmber_amber_rst_file_set
    __swig_getmethods__["amber_rst_file"] = _molset.MMDriverAmber_amber_rst_file_get
    if _newclass:
        amber_rst_file = _swig_property(_molset.MMDriverAmber_amber_rst_file_get, _molset.MMDriverAmber_amber_rst_file_set)
    __swig_setmethods__["amber_trj_coord_file"] = _molset.MMDriverAmber_amber_trj_coord_file_set
    __swig_getmethods__["amber_trj_coord_file"] = _molset.MMDriverAmber_amber_trj_coord_file_get
    if _newclass:
        amber_trj_coord_file = _swig_property(_molset.MMDriverAmber_amber_trj_coord_file_get, _molset.MMDriverAmber_amber_trj_coord_file_set)
    __swig_setmethods__["amber_trj_vel_file"] = _molset.MMDriverAmber_amber_trj_vel_file_set
    __swig_getmethods__["amber_trj_vel_file"] = _molset.MMDriverAmber_amber_trj_vel_file_get
    if _newclass:
        amber_trj_vel_file = _swig_property(_molset.MMDriverAmber_amber_trj_vel_file_get, _molset.MMDriverAmber_amber_trj_vel_file_set)
    __swig_setmethods__["amber_trj_ene_file"] = _molset.MMDriverAmber_amber_trj_ene_file_set
    __swig_getmethods__["amber_trj_ene_file"] = _molset.MMDriverAmber_amber_trj_ene_file_get
    if _newclass:
        amber_trj_ene_file = _swig_property(_molset.MMDriverAmber_amber_trj_ene_file_get, _molset.MMDriverAmber_amber_trj_ene_file_set)
    __swig_setmethods__["amber_constr_crd_file"] = _molset.MMDriverAmber_amber_constr_crd_file_set
    __swig_getmethods__["amber_constr_crd_file"] = _molset.MMDriverAmber_amber_constr_crd_file_get
    if _newclass:
        amber_constr_crd_file = _swig_property(_molset.MMDriverAmber_amber_constr_crd_file_get, _molset.MMDriverAmber_amber_constr_crd_file_set)
    __swig_setmethods__["amber_log_file"] = _molset.MMDriverAmber_amber_log_file_set
    __swig_getmethods__["amber_log_file"] = _molset.MMDriverAmber_amber_log_file_get
    if _newclass:
        amber_log_file = _swig_property(_molset.MMDriverAmber_amber_log_file_get, _molset.MMDriverAmber_amber_log_file_set)
    __swig_setmethods__["trj_coord_fp"] = _molset.MMDriverAmber_trj_coord_fp_set
    __swig_getmethods__["trj_coord_fp"] = _molset.MMDriverAmber_trj_coord_fp_get
    if _newclass:
        trj_coord_fp = _swig_property(_molset.MMDriverAmber_trj_coord_fp_get, _molset.MMDriverAmber_trj_coord_fp_set)
    __swig_setmethods__["trj_vel_fp"] = _molset.MMDriverAmber_trj_vel_fp_set
    __swig_getmethods__["trj_vel_fp"] = _molset.MMDriverAmber_trj_vel_fp_get
    if _newclass:
        trj_vel_fp = _swig_property(_molset.MMDriverAmber_trj_vel_fp_get, _molset.MMDriverAmber_trj_vel_fp_set)
    __swig_setmethods__["trj_ene_fp"] = _molset.MMDriverAmber_trj_ene_fp_set
    __swig_getmethods__["trj_ene_fp"] = _molset.MMDriverAmber_trj_ene_fp_get
    if _newclass:
        trj_ene_fp = _swig_property(_molset.MMDriverAmber_trj_ene_fp_get, _molset.MMDriverAmber_trj_ene_fp_set)
    __swig_setmethods__["title"] = _molset.MMDriverAmber_title_set
    __swig_getmethods__["title"] = _molset.MMDriverAmber_title_get
    if _newclass:
        title = _swig_property(_molset.MMDriverAmber_title_get, _molset.MMDriverAmber_title_set)
    __swig_setmethods__["ntave"] = _molset.MMDriverAmber_ntave_set
    __swig_getmethods__["ntave"] = _molset.MMDriverAmber_ntave_get
    if _newclass:
        ntave = _swig_property(_molset.MMDriverAmber_ntave_get, _molset.MMDriverAmber_ntave_set)
    __swig_setmethods__["nsnb"] = _molset.MMDriverAmber_nsnb_set
    __swig_getmethods__["nsnb"] = _molset.MMDriverAmber_nsnb_get
    if _newclass:
        nsnb = _swig_property(_molset.MMDriverAmber_nsnb_get, _molset.MMDriverAmber_nsnb_set)
    __swig_setmethods__["nrespa"] = _molset.MMDriverAmber_nrespa_set
    __swig_getmethods__["nrespa"] = _molset.MMDriverAmber_nrespa_get
    if _newclass:
        nrespa = _swig_property(_molset.MMDriverAmber_nrespa_get, _molset.MMDriverAmber_nrespa_set)
    __swig_setmethods__["ntp"] = _molset.MMDriverAmber_ntp_set
    __swig_getmethods__["ntp"] = _molset.MMDriverAmber_ntp_get
    if _newclass:
        ntp = _swig_property(_molset.MMDriverAmber_ntp_get, _molset.MMDriverAmber_ntp_set)
    __swig_setmethods__["ntc"] = _molset.MMDriverAmber_ntc_set
    __swig_getmethods__["ntc"] = _molset.MMDriverAmber_ntc_get
    if _newclass:
        ntc = _swig_property(_molset.MMDriverAmber_ntc_get, _molset.MMDriverAmber_ntc_set)
    __swig_setmethods__["jfastw"] = _molset.MMDriverAmber_jfastw_set
    __swig_getmethods__["jfastw"] = _molset.MMDriverAmber_jfastw_get
    if _newclass:
        jfastw = _swig_property(_molset.MMDriverAmber_jfastw_get, _molset.MMDriverAmber_jfastw_set)
    __swig_setmethods__["nrespai"] = _molset.MMDriverAmber_nrespai_set
    __swig_getmethods__["nrespai"] = _molset.MMDriverAmber_nrespai_get
    if _newclass:
        nrespai = _swig_property(_molset.MMDriverAmber_nrespai_get, _molset.MMDriverAmber_nrespai_set)
    __swig_setmethods__["ndfmin"] = _molset.MMDriverAmber_ndfmin_set
    __swig_getmethods__["ndfmin"] = _molset.MMDriverAmber_ndfmin_get
    if _newclass:
        ndfmin = _swig_property(_molset.MMDriverAmber_ndfmin_get, _molset.MMDriverAmber_ndfmin_set)
    __swig_setmethods__["t"] = _molset.MMDriverAmber_t_set
    __swig_getmethods__["t"] = _molset.MMDriverAmber_t_get
    if _newclass:
        t = _swig_property(_molset.MMDriverAmber_t_get, _molset.MMDriverAmber_t_set)
    __swig_setmethods__["mdin"] = _molset.MMDriverAmber_mdin_set
    __swig_getmethods__["mdin"] = _molset.MMDriverAmber_mdin_get
    if _newclass:
        mdin = _swig_property(_molset.MMDriverAmber_mdin_get, _molset.MMDriverAmber_mdin_set)
    __swig_setmethods__["mdout"] = _molset.MMDriverAmber_mdout_set
    __swig_getmethods__["mdout"] = _molset.MMDriverAmber_mdout_get
    if _newclass:
        mdout = _swig_property(_molset.MMDriverAmber_mdout_get, _molset.MMDriverAmber_mdout_set)
    __swig_setmethods__["mdcrd"] = _molset.MMDriverAmber_mdcrd_set
    __swig_getmethods__["mdcrd"] = _molset.MMDriverAmber_mdcrd_get
    if _newclass:
        mdcrd = _swig_property(_molset.MMDriverAmber_mdcrd_get, _molset.MMDriverAmber_mdcrd_set)
    __swig_setmethods__["mdvel"] = _molset.MMDriverAmber_mdvel_set
    __swig_getmethods__["mdvel"] = _molset.MMDriverAmber_mdvel_get
    if _newclass:
        mdvel = _swig_property(_molset.MMDriverAmber_mdvel_get, _molset.MMDriverAmber_mdvel_set)
    __swig_setmethods__["mdinfo_flush_interval"] = _molset.MMDriverAmber_mdinfo_flush_interval_set
    __swig_getmethods__["mdinfo_flush_interval"] = _molset.MMDriverAmber_mdinfo_flush_interval_get
    if _newclass:
        mdinfo_flush_interval = _swig_property(_molset.MMDriverAmber_mdinfo_flush_interval_get, _molset.MMDriverAmber_mdinfo_flush_interval_set)
    __swig_setmethods__["mdout_flush_interval"] = _molset.MMDriverAmber_mdout_flush_interval_set
    __swig_getmethods__["mdout_flush_interval"] = _molset.MMDriverAmber_mdout_flush_interval_get
    if _newclass:
        mdout_flush_interval = _swig_property(_molset.MMDriverAmber_mdout_flush_interval_get, _molset.MMDriverAmber_mdout_flush_interval_set)
    __swig_setmethods__["dbg_atom_redistribution"] = _molset.MMDriverAmber_dbg_atom_redistribution_set
    __swig_getmethods__["dbg_atom_redistribution"] = _molset.MMDriverAmber_dbg_atom_redistribution_get
    if _newclass:
        dbg_atom_redistribution = _swig_property(_molset.MMDriverAmber_dbg_atom_redistribution_get, _molset.MMDriverAmber_dbg_atom_redistribution_set)
    __swig_setmethods__["loadbal_verbose"] = _molset.MMDriverAmber_loadbal_verbose_set
    __swig_getmethods__["loadbal_verbose"] = _molset.MMDriverAmber_loadbal_verbose_get
    if _newclass:
        loadbal_verbose = _swig_property(_molset.MMDriverAmber_loadbal_verbose_get, _molset.MMDriverAmber_loadbal_verbose_set)
    __swig_setmethods__["next_mdout_flush_sec"] = _molset.MMDriverAmber_next_mdout_flush_sec_set
    __swig_getmethods__["next_mdout_flush_sec"] = _molset.MMDriverAmber_next_mdout_flush_sec_get
    if _newclass:
        next_mdout_flush_sec = _swig_property(_molset.MMDriverAmber_next_mdout_flush_sec_get, _molset.MMDriverAmber_next_mdout_flush_sec_set)
    __swig_setmethods__["atm_crd"] = _molset.MMDriverAmber_atm_crd_set
    __swig_getmethods__["atm_crd"] = _molset.MMDriverAmber_atm_crd_get
    if _newclass:
        atm_crd = _swig_property(_molset.MMDriverAmber_atm_crd_get, _molset.MMDriverAmber_atm_crd_set)
    __swig_setmethods__["atm_frc"] = _molset.MMDriverAmber_atm_frc_set
    __swig_getmethods__["atm_frc"] = _molset.MMDriverAmber_atm_frc_get
    if _newclass:
        atm_frc = _swig_property(_molset.MMDriverAmber_atm_frc_get, _molset.MMDriverAmber_atm_frc_set)
    __swig_setmethods__["atm_vel"] = _molset.MMDriverAmber_atm_vel_set
    __swig_getmethods__["atm_vel"] = _molset.MMDriverAmber_atm_vel_get
    if _newclass:
        atm_vel = _swig_property(_molset.MMDriverAmber_atm_vel_get, _molset.MMDriverAmber_atm_vel_set)
    __swig_setmethods__["atm_last_vel"] = _molset.MMDriverAmber_atm_last_vel_set
    __swig_getmethods__["atm_last_vel"] = _molset.MMDriverAmber_atm_last_vel_get
    if _newclass:
        atm_last_vel = _swig_property(_molset.MMDriverAmber_atm_last_vel_get, _molset.MMDriverAmber_atm_last_vel_set)
    __swig_setmethods__["gbl_atm_saved_crd"] = _molset.MMDriverAmber_gbl_atm_saved_crd_set
    __swig_getmethods__["gbl_atm_saved_crd"] = _molset.MMDriverAmber_gbl_atm_saved_crd_get
    if _newclass:
        gbl_atm_saved_crd = _swig_property(_molset.MMDriverAmber_gbl_atm_saved_crd_get, _molset.MMDriverAmber_gbl_atm_saved_crd_set)
    __swig_setmethods__["gbl_saved_box"] = _molset.MMDriverAmber_gbl_saved_box_set
    __swig_getmethods__["gbl_saved_box"] = _molset.MMDriverAmber_gbl_saved_box_get
    if _newclass:
        gbl_saved_box = _swig_property(_molset.MMDriverAmber_gbl_saved_box_get, _molset.MMDriverAmber_gbl_saved_box_set)
    __swig_setmethods__["sys_info"] = _molset.MMDriverAmber_sys_info_set
    __swig_getmethods__["sys_info"] = _molset.MMDriverAmber_sys_info_get
    if _newclass:
        sys_info = _swig_property(_molset.MMDriverAmber_sys_info_get, _molset.MMDriverAmber_sys_info_set)
    __swig_setmethods__["collect_crds"] = _molset.MMDriverAmber_collect_crds_set
    __swig_getmethods__["collect_crds"] = _molset.MMDriverAmber_collect_crds_get
    if _newclass:
        collect_crds = _swig_property(_molset.MMDriverAmber_collect_crds_get, _molset.MMDriverAmber_collect_crds_set)
    __swig_setmethods__["all_crds_valid"] = _molset.MMDriverAmber_all_crds_valid_set
    __swig_getmethods__["all_crds_valid"] = _molset.MMDriverAmber_all_crds_valid_get
    if _newclass:
        all_crds_valid = _swig_property(_molset.MMDriverAmber_all_crds_valid_get, _molset.MMDriverAmber_all_crds_valid_set)
    __swig_setmethods__["all_vels_valid"] = _molset.MMDriverAmber_all_vels_valid_set
    __swig_getmethods__["all_vels_valid"] = _molset.MMDriverAmber_all_vels_valid_get
    if _newclass:
        all_vels_valid = _swig_property(_molset.MMDriverAmber_all_vels_valid_get, _molset.MMDriverAmber_all_vels_valid_set)
    __swig_setmethods__["pbc_box"] = _molset.MMDriverAmber_pbc_box_set
    __swig_getmethods__["pbc_box"] = _molset.MMDriverAmber_pbc_box_get
    if _newclass:
        pbc_box = _swig_property(_molset.MMDriverAmber_pbc_box_get, _molset.MMDriverAmber_pbc_box_set)
    __swig_setmethods__["pbc_alpha"] = _molset.MMDriverAmber_pbc_alpha_set
    __swig_getmethods__["pbc_alpha"] = _molset.MMDriverAmber_pbc_alpha_get
    if _newclass:
        pbc_alpha = _swig_property(_molset.MMDriverAmber_pbc_alpha_get, _molset.MMDriverAmber_pbc_alpha_set)
    __swig_setmethods__["pbc_beta"] = _molset.MMDriverAmber_pbc_beta_set
    __swig_getmethods__["pbc_beta"] = _molset.MMDriverAmber_pbc_beta_get
    if _newclass:
        pbc_beta = _swig_property(_molset.MMDriverAmber_pbc_beta_get, _molset.MMDriverAmber_pbc_beta_set)
    __swig_setmethods__["pbc_gamma"] = _molset.MMDriverAmber_pbc_gamma_set
    __swig_getmethods__["pbc_gamma"] = _molset.MMDriverAmber_pbc_gamma_get
    if _newclass:
        pbc_gamma = _swig_property(_molset.MMDriverAmber_pbc_gamma_get, _molset.MMDriverAmber_pbc_gamma_set)
    __swig_setmethods__["is_orthog"] = _molset.MMDriverAmber_is_orthog_set
    __swig_getmethods__["is_orthog"] = _molset.MMDriverAmber_is_orthog_get
    if _newclass:
        is_orthog = _swig_property(_molset.MMDriverAmber_is_orthog_get, _molset.MMDriverAmber_is_orthog_set)
    __swig_setmethods__["is_octahedral"] = _molset.MMDriverAmber_is_octahedral_set
    __swig_getmethods__["is_octahedral"] = _molset.MMDriverAmber_is_octahedral_get
    if _newclass:
        is_octahedral = _swig_property(_molset.MMDriverAmber_is_octahedral_get, _molset.MMDriverAmber_is_octahedral_set)
    __swig_setmethods__["recip"] = _molset.MMDriverAmber_recip_set
    __swig_getmethods__["recip"] = _molset.MMDriverAmber_recip_get
    if _newclass:
        recip = _swig_property(_molset.MMDriverAmber_recip_get, _molset.MMDriverAmber_recip_set)
    __swig_setmethods__["ucell"] = _molset.MMDriverAmber_ucell_set
    __swig_getmethods__["ucell"] = _molset.MMDriverAmber_ucell_get
    if _newclass:
        ucell = _swig_property(_molset.MMDriverAmber_ucell_get, _molset.MMDriverAmber_ucell_set)
    __swig_setmethods__["cut_factor"] = _molset.MMDriverAmber_cut_factor_set
    __swig_getmethods__["cut_factor"] = _molset.MMDriverAmber_cut_factor_get
    if _newclass:
        cut_factor = _swig_property(_molset.MMDriverAmber_cut_factor_get, _molset.MMDriverAmber_cut_factor_set)
    __swig_setmethods__["reclng"] = _molset.MMDriverAmber_reclng_set
    __swig_getmethods__["reclng"] = _molset.MMDriverAmber_reclng_get
    if _newclass:
        reclng = _swig_property(_molset.MMDriverAmber_reclng_get, _molset.MMDriverAmber_reclng_set)
    __swig_setmethods__["uc_volume"] = _molset.MMDriverAmber_uc_volume_set
    __swig_getmethods__["uc_volume"] = _molset.MMDriverAmber_uc_volume_get
    if _newclass:
        uc_volume = _swig_property(_molset.MMDriverAmber_uc_volume_get, _molset.MMDriverAmber_uc_volume_set)
    __swig_setmethods__["uc_sphere"] = _molset.MMDriverAmber_uc_sphere_set
    __swig_getmethods__["uc_sphere"] = _molset.MMDriverAmber_uc_sphere_get
    if _newclass:
        uc_sphere = _swig_property(_molset.MMDriverAmber_uc_sphere_get, _molset.MMDriverAmber_uc_sphere_set)
    __swig_setmethods__["tranvec"] = _molset.MMDriverAmber_tranvec_set
    __swig_getmethods__["tranvec"] = _molset.MMDriverAmber_tranvec_get
    if _newclass:
        tranvec = _swig_property(_molset.MMDriverAmber_tranvec_get, _molset.MMDriverAmber_tranvec_set)
    __swig_setmethods__["dirfrc_efs"] = _molset.MMDriverAmber_dirfrc_efs_set
    __swig_getmethods__["dirfrc_efs"] = _molset.MMDriverAmber_dirfrc_efs_get
    if _newclass:
        dirfrc_efs = _swig_property(_molset.MMDriverAmber_dirfrc_efs_get, _molset.MMDriverAmber_dirfrc_efs_set)
    __swig_setmethods__["emulate_ext_amber"] = _molset.MMDriverAmber_emulate_ext_amber_set
    __swig_getmethods__["emulate_ext_amber"] = _molset.MMDriverAmber_emulate_ext_amber_get
    if _newclass:
        emulate_ext_amber = _swig_property(_molset.MMDriverAmber_emulate_ext_amber_get, _molset.MMDriverAmber_emulate_ext_amber_set)
    SI_TOT_ENE = _molset.MMDriverAmber_SI_TOT_ENE
    SI_KIN_ENE = _molset.MMDriverAmber_SI_KIN_ENE
    SI_SOLUTE_KIN_ENE = _molset.MMDriverAmber_SI_SOLUTE_KIN_ENE
    SI_SOLVENT_KIN_ENE = _molset.MMDriverAmber_SI_SOLVENT_KIN_ENE
    SI_VOLUME = _molset.MMDriverAmber_SI_VOLUME
    SI_TOT_PRESS = _molset.MMDriverAmber_SI_TOT_PRESS
    SI_TOT_EKCMT = _molset.MMDriverAmber_SI_TOT_EKCMT
    SI_TOT_VIRIAL = _molset.MMDriverAmber_SI_TOT_VIRIAL
    SI_POT_ENE = _molset.MMDriverAmber_SI_POT_ENE
    SI_VDW_ENE = _molset.MMDriverAmber_SI_VDW_ENE
    SI_ELECT_ENE = _molset.MMDriverAmber_SI_ELECT_ENE
    SI_HBOND_ENE = _molset.MMDriverAmber_SI_HBOND_ENE
    SI_BOND_ENE = _molset.MMDriverAmber_SI_BOND_ENE
    SI_ANGLE_ENE = _molset.MMDriverAmber_SI_ANGLE_ENE
    SI_DIHEDRAL_ENE = _molset.MMDriverAmber_SI_DIHEDRAL_ENE
    SI_VDW_14_ENE = _molset.MMDriverAmber_SI_VDW_14_ENE
    SI_ELECT_14_ENE = _molset.MMDriverAmber_SI_ELECT_14_ENE
    SI_RESTRAINT_ENE = _molset.MMDriverAmber_SI_RESTRAINT_ENE
    SI_DV_DLAMBDA = _molset.MMDriverAmber_SI_DV_DLAMBDA
    SI_DENSITY = _molset.MMDriverAmber_SI_DENSITY
    SI_PME_ERR_EST = _molset.MMDriverAmber_SI_PME_ERR_EST
    SI_PRESS_0 = _molset.MMDriverAmber_SI_PRESS_0
    SI_PRESS_1 = _molset.MMDriverAmber_SI_PRESS_1
    SI_PRESS_2 = _molset.MMDriverAmber_SI_PRESS_2
    SI_EKCMT_0 = _molset.MMDriverAmber_SI_EKCMT_0
    SI_EKCMT_1 = _molset.MMDriverAmber_SI_EKCMT_1
    SI_EKCMT_2 = _molset.MMDriverAmber_SI_EKCMT_2
    SI_VIR_0 = _molset.MMDriverAmber_SI_VIR_0
    SI_VIR_1 = _molset.MMDriverAmber_SI_VIR_1
    SI_VIR_2 = _molset.MMDriverAmber_SI_VIR_2
    SI_KIN_ENE_PLUS_HALF_DT = _molset.MMDriverAmber_SI_KIN_ENE_PLUS_HALF_DT
    SI_KIN_ENE_MINUS_HALF_DT = _molset.MMDriverAmber_SI_KIN_ENE_MINUS_HALF_DT
    SI_KIN_ENE_PBS = _molset.MMDriverAmber_SI_KIN_ENE_PBS
    SI_TEMP = _molset.MMDriverAmber_SI_TEMP
    SI_TEMP_SOLUTE = _molset.MMDriverAmber_SI_TEMP_SOLUTE
    SI_TEMP_SOLVENT = _molset.MMDriverAmber_SI_TEMP_SOLVENT
    SI_POLAR = _molset.MMDriverAmber_SI_POLAR
    SI_DIPITER = _molset.MMDriverAmber_SI_DIPITER
    SI_DIPRMS = _molset.MMDriverAmber_SI_DIPRMS
    SI_CNT = _molset.MMDriverAmber_SI_CNT
MMDriverAmber_swigregister = _molset.MMDriverAmber_swigregister
MMDriverAmber_swigregister(MMDriverAmber)

def MMDriverAmber_ModifyFormatVal(val, format):
    return _molset.MMDriverAmber_ModifyFormatVal(val, format)
MMDriverAmber_ModifyFormatVal = _molset.MMDriverAmber_ModifyFormatVal

def MMDriverAmber_TestFFT1():
    return _molset.MMDriverAmber_TestFFT1()
MMDriverAmber_TestFFT1 = _molset.MMDriverAmber_TestFFT1

def MMDriverAmber_OpenAmberMDTrajFortran(iunit, fname, write_flag=True, formatted=True):
    return _molset.MMDriverAmber_OpenAmberMDTrajFortran(iunit, fname, write_flag, formatted)
MMDriverAmber_OpenAmberMDTrajFortran = _molset.MMDriverAmber_OpenAmberMDTrajFortran

def MMDriverAmber_WriteCrdToAmberMDTrajFortran(iunit, pt_cont, save_box=True, formatted=True):
    return _molset.MMDriverAmber_WriteCrdToAmberMDTrajFortran(iunit, pt_cont, save_box, formatted)
MMDriverAmber_WriteCrdToAmberMDTrajFortran = _molset.MMDriverAmber_WriteCrdToAmberMDTrajFortran

def MMDriverAmber_CloseAmberMDTrajFortran(iunit):
    return _molset.MMDriverAmber_CloseAmberMDTrajFortran(iunit)
MMDriverAmber_CloseAmberMDTrajFortran = _molset.MMDriverAmber_CloseAmberMDTrajFortran

class AmberMMModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AmberMMModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AmberMMModel, name)
    __repr__ = _swig_repr

    def __init__(self, p_mm_model):
        this = _molset.new_AmberMMModel(p_mm_model)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AmberMMModel
    __del__ = lambda self: None

    def UpdateAmberData(self):
        return _molset.AmberMMModel_UpdateAmberData(self)

    def InitAmberModelAmoeba(self):
        return _molset.AmberMMModel_InitAmberModelAmoeba(self)

    def SetAtomNum(self, natom_new):
        return _molset.AmberMMModel_SetAtomNum(self, natom_new)

    def FindResMolPartition(self):
        return _molset.AmberMMModel_FindResMolPartition(self)

    def CalcAddDihParams(self):
        return _molset.AmberMMModel_CalcAddDihParams(self)

    def SetAtomPosRestrData(self):
        return _molset.AmberMMModel_SetAtomPosRestrData(self)

    def Bcast(self, comm):
        return _molset.AmberMMModel_Bcast(self, comm)

    def BcastAtmMass(self, comm):
        return _molset.AmberMMModel_BcastAtmMass(self, comm)

    def Clear(self):
        return _molset.AmberMMModel_Clear(self)

    def SetUpdateDataFlag(self, to_update_flag_new=1):
        return _molset.AmberMMModel_SetUpdateDataFlag(self, to_update_flag_new)
    __swig_setmethods__["ntf"] = _molset.AmberMMModel_ntf_set
    __swig_getmethods__["ntf"] = _molset.AmberMMModel_ntf_get
    if _newclass:
        ntf = _swig_property(_molset.AmberMMModel_ntf_get, _molset.AmberMMModel_ntf_set)
    __swig_setmethods__["natom"] = _molset.AmberMMModel_natom_set
    __swig_getmethods__["natom"] = _molset.AmberMMModel_natom_get
    if _newclass:
        natom = _swig_property(_molset.AmberMMModel_natom_get, _molset.AmberMMModel_natom_set)
    __swig_setmethods__["ntypes"] = _molset.AmberMMModel_ntypes_set
    __swig_getmethods__["ntypes"] = _molset.AmberMMModel_ntypes_get
    if _newclass:
        ntypes = _swig_property(_molset.AmberMMModel_ntypes_get, _molset.AmberMMModel_ntypes_set)
    __swig_setmethods__["nbonh"] = _molset.AmberMMModel_nbonh_set
    __swig_getmethods__["nbonh"] = _molset.AmberMMModel_nbonh_get
    if _newclass:
        nbonh = _swig_property(_molset.AmberMMModel_nbonh_get, _molset.AmberMMModel_nbonh_set)
    __swig_setmethods__["ntheth"] = _molset.AmberMMModel_ntheth_set
    __swig_getmethods__["ntheth"] = _molset.AmberMMModel_ntheth_get
    if _newclass:
        ntheth = _swig_property(_molset.AmberMMModel_ntheth_get, _molset.AmberMMModel_ntheth_set)
    __swig_setmethods__["nphih"] = _molset.AmberMMModel_nphih_set
    __swig_getmethods__["nphih"] = _molset.AmberMMModel_nphih_get
    if _newclass:
        nphih = _swig_property(_molset.AmberMMModel_nphih_get, _molset.AmberMMModel_nphih_set)
    __swig_setmethods__["next"] = _molset.AmberMMModel_next_set
    __swig_getmethods__["next"] = _molset.AmberMMModel_next_get
    if _newclass:
        next = _swig_property(_molset.AmberMMModel_next_get, _molset.AmberMMModel_next_set)
    __swig_setmethods__["nres"] = _molset.AmberMMModel_nres_set
    __swig_getmethods__["nres"] = _molset.AmberMMModel_nres_get
    if _newclass:
        nres = _swig_property(_molset.AmberMMModel_nres_get, _molset.AmberMMModel_nres_set)
    __swig_setmethods__["nbona"] = _molset.AmberMMModel_nbona_set
    __swig_getmethods__["nbona"] = _molset.AmberMMModel_nbona_get
    if _newclass:
        nbona = _swig_property(_molset.AmberMMModel_nbona_get, _molset.AmberMMModel_nbona_set)
    __swig_setmethods__["ntheta"] = _molset.AmberMMModel_ntheta_set
    __swig_getmethods__["ntheta"] = _molset.AmberMMModel_ntheta_get
    if _newclass:
        ntheta = _swig_property(_molset.AmberMMModel_ntheta_get, _molset.AmberMMModel_ntheta_set)
    __swig_setmethods__["nphia"] = _molset.AmberMMModel_nphia_set
    __swig_getmethods__["nphia"] = _molset.AmberMMModel_nphia_get
    if _newclass:
        nphia = _swig_property(_molset.AmberMMModel_nphia_get, _molset.AmberMMModel_nphia_set)
    __swig_setmethods__["numbnd"] = _molset.AmberMMModel_numbnd_set
    __swig_getmethods__["numbnd"] = _molset.AmberMMModel_numbnd_get
    if _newclass:
        numbnd = _swig_property(_molset.AmberMMModel_numbnd_get, _molset.AmberMMModel_numbnd_set)
    __swig_setmethods__["numang"] = _molset.AmberMMModel_numang_set
    __swig_getmethods__["numang"] = _molset.AmberMMModel_numang_get
    if _newclass:
        numang = _swig_property(_molset.AmberMMModel_numang_get, _molset.AmberMMModel_numang_set)
    __swig_setmethods__["nptra"] = _molset.AmberMMModel_nptra_set
    __swig_getmethods__["nptra"] = _molset.AmberMMModel_nptra_get
    if _newclass:
        nptra = _swig_property(_molset.AmberMMModel_nptra_get, _molset.AmberMMModel_nptra_set)
    __swig_setmethods__["nphb"] = _molset.AmberMMModel_nphb_set
    __swig_getmethods__["nphb"] = _molset.AmberMMModel_nphb_get
    if _newclass:
        nphb = _swig_property(_molset.AmberMMModel_nphb_get, _molset.AmberMMModel_nphb_set)
    __swig_setmethods__["nspm"] = _molset.AmberMMModel_nspm_set
    __swig_getmethods__["nspm"] = _molset.AmberMMModel_nspm_get
    if _newclass:
        nspm = _swig_property(_molset.AmberMMModel_nspm_get, _molset.AmberMMModel_nspm_set)
    __swig_setmethods__["nttyp"] = _molset.AmberMMModel_nttyp_set
    __swig_getmethods__["nttyp"] = _molset.AmberMMModel_nttyp_get
    if _newclass:
        nttyp = _swig_property(_molset.AmberMMModel_nttyp_get, _molset.AmberMMModel_nttyp_set)
    __swig_setmethods__["bonda_idx"] = _molset.AmberMMModel_bonda_idx_set
    __swig_getmethods__["bonda_idx"] = _molset.AmberMMModel_bonda_idx_get
    if _newclass:
        bonda_idx = _swig_property(_molset.AmberMMModel_bonda_idx_get, _molset.AmberMMModel_bonda_idx_set)
    __swig_setmethods__["anglea_idx"] = _molset.AmberMMModel_anglea_idx_set
    __swig_getmethods__["anglea_idx"] = _molset.AmberMMModel_anglea_idx_get
    if _newclass:
        anglea_idx = _swig_property(_molset.AmberMMModel_anglea_idx_get, _molset.AmberMMModel_anglea_idx_set)
    __swig_setmethods__["diheda_idx"] = _molset.AmberMMModel_diheda_idx_set
    __swig_getmethods__["diheda_idx"] = _molset.AmberMMModel_diheda_idx_get
    if _newclass:
        diheda_idx = _swig_property(_molset.AmberMMModel_diheda_idx_get, _molset.AmberMMModel_diheda_idx_set)
    __swig_setmethods__["gbl_bond_allocsize"] = _molset.AmberMMModel_gbl_bond_allocsize_set
    __swig_getmethods__["gbl_bond_allocsize"] = _molset.AmberMMModel_gbl_bond_allocsize_get
    if _newclass:
        gbl_bond_allocsize = _swig_property(_molset.AmberMMModel_gbl_bond_allocsize_get, _molset.AmberMMModel_gbl_bond_allocsize_set)
    __swig_setmethods__["gbl_angle_allocsize"] = _molset.AmberMMModel_gbl_angle_allocsize_set
    __swig_getmethods__["gbl_angle_allocsize"] = _molset.AmberMMModel_gbl_angle_allocsize_get
    if _newclass:
        gbl_angle_allocsize = _swig_property(_molset.AmberMMModel_gbl_angle_allocsize_get, _molset.AmberMMModel_gbl_angle_allocsize_set)
    __swig_setmethods__["gbl_dihed_allocsize"] = _molset.AmberMMModel_gbl_dihed_allocsize_set
    __swig_getmethods__["gbl_dihed_allocsize"] = _molset.AmberMMModel_gbl_dihed_allocsize_get
    if _newclass:
        gbl_dihed_allocsize = _swig_property(_molset.AmberMMModel_gbl_dihed_allocsize_get, _molset.AmberMMModel_gbl_dihed_allocsize_set)
    __swig_setmethods__["ibelly"] = _molset.AmberMMModel_ibelly_set
    __swig_getmethods__["ibelly"] = _molset.AmberMMModel_ibelly_get
    if _newclass:
        ibelly = _swig_property(_molset.AmberMMModel_ibelly_get, _molset.AmberMMModel_ibelly_set)
    __swig_setmethods__["igb"] = _molset.AmberMMModel_igb_set
    __swig_getmethods__["igb"] = _molset.AmberMMModel_igb_get
    if _newclass:
        igb = _swig_property(_molset.AmberMMModel_igb_get, _molset.AmberMMModel_igb_set)
    __swig_setmethods__["alpb"] = _molset.AmberMMModel_alpb_set
    __swig_getmethods__["alpb"] = _molset.AmberMMModel_alpb_get
    if _newclass:
        alpb = _swig_property(_molset.AmberMMModel_alpb_get, _molset.AmberMMModel_alpb_set)
    __swig_setmethods__["rbornstat"] = _molset.AmberMMModel_rbornstat_set
    __swig_getmethods__["rbornstat"] = _molset.AmberMMModel_rbornstat_get
    if _newclass:
        rbornstat = _swig_property(_molset.AmberMMModel_rbornstat_get, _molset.AmberMMModel_rbornstat_set)
    __swig_setmethods__["gbsa"] = _molset.AmberMMModel_gbsa_set
    __swig_getmethods__["gbsa"] = _molset.AmberMMModel_gbsa_get
    if _newclass:
        gbsa = _swig_property(_molset.AmberMMModel_gbsa_get, _molset.AmberMMModel_gbsa_set)
    __swig_setmethods__["dielc"] = _molset.AmberMMModel_dielc_set
    __swig_getmethods__["dielc"] = _molset.AmberMMModel_dielc_get
    if _newclass:
        dielc = _swig_property(_molset.AmberMMModel_dielc_get, _molset.AmberMMModel_dielc_set)
    __swig_setmethods__["es_cutoff"] = _molset.AmberMMModel_es_cutoff_set
    __swig_getmethods__["es_cutoff"] = _molset.AmberMMModel_es_cutoff_get
    if _newclass:
        es_cutoff = _swig_property(_molset.AmberMMModel_es_cutoff_get, _molset.AmberMMModel_es_cutoff_set)
    __swig_setmethods__["vdw_cutoff"] = _molset.AmberMMModel_vdw_cutoff_set
    __swig_getmethods__["vdw_cutoff"] = _molset.AmberMMModel_vdw_cutoff_get
    if _newclass:
        vdw_cutoff = _swig_property(_molset.AmberMMModel_vdw_cutoff_get, _molset.AmberMMModel_vdw_cutoff_set)
    __swig_setmethods__["scnb"] = _molset.AmberMMModel_scnb_set
    __swig_getmethods__["scnb"] = _molset.AmberMMModel_scnb_get
    if _newclass:
        scnb = _swig_property(_molset.AmberMMModel_scnb_get, _molset.AmberMMModel_scnb_set)
    __swig_setmethods__["scee"] = _molset.AmberMMModel_scee_set
    __swig_getmethods__["scee"] = _molset.AmberMMModel_scee_get
    if _newclass:
        scee = _swig_property(_molset.AmberMMModel_scee_get, _molset.AmberMMModel_scee_set)
    __swig_setmethods__["intdiel"] = _molset.AmberMMModel_intdiel_set
    __swig_getmethods__["intdiel"] = _molset.AmberMMModel_intdiel_get
    if _newclass:
        intdiel = _swig_property(_molset.AmberMMModel_intdiel_get, _molset.AmberMMModel_intdiel_set)
    __swig_setmethods__["extdiel"] = _molset.AmberMMModel_extdiel_set
    __swig_getmethods__["extdiel"] = _molset.AmberMMModel_extdiel_get
    if _newclass:
        extdiel = _swig_property(_molset.AmberMMModel_extdiel_get, _molset.AmberMMModel_extdiel_set)
    __swig_setmethods__["saltcon"] = _molset.AmberMMModel_saltcon_set
    __swig_getmethods__["saltcon"] = _molset.AmberMMModel_saltcon_get
    if _newclass:
        saltcon = _swig_property(_molset.AmberMMModel_saltcon_get, _molset.AmberMMModel_saltcon_set)
    __swig_setmethods__["cut_inner"] = _molset.AmberMMModel_cut_inner_set
    __swig_getmethods__["cut_inner"] = _molset.AmberMMModel_cut_inner_get
    if _newclass:
        cut_inner = _swig_property(_molset.AmberMMModel_cut_inner_get, _molset.AmberMMModel_cut_inner_set)
    __swig_setmethods__["gb_cutoff"] = _molset.AmberMMModel_gb_cutoff_set
    __swig_getmethods__["gb_cutoff"] = _molset.AmberMMModel_gb_cutoff_get
    if _newclass:
        gb_cutoff = _swig_property(_molset.AmberMMModel_gb_cutoff_get, _molset.AmberMMModel_gb_cutoff_set)
    __swig_setmethods__["gb_alpha"] = _molset.AmberMMModel_gb_alpha_set
    __swig_getmethods__["gb_alpha"] = _molset.AmberMMModel_gb_alpha_get
    if _newclass:
        gb_alpha = _swig_property(_molset.AmberMMModel_gb_alpha_get, _molset.AmberMMModel_gb_alpha_set)
    __swig_setmethods__["gb_beta"] = _molset.AmberMMModel_gb_beta_set
    __swig_getmethods__["gb_beta"] = _molset.AmberMMModel_gb_beta_get
    if _newclass:
        gb_beta = _swig_property(_molset.AmberMMModel_gb_beta_get, _molset.AmberMMModel_gb_beta_set)
    __swig_setmethods__["gb_gamma"] = _molset.AmberMMModel_gb_gamma_set
    __swig_getmethods__["gb_gamma"] = _molset.AmberMMModel_gb_gamma_get
    if _newclass:
        gb_gamma = _swig_property(_molset.AmberMMModel_gb_gamma_get, _molset.AmberMMModel_gb_gamma_set)
    __swig_setmethods__["gb_fs_max"] = _molset.AmberMMModel_gb_fs_max_set
    __swig_getmethods__["gb_fs_max"] = _molset.AmberMMModel_gb_fs_max_get
    if _newclass:
        gb_fs_max = _swig_property(_molset.AmberMMModel_gb_fs_max_get, _molset.AmberMMModel_gb_fs_max_set)
    __swig_setmethods__["gb_kappa"] = _molset.AmberMMModel_gb_kappa_set
    __swig_getmethods__["gb_kappa"] = _molset.AmberMMModel_gb_kappa_get
    if _newclass:
        gb_kappa = _swig_property(_molset.AmberMMModel_gb_kappa_get, _molset.AmberMMModel_gb_kappa_set)
    __swig_setmethods__["gb_neckscale"] = _molset.AmberMMModel_gb_neckscale_set
    __swig_getmethods__["gb_neckscale"] = _molset.AmberMMModel_gb_neckscale_get
    if _newclass:
        gb_neckscale = _swig_property(_molset.AmberMMModel_gb_neckscale_get, _molset.AmberMMModel_gb_neckscale_set)
    __swig_setmethods__["arad"] = _molset.AmberMMModel_arad_set
    __swig_getmethods__["arad"] = _molset.AmberMMModel_arad_get
    if _newclass:
        arad = _swig_property(_molset.AmberMMModel_arad_get, _molset.AmberMMModel_arad_set)
    __swig_setmethods__["bbox_xmin"] = _molset.AmberMMModel_bbox_xmin_set
    __swig_getmethods__["bbox_xmin"] = _molset.AmberMMModel_bbox_xmin_get
    if _newclass:
        bbox_xmin = _swig_property(_molset.AmberMMModel_bbox_xmin_get, _molset.AmberMMModel_bbox_xmin_set)
    __swig_setmethods__["bbox_ymin"] = _molset.AmberMMModel_bbox_ymin_set
    __swig_getmethods__["bbox_ymin"] = _molset.AmberMMModel_bbox_ymin_get
    if _newclass:
        bbox_ymin = _swig_property(_molset.AmberMMModel_bbox_ymin_get, _molset.AmberMMModel_bbox_ymin_set)
    __swig_setmethods__["bbox_zmin"] = _molset.AmberMMModel_bbox_zmin_set
    __swig_getmethods__["bbox_zmin"] = _molset.AmberMMModel_bbox_zmin_get
    if _newclass:
        bbox_zmin = _swig_property(_molset.AmberMMModel_bbox_zmin_get, _molset.AmberMMModel_bbox_zmin_set)
    __swig_setmethods__["bbox_xmax"] = _molset.AmberMMModel_bbox_xmax_set
    __swig_getmethods__["bbox_xmax"] = _molset.AmberMMModel_bbox_xmax_get
    if _newclass:
        bbox_xmax = _swig_property(_molset.AmberMMModel_bbox_xmax_get, _molset.AmberMMModel_bbox_xmax_set)
    __swig_setmethods__["bbox_ymax"] = _molset.AmberMMModel_bbox_ymax_set
    __swig_getmethods__["bbox_ymax"] = _molset.AmberMMModel_bbox_ymax_get
    if _newclass:
        bbox_ymax = _swig_property(_molset.AmberMMModel_bbox_ymax_get, _molset.AmberMMModel_bbox_ymax_set)
    __swig_setmethods__["bbox_zmax"] = _molset.AmberMMModel_bbox_zmax_set
    __swig_getmethods__["bbox_zmax"] = _molset.AmberMMModel_bbox_zmax_get
    if _newclass:
        bbox_zmax = _swig_property(_molset.AmberMMModel_bbox_zmax_get, _molset.AmberMMModel_bbox_zmax_set)
    __swig_setmethods__["rgbmax"] = _molset.AmberMMModel_rgbmax_set
    __swig_getmethods__["rgbmax"] = _molset.AmberMMModel_rgbmax_get
    if _newclass:
        rgbmax = _swig_property(_molset.AmberMMModel_rgbmax_get, _molset.AmberMMModel_rgbmax_set)
    __swig_setmethods__["offset"] = _molset.AmberMMModel_offset_set
    __swig_getmethods__["offset"] = _molset.AmberMMModel_offset_get
    if _newclass:
        offset = _swig_property(_molset.AmberMMModel_offset_get, _molset.AmberMMModel_offset_set)
    __swig_setmethods__["surften"] = _molset.AmberMMModel_surften_set
    __swig_getmethods__["surften"] = _molset.AmberMMModel_surften_get
    if _newclass:
        surften = _swig_property(_molset.AmberMMModel_surften_get, _molset.AmberMMModel_surften_set)
    __swig_setmethods__["iamoeba"] = _molset.AmberMMModel_iamoeba_set
    __swig_getmethods__["iamoeba"] = _molset.AmberMMModel_iamoeba_get
    if _newclass:
        iamoeba = _swig_property(_molset.AmberMMModel_iamoeba_get, _molset.AmberMMModel_iamoeba_set)
    __swig_setmethods__["do_amoeba_valence"] = _molset.AmberMMModel_do_amoeba_valence_set
    __swig_getmethods__["do_amoeba_valence"] = _molset.AmberMMModel_do_amoeba_valence_get
    if _newclass:
        do_amoeba_valence = _swig_property(_molset.AmberMMModel_do_amoeba_valence_get, _molset.AmberMMModel_do_amoeba_valence_set)
    __swig_setmethods__["do_amoeba_nonbond"] = _molset.AmberMMModel_do_amoeba_nonbond_set
    __swig_getmethods__["do_amoeba_nonbond"] = _molset.AmberMMModel_do_amoeba_nonbond_get
    if _newclass:
        do_amoeba_nonbond = _swig_property(_molset.AmberMMModel_do_amoeba_nonbond_get, _molset.AmberMMModel_do_amoeba_nonbond_set)
    __swig_setmethods__["do_bond"] = _molset.AmberMMModel_do_bond_set
    __swig_getmethods__["do_bond"] = _molset.AmberMMModel_do_bond_get
    if _newclass:
        do_bond = _swig_property(_molset.AmberMMModel_do_bond_get, _molset.AmberMMModel_do_bond_set)
    __swig_setmethods__["do_ureyb"] = _molset.AmberMMModel_do_ureyb_set
    __swig_getmethods__["do_ureyb"] = _molset.AmberMMModel_do_ureyb_get
    if _newclass:
        do_ureyb = _swig_property(_molset.AmberMMModel_do_ureyb_get, _molset.AmberMMModel_do_ureyb_set)
    __swig_setmethods__["do_reg_angle"] = _molset.AmberMMModel_do_reg_angle_set
    __swig_getmethods__["do_reg_angle"] = _molset.AmberMMModel_do_reg_angle_get
    if _newclass:
        do_reg_angle = _swig_property(_molset.AmberMMModel_do_reg_angle_get, _molset.AmberMMModel_do_reg_angle_set)
    __swig_setmethods__["do_trig_angle"] = _molset.AmberMMModel_do_trig_angle_set
    __swig_getmethods__["do_trig_angle"] = _molset.AmberMMModel_do_trig_angle_get
    if _newclass:
        do_trig_angle = _swig_property(_molset.AmberMMModel_do_trig_angle_get, _molset.AmberMMModel_do_trig_angle_set)
    __swig_setmethods__["do_opbend"] = _molset.AmberMMModel_do_opbend_set
    __swig_getmethods__["do_opbend"] = _molset.AmberMMModel_do_opbend_get
    if _newclass:
        do_opbend = _swig_property(_molset.AmberMMModel_do_opbend_get, _molset.AmberMMModel_do_opbend_set)
    __swig_setmethods__["do_torsion"] = _molset.AmberMMModel_do_torsion_set
    __swig_getmethods__["do_torsion"] = _molset.AmberMMModel_do_torsion_get
    if _newclass:
        do_torsion = _swig_property(_molset.AmberMMModel_do_torsion_get, _molset.AmberMMModel_do_torsion_set)
    __swig_setmethods__["do_pi_torsion"] = _molset.AmberMMModel_do_pi_torsion_set
    __swig_getmethods__["do_pi_torsion"] = _molset.AmberMMModel_do_pi_torsion_get
    if _newclass:
        do_pi_torsion = _swig_property(_molset.AmberMMModel_do_pi_torsion_get, _molset.AmberMMModel_do_pi_torsion_set)
    __swig_setmethods__["do_strbend"] = _molset.AmberMMModel_do_strbend_set
    __swig_getmethods__["do_strbend"] = _molset.AmberMMModel_do_strbend_get
    if _newclass:
        do_strbend = _swig_property(_molset.AmberMMModel_do_strbend_get, _molset.AmberMMModel_do_strbend_set)
    __swig_setmethods__["do_torsion_torsion"] = _molset.AmberMMModel_do_torsion_torsion_set
    __swig_getmethods__["do_torsion_torsion"] = _molset.AmberMMModel_do_torsion_torsion_get
    if _newclass:
        do_torsion_torsion = _swig_property(_molset.AmberMMModel_do_torsion_torsion_get, _molset.AmberMMModel_do_torsion_torsion_set)
    __swig_setmethods__["do_str_torsion"] = _molset.AmberMMModel_do_str_torsion_set
    __swig_getmethods__["do_str_torsion"] = _molset.AmberMMModel_do_str_torsion_get
    if _newclass:
        do_str_torsion = _swig_property(_molset.AmberMMModel_do_str_torsion_get, _molset.AmberMMModel_do_str_torsion_set)
    __swig_setmethods__["do_recip"] = _molset.AmberMMModel_do_recip_set
    __swig_getmethods__["do_recip"] = _molset.AmberMMModel_do_recip_get
    if _newclass:
        do_recip = _swig_property(_molset.AmberMMModel_do_recip_get, _molset.AmberMMModel_do_recip_set)
    __swig_setmethods__["do_adjust"] = _molset.AmberMMModel_do_adjust_set
    __swig_getmethods__["do_adjust"] = _molset.AmberMMModel_do_adjust_get
    if _newclass:
        do_adjust = _swig_property(_molset.AmberMMModel_do_adjust_get, _molset.AmberMMModel_do_adjust_set)
    __swig_setmethods__["do_direct"] = _molset.AmberMMModel_do_direct_set
    __swig_getmethods__["do_direct"] = _molset.AmberMMModel_do_direct_get
    if _newclass:
        do_direct = _swig_property(_molset.AmberMMModel_do_direct_get, _molset.AmberMMModel_do_direct_set)
    __swig_setmethods__["do_self"] = _molset.AmberMMModel_do_self_set
    __swig_getmethods__["do_self"] = _molset.AmberMMModel_do_self_get
    if _newclass:
        do_self = _swig_property(_molset.AmberMMModel_do_self_get, _molset.AmberMMModel_do_self_set)
    __swig_setmethods__["do_vdw"] = _molset.AmberMMModel_do_vdw_set
    __swig_getmethods__["do_vdw"] = _molset.AmberMMModel_do_vdw_get
    if _newclass:
        do_vdw = _swig_property(_molset.AmberMMModel_do_vdw_get, _molset.AmberMMModel_do_vdw_set)
    __swig_setmethods__["do_induced"] = _molset.AmberMMModel_do_induced_set
    __swig_getmethods__["do_induced"] = _molset.AmberMMModel_do_induced_get
    if _newclass:
        do_induced = _swig_property(_molset.AmberMMModel_do_induced_get, _molset.AmberMMModel_do_induced_set)
    __swig_setmethods__["do_vdw_taper"] = _molset.AmberMMModel_do_vdw_taper_set
    __swig_getmethods__["do_vdw_taper"] = _molset.AmberMMModel_do_vdw_taper_get
    if _newclass:
        do_vdw_taper = _swig_property(_molset.AmberMMModel_do_vdw_taper_get, _molset.AmberMMModel_do_vdw_taper_set)
    __swig_setmethods__["do_vdw_longrange"] = _molset.AmberMMModel_do_vdw_longrange_set
    __swig_getmethods__["do_vdw_longrange"] = _molset.AmberMMModel_do_vdw_longrange_get
    if _newclass:
        do_vdw_longrange = _swig_property(_molset.AmberMMModel_do_vdw_longrange_get, _molset.AmberMMModel_do_vdw_longrange_set)
    __swig_setmethods__["beeman_integrator"] = _molset.AmberMMModel_beeman_integrator_set
    __swig_getmethods__["beeman_integrator"] = _molset.AmberMMModel_beeman_integrator_get
    if _newclass:
        beeman_integrator = _swig_property(_molset.AmberMMModel_beeman_integrator_get, _molset.AmberMMModel_beeman_integrator_set)
    __swig_setmethods__["amoeba_verbose"] = _molset.AmberMMModel_amoeba_verbose_set
    __swig_getmethods__["amoeba_verbose"] = _molset.AmberMMModel_amoeba_verbose_get
    if _newclass:
        amoeba_verbose = _swig_property(_molset.AmberMMModel_amoeba_verbose_get, _molset.AmberMMModel_amoeba_verbose_set)
    __swig_setmethods__["natc"] = _molset.AmberMMModel_natc_set
    __swig_getmethods__["natc"] = _molset.AmberMMModel_natc_get
    if _newclass:
        natc = _swig_property(_molset.AmberMMModel_natc_get, _molset.AmberMMModel_natc_set)
    __swig_setmethods__["belly_atm_cnt"] = _molset.AmberMMModel_belly_atm_cnt_set
    __swig_getmethods__["belly_atm_cnt"] = _molset.AmberMMModel_belly_atm_cnt_get
    if _newclass:
        belly_atm_cnt = _swig_property(_molset.AmberMMModel_belly_atm_cnt_get, _molset.AmberMMModel_belly_atm_cnt_set)
    __swig_setmethods__["using_pme_potential"] = _molset.AmberMMModel_using_pme_potential_set
    __swig_getmethods__["using_pme_potential"] = _molset.AmberMMModel_using_pme_potential_get
    if _newclass:
        using_pme_potential = _swig_property(_molset.AmberMMModel_using_pme_potential_get, _molset.AmberMMModel_using_pme_potential_set)
    __swig_setmethods__["using_gb_potential"] = _molset.AmberMMModel_using_gb_potential_set
    __swig_getmethods__["using_gb_potential"] = _molset.AmberMMModel_using_gb_potential_get
    if _newclass:
        using_gb_potential = _swig_property(_molset.AmberMMModel_using_gb_potential_get, _molset.AmberMMModel_using_gb_potential_set)
    __swig_setmethods__["max_res_size"] = _molset.AmberMMModel_max_res_size_set
    __swig_getmethods__["max_res_size"] = _molset.AmberMMModel_max_res_size_get
    if _newclass:
        max_res_size = _swig_property(_molset.AmberMMModel_max_res_size_get, _molset.AmberMMModel_max_res_size_set)
    __swig_setmethods__["n_solute_res"] = _molset.AmberMMModel_n_solute_res_set
    __swig_getmethods__["n_solute_res"] = _molset.AmberMMModel_n_solute_res_get
    if _newclass:
        n_solute_res = _swig_property(_molset.AmberMMModel_n_solute_res_get, _molset.AmberMMModel_n_solute_res_set)
    __swig_setmethods__["n_solute_mol"] = _molset.AmberMMModel_n_solute_mol_set
    __swig_getmethods__["n_solute_mol"] = _molset.AmberMMModel_n_solute_mol_get
    if _newclass:
        n_solute_mol = _swig_property(_molset.AmberMMModel_n_solute_mol_get, _molset.AmberMMModel_n_solute_mol_set)
    __swig_setmethods__["tmass"] = _molset.AmberMMModel_tmass_set
    __swig_getmethods__["tmass"] = _molset.AmberMMModel_tmass_get
    if _newclass:
        tmass = _swig_property(_molset.AmberMMModel_tmass_get, _molset.AmberMMModel_tmass_set)
    __swig_setmethods__["gbl_res_atms"] = _molset.AmberMMModel_gbl_res_atms_set
    __swig_getmethods__["gbl_res_atms"] = _molset.AmberMMModel_gbl_res_atms_get
    if _newclass:
        gbl_res_atms = _swig_property(_molset.AmberMMModel_gbl_res_atms_get, _molset.AmberMMModel_gbl_res_atms_set)
    __swig_setmethods__["atm_iac"] = _molset.AmberMMModel_atm_iac_set
    __swig_getmethods__["atm_iac"] = _molset.AmberMMModel_atm_iac_get
    if _newclass:
        atm_iac = _swig_property(_molset.AmberMMModel_atm_iac_get, _molset.AmberMMModel_atm_iac_set)
    __swig_setmethods__["typ_ico"] = _molset.AmberMMModel_typ_ico_set
    __swig_getmethods__["typ_ico"] = _molset.AmberMMModel_typ_ico_get
    if _newclass:
        typ_ico = _swig_property(_molset.AmberMMModel_typ_ico_get, _molset.AmberMMModel_typ_ico_set)
    __swig_setmethods__["atm_nsp"] = _molset.AmberMMModel_atm_nsp_set
    __swig_getmethods__["atm_nsp"] = _molset.AmberMMModel_atm_nsp_get
    if _newclass:
        atm_nsp = _swig_property(_molset.AmberMMModel_atm_nsp_get, _molset.AmberMMModel_atm_nsp_set)
    __swig_setmethods__["atm_igraph"] = _molset.AmberMMModel_atm_igraph_set
    __swig_getmethods__["atm_igraph"] = _molset.AmberMMModel_atm_igraph_get
    if _newclass:
        atm_igraph = _swig_property(_molset.AmberMMModel_atm_igraph_get, _molset.AmberMMModel_atm_igraph_set)
    __swig_setmethods__["atm_isymbl"] = _molset.AmberMMModel_atm_isymbl_set
    __swig_getmethods__["atm_isymbl"] = _molset.AmberMMModel_atm_isymbl_get
    if _newclass:
        atm_isymbl = _swig_property(_molset.AmberMMModel_atm_isymbl_get, _molset.AmberMMModel_atm_isymbl_set)
    __swig_setmethods__["atm_itree"] = _molset.AmberMMModel_atm_itree_set
    __swig_getmethods__["atm_itree"] = _molset.AmberMMModel_atm_itree_get
    if _newclass:
        atm_itree = _swig_property(_molset.AmberMMModel_atm_itree_get, _molset.AmberMMModel_atm_itree_set)
    __swig_setmethods__["atm_charge"] = _molset.AmberMMModel_atm_charge_set
    __swig_getmethods__["atm_charge"] = _molset.AmberMMModel_atm_charge_get
    if _newclass:
        atm_charge = _swig_property(_molset.AmberMMModel_atm_charge_get, _molset.AmberMMModel_atm_charge_set)
    __swig_setmethods__["atm_mass"] = _molset.AmberMMModel_atm_mass_set
    __swig_getmethods__["atm_mass"] = _molset.AmberMMModel_atm_mass_get
    if _newclass:
        atm_mass = _swig_property(_molset.AmberMMModel_atm_mass_get, _molset.AmberMMModel_atm_mass_set)
    __swig_setmethods__["atm_mass_inv"] = _molset.AmberMMModel_atm_mass_inv_set
    __swig_getmethods__["atm_mass_inv"] = _molset.AmberMMModel_atm_mass_inv_get
    if _newclass:
        atm_mass_inv = _swig_property(_molset.AmberMMModel_atm_mass_inv_get, _molset.AmberMMModel_atm_mass_inv_set)
    __swig_setmethods__["atm_numex"] = _molset.AmberMMModel_atm_numex_set
    __swig_getmethods__["atm_numex"] = _molset.AmberMMModel_atm_numex_get
    if _newclass:
        atm_numex = _swig_property(_molset.AmberMMModel_atm_numex_get, _molset.AmberMMModel_atm_numex_set)
    __swig_setmethods__["gbl_natex"] = _molset.AmberMMModel_gbl_natex_set
    __swig_getmethods__["gbl_natex"] = _molset.AmberMMModel_gbl_natex_get
    if _newclass:
        gbl_natex = _swig_property(_molset.AmberMMModel_gbl_natex_get, _molset.AmberMMModel_gbl_natex_set)
    __swig_setmethods__["gbl_cn1"] = _molset.AmberMMModel_gbl_cn1_set
    __swig_getmethods__["gbl_cn1"] = _molset.AmberMMModel_gbl_cn1_get
    if _newclass:
        gbl_cn1 = _swig_property(_molset.AmberMMModel_gbl_cn1_get, _molset.AmberMMModel_gbl_cn1_set)
    __swig_setmethods__["gbl_cn2"] = _molset.AmberMMModel_gbl_cn2_set
    __swig_getmethods__["gbl_cn2"] = _molset.AmberMMModel_gbl_cn2_get
    if _newclass:
        gbl_cn2 = _swig_property(_molset.AmberMMModel_gbl_cn2_get, _molset.AmberMMModel_gbl_cn2_set)
    __swig_setmethods__["gbl_asol"] = _molset.AmberMMModel_gbl_asol_set
    __swig_getmethods__["gbl_asol"] = _molset.AmberMMModel_gbl_asol_get
    if _newclass:
        gbl_asol = _swig_property(_molset.AmberMMModel_gbl_asol_get, _molset.AmberMMModel_gbl_asol_set)
    __swig_setmethods__["gbl_bsol"] = _molset.AmberMMModel_gbl_bsol_set
    __swig_getmethods__["gbl_bsol"] = _molset.AmberMMModel_gbl_bsol_get
    if _newclass:
        gbl_bsol = _swig_property(_molset.AmberMMModel_gbl_bsol_get, _molset.AmberMMModel_gbl_bsol_set)
    __swig_setmethods__["atm_gb_radii"] = _molset.AmberMMModel_atm_gb_radii_set
    __swig_getmethods__["atm_gb_radii"] = _molset.AmberMMModel_atm_gb_radii_get
    if _newclass:
        atm_gb_radii = _swig_property(_molset.AmberMMModel_atm_gb_radii_get, _molset.AmberMMModel_atm_gb_radii_set)
    __swig_setmethods__["atm_gb_fs"] = _molset.AmberMMModel_atm_gb_fs_set
    __swig_getmethods__["atm_gb_fs"] = _molset.AmberMMModel_atm_gb_fs_get
    if _newclass:
        atm_gb_fs = _swig_property(_molset.AmberMMModel_atm_gb_fs_get, _molset.AmberMMModel_atm_gb_fs_set)
    __swig_setmethods__["gbl_rk"] = _molset.AmberMMModel_gbl_rk_set
    __swig_getmethods__["gbl_rk"] = _molset.AmberMMModel_gbl_rk_get
    if _newclass:
        gbl_rk = _swig_property(_molset.AmberMMModel_gbl_rk_get, _molset.AmberMMModel_gbl_rk_set)
    __swig_setmethods__["gbl_req"] = _molset.AmberMMModel_gbl_req_set
    __swig_getmethods__["gbl_req"] = _molset.AmberMMModel_gbl_req_get
    if _newclass:
        gbl_req = _swig_property(_molset.AmberMMModel_gbl_req_get, _molset.AmberMMModel_gbl_req_set)
    __swig_setmethods__["gbl_tk"] = _molset.AmberMMModel_gbl_tk_set
    __swig_getmethods__["gbl_tk"] = _molset.AmberMMModel_gbl_tk_get
    if _newclass:
        gbl_tk = _swig_property(_molset.AmberMMModel_gbl_tk_get, _molset.AmberMMModel_gbl_tk_set)
    __swig_setmethods__["gbl_teq"] = _molset.AmberMMModel_gbl_teq_set
    __swig_getmethods__["gbl_teq"] = _molset.AmberMMModel_gbl_teq_get
    if _newclass:
        gbl_teq = _swig_property(_molset.AmberMMModel_gbl_teq_get, _molset.AmberMMModel_gbl_teq_set)
    __swig_setmethods__["gbl_pk"] = _molset.AmberMMModel_gbl_pk_set
    __swig_getmethods__["gbl_pk"] = _molset.AmberMMModel_gbl_pk_get
    if _newclass:
        gbl_pk = _swig_property(_molset.AmberMMModel_gbl_pk_get, _molset.AmberMMModel_gbl_pk_set)
    __swig_setmethods__["gbl_pn"] = _molset.AmberMMModel_gbl_pn_set
    __swig_getmethods__["gbl_pn"] = _molset.AmberMMModel_gbl_pn_get
    if _newclass:
        gbl_pn = _swig_property(_molset.AmberMMModel_gbl_pn_get, _molset.AmberMMModel_gbl_pn_set)
    __swig_setmethods__["gbl_phase"] = _molset.AmberMMModel_gbl_phase_set
    __swig_getmethods__["gbl_phase"] = _molset.AmberMMModel_gbl_phase_get
    if _newclass:
        gbl_phase = _swig_property(_molset.AmberMMModel_gbl_phase_get, _molset.AmberMMModel_gbl_phase_set)
    __swig_setmethods__["gbl_gamc"] = _molset.AmberMMModel_gbl_gamc_set
    __swig_getmethods__["gbl_gamc"] = _molset.AmberMMModel_gbl_gamc_get
    if _newclass:
        gbl_gamc = _swig_property(_molset.AmberMMModel_gbl_gamc_get, _molset.AmberMMModel_gbl_gamc_set)
    __swig_setmethods__["gbl_gams"] = _molset.AmberMMModel_gbl_gams_set
    __swig_getmethods__["gbl_gams"] = _molset.AmberMMModel_gbl_gams_get
    if _newclass:
        gbl_gams = _swig_property(_molset.AmberMMModel_gbl_gams_get, _molset.AmberMMModel_gbl_gams_set)
    __swig_setmethods__["gbl_ipn"] = _molset.AmberMMModel_gbl_ipn_set
    __swig_getmethods__["gbl_ipn"] = _molset.AmberMMModel_gbl_ipn_get
    if _newclass:
        gbl_ipn = _swig_property(_molset.AmberMMModel_gbl_ipn_get, _molset.AmberMMModel_gbl_ipn_set)
    __swig_setmethods__["gbl_fmn"] = _molset.AmberMMModel_gbl_fmn_set
    __swig_getmethods__["gbl_fmn"] = _molset.AmberMMModel_gbl_fmn_get
    if _newclass:
        gbl_fmn = _swig_property(_molset.AmberMMModel_gbl_fmn_get, _molset.AmberMMModel_gbl_fmn_set)
    __swig_setmethods__["gbl_bond"] = _molset.AmberMMModel_gbl_bond_set
    __swig_getmethods__["gbl_bond"] = _molset.AmberMMModel_gbl_bond_get
    if _newclass:
        gbl_bond = _swig_property(_molset.AmberMMModel_gbl_bond_get, _molset.AmberMMModel_gbl_bond_set)
    __swig_setmethods__["gbl_angle"] = _molset.AmberMMModel_gbl_angle_set
    __swig_getmethods__["gbl_angle"] = _molset.AmberMMModel_gbl_angle_get
    if _newclass:
        gbl_angle = _swig_property(_molset.AmberMMModel_gbl_angle_get, _molset.AmberMMModel_gbl_angle_set)
    __swig_setmethods__["gbl_dihed"] = _molset.AmberMMModel_gbl_dihed_set
    __swig_getmethods__["gbl_dihed"] = _molset.AmberMMModel_gbl_dihed_get
    if _newclass:
        gbl_dihed = _swig_property(_molset.AmberMMModel_gbl_dihed_get, _molset.AmberMMModel_gbl_dihed_set)
    __swig_setmethods__["loc_bond_params"] = _molset.AmberMMModel_loc_bond_params_set
    __swig_getmethods__["loc_bond_params"] = _molset.AmberMMModel_loc_bond_params_get
    if _newclass:
        loc_bond_params = _swig_property(_molset.AmberMMModel_loc_bond_params_get, _molset.AmberMMModel_loc_bond_params_set)
    __swig_setmethods__["bnd_par_idx_map"] = _molset.AmberMMModel_bnd_par_idx_map_set
    __swig_getmethods__["bnd_par_idx_map"] = _molset.AmberMMModel_bnd_par_idx_map_get
    if _newclass:
        bnd_par_idx_map = _swig_property(_molset.AmberMMModel_bnd_par_idx_map_get, _molset.AmberMMModel_bnd_par_idx_map_set)
    __swig_setmethods__["loc_val_angle_params"] = _molset.AmberMMModel_loc_val_angle_params_set
    __swig_getmethods__["loc_val_angle_params"] = _molset.AmberMMModel_loc_val_angle_params_get
    if _newclass:
        loc_val_angle_params = _swig_property(_molset.AmberMMModel_loc_val_angle_params_get, _molset.AmberMMModel_loc_val_angle_params_set)
    __swig_setmethods__["vang_par_idx_map"] = _molset.AmberMMModel_vang_par_idx_map_set
    __swig_getmethods__["vang_par_idx_map"] = _molset.AmberMMModel_vang_par_idx_map_get
    if _newclass:
        vang_par_idx_map = _swig_property(_molset.AmberMMModel_vang_par_idx_map_get, _molset.AmberMMModel_vang_par_idx_map_set)
    __swig_setmethods__["loc_dih_ang_par"] = _molset.AmberMMModel_loc_dih_ang_par_set
    __swig_getmethods__["loc_dih_ang_par"] = _molset.AmberMMModel_loc_dih_ang_par_get
    if _newclass:
        loc_dih_ang_par = _swig_property(_molset.AmberMMModel_loc_dih_ang_par_get, _molset.AmberMMModel_loc_dih_ang_par_set)
    __swig_setmethods__["dang_par_idx_map"] = _molset.AmberMMModel_dang_par_idx_map_set
    __swig_getmethods__["dang_par_idx_map"] = _molset.AmberMMModel_dang_par_idx_map_get
    if _newclass:
        dang_par_idx_map = _swig_property(_molset.AmberMMModel_dang_par_idx_map_get, _molset.AmberMMModel_dang_par_idx_map_set)
    __swig_setmethods__["amber_residues"] = _molset.AmberMMModel_amber_residues_set
    __swig_getmethods__["amber_residues"] = _molset.AmberMMModel_amber_residues_get
    if _newclass:
        amber_residues = _swig_property(_molset.AmberMMModel_amber_residues_get, _molset.AmberMMModel_amber_residues_set)
    __swig_setmethods__["nat_amber_residues"] = _molset.AmberMMModel_nat_amber_residues_set
    __swig_getmethods__["nat_amber_residues"] = _molset.AmberMMModel_nat_amber_residues_get
    if _newclass:
        nat_amber_residues = _swig_property(_molset.AmberMMModel_nat_amber_residues_get, _molset.AmberMMModel_nat_amber_residues_set)
    __swig_setmethods__["res_labels"] = _molset.AmberMMModel_res_labels_set
    __swig_getmethods__["res_labels"] = _molset.AmberMMModel_res_labels_get
    if _newclass:
        res_labels = _swig_property(_molset.AmberMMModel_res_labels_get, _molset.AmberMMModel_res_labels_set)
    __swig_setmethods__["loc_point_params"] = _molset.AmberMMModel_loc_point_params_set
    __swig_getmethods__["loc_point_params"] = _molset.AmberMMModel_loc_point_params_get
    if _newclass:
        loc_point_params = _swig_property(_molset.AmberMMModel_loc_point_params_get, _molset.AmberMMModel_loc_point_params_set)
    __swig_setmethods__["ppar_idx_map"] = _molset.AmberMMModel_ppar_idx_map_set
    __swig_getmethods__["ppar_idx_map"] = _molset.AmberMMModel_ppar_idx_map_get
    if _newclass:
        ppar_idx_map = _swig_property(_molset.AmberMMModel_ppar_idx_map_get, _molset.AmberMMModel_ppar_idx_map_set)
    __swig_setmethods__["num_deg"] = _molset.AmberMMModel_num_deg_set
    __swig_getmethods__["num_deg"] = _molset.AmberMMModel_num_deg_get
    if _newclass:
        num_deg = _swig_property(_molset.AmberMMModel_num_deg_get, _molset.AmberMMModel_num_deg_set)
    __swig_setmethods__["num_deg_solute"] = _molset.AmberMMModel_num_deg_solute_set
    __swig_getmethods__["num_deg_solute"] = _molset.AmberMMModel_num_deg_solute_get
    if _newclass:
        num_deg_solute = _swig_property(_molset.AmberMMModel_num_deg_solute_get, _molset.AmberMMModel_num_deg_solute_set)
    __swig_setmethods__["num_deg_solvent"] = _molset.AmberMMModel_num_deg_solvent_set
    __swig_getmethods__["num_deg_solvent"] = _molset.AmberMMModel_num_deg_solvent_get
    if _newclass:
        num_deg_solvent = _swig_property(_molset.AmberMMModel_num_deg_solvent_get, _molset.AmberMMModel_num_deg_solvent_set)
    __swig_setmethods__["atm_xc"] = _molset.AmberMMModel_atm_xc_set
    __swig_getmethods__["atm_xc"] = _molset.AmberMMModel_atm_xc_get
    if _newclass:
        atm_xc = _swig_property(_molset.AmberMMModel_atm_xc_get, _molset.AmberMMModel_atm_xc_set)
    __swig_setmethods__["atm_weight"] = _molset.AmberMMModel_atm_weight_set
    __swig_getmethods__["atm_weight"] = _molset.AmberMMModel_atm_weight_get
    if _newclass:
        atm_weight = _swig_property(_molset.AmberMMModel_atm_weight_get, _molset.AmberMMModel_atm_weight_set)
    __swig_setmethods__["atm_jrc"] = _molset.AmberMMModel_atm_jrc_set
    __swig_getmethods__["atm_jrc"] = _molset.AmberMMModel_atm_jrc_get
    if _newclass:
        atm_jrc = _swig_property(_molset.AmberMMModel_atm_jrc_get, _molset.AmberMMModel_atm_jrc_set)
    __swig_setmethods__["atm_igroup"] = _molset.AmberMMModel_atm_igroup_set
    __swig_getmethods__["atm_igroup"] = _molset.AmberMMModel_atm_igroup_get
    if _newclass:
        atm_igroup = _swig_property(_molset.AmberMMModel_atm_igroup_get, _molset.AmberMMModel_atm_igroup_set)

    def SetMovingAtomsData(self):
        return _molset.AmberMMModel_SetMovingAtomsData(self)
    __swig_setmethods__["num_dist_constr"] = _molset.AmberMMModel_num_dist_constr_set
    __swig_getmethods__["num_dist_constr"] = _molset.AmberMMModel_num_dist_constr_get
    if _newclass:
        num_dist_constr = _swig_property(_molset.AmberMMModel_num_dist_constr_get, _molset.AmberMMModel_num_dist_constr_set)
    __swig_setmethods__["dist_constr_idx"] = _molset.AmberMMModel_dist_constr_idx_set
    __swig_getmethods__["dist_constr_idx"] = _molset.AmberMMModel_dist_constr_idx_get
    if _newclass:
        dist_constr_idx = _swig_property(_molset.AmberMMModel_dist_constr_idx_get, _molset.AmberMMModel_dist_constr_idx_set)
    __swig_setmethods__["dist_constr_params"] = _molset.AmberMMModel_dist_constr_params_set
    __swig_getmethods__["dist_constr_params"] = _molset.AmberMMModel_dist_constr_params_get
    if _newclass:
        dist_constr_params = _swig_property(_molset.AmberMMModel_dist_constr_params_get, _molset.AmberMMModel_dist_constr_params_set)

    def SetDistConstrData(self):
        return _molset.AmberMMModel_SetDistConstrData(self)
    __swig_setmethods__["atm_poltype"] = _molset.AmberMMModel_atm_poltype_set
    __swig_getmethods__["atm_poltype"] = _molset.AmberMMModel_atm_poltype_get
    if _newclass:
        atm_poltype = _swig_property(_molset.AmberMMModel_atm_poltype_get, _molset.AmberMMModel_atm_poltype_set)
    __swig_setmethods__["atm_element"] = _molset.AmberMMModel_atm_element_set
    __swig_getmethods__["atm_element"] = _molset.AmberMMModel_atm_element_get
    if _newclass:
        atm_element = _swig_property(_molset.AmberMMModel_atm_element_get, _molset.AmberMMModel_atm_element_set)
    __swig_setmethods__["atm_class_idx"] = _molset.AmberMMModel_atm_class_idx_set
    __swig_getmethods__["atm_class_idx"] = _molset.AmberMMModel_atm_class_idx_get
    if _newclass:
        atm_class_idx = _swig_property(_molset.AmberMMModel_atm_class_idx_get, _molset.AmberMMModel_atm_class_idx_set)
    __swig_setmethods__["n_bond_amoeba"] = _molset.AmberMMModel_n_bond_amoeba_set
    __swig_getmethods__["n_bond_amoeba"] = _molset.AmberMMModel_n_bond_amoeba_get
    if _newclass:
        n_bond_amoeba = _swig_property(_molset.AmberMMModel_n_bond_amoeba_get, _molset.AmberMMModel_n_bond_amoeba_set)
    __swig_setmethods__["n_bond_amoeba_params"] = _molset.AmberMMModel_n_bond_amoeba_params_set
    __swig_getmethods__["n_bond_amoeba_params"] = _molset.AmberMMModel_n_bond_amoeba_params_get
    if _newclass:
        n_bond_amoeba_params = _swig_property(_molset.AmberMMModel_n_bond_amoeba_params_get, _molset.AmberMMModel_n_bond_amoeba_params_set)
    __swig_setmethods__["gbl_bond_amoeba"] = _molset.AmberMMModel_gbl_bond_amoeba_set
    __swig_getmethods__["gbl_bond_amoeba"] = _molset.AmberMMModel_gbl_bond_amoeba_get
    if _newclass:
        gbl_bond_amoeba = _swig_property(_molset.AmberMMModel_gbl_bond_amoeba_get, _molset.AmberMMModel_gbl_bond_amoeba_set)
    __swig_setmethods__["bond_amoeba_params"] = _molset.AmberMMModel_bond_amoeba_params_set
    __swig_getmethods__["bond_amoeba_params"] = _molset.AmberMMModel_bond_amoeba_params_get
    if _newclass:
        bond_amoeba_params = _swig_property(_molset.AmberMMModel_bond_amoeba_params_get, _molset.AmberMMModel_bond_amoeba_params_set)
    __swig_setmethods__["bond_amoeba_ftab_degree"] = _molset.AmberMMModel_bond_amoeba_ftab_degree_set
    __swig_getmethods__["bond_amoeba_ftab_degree"] = _molset.AmberMMModel_bond_amoeba_ftab_degree_get
    if _newclass:
        bond_amoeba_ftab_degree = _swig_property(_molset.AmberMMModel_bond_amoeba_ftab_degree_get, _molset.AmberMMModel_bond_amoeba_ftab_degree_set)
    __swig_setmethods__["bond_amoeba_ftab_coef"] = _molset.AmberMMModel_bond_amoeba_ftab_coef_set
    __swig_getmethods__["bond_amoeba_ftab_coef"] = _molset.AmberMMModel_bond_amoeba_ftab_coef_get
    if _newclass:
        bond_amoeba_ftab_coef = _swig_property(_molset.AmberMMModel_bond_amoeba_ftab_coef_get, _molset.AmberMMModel_bond_amoeba_ftab_coef_set)
    __swig_setmethods__["n_urey_bond"] = _molset.AmberMMModel_n_urey_bond_set
    __swig_getmethods__["n_urey_bond"] = _molset.AmberMMModel_n_urey_bond_get
    if _newclass:
        n_urey_bond = _swig_property(_molset.AmberMMModel_n_urey_bond_get, _molset.AmberMMModel_n_urey_bond_set)
    __swig_setmethods__["n_urey_bond_params"] = _molset.AmberMMModel_n_urey_bond_params_set
    __swig_getmethods__["n_urey_bond_params"] = _molset.AmberMMModel_n_urey_bond_params_get
    if _newclass:
        n_urey_bond_params = _swig_property(_molset.AmberMMModel_n_urey_bond_params_get, _molset.AmberMMModel_n_urey_bond_params_set)
    __swig_setmethods__["gbl_bond_urey"] = _molset.AmberMMModel_gbl_bond_urey_set
    __swig_getmethods__["gbl_bond_urey"] = _molset.AmberMMModel_gbl_bond_urey_get
    if _newclass:
        gbl_bond_urey = _swig_property(_molset.AmberMMModel_gbl_bond_urey_get, _molset.AmberMMModel_gbl_bond_urey_set)
    __swig_setmethods__["bond_urey_params"] = _molset.AmberMMModel_bond_urey_params_set
    __swig_getmethods__["bond_urey_params"] = _molset.AmberMMModel_bond_urey_params_get
    if _newclass:
        bond_urey_params = _swig_property(_molset.AmberMMModel_bond_urey_params_get, _molset.AmberMMModel_bond_urey_params_set)
    __swig_setmethods__["bond_urey_ftab_degree"] = _molset.AmberMMModel_bond_urey_ftab_degree_set
    __swig_getmethods__["bond_urey_ftab_degree"] = _molset.AmberMMModel_bond_urey_ftab_degree_get
    if _newclass:
        bond_urey_ftab_degree = _swig_property(_molset.AmberMMModel_bond_urey_ftab_degree_get, _molset.AmberMMModel_bond_urey_ftab_degree_set)
    __swig_setmethods__["bond_urey_ftab_coef"] = _molset.AmberMMModel_bond_urey_ftab_coef_set
    __swig_getmethods__["bond_urey_ftab_coef"] = _molset.AmberMMModel_bond_urey_ftab_coef_get
    if _newclass:
        bond_urey_ftab_coef = _swig_property(_molset.AmberMMModel_bond_urey_ftab_coef_get, _molset.AmberMMModel_bond_urey_ftab_coef_set)
    __swig_setmethods__["n_angle_amoeba"] = _molset.AmberMMModel_n_angle_amoeba_set
    __swig_getmethods__["n_angle_amoeba"] = _molset.AmberMMModel_n_angle_amoeba_get
    if _newclass:
        n_angle_amoeba = _swig_property(_molset.AmberMMModel_n_angle_amoeba_get, _molset.AmberMMModel_n_angle_amoeba_set)
    __swig_setmethods__["n_angle_amoeba_params"] = _molset.AmberMMModel_n_angle_amoeba_params_set
    __swig_getmethods__["n_angle_amoeba_params"] = _molset.AmberMMModel_n_angle_amoeba_params_get
    if _newclass:
        n_angle_amoeba_params = _swig_property(_molset.AmberMMModel_n_angle_amoeba_params_get, _molset.AmberMMModel_n_angle_amoeba_params_set)
    __swig_setmethods__["gbl_angle_amoeba_reg"] = _molset.AmberMMModel_gbl_angle_amoeba_reg_set
    __swig_getmethods__["gbl_angle_amoeba_reg"] = _molset.AmberMMModel_gbl_angle_amoeba_reg_get
    if _newclass:
        gbl_angle_amoeba_reg = _swig_property(_molset.AmberMMModel_gbl_angle_amoeba_reg_get, _molset.AmberMMModel_gbl_angle_amoeba_reg_set)
    __swig_setmethods__["angle_amoeba_params"] = _molset.AmberMMModel_angle_amoeba_params_set
    __swig_getmethods__["angle_amoeba_params"] = _molset.AmberMMModel_angle_amoeba_params_get
    if _newclass:
        angle_amoeba_params = _swig_property(_molset.AmberMMModel_angle_amoeba_params_get, _molset.AmberMMModel_angle_amoeba_params_set)
    __swig_setmethods__["angle_amoeba_ftab_degree"] = _molset.AmberMMModel_angle_amoeba_ftab_degree_set
    __swig_getmethods__["angle_amoeba_ftab_degree"] = _molset.AmberMMModel_angle_amoeba_ftab_degree_get
    if _newclass:
        angle_amoeba_ftab_degree = _swig_property(_molset.AmberMMModel_angle_amoeba_ftab_degree_get, _molset.AmberMMModel_angle_amoeba_ftab_degree_set)
    __swig_setmethods__["angle_amoeba_ftab_coef"] = _molset.AmberMMModel_angle_amoeba_ftab_coef_set
    __swig_getmethods__["angle_amoeba_ftab_coef"] = _molset.AmberMMModel_angle_amoeba_ftab_coef_get
    if _newclass:
        angle_amoeba_ftab_coef = _swig_property(_molset.AmberMMModel_angle_amoeba_ftab_coef_get, _molset.AmberMMModel_angle_amoeba_ftab_coef_set)
    __swig_setmethods__["n_trig_angles"] = _molset.AmberMMModel_n_trig_angles_set
    __swig_getmethods__["n_trig_angles"] = _molset.AmberMMModel_n_trig_angles_get
    if _newclass:
        n_trig_angles = _swig_property(_molset.AmberMMModel_n_trig_angles_get, _molset.AmberMMModel_n_trig_angles_set)
    __swig_setmethods__["gbl_angle_amoeba_trig"] = _molset.AmberMMModel_gbl_angle_amoeba_trig_set
    __swig_getmethods__["gbl_angle_amoeba_trig"] = _molset.AmberMMModel_gbl_angle_amoeba_trig_get
    if _newclass:
        gbl_angle_amoeba_trig = _swig_property(_molset.AmberMMModel_gbl_angle_amoeba_trig_get, _molset.AmberMMModel_gbl_angle_amoeba_trig_set)
    __swig_setmethods__["n_opbend_angles"] = _molset.AmberMMModel_n_opbend_angles_set
    __swig_getmethods__["n_opbend_angles"] = _molset.AmberMMModel_n_opbend_angles_get
    if _newclass:
        n_opbend_angles = _swig_property(_molset.AmberMMModel_n_opbend_angles_get, _molset.AmberMMModel_n_opbend_angles_set)
    __swig_setmethods__["n_opbend_angles_params"] = _molset.AmberMMModel_n_opbend_angles_params_set
    __swig_getmethods__["n_opbend_angles_params"] = _molset.AmberMMModel_n_opbend_angles_params_get
    if _newclass:
        n_opbend_angles_params = _swig_property(_molset.AmberMMModel_n_opbend_angles_params_get, _molset.AmberMMModel_n_opbend_angles_params_set)
    __swig_setmethods__["gbl_opbend_angle"] = _molset.AmberMMModel_gbl_opbend_angle_set
    __swig_getmethods__["gbl_opbend_angle"] = _molset.AmberMMModel_gbl_opbend_angle_get
    if _newclass:
        gbl_opbend_angle = _swig_property(_molset.AmberMMModel_gbl_opbend_angle_get, _molset.AmberMMModel_gbl_opbend_angle_set)
    __swig_setmethods__["opbend_angle_params"] = _molset.AmberMMModel_opbend_angle_params_set
    __swig_getmethods__["opbend_angle_params"] = _molset.AmberMMModel_opbend_angle_params_get
    if _newclass:
        opbend_angle_params = _swig_property(_molset.AmberMMModel_opbend_angle_params_get, _molset.AmberMMModel_opbend_angle_params_set)
    __swig_setmethods__["n_tors_amoeba"] = _molset.AmberMMModel_n_tors_amoeba_set
    __swig_getmethods__["n_tors_amoeba"] = _molset.AmberMMModel_n_tors_amoeba_get
    if _newclass:
        n_tors_amoeba = _swig_property(_molset.AmberMMModel_n_tors_amoeba_get, _molset.AmberMMModel_n_tors_amoeba_set)
    __swig_setmethods__["n_tors_amoeba_params"] = _molset.AmberMMModel_n_tors_amoeba_params_set
    __swig_getmethods__["n_tors_amoeba_params"] = _molset.AmberMMModel_n_tors_amoeba_params_get
    if _newclass:
        n_tors_amoeba_params = _swig_property(_molset.AmberMMModel_n_tors_amoeba_params_get, _molset.AmberMMModel_n_tors_amoeba_params_set)
    __swig_setmethods__["gbl_amoeba_tors_angle"] = _molset.AmberMMModel_gbl_amoeba_tors_angle_set
    __swig_getmethods__["gbl_amoeba_tors_angle"] = _molset.AmberMMModel_gbl_amoeba_tors_angle_get
    if _newclass:
        gbl_amoeba_tors_angle = _swig_property(_molset.AmberMMModel_gbl_amoeba_tors_angle_get, _molset.AmberMMModel_gbl_amoeba_tors_angle_set)
    __swig_setmethods__["tors_amoeba_params"] = _molset.AmberMMModel_tors_amoeba_params_set
    __swig_getmethods__["tors_amoeba_params"] = _molset.AmberMMModel_tors_amoeba_params_get
    if _newclass:
        tors_amoeba_params = _swig_property(_molset.AmberMMModel_tors_amoeba_params_get, _molset.AmberMMModel_tors_amoeba_params_set)
    __swig_setmethods__["n_pi_torsions"] = _molset.AmberMMModel_n_pi_torsions_set
    __swig_getmethods__["n_pi_torsions"] = _molset.AmberMMModel_n_pi_torsions_get
    if _newclass:
        n_pi_torsions = _swig_property(_molset.AmberMMModel_n_pi_torsions_get, _molset.AmberMMModel_n_pi_torsions_set)
    __swig_setmethods__["n_pi_torsions_params"] = _molset.AmberMMModel_n_pi_torsions_params_set
    __swig_getmethods__["n_pi_torsions_params"] = _molset.AmberMMModel_n_pi_torsions_params_get
    if _newclass:
        n_pi_torsions_params = _swig_property(_molset.AmberMMModel_n_pi_torsions_params_get, _molset.AmberMMModel_n_pi_torsions_params_set)
    __swig_setmethods__["gbl_pi_tors_angle"] = _molset.AmberMMModel_gbl_pi_tors_angle_set
    __swig_getmethods__["gbl_pi_tors_angle"] = _molset.AmberMMModel_gbl_pi_tors_angle_get
    if _newclass:
        gbl_pi_tors_angle = _swig_property(_molset.AmberMMModel_gbl_pi_tors_angle_get, _molset.AmberMMModel_gbl_pi_tors_angle_set)
    __swig_setmethods__["pi_tors_params"] = _molset.AmberMMModel_pi_tors_params_set
    __swig_getmethods__["pi_tors_params"] = _molset.AmberMMModel_pi_tors_params_get
    if _newclass:
        pi_tors_params = _swig_property(_molset.AmberMMModel_pi_tors_params_get, _molset.AmberMMModel_pi_tors_params_set)
    __swig_setmethods__["n_stretch_bend"] = _molset.AmberMMModel_n_stretch_bend_set
    __swig_getmethods__["n_stretch_bend"] = _molset.AmberMMModel_n_stretch_bend_get
    if _newclass:
        n_stretch_bend = _swig_property(_molset.AmberMMModel_n_stretch_bend_get, _molset.AmberMMModel_n_stretch_bend_set)
    __swig_setmethods__["n_stretch_bend_params"] = _molset.AmberMMModel_n_stretch_bend_params_set
    __swig_getmethods__["n_stretch_bend_params"] = _molset.AmberMMModel_n_stretch_bend_params_get
    if _newclass:
        n_stretch_bend_params = _swig_property(_molset.AmberMMModel_n_stretch_bend_params_get, _molset.AmberMMModel_n_stretch_bend_params_set)
    __swig_setmethods__["gbl_str_bend_angle"] = _molset.AmberMMModel_gbl_str_bend_angle_set
    __swig_getmethods__["gbl_str_bend_angle"] = _molset.AmberMMModel_gbl_str_bend_angle_get
    if _newclass:
        gbl_str_bend_angle = _swig_property(_molset.AmberMMModel_gbl_str_bend_angle_get, _molset.AmberMMModel_gbl_str_bend_angle_set)
    __swig_setmethods__["str_bend_params"] = _molset.AmberMMModel_str_bend_params_set
    __swig_getmethods__["str_bend_params"] = _molset.AmberMMModel_str_bend_params_get
    if _newclass:
        str_bend_params = _swig_property(_molset.AmberMMModel_str_bend_params_get, _molset.AmberMMModel_str_bend_params_set)
    __swig_setmethods__["n_tors_tors"] = _molset.AmberMMModel_n_tors_tors_set
    __swig_getmethods__["n_tors_tors"] = _molset.AmberMMModel_n_tors_tors_get
    if _newclass:
        n_tors_tors = _swig_property(_molset.AmberMMModel_n_tors_tors_get, _molset.AmberMMModel_n_tors_tors_set)
    __swig_setmethods__["n_tors_tors_params"] = _molset.AmberMMModel_n_tors_tors_params_set
    __swig_getmethods__["n_tors_tors_params"] = _molset.AmberMMModel_n_tors_tors_params_get
    if _newclass:
        n_tors_tors_params = _swig_property(_molset.AmberMMModel_n_tors_tors_params_get, _molset.AmberMMModel_n_tors_tors_params_set)
    __swig_setmethods__["gbl_tors_tors"] = _molset.AmberMMModel_gbl_tors_tors_set
    __swig_getmethods__["gbl_tors_tors"] = _molset.AmberMMModel_gbl_tors_tors_get
    if _newclass:
        gbl_tors_tors = _swig_property(_molset.AmberMMModel_gbl_tors_tors_get, _molset.AmberMMModel_gbl_tors_tors_set)
    __swig_setmethods__["tors_tors_id_params"] = _molset.AmberMMModel_tors_tors_id_params_set
    __swig_getmethods__["tors_tors_id_params"] = _molset.AmberMMModel_tors_tors_id_params_get
    if _newclass:
        tors_tors_id_params = _swig_property(_molset.AmberMMModel_tors_tors_id_params_get, _molset.AmberMMModel_tors_tors_id_params_set)
    __swig_setmethods__["tors_tors_params"] = _molset.AmberMMModel_tors_tors_params_set
    __swig_getmethods__["tors_tors_params"] = _molset.AmberMMModel_tors_tors_params_get
    if _newclass:
        tors_tors_params = _swig_property(_molset.AmberMMModel_tors_tors_params_get, _molset.AmberMMModel_tors_tors_params_set)
    __swig_setmethods__["atm_amoeba_vdw_type"] = _molset.AmberMMModel_atm_amoeba_vdw_type_set
    __swig_getmethods__["atm_amoeba_vdw_type"] = _molset.AmberMMModel_atm_amoeba_vdw_type_get
    if _newclass:
        atm_amoeba_vdw_type = _swig_property(_molset.AmberMMModel_atm_amoeba_vdw_type_get, _molset.AmberMMModel_atm_amoeba_vdw_type_set)
    __swig_setmethods__["atm_parent_id"] = _molset.AmberMMModel_atm_parent_id_set
    __swig_getmethods__["atm_parent_id"] = _molset.AmberMMModel_atm_parent_id_get
    if _newclass:
        atm_parent_id = _swig_property(_molset.AmberMMModel_atm_parent_id_get, _molset.AmberMMModel_atm_parent_id_set)
    __swig_setmethods__["atm_parent_weight"] = _molset.AmberMMModel_atm_parent_weight_set
    __swig_getmethods__["atm_parent_weight"] = _molset.AmberMMModel_atm_parent_weight_get
    if _newclass:
        atm_parent_weight = _swig_property(_molset.AmberMMModel_atm_parent_weight_get, _molset.AmberMMModel_atm_parent_weight_set)
    __swig_setmethods__["vdw_buffer_delta"] = _molset.AmberMMModel_vdw_buffer_delta_set
    __swig_getmethods__["vdw_buffer_delta"] = _molset.AmberMMModel_vdw_buffer_delta_get
    if _newclass:
        vdw_buffer_delta = _swig_property(_molset.AmberMMModel_vdw_buffer_delta_get, _molset.AmberMMModel_vdw_buffer_delta_set)
    __swig_setmethods__["vdw_buffer_gamma"] = _molset.AmberMMModel_vdw_buffer_gamma_set
    __swig_getmethods__["vdw_buffer_gamma"] = _molset.AmberMMModel_vdw_buffer_gamma_get
    if _newclass:
        vdw_buffer_gamma = _swig_property(_molset.AmberMMModel_vdw_buffer_gamma_get, _molset.AmberMMModel_vdw_buffer_gamma_set)
    __swig_setmethods__["n_vdw_params"] = _molset.AmberMMModel_n_vdw_params_set
    __swig_getmethods__["n_vdw_params"] = _molset.AmberMMModel_n_vdw_params_get
    if _newclass:
        n_vdw_params = _swig_property(_molset.AmberMMModel_n_vdw_params_get, _molset.AmberMMModel_n_vdw_params_set)
    __swig_setmethods__["amoeba_vdw_rstars"] = _molset.AmberMMModel_amoeba_vdw_rstars_set
    __swig_getmethods__["amoeba_vdw_rstars"] = _molset.AmberMMModel_amoeba_vdw_rstars_get
    if _newclass:
        amoeba_vdw_rstars = _swig_property(_molset.AmberMMModel_amoeba_vdw_rstars_get, _molset.AmberMMModel_amoeba_vdw_rstars_set)
    __swig_setmethods__["amoeba_vdw_depths"] = _molset.AmberMMModel_amoeba_vdw_depths_set
    __swig_getmethods__["amoeba_vdw_depths"] = _molset.AmberMMModel_amoeba_vdw_depths_get
    if _newclass:
        amoeba_vdw_depths = _swig_property(_molset.AmberMMModel_amoeba_vdw_depths_get, _molset.AmberMMModel_amoeba_vdw_depths_set)
    __swig_setmethods__["num_local_multipoles"] = _molset.AmberMMModel_num_local_multipoles_set
    __swig_getmethods__["num_local_multipoles"] = _molset.AmberMMModel_num_local_multipoles_get
    if _newclass:
        num_local_multipoles = _swig_property(_molset.AmberMMModel_num_local_multipoles_get, _molset.AmberMMModel_num_local_multipoles_set)
    __swig_setmethods__["num_chiral_frames"] = _molset.AmberMMModel_num_chiral_frames_set
    __swig_getmethods__["num_chiral_frames"] = _molset.AmberMMModel_num_chiral_frames_get
    if _newclass:
        num_chiral_frames = _swig_property(_molset.AmberMMModel_num_chiral_frames_get, _molset.AmberMMModel_num_chiral_frames_set)
    __swig_setmethods__["num_reg_frames"] = _molset.AmberMMModel_num_reg_frames_set
    __swig_getmethods__["num_reg_frames"] = _molset.AmberMMModel_num_reg_frames_get
    if _newclass:
        num_reg_frames = _swig_property(_molset.AmberMMModel_num_reg_frames_get, _molset.AmberMMModel_num_reg_frames_set)
    __swig_setmethods__["atm_multipoles"] = _molset.AmberMMModel_atm_multipoles_set
    __swig_getmethods__["atm_multipoles"] = _molset.AmberMMModel_atm_multipoles_get
    if _newclass:
        atm_multipoles = _swig_property(_molset.AmberMMModel_atm_multipoles_get, _molset.AmberMMModel_atm_multipoles_set)
    __swig_setmethods__["atm_chiral_frames"] = _molset.AmberMMModel_atm_chiral_frames_set
    __swig_getmethods__["atm_chiral_frames"] = _molset.AmberMMModel_atm_chiral_frames_get
    if _newclass:
        atm_chiral_frames = _swig_property(_molset.AmberMMModel_atm_chiral_frames_get, _molset.AmberMMModel_atm_chiral_frames_set)
    __swig_setmethods__["atm_reg_frames"] = _molset.AmberMMModel_atm_reg_frames_set
    __swig_getmethods__["atm_reg_frames"] = _molset.AmberMMModel_atm_reg_frames_get
    if _newclass:
        atm_reg_frames = _swig_property(_molset.AmberMMModel_atm_reg_frames_get, _molset.AmberMMModel_atm_reg_frames_set)

    def AddAtomFrames(self, aptr, p_at_ff, p_templ_atname_to_res_map):
        return _molset.AmberMMModel_AddAtomFrames(self, aptr, p_at_ff, p_templ_atname_to_res_map)
    __swig_setmethods__["num_adjust_list"] = _molset.AmberMMModel_num_adjust_list_set
    __swig_getmethods__["num_adjust_list"] = _molset.AmberMMModel_num_adjust_list_get
    if _newclass:
        num_adjust_list = _swig_property(_molset.AmberMMModel_num_adjust_list_get, _molset.AmberMMModel_num_adjust_list_set)
    __swig_setmethods__["atm_adjust_list"] = _molset.AmberMMModel_atm_adjust_list_set
    __swig_getmethods__["atm_adjust_list"] = _molset.AmberMMModel_atm_adjust_list_get
    if _newclass:
        atm_adjust_list = _swig_property(_molset.AmberMMModel_atm_adjust_list_get, _molset.AmberMMModel_atm_adjust_list_set)
    __swig_setmethods__["adjust_vdw_weights"] = _molset.AmberMMModel_adjust_vdw_weights_set
    __swig_getmethods__["adjust_vdw_weights"] = _molset.AmberMMModel_adjust_vdw_weights_get
    if _newclass:
        adjust_vdw_weights = _swig_property(_molset.AmberMMModel_adjust_vdw_weights_get, _molset.AmberMMModel_adjust_vdw_weights_set)
    __swig_setmethods__["adjust_mpole_weights"] = _molset.AmberMMModel_adjust_mpole_weights_set
    __swig_getmethods__["adjust_mpole_weights"] = _molset.AmberMMModel_adjust_mpole_weights_get
    if _newclass:
        adjust_mpole_weights = _swig_property(_molset.AmberMMModel_adjust_mpole_weights_get, _molset.AmberMMModel_adjust_mpole_weights_set)
    __swig_setmethods__["adjust_direct_weights"] = _molset.AmberMMModel_adjust_direct_weights_set
    __swig_getmethods__["adjust_direct_weights"] = _molset.AmberMMModel_adjust_direct_weights_get
    if _newclass:
        adjust_direct_weights = _swig_property(_molset.AmberMMModel_adjust_direct_weights_get, _molset.AmberMMModel_adjust_direct_weights_set)
    __swig_setmethods__["adjust_polar_weights"] = _molset.AmberMMModel_adjust_polar_weights_set
    __swig_getmethods__["adjust_polar_weights"] = _molset.AmberMMModel_adjust_polar_weights_get
    if _newclass:
        adjust_polar_weights = _swig_property(_molset.AmberMMModel_adjust_polar_weights_get, _molset.AmberMMModel_adjust_polar_weights_set)
    __swig_setmethods__["adjust_mutual_weights"] = _molset.AmberMMModel_adjust_mutual_weights_set
    __swig_getmethods__["adjust_mutual_weights"] = _molset.AmberMMModel_adjust_mutual_weights_get
    if _newclass:
        adjust_mutual_weights = _swig_property(_molset.AmberMMModel_adjust_mutual_weights_get, _molset.AmberMMModel_adjust_mutual_weights_set)
    __swig_setmethods__["atm_polar"] = _molset.AmberMMModel_atm_polar_set
    __swig_getmethods__["atm_polar"] = _molset.AmberMMModel_atm_polar_get
    if _newclass:
        atm_polar = _swig_property(_molset.AmberMMModel_atm_polar_get, _molset.AmberMMModel_atm_polar_set)
    __swig_setmethods__["atm_hpolar"] = _molset.AmberMMModel_atm_hpolar_set
    __swig_getmethods__["atm_hpolar"] = _molset.AmberMMModel_atm_hpolar_get
    if _newclass:
        atm_hpolar = _swig_property(_molset.AmberMMModel_atm_hpolar_get, _molset.AmberMMModel_atm_hpolar_set)
    __swig_setmethods__["atm_screen_polar"] = _molset.AmberMMModel_atm_screen_polar_set
    __swig_getmethods__["atm_screen_polar"] = _molset.AmberMMModel_atm_screen_polar_get
    if _newclass:
        atm_screen_polar = _swig_property(_molset.AmberMMModel_atm_screen_polar_get, _molset.AmberMMModel_atm_screen_polar_set)
    __swig_setmethods__["damp_polar_strength"] = _molset.AmberMMModel_damp_polar_strength_set
    __swig_getmethods__["damp_polar_strength"] = _molset.AmberMMModel_damp_polar_strength_get
    if _newclass:
        damp_polar_strength = _swig_property(_molset.AmberMMModel_damp_polar_strength_get, _molset.AmberMMModel_damp_polar_strength_set)
    __swig_setmethods__["damp_polar_sensitivity"] = _molset.AmberMMModel_damp_polar_sensitivity_set
    __swig_getmethods__["damp_polar_sensitivity"] = _molset.AmberMMModel_damp_polar_sensitivity_get
    if _newclass:
        damp_polar_sensitivity = _swig_property(_molset.AmberMMModel_damp_polar_sensitivity_get, _molset.AmberMMModel_damp_polar_sensitivity_set)
    __swig_setmethods__["damp_polar_rad"] = _molset.AmberMMModel_damp_polar_rad_set
    __swig_getmethods__["damp_polar_rad"] = _molset.AmberMMModel_damp_polar_rad_get
    if _newclass:
        damp_polar_rad = _swig_property(_molset.AmberMMModel_damp_polar_rad_get, _molset.AmberMMModel_damp_polar_rad_set)
    __swig_setmethods__["atm_qterm"] = _molset.AmberMMModel_atm_qterm_set
    __swig_getmethods__["atm_qterm"] = _molset.AmberMMModel_atm_qterm_get
    if _newclass:
        atm_qterm = _swig_property(_molset.AmberMMModel_atm_qterm_get, _molset.AmberMMModel_atm_qterm_set)
    __swig_setmethods__["is_polarizable"] = _molset.AmberMMModel_is_polarizable_set
    __swig_getmethods__["is_polarizable"] = _molset.AmberMMModel_is_polarizable_get
    if _newclass:
        is_polarizable = _swig_property(_molset.AmberMMModel_is_polarizable_get, _molset.AmberMMModel_is_polarizable_set)
    __swig_setmethods__["p_amber_driver"] = _molset.AmberMMModel_p_amber_driver_set
    __swig_getmethods__["p_amber_driver"] = _molset.AmberMMModel_p_amber_driver_get
    if _newclass:
        p_amber_driver = _swig_property(_molset.AmberMMModel_p_amber_driver_get, _molset.AmberMMModel_p_amber_driver_set)
AmberMMModel_swigregister = _molset.AmberMMModel_swigregister
AmberMMModel_swigregister(AmberMMModel)

class TimerAmber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimerAmber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimerAmber, name)
    __repr__ = _swig_repr

    def __init__(self, p_mm_driver_new):
        this = _molset.new_TimerAmber(p_mm_driver_new)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_TimerAmber
    __del__ = lambda self: None

    def InitTimers(self):
        return _molset.TimerAmber_InitTimers(self)

    def EndSetupTimers(self):
        return _molset.TimerAmber_EndSetupTimers(self)

    def EndRunTimers(self):
        return _molset.TimerAmber_EndRunTimers(self)

    def PrintTimings(self):
        return _molset.TimerAmber_PrintTimings(self)

    def ZeroTime(self):
        return _molset.TimerAmber_ZeroTime(self)

    def UpdateTime(self, itimer_type):
        return _molset.TimerAmber_UpdateTime(self, itimer_type)
    __swig_setmethods__["detailed_timing_flag"] = _molset.TimerAmber_detailed_timing_flag_set
    __swig_getmethods__["detailed_timing_flag"] = _molset.TimerAmber_detailed_timing_flag_get
    if _newclass:
        detailed_timing_flag = _swig_property(_molset.TimerAmber_detailed_timing_flag_get, _molset.TimerAmber_detailed_timing_flag_set)
    __swig_setmethods__["run_start_cputime"] = _molset.TimerAmber_run_start_cputime_set
    __swig_getmethods__["run_start_cputime"] = _molset.TimerAmber_run_start_cputime_get
    if _newclass:
        run_start_cputime = _swig_property(_molset.TimerAmber_run_start_cputime_get, _molset.TimerAmber_run_start_cputime_set)
    __swig_setmethods__["run_setup_end_cputime"] = _molset.TimerAmber_run_setup_end_cputime_set
    __swig_getmethods__["run_setup_end_cputime"] = _molset.TimerAmber_run_setup_end_cputime_get
    if _newclass:
        run_setup_end_cputime = _swig_property(_molset.TimerAmber_run_setup_end_cputime_get, _molset.TimerAmber_run_setup_end_cputime_set)
    __swig_setmethods__["run_end_cputime"] = _molset.TimerAmber_run_end_cputime_set
    __swig_getmethods__["run_end_cputime"] = _molset.TimerAmber_run_end_cputime_get
    if _newclass:
        run_end_cputime = _swig_property(_molset.TimerAmber_run_end_cputime_get, _molset.TimerAmber_run_end_cputime_set)
    __swig_setmethods__["run_start_walltime"] = _molset.TimerAmber_run_start_walltime_set
    __swig_getmethods__["run_start_walltime"] = _molset.TimerAmber_run_start_walltime_get
    if _newclass:
        run_start_walltime = _swig_property(_molset.TimerAmber_run_start_walltime_get, _molset.TimerAmber_run_start_walltime_set)
    __swig_setmethods__["run_setup_end_walltime"] = _molset.TimerAmber_run_setup_end_walltime_set
    __swig_getmethods__["run_setup_end_walltime"] = _molset.TimerAmber_run_setup_end_walltime_get
    if _newclass:
        run_setup_end_walltime = _swig_property(_molset.TimerAmber_run_setup_end_walltime_get, _molset.TimerAmber_run_setup_end_walltime_set)
    __swig_setmethods__["run_end_walltime"] = _molset.TimerAmber_run_end_walltime_set
    __swig_getmethods__["run_end_walltime"] = _molset.TimerAmber_run_end_walltime_get
    if _newclass:
        run_end_walltime = _swig_property(_molset.TimerAmber_run_end_walltime_get, _molset.TimerAmber_run_end_walltime_set)
    FCVE_DIST_TIME = _molset.TimerAmber_FCVE_DIST_TIME
    NONBOND_TIME = _molset.TimerAmber_NONBOND_TIME
    BOND_TIME = _molset.TimerAmber_BOND_TIME
    ANGLE_TIME = _molset.TimerAmber_ANGLE_TIME
    DIHEDRAL_TIME = _molset.TimerAmber_DIHEDRAL_TIME
    SHAKE_TIME = _molset.TimerAmber_SHAKE_TIME
    RUNMD_TIME = _molset.TimerAmber_RUNMD_TIME
    OTHER_TIME = _molset.TimerAmber_OTHER_TIME
    NONSETUP_TIME = _molset.TimerAmber_NONSETUP_TIME
    MAX_GENERIC_TIMER = _molset.TimerAmber_MAX_GENERIC_TIMER
    CIT_SETUP_TIMER = _molset.TimerAmber_CIT_SETUP_TIMER
    BUILD_LIST_TIMER = _molset.TimerAmber_BUILD_LIST_TIMER
    BSPLINE_TIMER = _molset.TimerAmber_BSPLINE_TIMER
    GRID_CHARGES_TIMER = _molset.TimerAmber_GRID_CHARGES_TIMER
    SCALAR_SUM_TIMER = _molset.TimerAmber_SCALAR_SUM_TIMER
    GRAD_SUM_TIMER = _molset.TimerAmber_GRAD_SUM_TIMER
    FFT_TIMER = _molset.TimerAmber_FFT_TIMER
    DIR_FRC_SUM_TIMER = _molset.TimerAmber_DIR_FRC_SUM_TIMER
    ADJUST_MASKED_TIMER = _molset.TimerAmber_ADJUST_MASKED_TIMER
    PME_MISC_TIMER = _molset.TimerAmber_PME_MISC_TIMER
    ATM_REASSIGN_TIMER = _molset.TimerAmber_ATM_REASSIGN_TIMER
    IMG_REASSIGN_TIMER = _molset.TimerAmber_IMG_REASSIGN_TIMER
    FFT_SLAB_REASSIGN_TIMER = _molset.TimerAmber_FFT_SLAB_REASSIGN_TIMER
    MAX_PME_TIMER = _molset.TimerAmber_MAX_PME_TIMER
    CALC_GB_RAD_TIMER = _molset.TimerAmber_CALC_GB_RAD_TIMER
    CALC_GB_DIAG_TIMER = _molset.TimerAmber_CALC_GB_DIAG_TIMER
    CALC_GB_OFFDIAG_TIMER = _molset.TimerAmber_CALC_GB_OFFDIAG_TIMER
    DIST_GB_RAD_TIMER = _molset.TimerAmber_DIST_GB_RAD_TIMER
    MAX_GB_TIMER = _molset.TimerAmber_MAX_GB_TIMER
    MAX_TIMER = _molset.TimerAmber_MAX_TIMER
    __swig_setmethods__["p_mm_driver"] = _molset.TimerAmber_p_mm_driver_set
    __swig_getmethods__["p_mm_driver"] = _molset.TimerAmber_p_mm_driver_get
    if _newclass:
        p_mm_driver = _swig_property(_molset.TimerAmber_p_mm_driver_get, _molset.TimerAmber_p_mm_driver_set)
    __swig_setmethods__["p_amber_model"] = _molset.TimerAmber_p_amber_model_set
    __swig_getmethods__["p_amber_model"] = _molset.TimerAmber_p_amber_model_get
    if _newclass:
        p_amber_model = _swig_property(_molset.TimerAmber_p_amber_model_get, _molset.TimerAmber_p_amber_model_set)
TimerAmber_swigregister = _molset.TimerAmber_swigregister
TimerAmber_swigregister(TimerAmber)

class HaMolMechMod(HaCompMod):
    __swig_setmethods__ = {}
    for _s in [HaCompMod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaMolMechMod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaCompMod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaMolMechMod, name)
    __repr__ = _swig_repr

    def __init__(self, new_pmset):
        this = _molset.new_HaMolMechMod(new_pmset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaMolMechMod
    __del__ = lambda self: None

    def SetStdParams(self):
        return _molset.HaMolMechMod_SetStdParams(self)

    def Initialize(self):
        return _molset.HaMolMechMod_Initialize(self)

    def InitMolMechModel(self, *args):
        return _molset.HaMolMechMod_InitMolMechModel(self, *args)

    def InitMMSimulations(self):
        return _molset.HaMolMechMod_InitMMSimulations(self)

    def InitSingleHamMMSimulations(self):
        return _molset.HaMolMechMod_InitSingleHamMMSimulations(self)

    def InitMixedHamSimulations(self, p_mm_model_2):
        return _molset.HaMolMechMod_InitMixedHamSimulations(self, p_mm_model_2)

    def InitMixedHamSimulations_node(self, p_mm_model_2):
        return _molset.HaMolMechMod_InitMixedHamSimulations_node(self, p_mm_model_2)

    def BcastCtrlParams(self, comm):
        return _molset.HaMolMechMod_BcastCtrlParams(self, comm)
    __swig_setmethods__["to_init_simulations"] = _molset.HaMolMechMod_to_init_simulations_set
    __swig_getmethods__["to_init_simulations"] = _molset.HaMolMechMod_to_init_simulations_get
    if _newclass:
        to_init_simulations = _swig_property(_molset.HaMolMechMod_to_init_simulations_get, _molset.HaMolMechMod_to_init_simulations_set)
    __swig_setmethods__["to_stop_simulations"] = _molset.HaMolMechMod_to_stop_simulations_set
    __swig_getmethods__["to_stop_simulations"] = _molset.HaMolMechMod_to_stop_simulations_get
    if _newclass:
        to_stop_simulations = _swig_property(_molset.HaMolMechMod_to_stop_simulations_get, _molset.HaMolMechMod_to_stop_simulations_set)

    def SaveXMLToStream(self, os, popt=None):
        return _molset.HaMolMechMod_SaveXMLToStream(self, os, popt)

    def SetMMRunType(self, run_type_new):
        return _molset.HaMolMechMod_SetMMRunType(self, run_type_new)

    def SetRunInternal(self, run_internal_flag_new=1):
        return _molset.HaMolMechMod_SetRunInternal(self, run_internal_flag_new)

    def SetMMExternalProg(self, ext_mm_prog_new):
        return _molset.HaMolMechMod_SetMMExternalProg(self, ext_mm_prog_new)

    def RunCtrlThread(self):
        return _molset.HaMolMechMod_RunCtrlThread(self)

    def Run(self, popt=None):
        return _molset.HaMolMechMod_Run(self, popt)

    def RunMinEne(self, popt=None):
        return _molset.HaMolMechMod_RunMinEne(self, popt)

    def RunMD(self, popt=None):
        return _molset.HaMolMechMod_RunMD(self, popt)

    def RunTI(self, p_mm_model_2):
        return _molset.HaMolMechMod_RunTI(self, p_mm_model_2)

    def RunExternal(self, popt=None):
        return _molset.HaMolMechMod_RunExternal(self, popt)

    def RunInternal(self):
        return _molset.HaMolMechMod_RunInternal(self)

    def ControlCalc(self):
        return _molset.HaMolMechMod_ControlCalc(self)

    def RunInternal_node(self):
        return _molset.HaMolMechMod_RunInternal_node(self)

    def CalcEnergy(self):
        return _molset.HaMolMechMod_CalcEnergy(self)

    def CalcEnergySimple(self):
        return _molset.HaMolMechMod_CalcEnergySimple(self)

    def PrintEneStr(self, info, str_out):
        return _molset.HaMolMechMod_PrintEneStr(self, info, str_out)

    def PrintEneStrAccurate(self, info, str_out):
        return _molset.HaMolMechMod_PrintEneStrAccurate(self, info, str_out)

    def PrintLogEne(self):
        return _molset.HaMolMechMod_PrintLogEne(self)

    def StopCalc(self):
        return _molset.HaMolMechMod_StopCalc(self)

    def UpdateMolInfo(self):
        return _molset.HaMolMechMod_UpdateMolInfo(self)

    def UpdateMolView(self):
        return _molset.HaMolMechMod_UpdateMolView(self)

    def GetEne(self):
        return _molset.HaMolMechMod_GetEne(self)

    def GetTotEne(self):
        return _molset.HaMolMechMod_GetTotEne(self)

    def GetPotEne(self):
        return _molset.HaMolMechMod_GetPotEne(self)

    def GetConstrEne(self):
        return _molset.HaMolMechMod_GetConstrEne(self)

    def GetUnConstrEne(self):
        return _molset.HaMolMechMod_GetUnConstrEne(self)

    def LoadAmberRestartFile(self, rst_file_name):
        return _molset.HaMolMechMod_LoadAmberRestartFile(self, rst_file_name)

    def CheckModelsForTI(self, p_mm_model_1, p_mm_model_2):
        return _molset.HaMolMechMod_CheckModelsForTI(self, p_mm_model_1, p_mm_model_2)
    if _newclass:
        CallMMFunctionOnSlaves = staticmethod(_molset.HaMolMechMod_CallMMFunctionOnSlaves)
    else:
        CallMMFunctionOnSlaves = _molset.HaMolMechMod_CallMMFunctionOnSlaves
    __swig_setmethods__["lambda_ti"] = _molset.HaMolMechMod_lambda_ti_set
    __swig_getmethods__["lambda_ti"] = _molset.HaMolMechMod_lambda_ti_get
    if _newclass:
        lambda_ti = _swig_property(_molset.HaMolMechMod_lambda_ti_get, _molset.HaMolMechMod_lambda_ti_set)

    def SetMPICommSplit2(self):
        return _molset.HaMolMechMod_SetMPICommSplit2(self)
    __swig_setmethods__["inter_model_comm"] = _molset.HaMolMechMod_inter_model_comm_set
    __swig_getmethods__["inter_model_comm"] = _molset.HaMolMechMod_inter_model_comm_get
    if _newclass:
        inter_model_comm = _swig_property(_molset.HaMolMechMod_inter_model_comm_get, _molset.HaMolMechMod_inter_model_comm_set)
    __swig_setmethods__["inter_model_rank"] = _molset.HaMolMechMod_inter_model_rank_set
    __swig_getmethods__["inter_model_rank"] = _molset.HaMolMechMod_inter_model_rank_get
    if _newclass:
        inter_model_rank = _swig_property(_molset.HaMolMechMod_inter_model_rank_get, _molset.HaMolMechMod_inter_model_rank_set)
    __swig_setmethods__["single_job_comm"] = _molset.HaMolMechMod_single_job_comm_set
    __swig_getmethods__["single_job_comm"] = _molset.HaMolMechMod_single_job_comm_get
    if _newclass:
        single_job_comm = _swig_property(_molset.HaMolMechMod_single_job_comm_get, _molset.HaMolMechMod_single_job_comm_set)
    __swig_setmethods__["single_job_rank"] = _molset.HaMolMechMod_single_job_rank_set
    __swig_getmethods__["single_job_rank"] = _molset.HaMolMechMod_single_job_rank_get
    if _newclass:
        single_job_rank = _swig_property(_molset.HaMolMechMod_single_job_rank_get, _molset.HaMolMechMod_single_job_rank_set)

    def GetMolMechModel(self, *args):
        return _molset.HaMolMechMod_GetMolMechModel(self, *args)

    def GetMDSimMod(self):
        return _molset.HaMolMechMod_GetMDSimMod(self)

    def GetMinEneMod(self):
        return _molset.HaMolMechMod_GetMinEneMod(self)

    def GetTISimMod(self):
        return _molset.HaMolMechMod_GetTISimMod(self)

    def GetTrajAnalMod(self):
        return _molset.HaMolMechMod_GetTrajAnalMod(self)
    __swig_setmethods__["p_mm_info"] = _molset.HaMolMechMod_p_mm_info_set
    __swig_getmethods__["p_mm_info"] = _molset.HaMolMechMod_p_mm_info_get
    if _newclass:
        p_mm_info = _swig_property(_molset.HaMolMechMod_p_mm_info_get, _molset.HaMolMechMod_p_mm_info_set)
    __swig_setmethods__["mm_driver_name"] = _molset.HaMolMechMod_mm_driver_name_set
    __swig_getmethods__["mm_driver_name"] = _molset.HaMolMechMod_mm_driver_name_get
    if _newclass:
        mm_driver_name = _swig_property(_molset.HaMolMechMod_mm_driver_name_get, _molset.HaMolMechMod_mm_driver_name_set)
    __swig_setmethods__["p_amber_driver"] = _molset.HaMolMechMod_p_amber_driver_set
    __swig_getmethods__["p_amber_driver"] = _molset.HaMolMechMod_p_amber_driver_get
    if _newclass:
        p_amber_driver = _swig_property(_molset.HaMolMechMod_p_amber_driver_get, _molset.HaMolMechMod_p_amber_driver_set)
    __swig_setmethods__["p_tinker_driver"] = _molset.HaMolMechMod_p_tinker_driver_set
    __swig_getmethods__["p_tinker_driver"] = _molset.HaMolMechMod_p_tinker_driver_get
    if _newclass:
        p_tinker_driver = _swig_property(_molset.HaMolMechMod_p_tinker_driver_get, _molset.HaMolMechMod_p_tinker_driver_set)
    __swig_setmethods__["p_gromacs_driver"] = _molset.HaMolMechMod_p_gromacs_driver_set
    __swig_getmethods__["p_gromacs_driver"] = _molset.HaMolMechMod_p_gromacs_driver_get
    if _newclass:
        p_gromacs_driver = _swig_property(_molset.HaMolMechMod_p_gromacs_driver_get, _molset.HaMolMechMod_p_gromacs_driver_set)

    def SetPrefix(self, *args):
        return _molset.HaMolMechMod_SetPrefix(self, *args)

    def GetPrefix(self):
        return _molset.HaMolMechMod_GetPrefix(self)

    def SetRestrtFileFormat(self, format):
        return _molset.HaMolMechMod_SetRestrtFileFormat(self, format)

    def SetMDtrajFileFormat(self, format):
        return _molset.HaMolMechMod_SetMDtrajFileFormat(self, format)

    def SetWrtLogFreq(self, wrt_freq):
        return _molset.HaMolMechMod_SetWrtLogFreq(self, wrt_freq)

    def SetWrtRstrtFreq(self, wrt_freq):
        return _molset.HaMolMechMod_SetWrtRstrtFreq(self, wrt_freq)

    def SetWrtMDTrajFreq(self, wrt_freq, save_vel=0):
        return _molset.HaMolMechMod_SetWrtMDTrajFreq(self, wrt_freq, save_vel)

    def SetWrtCoordFreq(self, wrt_freq):
        return _molset.HaMolMechMod_SetWrtCoordFreq(self, wrt_freq)

    def SetWrtVelFreq(self, wrt_freq):
        return _molset.HaMolMechMod_SetWrtVelFreq(self, wrt_freq)

    def SetWrtEnerFreq(self, wrt_freq):
        return _molset.HaMolMechMod_SetWrtEnerFreq(self, wrt_freq)

    def SetWrtConstrFreq(self, wrt_freq):
        return _molset.HaMolMechMod_SetWrtConstrFreq(self, wrt_freq)

    def SetEneMinMethod(self, method):
        return _molset.HaMolMechMod_SetEneMinMethod(self, method)

    def SetMaxNumMinimSteps(self, max_num_minim_steps_new):
        return _molset.HaMolMechMod_SetMaxNumMinimSteps(self, max_num_minim_steps_new)

    def SetNumSteepDescentSteps(self, nsteps):
        return _molset.HaMolMechMod_SetNumSteepDescentSteps(self, nsteps)

    def SetInitMinStep(self, init_min_step_new):
        return _molset.HaMolMechMod_SetInitMinStep(self, init_min_step_new)

    def SetGradCnvrgVal(self, grad_cnvrg_val_new):
        return _molset.HaMolMechMod_SetGradCnvrgVal(self, grad_cnvrg_val_new)

    def SetZMatMin(self, set_par=True):
        return _molset.HaMolMechMod_SetZMatMin(self, set_par)

    def IsZMatMin(self):
        return _molset.HaMolMechMod_IsZMatMin(self)

    def SetNumMDSteps(self, num_md_steps_new):
        return _molset.HaMolMechMod_SetNumMDSteps(self, num_md_steps_new)

    def SetRemoveInitRBMotion(self, remove_init_motion=1):
        return _molset.HaMolMechMod_SetRemoveInitRBMotion(self, remove_init_motion)

    def SetRemoveRBMotionFreq(self, freq):
        return _molset.HaMolMechMod_SetRemoveRBMotionFreq(self, freq)

    def SetStartVelMethod(self, start_vel_method_new):
        return _molset.HaMolMechMod_SetStartVelMethod(self, start_vel_method_new)

    def SetStartTime(self, start_time_new):
        return _molset.HaMolMechMod_SetStartTime(self, start_time_new)

    def SetMDTimeStep(self, md_time_step_new):
        return _molset.HaMolMechMod_SetMDTimeStep(self, md_time_step_new)

    def SetNBListUpdateFreq(self, freq):
        return _molset.HaMolMechMod_SetNBListUpdateFreq(self, freq)

    def SetPerBoundaryCondType(self, type):
        return _molset.HaMolMechMod_SetPerBoundaryCondType(self, type)

    def SetRefTemp(self, ref_temp_new):
        return _molset.HaMolMechMod_SetRefTemp(self, ref_temp_new)

    def SetInitTemp(self, init_temp_new):
        return _molset.HaMolMechMod_SetInitTemp(self, init_temp_new)

    def SetLangevinDumpConst(self, langevin_dump_const_new):
        return _molset.HaMolMechMod_SetLangevinDumpConst(self, langevin_dump_const_new)

    def SetRandomSeed(self, random_seed_new):
        return _molset.HaMolMechMod_SetRandomSeed(self, random_seed_new)

    def SetScaleInitVel(self, scale_init_vel_new):
        return _molset.HaMolMechMod_SetScaleInitVel(self, scale_init_vel_new)

    def SetTempCtrlMethod(self, method):
        return _molset.HaMolMechMod_SetTempCtrlMethod(self, method)

    def SetTempDeviation(self, temp_deviation_new):
        return _molset.HaMolMechMod_SetTempDeviation(self, temp_deviation_new)

    def SetTempRelaxTimeSolute(self, temp_relax_time_solute_new):
        return _molset.HaMolMechMod_SetTempRelaxTimeSolute(self, temp_relax_time_solute_new)

    def SetTempRelaxTimeSolvent(self, temp_relax_time_solvent_new):
        return _molset.HaMolMechMod_SetTempRelaxTimeSolvent(self, temp_relax_time_solvent_new)

    def SetVelLimit(self, vel_limit_new):
        return _molset.HaMolMechMod_SetVelLimit(self, vel_limit_new)

    def SetPressureRegMethod(self, method):
        return _molset.HaMolMechMod_SetPressureRegMethod(self, method)

    def SetRefPressure(self, ref_pressure_new):
        return _molset.HaMolMechMod_SetRefPressure(self, ref_pressure_new)

    def SetCompressibility(self, compressibility_new):
        return _molset.HaMolMechMod_SetCompressibility(self, compressibility_new)

    def SetPressRelaxTime(self, press_relax_time_new):
        return _molset.HaMolMechMod_SetPressRelaxTime(self, press_relax_time_new)

    def SetShakeConstr(self, shake_constr_new):
        return _molset.HaMolMechMod_SetShakeConstr(self, shake_constr_new)

    def SetShakeTol(self, shake_tol_new):
        return _molset.HaMolMechMod_SetShakeTol(self, shake_tol_new)

    def OnChangePeriodicity(self):
        return _molset.HaMolMechMod_OnChangePeriodicity(self)
    if _newclass:
        TestSaveAmoebaTopFile1 = staticmethod(_molset.HaMolMechMod_TestSaveAmoebaTopFile1)
    else:
        TestSaveAmoebaTopFile1 = _molset.HaMolMechMod_TestSaveAmoebaTopFile1
    if _newclass:
        TestSaveAmoebaTopFile2 = staticmethod(_molset.HaMolMechMod_TestSaveAmoebaTopFile2)
    else:
        TestSaveAmoebaTopFile2 = _molset.HaMolMechMod_TestSaveAmoebaTopFile2
HaMolMechMod_swigregister = _molset.HaMolMechMod_swigregister
HaMolMechMod_swigregister(HaMolMechMod)

def HaMolMechMod_CallMMFunctionOnSlaves(id):
    return _molset.HaMolMechMod_CallMMFunctionOnSlaves(id)
HaMolMechMod_CallMMFunctionOnSlaves = _molset.HaMolMechMod_CallMMFunctionOnSlaves

def HaMolMechMod_TestSaveAmoebaTopFile1():
    return _molset.HaMolMechMod_TestSaveAmoebaTopFile1()
HaMolMechMod_TestSaveAmoebaTopFile1 = _molset.HaMolMechMod_TestSaveAmoebaTopFile1

def HaMolMechMod_TestSaveAmoebaTopFile2():
    return _molset.HaMolMechMod_TestSaveAmoebaTopFile2()
HaMolMechMod_TestSaveAmoebaTopFile2 = _molset.HaMolMechMod_TestSaveAmoebaTopFile2

class MMSysInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMSysInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MMSysInfo, name)
    __repr__ = _swig_repr

    def __init__(self, p_mm_mod_new):
        this = _molset.new_MMSysInfo(p_mm_mod_new)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_MMSysInfo
    __del__ = lambda self: None

    def clear(self):
        return _molset.MMSysInfo_clear(self)
    __swig_setmethods__["nstep"] = _molset.MMSysInfo_nstep_set
    __swig_getmethods__["nstep"] = _molset.MMSysInfo_nstep_get
    if _newclass:
        nstep = _swig_property(_molset.MMSysInfo_nstep_get, _molset.MMSysInfo_nstep_set)
    __swig_setmethods__["time"] = _molset.MMSysInfo_time_set
    __swig_getmethods__["time"] = _molset.MMSysInfo_time_get
    if _newclass:
        time = _swig_property(_molset.MMSysInfo_time_get, _molset.MMSysInfo_time_set)
    __swig_setmethods__["temp"] = _molset.MMSysInfo_temp_set
    __swig_getmethods__["temp"] = _molset.MMSysInfo_temp_get
    if _newclass:
        temp = _swig_property(_molset.MMSysInfo_temp_get, _molset.MMSysInfo_temp_set)
    __swig_setmethods__["temp_solute"] = _molset.MMSysInfo_temp_solute_set
    __swig_getmethods__["temp_solute"] = _molset.MMSysInfo_temp_solute_get
    if _newclass:
        temp_solute = _swig_property(_molset.MMSysInfo_temp_solute_get, _molset.MMSysInfo_temp_solute_set)
    __swig_setmethods__["temp_solv"] = _molset.MMSysInfo_temp_solv_set
    __swig_getmethods__["temp_solv"] = _molset.MMSysInfo_temp_solv_get
    if _newclass:
        temp_solv = _swig_property(_molset.MMSysInfo_temp_solv_get, _molset.MMSysInfo_temp_solv_set)
    __swig_setmethods__["press"] = _molset.MMSysInfo_press_set
    __swig_getmethods__["press"] = _molset.MMSysInfo_press_get
    if _newclass:
        press = _swig_property(_molset.MMSysInfo_press_get, _molset.MMSysInfo_press_set)
    __swig_setmethods__["pres_x"] = _molset.MMSysInfo_pres_x_set
    __swig_getmethods__["pres_x"] = _molset.MMSysInfo_pres_x_get
    if _newclass:
        pres_x = _swig_property(_molset.MMSysInfo_pres_x_get, _molset.MMSysInfo_pres_x_set)
    __swig_setmethods__["pres_y"] = _molset.MMSysInfo_pres_y_set
    __swig_getmethods__["pres_y"] = _molset.MMSysInfo_pres_y_get
    if _newclass:
        pres_y = _swig_property(_molset.MMSysInfo_pres_y_get, _molset.MMSysInfo_pres_y_set)
    __swig_setmethods__["pres_z"] = _molset.MMSysInfo_pres_z_set
    __swig_getmethods__["pres_z"] = _molset.MMSysInfo_pres_z_get
    if _newclass:
        pres_z = _swig_property(_molset.MMSysInfo_pres_z_get, _molset.MMSysInfo_pres_z_set)
    __swig_setmethods__["press_scale_solute"] = _molset.MMSysInfo_press_scale_solute_set
    __swig_getmethods__["press_scale_solute"] = _molset.MMSysInfo_press_scale_solute_get
    if _newclass:
        press_scale_solute = _swig_property(_molset.MMSysInfo_press_scale_solute_get, _molset.MMSysInfo_press_scale_solute_set)
    __swig_setmethods__["press_scale_solvent"] = _molset.MMSysInfo_press_scale_solvent_set
    __swig_getmethods__["press_scale_solvent"] = _molset.MMSysInfo_press_scale_solvent_get
    if _newclass:
        press_scale_solvent = _swig_property(_molset.MMSysInfo_press_scale_solvent_get, _molset.MMSysInfo_press_scale_solvent_set)
    __swig_setmethods__["tot_energy"] = _molset.MMSysInfo_tot_energy_set
    __swig_getmethods__["tot_energy"] = _molset.MMSysInfo_tot_energy_get
    if _newclass:
        tot_energy = _swig_property(_molset.MMSysInfo_tot_energy_get, _molset.MMSysInfo_tot_energy_set)
    __swig_setmethods__["kin_ene"] = _molset.MMSysInfo_kin_ene_set
    __swig_getmethods__["kin_ene"] = _molset.MMSysInfo_kin_ene_get
    if _newclass:
        kin_ene = _swig_property(_molset.MMSysInfo_kin_ene_get, _molset.MMSysInfo_kin_ene_set)
    __swig_setmethods__["pot_ene"] = _molset.MMSysInfo_pot_ene_set
    __swig_getmethods__["pot_ene"] = _molset.MMSysInfo_pot_ene_get
    if _newclass:
        pot_ene = _swig_property(_molset.MMSysInfo_pot_ene_get, _molset.MMSysInfo_pot_ene_set)
    __swig_setmethods__["bond_ene"] = _molset.MMSysInfo_bond_ene_set
    __swig_getmethods__["bond_ene"] = _molset.MMSysInfo_bond_ene_get
    if _newclass:
        bond_ene = _swig_property(_molset.MMSysInfo_bond_ene_get, _molset.MMSysInfo_bond_ene_set)
    __swig_setmethods__["vang_ene"] = _molset.MMSysInfo_vang_ene_set
    __swig_getmethods__["vang_ene"] = _molset.MMSysInfo_vang_ene_get
    if _newclass:
        vang_ene = _swig_property(_molset.MMSysInfo_vang_ene_get, _molset.MMSysInfo_vang_ene_set)
    __swig_setmethods__["dihed_ene"] = _molset.MMSysInfo_dihed_ene_set
    __swig_getmethods__["dihed_ene"] = _molset.MMSysInfo_dihed_ene_get
    if _newclass:
        dihed_ene = _swig_property(_molset.MMSysInfo_dihed_ene_get, _molset.MMSysInfo_dihed_ene_set)
    __swig_setmethods__["vdw_ene"] = _molset.MMSysInfo_vdw_ene_set
    __swig_getmethods__["vdw_ene"] = _molset.MMSysInfo_vdw_ene_get
    if _newclass:
        vdw_ene = _swig_property(_molset.MMSysInfo_vdw_ene_get, _molset.MMSysInfo_vdw_ene_set)
    __swig_setmethods__["vdw_ene_14"] = _molset.MMSysInfo_vdw_ene_14_set
    __swig_getmethods__["vdw_ene_14"] = _molset.MMSysInfo_vdw_ene_14_get
    if _newclass:
        vdw_ene_14 = _swig_property(_molset.MMSysInfo_vdw_ene_14_get, _molset.MMSysInfo_vdw_ene_14_set)
    __swig_setmethods__["vdw_ene_nb"] = _molset.MMSysInfo_vdw_ene_nb_set
    __swig_getmethods__["vdw_ene_nb"] = _molset.MMSysInfo_vdw_ene_nb_get
    if _newclass:
        vdw_ene_nb = _swig_property(_molset.MMSysInfo_vdw_ene_nb_get, _molset.MMSysInfo_vdw_ene_nb_set)
    __swig_setmethods__["electr_ene"] = _molset.MMSysInfo_electr_ene_set
    __swig_getmethods__["electr_ene"] = _molset.MMSysInfo_electr_ene_get
    if _newclass:
        electr_ene = _swig_property(_molset.MMSysInfo_electr_ene_get, _molset.MMSysInfo_electr_ene_set)
    __swig_setmethods__["electr_ene_14"] = _molset.MMSysInfo_electr_ene_14_set
    __swig_getmethods__["electr_ene_14"] = _molset.MMSysInfo_electr_ene_14_get
    if _newclass:
        electr_ene_14 = _swig_property(_molset.MMSysInfo_electr_ene_14_get, _molset.MMSysInfo_electr_ene_14_set)
    __swig_setmethods__["electr_ene_nb"] = _molset.MMSysInfo_electr_ene_nb_set
    __swig_getmethods__["electr_ene_nb"] = _molset.MMSysInfo_electr_ene_nb_get
    if _newclass:
        electr_ene_nb = _swig_property(_molset.MMSysInfo_electr_ene_nb_get, _molset.MMSysInfo_electr_ene_nb_set)
    __swig_setmethods__["polar_ene"] = _molset.MMSysInfo_polar_ene_set
    __swig_getmethods__["polar_ene"] = _molset.MMSysInfo_polar_ene_get
    if _newclass:
        polar_ene = _swig_property(_molset.MMSysInfo_polar_ene_get, _molset.MMSysInfo_polar_ene_set)
    __swig_setmethods__["polar_dip_iter"] = _molset.MMSysInfo_polar_dip_iter_set
    __swig_getmethods__["polar_dip_iter"] = _molset.MMSysInfo_polar_dip_iter_get
    if _newclass:
        polar_dip_iter = _swig_property(_molset.MMSysInfo_polar_dip_iter_get, _molset.MMSysInfo_polar_dip_iter_set)
    __swig_setmethods__["polar_dip_rms"] = _molset.MMSysInfo_polar_dip_rms_set
    __swig_getmethods__["polar_dip_rms"] = _molset.MMSysInfo_polar_dip_rms_get
    if _newclass:
        polar_dip_rms = _swig_property(_molset.MMSysInfo_polar_dip_rms_get, _molset.MMSysInfo_polar_dip_rms_set)
    __swig_setmethods__["gb_ene"] = _molset.MMSysInfo_gb_ene_set
    __swig_getmethods__["gb_ene"] = _molset.MMSysInfo_gb_ene_get
    if _newclass:
        gb_ene = _swig_property(_molset.MMSysInfo_gb_ene_get, _molset.MMSysInfo_gb_ene_set)
    __swig_setmethods__["hbond_ene"] = _molset.MMSysInfo_hbond_ene_set
    __swig_getmethods__["hbond_ene"] = _molset.MMSysInfo_hbond_ene_get
    if _newclass:
        hbond_ene = _swig_property(_molset.MMSysInfo_hbond_ene_get, _molset.MMSysInfo_hbond_ene_set)
    __swig_setmethods__["constraints_ene"] = _molset.MMSysInfo_constraints_ene_set
    __swig_getmethods__["constraints_ene"] = _molset.MMSysInfo_constraints_ene_get
    if _newclass:
        constraints_ene = _swig_property(_molset.MMSysInfo_constraints_ene_get, _molset.MMSysInfo_constraints_ene_set)
    __swig_setmethods__["epol"] = _molset.MMSysInfo_epol_set
    __swig_getmethods__["epol"] = _molset.MMSysInfo_epol_get
    if _newclass:
        epol = _swig_property(_molset.MMSysInfo_epol_get, _molset.MMSysInfo_epol_set)
    __swig_setmethods__["e3body"] = _molset.MMSysInfo_e3body_set
    __swig_getmethods__["e3body"] = _molset.MMSysInfo_e3body_get
    if _newclass:
        e3body = _swig_property(_molset.MMSysInfo_e3body_get, _molset.MMSysInfo_e3body_set)
    __swig_setmethods__["kin_ene_plus_half_dt"] = _molset.MMSysInfo_kin_ene_plus_half_dt_set
    __swig_getmethods__["kin_ene_plus_half_dt"] = _molset.MMSysInfo_kin_ene_plus_half_dt_get
    if _newclass:
        kin_ene_plus_half_dt = _swig_property(_molset.MMSysInfo_kin_ene_plus_half_dt_get, _molset.MMSysInfo_kin_ene_plus_half_dt_set)
    __swig_setmethods__["kin_ene_minus_half_dt"] = _molset.MMSysInfo_kin_ene_minus_half_dt_set
    __swig_getmethods__["kin_ene_minus_half_dt"] = _molset.MMSysInfo_kin_ene_minus_half_dt_get
    if _newclass:
        kin_ene_minus_half_dt = _swig_property(_molset.MMSysInfo_kin_ene_minus_half_dt_get, _molset.MMSysInfo_kin_ene_minus_half_dt_set)
    __swig_setmethods__["kin_ene_pbs"] = _molset.MMSysInfo_kin_ene_pbs_set
    __swig_getmethods__["kin_ene_pbs"] = _molset.MMSysInfo_kin_ene_pbs_get
    if _newclass:
        kin_ene_pbs = _swig_property(_molset.MMSysInfo_kin_ene_pbs_get, _molset.MMSysInfo_kin_ene_pbs_set)
    __swig_setmethods__["kin_ene_com"] = _molset.MMSysInfo_kin_ene_com_set
    __swig_getmethods__["kin_ene_com"] = _molset.MMSysInfo_kin_ene_com_get
    if _newclass:
        kin_ene_com = _swig_property(_molset.MMSysInfo_kin_ene_com_get, _molset.MMSysInfo_kin_ene_com_set)
    __swig_setmethods__["kin_ene_com_x"] = _molset.MMSysInfo_kin_ene_com_x_set
    __swig_getmethods__["kin_ene_com_x"] = _molset.MMSysInfo_kin_ene_com_x_get
    if _newclass:
        kin_ene_com_x = _swig_property(_molset.MMSysInfo_kin_ene_com_x_get, _molset.MMSysInfo_kin_ene_com_x_set)
    __swig_setmethods__["kin_ene_com_y"] = _molset.MMSysInfo_kin_ene_com_y_set
    __swig_getmethods__["kin_ene_com_y"] = _molset.MMSysInfo_kin_ene_com_y_get
    if _newclass:
        kin_ene_com_y = _swig_property(_molset.MMSysInfo_kin_ene_com_y_get, _molset.MMSysInfo_kin_ene_com_y_set)
    __swig_setmethods__["kin_ene_com_z"] = _molset.MMSysInfo_kin_ene_com_z_set
    __swig_getmethods__["kin_ene_com_z"] = _molset.MMSysInfo_kin_ene_com_z_get
    if _newclass:
        kin_ene_com_z = _swig_property(_molset.MMSysInfo_kin_ene_com_z_get, _molset.MMSysInfo_kin_ene_com_z_set)
    __swig_setmethods__["kin_ene_solute"] = _molset.MMSysInfo_kin_ene_solute_set
    __swig_getmethods__["kin_ene_solute"] = _molset.MMSysInfo_kin_ene_solute_get
    if _newclass:
        kin_ene_solute = _swig_property(_molset.MMSysInfo_kin_ene_solute_get, _molset.MMSysInfo_kin_ene_solute_set)
    __swig_setmethods__["kin_ene_solvent"] = _molset.MMSysInfo_kin_ene_solvent_set
    __swig_getmethods__["kin_ene_solvent"] = _molset.MMSysInfo_kin_ene_solvent_get
    if _newclass:
        kin_ene_solvent = _swig_property(_molset.MMSysInfo_kin_ene_solvent_get, _molset.MMSysInfo_kin_ene_solvent_set)
    __swig_setmethods__["virial_tot"] = _molset.MMSysInfo_virial_tot_set
    __swig_getmethods__["virial_tot"] = _molset.MMSysInfo_virial_tot_get
    if _newclass:
        virial_tot = _swig_property(_molset.MMSysInfo_virial_tot_get, _molset.MMSysInfo_virial_tot_set)
    __swig_setmethods__["virial_x"] = _molset.MMSysInfo_virial_x_set
    __swig_getmethods__["virial_x"] = _molset.MMSysInfo_virial_x_get
    if _newclass:
        virial_x = _swig_property(_molset.MMSysInfo_virial_x_get, _molset.MMSysInfo_virial_x_set)
    __swig_setmethods__["virial_y"] = _molset.MMSysInfo_virial_y_set
    __swig_getmethods__["virial_y"] = _molset.MMSysInfo_virial_y_get
    if _newclass:
        virial_y = _swig_property(_molset.MMSysInfo_virial_y_get, _molset.MMSysInfo_virial_y_set)
    __swig_setmethods__["virial_z"] = _molset.MMSysInfo_virial_z_set
    __swig_getmethods__["virial_z"] = _molset.MMSysInfo_virial_z_get
    if _newclass:
        virial_z = _swig_property(_molset.MMSysInfo_virial_z_get, _molset.MMSysInfo_virial_z_set)
    __swig_setmethods__["volume"] = _molset.MMSysInfo_volume_set
    __swig_getmethods__["volume"] = _molset.MMSysInfo_volume_get
    if _newclass:
        volume = _swig_property(_molset.MMSysInfo_volume_get, _molset.MMSysInfo_volume_set)
    __swig_setmethods__["density"] = _molset.MMSysInfo_density_set
    __swig_getmethods__["density"] = _molset.MMSysInfo_density_get
    if _newclass:
        density = _swig_property(_molset.MMSysInfo_density_get, _molset.MMSysInfo_density_set)
    __swig_setmethods__["dv_dlambda"] = _molset.MMSysInfo_dv_dlambda_set
    __swig_getmethods__["dv_dlambda"] = _molset.MMSysInfo_dv_dlambda_get
    if _newclass:
        dv_dlambda = _swig_property(_molset.MMSysInfo_dv_dlambda_get, _molset.MMSysInfo_dv_dlambda_set)
    __swig_setmethods__["av_perm_moment"] = _molset.MMSysInfo_av_perm_moment_set
    __swig_getmethods__["av_perm_moment"] = _molset.MMSysInfo_av_perm_moment_get
    if _newclass:
        av_perm_moment = _swig_property(_molset.MMSysInfo_av_perm_moment_get, _molset.MMSysInfo_av_perm_moment_set)
    __swig_setmethods__["av_ind_moment"] = _molset.MMSysInfo_av_ind_moment_set
    __swig_getmethods__["av_ind_moment"] = _molset.MMSysInfo_av_ind_moment_get
    if _newclass:
        av_ind_moment = _swig_property(_molset.MMSysInfo_av_ind_moment_get, _molset.MMSysInfo_av_ind_moment_set)
    __swig_setmethods__["av_tot_moment"] = _molset.MMSysInfo_av_tot_moment_set
    __swig_getmethods__["av_tot_moment"] = _molset.MMSysInfo_av_tot_moment_get
    if _newclass:
        av_tot_moment = _swig_property(_molset.MMSysInfo_av_tot_moment_get, _molset.MMSysInfo_av_tot_moment_set)
    __swig_setmethods__["pme_err_est"] = _molset.MMSysInfo_pme_err_est_set
    __swig_getmethods__["pme_err_est"] = _molset.MMSysInfo_pme_err_est_get
    if _newclass:
        pme_err_est = _swig_property(_molset.MMSysInfo_pme_err_est_get, _molset.MMSysInfo_pme_err_est_set)
    __swig_setmethods__["rms_ene"] = _molset.MMSysInfo_rms_ene_set
    __swig_getmethods__["rms_ene"] = _molset.MMSysInfo_rms_ene_get
    if _newclass:
        rms_ene = _swig_property(_molset.MMSysInfo_rms_ene_get, _molset.MMSysInfo_rms_ene_set)
    __swig_setmethods__["grad_ene_max"] = _molset.MMSysInfo_grad_ene_max_set
    __swig_getmethods__["grad_ene_max"] = _molset.MMSysInfo_grad_ene_max_get
    if _newclass:
        grad_ene_max = _swig_property(_molset.MMSysInfo_grad_ene_max_get, _molset.MMSysInfo_grad_ene_max_set)
MMSysInfo_swigregister = _molset.MMSysInfo_swigregister
MMSysInfo_swigregister(MMSysInfo)

class MDSimMod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDSimMod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDSimMod, name)
    __repr__ = _swig_repr

    def __init__(self, p_mm_mod_new):
        this = _molset.new_MDSimMod(p_mm_mod_new)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_MDSimMod
    __del__ = lambda self: None
MDSimMod_swigregister = _molset.MDSimMod_swigregister
MDSimMod_swigregister(MDSimMod)

class MinEneMod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinEneMod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MinEneMod, name)
    __repr__ = _swig_repr

    def __init__(self, p_mm_mod_new):
        this = _molset.new_MinEneMod(p_mm_mod_new)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_MinEneMod
    __del__ = lambda self: None
MinEneMod_swigregister = _molset.MinEneMod_swigregister
MinEneMod_swigregister(MinEneMod)

class TISimMod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TISimMod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TISimMod, name)
    __repr__ = _swig_repr

    def __init__(self, p_mm_mod_new):
        this = _molset.new_TISimMod(p_mm_mod_new)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_TISimMod
    __del__ = lambda self: None

    def SetNumLambda(self, num_lmb_new):
        return _molset.TISimMod_SetNumLambda(self, num_lmb_new)

    def GetNumLambda(self):
        return _molset.TISimMod_GetNumLambda(self)

    def SetCurIdxLambda(self, cur_idx_lmb_new):
        return _molset.TISimMod_SetCurIdxLambda(self, cur_idx_lmb_new)

    def SetMaxLambdaIdx(self, max_idx_new):
        return _molset.TISimMod_SetMaxLambdaIdx(self, max_idx_new)

    def SetTI_OutputFileNames(self):
        return _molset.TISimMod_SetTI_OutputFileNames(self)

    def GetLambdaByIdx(self, idx):
        return _molset.TISimMod_GetLambdaByIdx(self, idx)

    def GetCurLambda(self):
        return _molset.TISimMod_GetCurLambda(self)

    def GetIntegWtByIdx(self, idx):
        return _molset.TISimMod_GetIntegWtByIdx(self, idx)

    def SetNumEqPoints(self, num_eq_pt_new):
        return _molset.TISimMod_SetNumEqPoints(self, num_eq_pt_new)

    def CollectForceAndEneTI(self, si):
        return _molset.TISimMod_CollectForceAndEneTI(self, si)

    def SincCrdAndVelTI(self):
        return _molset.TISimMod_SincCrdAndVelTI(self)

    def ComputeDvDlAvg(self):
        return _molset.TISimMod_ComputeDvDlAvg(self)

    def CalcDeltaG(self, recalc_dvdl_avg=1):
        return _molset.TISimMod_CalcDeltaG(self, recalc_dvdl_avg)

    def ReduceDvDlData(self, *args):
        return _molset.TISimMod_ReduceDvDlData(self, *args)

    def GetFilePrefixIdx(self, idx):
        return _molset.TISimMod_GetFilePrefixIdx(self, idx)

    def GetCurFilePrefix(self):
        return _molset.TISimMod_GetCurFilePrefix(self)
    __swig_setmethods__["file_prefix"] = _molset.TISimMod_file_prefix_set
    __swig_getmethods__["file_prefix"] = _molset.TISimMod_file_prefix_get
    if _newclass:
        file_prefix = _swig_property(_molset.TISimMod_file_prefix_get, _molset.TISimMod_file_prefix_set)
    __swig_setmethods__["file_dvdl"] = _molset.TISimMod_file_dvdl_set
    __swig_getmethods__["file_dvdl"] = _molset.TISimMod_file_dvdl_get
    if _newclass:
        file_dvdl = _swig_property(_molset.TISimMod_file_dvdl_get, _molset.TISimMod_file_dvdl_set)
    __swig_setmethods__["p_mm_mod"] = _molset.TISimMod_p_mm_mod_set
    __swig_getmethods__["p_mm_mod"] = _molset.TISimMod_p_mm_mod_get
    if _newclass:
        p_mm_mod = _swig_property(_molset.TISimMod_p_mm_mod_get, _molset.TISimMod_p_mm_mod_set)
    __swig_setmethods__["allowed_num_lmb"] = _molset.TISimMod_allowed_num_lmb_set
    __swig_getmethods__["allowed_num_lmb"] = _molset.TISimMod_allowed_num_lmb_get
    if _newclass:
        allowed_num_lmb = _swig_property(_molset.TISimMod_allowed_num_lmb_get, _molset.TISimMod_allowed_num_lmb_set)
    __swig_setmethods__["dvdl_avg"] = _molset.TISimMod_dvdl_avg_set
    __swig_getmethods__["dvdl_avg"] = _molset.TISimMod_dvdl_avg_get
    if _newclass:
        dvdl_avg = _swig_property(_molset.TISimMod_dvdl_avg_get, _molset.TISimMod_dvdl_avg_set)
    __swig_setmethods__["delta_g"] = _molset.TISimMod_delta_g_set
    __swig_getmethods__["delta_g"] = _molset.TISimMod_delta_g_get
    if _newclass:
        delta_g = _swig_property(_molset.TISimMod_delta_g_get, _molset.TISimMod_delta_g_set)
TISimMod_swigregister = _molset.TISimMod_swigregister
TISimMod_swigregister(TISimMod)

class MMDriver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMDriver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MMDriver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetClassName(self):
        return _molset.MMDriver_GetClassName(self)

    def CalcEnergy(self):
        return _molset.MMDriver_CalcEnergy(self)
    __swig_setmethods__["p_mm_mod"] = _molset.MMDriver_p_mm_mod_set
    __swig_getmethods__["p_mm_mod"] = _molset.MMDriver_p_mm_mod_get
    if _newclass:
        p_mm_mod = _swig_property(_molset.MMDriver_p_mm_mod_get, _molset.MMDriver_p_mm_mod_set)
    __swig_setmethods__["p_mm_model"] = _molset.MMDriver_p_mm_model_set
    __swig_getmethods__["p_mm_model"] = _molset.MMDriver_p_mm_model_get
    if _newclass:
        p_mm_model = _swig_property(_molset.MMDriver_p_mm_model_get, _molset.MMDriver_p_mm_model_set)
    __swig_setmethods__["pmset"] = _molset.MMDriver_pmset_set
    __swig_getmethods__["pmset"] = _molset.MMDriver_pmset_get
    if _newclass:
        pmset = _swig_property(_molset.MMDriver_pmset_get, _molset.MMDriver_pmset_set)
    __swig_setmethods__["to_save_input_files"] = _molset.MMDriver_to_save_input_files_set
    __swig_getmethods__["to_save_input_files"] = _molset.MMDriver_to_save_input_files_get
    if _newclass:
        to_save_input_files = _swig_property(_molset.MMDriver_to_save_input_files_get, _molset.MMDriver_to_save_input_files_set)
    __swig_destroy__ = _molset.delete_MMDriver
    __del__ = lambda self: None
MMDriver_swigregister = _molset.MMDriver_swigregister
MMDriver_swigregister(MMDriver)

class NuclAcidMod(HaCompMod):
    __swig_setmethods__ = {}
    for _s in [HaCompMod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NuclAcidMod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaCompMod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NuclAcidMod, name)
    __repr__ = _swig_repr

    def __init__(self, new_pmset=None):
        this = _molset.new_NuclAcidMod(new_pmset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_NuclAcidMod
    __del__ = lambda self: None

    def SetStdParams(self):
        return _molset.NuclAcidMod_SetStdParams(self)

    def BuildNuclAcid(self):
        return _molset.NuclAcidMod_BuildNuclAcid(self)

    def UpdateXYZ(self):
        return _molset.NuclAcidMod_UpdateXYZ(self)

    def MinEne(self):
        return _molset.NuclAcidMod_MinEne(self)

    def CalcEne(self):
        return _molset.NuclAcidMod_CalcEne(self)

    def CreateMolFromJumna(self):
        return _molset.NuclAcidMod_CreateMolFromJumna(self)

    def FindDNAMol(self):
        return _molset.NuclAcidMod_FindDNAMol(self)

    def SaveAXEfile(self, axe_file):
        return _molset.NuclAcidMod_SaveAXEfile(self, axe_file)

    def ReadAXEfile(self, axe_file):
        return _molset.NuclAcidMod_ReadAXEfile(self, axe_file)
    __swig_setmethods__["out_prefix"] = _molset.NuclAcidMod_out_prefix_set
    __swig_getmethods__["out_prefix"] = _molset.NuclAcidMod_out_prefix_get
    if _newclass:
        out_prefix = _swig_property(_molset.NuclAcidMod_out_prefix_get, _molset.NuclAcidMod_out_prefix_set)
    __swig_setmethods__["pdb_prefix"] = _molset.NuclAcidMod_pdb_prefix_set
    __swig_getmethods__["pdb_prefix"] = _molset.NuclAcidMod_pdb_prefix_get
    if _newclass:
        pdb_prefix = _swig_property(_molset.NuclAcidMod_pdb_prefix_get, _molset.NuclAcidMod_pdb_prefix_set)
    __swig_setmethods__["nsym_unit"] = _molset.NuclAcidMod_nsym_unit_set
    __swig_getmethods__["nsym_unit"] = _molset.NuclAcidMod_nsym_unit_get
    if _newclass:
        nsym_unit = _swig_property(_molset.NuclAcidMod_nsym_unit_get, _molset.NuclAcidMod_nsym_unit_set)
    __swig_setmethods__["nbreak_1"] = _molset.NuclAcidMod_nbreak_1_set
    __swig_getmethods__["nbreak_1"] = _molset.NuclAcidMod_nbreak_1_get
    if _newclass:
        nbreak_1 = _swig_property(_molset.NuclAcidMod_nbreak_1_get, _molset.NuclAcidMod_nbreak_1_set)
    __swig_setmethods__["nbreak_2"] = _molset.NuclAcidMod_nbreak_2_set
    __swig_getmethods__["nbreak_2"] = _molset.NuclAcidMod_nbreak_2_get
    if _newclass:
        nbreak_2 = _swig_property(_molset.NuclAcidMod_nbreak_2_get, _molset.NuclAcidMod_nbreak_2_set)
    __swig_setmethods__["homon_symm_flags"] = _molset.NuclAcidMod_homon_symm_flags_set
    __swig_getmethods__["homon_symm_flags"] = _molset.NuclAcidMod_homon_symm_flags_get
    if _newclass:
        homon_symm_flags = _swig_property(_molset.NuclAcidMod_homon_symm_flags_get, _molset.NuclAcidMod_homon_symm_flags_set)
    __swig_setmethods__["homon_symm_offs"] = _molset.NuclAcidMod_homon_symm_offs_set
    __swig_getmethods__["homon_symm_offs"] = _molset.NuclAcidMod_homon_symm_offs_get
    if _newclass:
        homon_symm_offs = _swig_property(_molset.NuclAcidMod_homon_symm_offs_get, _molset.NuclAcidMod_homon_symm_offs_set)
    __swig_setmethods__["ene_per_unit_flag"] = _molset.NuclAcidMod_ene_per_unit_flag_set
    __swig_getmethods__["ene_per_unit_flag"] = _molset.NuclAcidMod_ene_per_unit_flag_get
    if _newclass:
        ene_per_unit_flag = _swig_property(_molset.NuclAcidMod_ene_per_unit_flag_get, _molset.NuclAcidMod_ene_per_unit_flag_set)
    __swig_setmethods__["dir_strand"] = _molset.NuclAcidMod_dir_strand_set
    __swig_getmethods__["dir_strand"] = _molset.NuclAcidMod_dir_strand_get
    if _newclass:
        dir_strand = _swig_property(_molset.NuclAcidMod_dir_strand_get, _molset.NuclAcidMod_dir_strand_set)
    __swig_setmethods__["seq"] = _molset.NuclAcidMod_seq_set
    __swig_getmethods__["seq"] = _molset.NuclAcidMod_seq_get
    if _newclass:
        seq = _swig_property(_molset.NuclAcidMod_seq_get, _molset.NuclAcidMod_seq_set)

    def SetSeq(self, seq_str):
        return _molset.NuclAcidMod_SetSeq(self, seq_str)

    def GenComplStrand(self):
        return _molset.NuclAcidMod_GenComplStrand(self)
    __swig_setmethods__["max_iter"] = _molset.NuclAcidMod_max_iter_set
    __swig_getmethods__["max_iter"] = _molset.NuclAcidMod_max_iter_get
    if _newclass:
        max_iter = _swig_property(_molset.NuclAcidMod_max_iter_get, _molset.NuclAcidMod_max_iter_set)
    __swig_setmethods__["init_flag"] = _molset.NuclAcidMod_init_flag_set
    __swig_getmethods__["init_flag"] = _molset.NuclAcidMod_init_flag_get
    if _newclass:
        init_flag = _swig_property(_molset.NuclAcidMod_init_flag_get, _molset.NuclAcidMod_init_flag_set)
    __swig_setmethods__["sup_helix_rad"] = _molset.NuclAcidMod_sup_helix_rad_set
    __swig_getmethods__["sup_helix_rad"] = _molset.NuclAcidMod_sup_helix_rad_get
    if _newclass:
        sup_helix_rad = _swig_property(_molset.NuclAcidMod_sup_helix_rad_get, _molset.NuclAcidMod_sup_helix_rad_set)
    __swig_setmethods__["sup_helix_pit"] = _molset.NuclAcidMod_sup_helix_pit_set
    __swig_getmethods__["sup_helix_pit"] = _molset.NuclAcidMod_sup_helix_pit_get
    if _newclass:
        sup_helix_pit = _swig_property(_molset.NuclAcidMod_sup_helix_pit_get, _molset.NuclAcidMod_sup_helix_pit_set)
    __swig_setmethods__["fst_twist"] = _molset.NuclAcidMod_fst_twist_set
    __swig_getmethods__["fst_twist"] = _molset.NuclAcidMod_fst_twist_get
    if _newclass:
        fst_twist = _swig_property(_molset.NuclAcidMod_fst_twist_get, _molset.NuclAcidMod_fst_twist_set)

    def SetFFtype(self, new_ff_type):
        return _molset.NuclAcidMod_SetFFtype(self, new_ff_type)

    def SetFFtypeIdx(self, i_ff_type):
        return _molset.NuclAcidMod_SetFFtypeIdx(self, i_ff_type)
    __swig_setmethods__["force_field"] = _molset.NuclAcidMod_force_field_set
    __swig_getmethods__["force_field"] = _molset.NuclAcidMod_force_field_get
    if _newclass:
        force_field = _swig_property(_molset.NuclAcidMod_force_field_get, _molset.NuclAcidMod_force_field_set)

    def SetDielSlope(self, slope_new):
        return _molset.NuclAcidMod_SetDielSlope(self, slope_new)
    __swig_setmethods__["diel_slope"] = _molset.NuclAcidMod_diel_slope_set
    __swig_getmethods__["diel_slope"] = _molset.NuclAcidMod_diel_slope_get
    if _newclass:
        diel_slope = _swig_property(_molset.NuclAcidMod_diel_slope_get, _molset.NuclAcidMod_diel_slope_set)

    def SetPhosChrg(self, phos_chrg_new):
        return _molset.NuclAcidMod_SetPhosChrg(self, phos_chrg_new)
    __swig_setmethods__["phos_chrg"] = _molset.NuclAcidMod_phos_chrg_set
    __swig_getmethods__["phos_chrg"] = _molset.NuclAcidMod_phos_chrg_get
    if _newclass:
        phos_chrg = _swig_property(_molset.NuclAcidMod_phos_chrg_get, _molset.NuclAcidMod_phos_chrg_set)
    __swig_setmethods__["hel_crd"] = _molset.NuclAcidMod_hel_crd_set
    __swig_getmethods__["hel_crd"] = _molset.NuclAcidMod_hel_crd_get
    if _newclass:
        hel_crd = _swig_property(_molset.NuclAcidMod_hel_crd_get, _molset.NuclAcidMod_hel_crd_set)
    __swig_setmethods__["lock_hel"] = _molset.NuclAcidMod_lock_hel_set
    __swig_getmethods__["lock_hel"] = _molset.NuclAcidMod_lock_hel_get
    if _newclass:
        lock_hel = _swig_property(_molset.NuclAcidMod_lock_hel_get, _molset.NuclAcidMod_lock_hel_set)
    __swig_setmethods__["bb_crd"] = _molset.NuclAcidMod_bb_crd_set
    __swig_getmethods__["bb_crd"] = _molset.NuclAcidMod_bb_crd_get
    if _newclass:
        bb_crd = _swig_property(_molset.NuclAcidMod_bb_crd_get, _molset.NuclAcidMod_bb_crd_set)
    __swig_setmethods__["lock_bb"] = _molset.NuclAcidMod_lock_bb_set
    __swig_getmethods__["lock_bb"] = _molset.NuclAcidMod_lock_bb_get
    if _newclass:
        lock_bb = _swig_property(_molset.NuclAcidMod_lock_bb_get, _molset.NuclAcidMod_lock_bb_set)
    __swig_setmethods__["bb_sidx"] = _molset.NuclAcidMod_bb_sidx_set
    __swig_getmethods__["bb_sidx"] = _molset.NuclAcidMod_bb_sidx_get
    if _newclass:
        bb_sidx = _swig_property(_molset.NuclAcidMod_bb_sidx_get, _molset.NuclAcidMod_bb_sidx_set)
    __swig_setmethods__["u"] = _molset.NuclAcidMod_u_set
    __swig_getmethods__["u"] = _molset.NuclAcidMod_u_get
    if _newclass:
        u = _swig_property(_molset.NuclAcidMod_u_get, _molset.NuclAcidMod_u_set)
    __swig_setmethods__["h"] = _molset.NuclAcidMod_h_set
    __swig_getmethods__["h"] = _molset.NuclAcidMod_h_get
    if _newclass:
        h = _swig_property(_molset.NuclAcidMod_h_get, _molset.NuclAcidMod_h_set)
    __swig_setmethods__["o"] = _molset.NuclAcidMod_o_set
    __swig_getmethods__["o"] = _molset.NuclAcidMod_o_get
    if _newclass:
        o = _swig_property(_molset.NuclAcidMod_o_get, _molset.NuclAcidMod_o_set)
    __swig_setmethods__["uho"] = _molset.NuclAcidMod_uho_set
    __swig_getmethods__["uho"] = _molset.NuclAcidMod_uho_get
    if _newclass:
        uho = _swig_property(_molset.NuclAcidMod_uho_get, _molset.NuclAcidMod_uho_set)
    __swig_setmethods__["hho"] = _molset.NuclAcidMod_hho_set
    __swig_getmethods__["hho"] = _molset.NuclAcidMod_hho_get
    if _newclass:
        hho = _swig_property(_molset.NuclAcidMod_hho_get, _molset.NuclAcidMod_hho_set)
    __swig_setmethods__["ul"] = _molset.NuclAcidMod_ul_set
    __swig_getmethods__["ul"] = _molset.NuclAcidMod_ul_get
    if _newclass:
        ul = _swig_property(_molset.NuclAcidMod_ul_get, _molset.NuclAcidMod_ul_set)
    __swig_setmethods__["dif"] = _molset.NuclAcidMod_dif_set
    __swig_getmethods__["dif"] = _molset.NuclAcidMod_dif_get
    if _newclass:
        dif = _swig_property(_molset.NuclAcidMod_dif_get, _molset.NuclAcidMod_dif_set)
    __swig_setmethods__["hel"] = _molset.NuclAcidMod_hel_set
    __swig_getmethods__["hel"] = _molset.NuclAcidMod_hel_get
    if _newclass:
        hel = _swig_property(_molset.NuclAcidMod_hel_get, _molset.NuclAcidMod_hel_set)
    __swig_setmethods__["hold"] = _molset.NuclAcidMod_hold_set
    __swig_getmethods__["hold"] = _molset.NuclAcidMod_hold_get
    if _newclass:
        hold = _swig_property(_molset.NuclAcidMod_hold_get, _molset.NuclAcidMod_hold_set)
    __swig_setmethods__["vold"] = _molset.NuclAcidMod_vold_set
    __swig_getmethods__["vold"] = _molset.NuclAcidMod_vold_get
    if _newclass:
        vold = _swig_property(_molset.NuclAcidMod_vold_get, _molset.NuclAcidMod_vold_set)
    __swig_setmethods__["bend"] = _molset.NuclAcidMod_bend_set
    __swig_getmethods__["bend"] = _molset.NuclAcidMod_bend_get
    if _newclass:
        bend = _swig_property(_molset.NuclAcidMod_bend_get, _molset.NuclAcidMod_bend_set)
    __swig_setmethods__["vkin"] = _molset.NuclAcidMod_vkin_set
    __swig_getmethods__["vkin"] = _molset.NuclAcidMod_vkin_get
    if _newclass:
        vkin = _swig_property(_molset.NuclAcidMod_vkin_get, _molset.NuclAcidMod_vkin_set)
    __swig_setmethods__["tor"] = _molset.NuclAcidMod_tor_set
    __swig_getmethods__["tor"] = _molset.NuclAcidMod_tor_get
    if _newclass:
        tor = _swig_property(_molset.NuclAcidMod_tor_get, _molset.NuclAcidMod_tor_set)
    __swig_setmethods__["sug"] = _molset.NuclAcidMod_sug_set
    __swig_getmethods__["sug"] = _molset.NuclAcidMod_sug_get
    if _newclass:
        sug = _swig_property(_molset.NuclAcidMod_sug_get, _molset.NuclAcidMod_sug_set)
    __swig_setmethods__["bs_bs_pars"] = _molset.NuclAcidMod_bs_bs_pars_set
    __swig_getmethods__["bs_bs_pars"] = _molset.NuclAcidMod_bs_bs_pars_get
    if _newclass:
        bs_bs_pars = _swig_property(_molset.NuclAcidMod_bs_bs_pars_get, _molset.NuclAcidMod_bs_bs_pars_set)
    __swig_setmethods__["ncrd_res"] = _molset.NuclAcidMod_ncrd_res_set
    __swig_getmethods__["ncrd_res"] = _molset.NuclAcidMod_ncrd_res_get
    if _newclass:
        ncrd_res = _swig_property(_molset.NuclAcidMod_ncrd_res_get, _molset.NuclAcidMod_ncrd_res_set)
    __swig_setmethods__["ncrd_ind_res"] = _molset.NuclAcidMod_ncrd_ind_res_set
    __swig_getmethods__["ncrd_ind_res"] = _molset.NuclAcidMod_ncrd_ind_res_get
    if _newclass:
        ncrd_ind_res = _swig_property(_molset.NuclAcidMod_ncrd_ind_res_get, _molset.NuclAcidMod_ncrd_ind_res_set)

    def SetHelCoord(self, i_strand, i_res, i_crd, crd_val):
        return _molset.NuclAcidMod_SetHelCoord(self, i_strand, i_res, i_crd, crd_val)

    def LockHelCoord(self, i_strand, i_res, i_crd, do_lock):
        return _molset.NuclAcidMod_LockHelCoord(self, i_strand, i_res, i_crd, do_lock)

    def IsHelCoordLocked(self, ir, i_crd):
        return _molset.NuclAcidMod_IsHelCoordLocked(self, ir, i_crd)

    def SetBBCoord(self, i_strand, i_res, i_crd, crd_val):
        return _molset.NuclAcidMod_SetBBCoord(self, i_strand, i_res, i_crd, crd_val)

    def LockBBCoord(self, i_strand, i_res, i_crd, do_lock):
        return _molset.NuclAcidMod_LockBBCoord(self, i_strand, i_res, i_crd, do_lock)
    __swig_setmethods__["update_var_flag"] = _molset.NuclAcidMod_update_var_flag_set
    __swig_getmethods__["update_var_flag"] = _molset.NuclAcidMod_update_var_flag_get
    if _newclass:
        update_var_flag = _swig_property(_molset.NuclAcidMod_update_var_flag_get, _molset.NuclAcidMod_update_var_flag_set)

    def UpdateVarCoord(self):
        return _molset.NuclAcidMod_UpdateVarCoord(self)

    def SetCoordsFromJumna(self):
        return _molset.NuclAcidMod_SetCoordsFromJumna(self)

    def SetIntCoordsToJumna(self):
        return _molset.NuclAcidMod_SetIntCoordsToJumna(self)

    def SaveConfig(self):
        return _molset.NuclAcidMod_SaveConfig(self)

    def RestoreConfig(self):
        return _molset.NuclAcidMod_RestoreConfig(self)

    def BBOffset(self, ir):
        return _molset.NuclAcidMod_BBOffset(self, ir)

    def IsRibRes(self, ir):
        return _molset.NuclAcidMod_IsRibRes(self, ir)

    def IsThymineRes(self, ir):
        return _molset.NuclAcidMod_IsThymineRes(self, ir)

    def NumIndBBVarRes(self, ir):
        return _molset.NuclAcidMod_NumIndBBVarRes(self, ir)

    def NumAllBBVarRes(self, ir):
        return _molset.NuclAcidMod_NumAllBBVarRes(self, ir)

    def Is3endRes(self, ir):
        return _molset.NuclAcidMod_Is3endRes(self, ir)

    def IsFstResInChain(self, ir):
        return _molset.NuclAcidMod_IsFstResInChain(self, ir)

    def IdxResInChain(self, ir):
        return _molset.NuclAcidMod_IdxResInChain(self, ir)

    def ChainIdxOfRes(self, ir):
        return _molset.NuclAcidMod_ChainIdxOfRes(self, ir)

    def IsSupHlxConstr(self):
        return _molset.NuclAcidMod_IsSupHlxConstr(self)

    def NumBBCoord(self):
        return _molset.NuclAcidMod_NumBBCoord(self)

    def NumFreeBBCoord(self):
        return _molset.NuclAcidMod_NumFreeBBCoord(self)

    def IdxLastHelCoord(self):
        return _molset.NuclAcidMod_IdxLastHelCoord(self)

    def IdxLastFreeHelCoord(self):
        return _molset.NuclAcidMod_IdxLastFreeHelCoord(self)

    def SetShlxTwist(self, shlx_tw):
        return _molset.NuclAcidMod_SetShlxTwist(self, shlx_tw)

    def GetAtomCrd(self, at_num, coord_num):
        return _molset.NuclAcidMod_GetAtomCrd(self, at_num, coord_num)

    def GetVarNum(self, crd_num):
        return _molset.NuclAcidMod_GetVarNum(self, crd_num)

    def CalcPdistToShlxCnt(self):
        return _molset.NuclAcidMod_CalcPdistToShlxCnt(self)

    def CalcLocCrdSys(self):
        return _molset.NuclAcidMod_CalcLocCrdSys(self)

    def CalcLocHlxCrd(self, for_bp=1):
        return _molset.NuclAcidMod_CalcLocHlxCrd(self, for_bp)

    def CalcAxis(self):
        return _molset.NuclAcidMod_CalcAxis(self)

    def CalcBend(self):
        return _molset.NuclAcidMod_CalcBend(self)

    def CalcGlobHlxCrd(self):
        return _molset.NuclAcidMod_CalcGlobHlxCrd(self)

    def CalcBBCrd(self):
        return _molset.NuclAcidMod_CalcBBCrd(self)

    def CalcAxisPar1(self, ax_hlxc, sum, gra, scp):
        return _molset.NuclAcidMod_CalcAxisPar1(self, ax_hlxc, sum, gra, scp)

    def GetNRes(self):
        return _molset.NuclAcidMod_GetNRes(self)
    __swig_setmethods__["tot_energy"] = _molset.NuclAcidMod_tot_energy_set
    __swig_getmethods__["tot_energy"] = _molset.NuclAcidMod_tot_energy_get
    if _newclass:
        tot_energy = _swig_property(_molset.NuclAcidMod_tot_energy_get, _molset.NuclAcidMod_tot_energy_set)
    __swig_setmethods__["p_dna_mol"] = _molset.NuclAcidMod_p_dna_mol_set
    __swig_getmethods__["p_dna_mol"] = _molset.NuclAcidMod_p_dna_mol_get
    if _newclass:
        p_dna_mol = _swig_property(_molset.NuclAcidMod_p_dna_mol_get, _molset.NuclAcidMod_p_dna_mol_set)
NuclAcidMod_swigregister = _molset.NuclAcidMod_swigregister
NuclAcidMod_swigregister(NuclAcidMod)
FLEX_FF = cvar.FLEX_FF
AMBER91_FF = cvar.AMBER91_FF
AMBER94_FF = cvar.AMBER94_FF

class HaResDB(HaMolSet):
    __swig_setmethods__ = {}
    for _s in [HaMolSet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaResDB, name, value)
    __swig_getmethods__ = {}
    for _s in [HaMolSet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaResDB, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_HaResDB()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaResDB
    __del__ = lambda self: None

    def Init(self):
        return _molset.HaResDB_Init(self)

    def GetMolTemplForRes(self, res_templ_name):
        return _molset.HaResDB_GetMolTemplForRes(self, res_templ_name)

    def GetTemplateForResidue(self, res_full_name):
        return _molset.HaResDB_GetTemplateForResidue(self, res_full_name)

    def GetTemplateForAtom(self, aptr):
        return _molset.HaResDB_GetTemplateForAtom(self, aptr)

    def GetTemplResAtomMaps(self, pres, res_to_templ_map, templ_to_res_map):
        return _molset.HaResDB_GetTemplResAtomMaps(self, pres, res_to_templ_map, templ_to_res_map)

    def GetTemplResAtNameAtomMap(self, pres, templ_atname_to_res_map):
        return _molset.HaResDB_GetTemplResAtNameAtomMap(self, pres, templ_atname_to_res_map)

    def LoadXMLFile(self, fname):
        return _molset.HaResDB_LoadXMLFile(self, fname)
    if _newclass:
        GetDefaultResDB = staticmethod(_molset.HaResDB_GetDefaultResDB)
    else:
        GetDefaultResDB = _molset.HaResDB_GetDefaultResDB
    __swig_setmethods__["res_db_files"] = _molset.HaResDB_res_db_files_set
    __swig_getmethods__["res_db_files"] = _molset.HaResDB_res_db_files_get
    if _newclass:
        res_db_files = _swig_property(_molset.HaResDB_res_db_files_get, _molset.HaResDB_res_db_files_set)
HaResDB_swigregister = _molset.HaResDB_swigregister
HaResDB_swigregister(HaResDB)

def HaResDB_GetDefaultResDB():
    return _molset.HaResDB_GetDefaultResDB()
HaResDB_GetDefaultResDB = _molset.HaResDB_GetDefaultResDB

class StrKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrKey, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_StrKey(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_StrKey
    __del__ = lambda self: None

    def SetStr(self, str):
        return _molset.StrKey_SetStr(self, str)

    def GetStr(self):
        return _molset.StrKey_GetStr(self)

    def Print_To(self, os):
        return _molset.StrKey_Print_To(self, os)
    __swig_setmethods__["key_str"] = _molset.StrKey_key_str_set
    __swig_getmethods__["key_str"] = _molset.StrKey_key_str_get
    if _newclass:
        key_str = _swig_property(_molset.StrKey_key_str_get, _molset.StrKey_key_str_set)
StrKey_swigregister = _molset.StrKey_swigregister
StrKey_swigregister(StrKey)

class HaGrpOperID(StrKey):
    __swig_setmethods__ = {}
    for _s in [StrKey]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaGrpOperID, name, value)
    __swig_getmethods__ = {}
    for _s in [StrKey]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaGrpOperID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_HaGrpOperID(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaGrpOperID
    __del__ = lambda self: None

    def set(self, *args):
        return _molset.HaGrpOperID_set(self, *args)
HaGrpOperID_swigregister = _molset.HaGrpOperID_swigregister
HaGrpOperID_swigregister(HaGrpOperID)

class HaGrp4MatID(StrKey):
    __swig_setmethods__ = {}
    for _s in [StrKey]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaGrp4MatID, name, value)
    __swig_getmethods__ = {}
    for _s in [StrKey]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaGrp4MatID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_HaGrp4MatID(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaGrp4MatID
    __del__ = lambda self: None
HaGrp4MatID_swigregister = _molset.HaGrp4MatID_swigregister
HaGrp4MatID_swigregister(HaGrp4MatID)

class HaMatDB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaMatDB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaMatDB, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_HaMatDB(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaMatDB
    __del__ = lambda self: None

    def open(self, fname, mode):
        return _molset.HaMatDB_open(self, fname, mode)

    def close(self):
        return _molset.HaMatDB_close(self)

    def is_open(self):
        return _molset.HaMatDB_is_open(self)

    def put(self, key, fgmat):
        return _molset.HaMatDB_put(self, key, fgmat)

    def get(self, key, fgmat):
        return _molset.HaMatDB_get(self, key, fgmat)

    def ListKeys(self):
        return _molset.HaMatDB_ListKeys(self)

    def ListAll(self, s):
        return _molset.HaMatDB_ListAll(self, s)

    def PutMat(self, key_str, fmat):
        return _molset.HaMatDB_PutMat(self, key_str, fmat)

    def GetMat(self, key_str, fmat):
        return _molset.HaMatDB_GetMat(self, key_str, fmat)

    def ExtractToFile(self, keys, fname):
        return _molset.HaMatDB_ExtractToFile(self, keys, fname)

    def ExtractAllToFile(self, fname):
        return _molset.HaMatDB_ExtractAllToFile(self, fname)

    def AddFromFile(self, fname):
        return _molset.HaMatDB_AddFromFile(self, fname)
    __swig_setmethods__["io_format"] = _molset.HaMatDB_io_format_set
    __swig_getmethods__["io_format"] = _molset.HaMatDB_io_format_get
    if _newclass:
        io_format = _swig_property(_molset.HaMatDB_io_format_get, _molset.HaMatDB_io_format_set)
HaMatDB_swigregister = _molset.HaMatDB_swigregister
HaMatDB_swigregister(HaMatDB)

class HaTests(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaTests, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaTests, name)
    __repr__ = _swig_repr
    if _newclass:
        calc_polar_gcontr = staticmethod(_molset.HaTests_calc_polar_gcontr)
    else:
        calc_polar_gcontr = _molset.HaTests_calc_polar_gcontr
    if _newclass:
        save_grp_oper_mat = staticmethod(_molset.HaTests_save_grp_oper_mat)
    else:
        save_grp_oper_mat = _molset.HaTests_save_grp_oper_mat
    if _newclass:
        calc_polar_contr_f = staticmethod(_molset.HaTests_calc_polar_contr_f)
    else:
        calc_polar_contr_f = _molset.HaTests_calc_polar_contr_f
    if _newclass:
        read_polar_contr = staticmethod(_molset.HaTests_read_polar_contr)
    else:
        read_polar_contr = _molset.HaTests_read_polar_contr
    if _newclass:
        calc_beta_contr_2idx = staticmethod(_molset.HaTests_calc_beta_contr_2idx)
    else:
        calc_beta_contr_2idx = _molset.HaTests_calc_beta_contr_2idx
    if _newclass:
        read_beta_contr_2idx = staticmethod(_molset.HaTests_read_beta_contr_2idx)
    else:
        read_beta_contr_2idx = _molset.HaTests_read_beta_contr_2idx
    if _newclass:
        calc_polar_contr_2idx = staticmethod(_molset.HaTests_calc_polar_contr_2idx)
    else:
        calc_polar_contr_2idx = _molset.HaTests_calc_polar_contr_2idx
    if _newclass:
        read_polar_contr_2idx = staticmethod(_molset.HaTests_read_polar_contr_2idx)
    else:
        read_polar_contr_2idx = _molset.HaTests_read_polar_contr_2idx
    if _newclass:
        test_oper_1 = staticmethod(_molset.HaTests_test_oper_1)
    else:
        test_oper_1 = _molset.HaTests_test_oper_1
    if _newclass:
        test_oper_2 = staticmethod(_molset.HaTests_test_oper_2)
    else:
        test_oper_2 = _molset.HaTests_test_oper_2
    if _newclass:
        test_qcmod_1 = staticmethod(_molset.HaTests_test_qcmod_1)
    else:
        test_qcmod_1 = _molset.HaTests_test_qcmod_1
    if _newclass:
        dump_mol_info = staticmethod(_molset.HaTests_dump_mol_info)
    else:
        dump_mol_info = _molset.HaTests_dump_mol_info
    if _newclass:
        dump_gauss_bcommon = staticmethod(_molset.HaTests_dump_gauss_bcommon)
    else:
        dump_gauss_bcommon = _molset.HaTests_dump_gauss_bcommon
    if _newclass:
        dump_overlap = staticmethod(_molset.HaTests_dump_overlap)
    else:
        dump_overlap = _molset.HaTests_dump_overlap
    if _newclass:
        dump_overlap2 = staticmethod(_molset.HaTests_dump_overlap2)
    else:
        dump_overlap2 = _molset.HaTests_dump_overlap2
    if _newclass:
        test_min_1 = staticmethod(_molset.HaTests_test_min_1)
    else:
        test_min_1 = _molset.HaTests_test_min_1
    if _newclass:
        test_graph_1 = staticmethod(_molset.HaTests_test_graph_1)
    else:
        test_graph_1 = _molset.HaTests_test_graph_1
    if _newclass:
        test_python_1 = staticmethod(_molset.HaTests_test_python_1)
    else:
        test_python_1 = _molset.HaTests_test_python_1
    if _newclass:
        model_mc_calc = staticmethod(_molset.HaTests_model_mc_calc)
    else:
        model_mc_calc = _molset.HaTests_model_mc_calc

    def __init__(self):
        this = _molset.new_HaTests()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_HaTests
    __del__ = lambda self: None
HaTests_swigregister = _molset.HaTests_swigregister
HaTests_swigregister(HaTests)

def HaTests_calc_polar_gcontr():
    return _molset.HaTests_calc_polar_gcontr()
HaTests_calc_polar_gcontr = _molset.HaTests_calc_polar_gcontr

def HaTests_save_grp_oper_mat():
    return _molset.HaTests_save_grp_oper_mat()
HaTests_save_grp_oper_mat = _molset.HaTests_save_grp_oper_mat

def HaTests_calc_polar_contr_f():
    return _molset.HaTests_calc_polar_contr_f()
HaTests_calc_polar_contr_f = _molset.HaTests_calc_polar_contr_f

def HaTests_read_polar_contr():
    return _molset.HaTests_read_polar_contr()
HaTests_read_polar_contr = _molset.HaTests_read_polar_contr

def HaTests_calc_beta_contr_2idx():
    return _molset.HaTests_calc_beta_contr_2idx()
HaTests_calc_beta_contr_2idx = _molset.HaTests_calc_beta_contr_2idx

def HaTests_read_beta_contr_2idx():
    return _molset.HaTests_read_beta_contr_2idx()
HaTests_read_beta_contr_2idx = _molset.HaTests_read_beta_contr_2idx

def HaTests_calc_polar_contr_2idx():
    return _molset.HaTests_calc_polar_contr_2idx()
HaTests_calc_polar_contr_2idx = _molset.HaTests_calc_polar_contr_2idx

def HaTests_read_polar_contr_2idx():
    return _molset.HaTests_read_polar_contr_2idx()
HaTests_read_polar_contr_2idx = _molset.HaTests_read_polar_contr_2idx

def HaTests_test_oper_1():
    return _molset.HaTests_test_oper_1()
HaTests_test_oper_1 = _molset.HaTests_test_oper_1

def HaTests_test_oper_2():
    return _molset.HaTests_test_oper_2()
HaTests_test_oper_2 = _molset.HaTests_test_oper_2

def HaTests_test_qcmod_1():
    return _molset.HaTests_test_qcmod_1()
HaTests_test_qcmod_1 = _molset.HaTests_test_qcmod_1

def HaTests_dump_mol_info():
    return _molset.HaTests_dump_mol_info()
HaTests_dump_mol_info = _molset.HaTests_dump_mol_info

def HaTests_dump_gauss_bcommon():
    return _molset.HaTests_dump_gauss_bcommon()
HaTests_dump_gauss_bcommon = _molset.HaTests_dump_gauss_bcommon

def HaTests_dump_overlap():
    return _molset.HaTests_dump_overlap()
HaTests_dump_overlap = _molset.HaTests_dump_overlap

def HaTests_dump_overlap2():
    return _molset.HaTests_dump_overlap2()
HaTests_dump_overlap2 = _molset.HaTests_dump_overlap2

def HaTests_test_min_1():
    return _molset.HaTests_test_min_1()
HaTests_test_min_1 = _molset.HaTests_test_min_1

def HaTests_test_graph_1():
    return _molset.HaTests_test_graph_1()
HaTests_test_graph_1 = _molset.HaTests_test_graph_1

def HaTests_test_python_1():
    return _molset.HaTests_test_python_1()
HaTests_test_python_1 = _molset.HaTests_test_python_1

def HaTests_model_mc_calc():
    return _molset.HaTests_model_mc_calc()
HaTests_model_mc_calc = _molset.HaTests_model_mc_calc

class MolEditor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MolEditor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MolEditor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _molset.new_MolEditor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_MolEditor
    __del__ = lambda self: None

    def Init(self):
        return _molset.MolEditor_Init(self)

    def FindMissingHydrogens(self, aptr):
        return _molset.MolEditor_FindMissingHydrogens(self, aptr)

    def DeleteExtraAtoms(self, pmset):
        return _molset.MolEditor_DeleteExtraAtoms(self, pmset)

    def AddMissingAtoms(self, pmset):
        return _molset.MolEditor_AddMissingAtoms(self, pmset)

    def AddHydrogens(self, pmset):
        return _molset.MolEditor_AddHydrogens(self, pmset)

    def AddPolarHydrogens(self, pmset):
        return _molset.MolEditor_AddPolarHydrogens(self, pmset)

    def AddHydrogensHybrid(self, pmset):
        return _molset.MolEditor_AddHydrogensHybrid(self, pmset)

    def SetAtomElemFromTempl(self, pmset):
        return _molset.MolEditor_SetAtomElemFromTempl(self, pmset)

    def SetHBondDonAccStatus(self, p_at_coll):
        return _molset.MolEditor_SetHBondDonAccStatus(self, p_at_coll)

    def SetStdAtomicParams(self, pmset, at_params_type):
        return _molset.MolEditor_SetStdAtomicParams(self, pmset, at_params_type)

    def SetFormalAtChrgFromTempl(self, pmset):
        return _molset.MolEditor_SetFormalAtChrgFromTempl(self, pmset)
    if _newclass:
        ClearAtomFFParams = staticmethod(_molset.MolEditor_ClearAtomFFParams)
    else:
        ClearAtomFFParams = _molset.MolEditor_ClearAtomFFParams

    def FixBondsUsingTempl(self, pmset):
        return _molset.MolEditor_FixBondsUsingTempl(self, pmset)

    def OrderAtomsInRes(self, pmset):
        return _molset.MolEditor_OrderAtomsInRes(self, pmset)

    def RenameAtomsToAmber(self, pmset):
        return _molset.MolEditor_RenameAtomsToAmber(self, pmset)

    def RenameAtomsToGromacs(self, pmset):
        return _molset.MolEditor_RenameAtomsToGromacs(self, pmset)

    def ConvertWaterArrowVB(self, pmset):
        return _molset.MolEditor_ConvertWaterArrowVB(self, pmset)

    def CreateCovBonds(self, at_col):
        return _molset.MolEditor_CreateCovBonds(self, at_col)
    if _newclass:
        BondIfClose = staticmethod(_molset.MolEditor_BondIfClose)
    else:
        BondIfClose = _molset.MolEditor_BondIfClose

    def SetBondDist(self, aptr1, aptr2, new_dist):
        return _molset.MolEditor_SetBondDist(self, aptr1, aptr2, new_dist)

    def SetAngle(self, aptr1, aptr2, aptr3, ang_new):
        return _molset.MolEditor_SetAngle(self, aptr1, aptr2, aptr3, ang_new)

    def SetTorsion(self, aptr1, aptr2, aptr3, aptr4, tors_new):
        return _molset.MolEditor_SetTorsion(self, aptr1, aptr2, aptr3, aptr4, tors_new)

    def FindHBondsAtomCollection(self, p_at_coll, hbonds):
        return _molset.MolEditor_FindHBondsAtomCollection(self, p_at_coll, hbonds)

    def CalcHBonds(self, pmset, recalc=False):
        return _molset.MolEditor_CalcHBonds(self, pmset, recalc)

    def IsValidHBond(self, p_hb):
        return _molset.MolEditor_IsValidHBond(self, p_hb)

    def CalcHydrogenBonds(self, pmset):
        return _molset.MolEditor_CalcHydrogenBonds(self, pmset)

    def FindDisulphideBridges(self, pmset):
        return _molset.MolEditor_FindDisulphideBridges(self, pmset)

    def CalcNucleicHBonds(self, chn1):
        return _molset.MolEditor_CalcNucleicHBonds(self, chn1)

    def CalcProteinHBonds(self, chn1):
        return _molset.MolEditor_CalcProteinHBonds(self, chn1)

    def FindBackbone(self, pmset):
        return _molset.MolEditor_FindBackbone(self, pmset)

    def UpdateBackBone(self, pmset):
        return _molset.MolEditor_UpdateBackBone(self, pmset)

    def DetermineSecStructure(self, pmol, flag):
        return _molset.MolEditor_DetermineSecStructure(self, pmol, flag)

    def FindAlphaHelix(self, pmol, pitch, flag):
        return _molset.MolEditor_FindAlphaHelix(self, pmol, pitch, flag)

    def FindTurnStructure(self, pmol):
        return _molset.MolEditor_FindTurnStructure(self, pmol)

    def FindBetaTurns(self, pmol):
        return _molset.MolEditor_FindBetaTurns(self, pmol)

    def FindBetaSheets(self, pmol):
        return _molset.MolEditor_FindBetaSheets(self, pmol)

    def SetAlphaHelix(self, pmset):
        return _molset.MolEditor_SetAlphaHelix(self, pmset)
    __swig_setmethods__["max_bond_length"] = _molset.MolEditor_max_bond_length_set
    __swig_getmethods__["max_bond_length"] = _molset.MolEditor_max_bond_length_get
    if _newclass:
        max_bond_length = _swig_property(_molset.MolEditor_max_bond_length_get, _molset.MolEditor_max_bond_length_set)
    __swig_setmethods__["max_hbond"] = _molset.MolEditor_max_hbond_set
    __swig_getmethods__["max_hbond"] = _molset.MolEditor_max_hbond_get
    if _newclass:
        max_hbond = _swig_property(_molset.MolEditor_max_hbond_get, _molset.MolEditor_max_hbond_set)
    __swig_setmethods__["max_da_dist_no_acc"] = _molset.MolEditor_max_da_dist_no_acc_set
    __swig_getmethods__["max_da_dist_no_acc"] = _molset.MolEditor_max_da_dist_no_acc_get
    if _newclass:
        max_da_dist_no_acc = _swig_property(_molset.MolEditor_max_da_dist_no_acc_get, _molset.MolEditor_max_da_dist_no_acc_set)
    __swig_setmethods__["max_da_dist_s_acc"] = _molset.MolEditor_max_da_dist_s_acc_set
    __swig_getmethods__["max_da_dist_s_acc"] = _molset.MolEditor_max_da_dist_s_acc_get
    if _newclass:
        max_da_dist_s_acc = _swig_property(_molset.MolEditor_max_da_dist_s_acc_get, _molset.MolEditor_max_da_dist_s_acc_set)
    __swig_setmethods__["max_ha_dist_no_acc"] = _molset.MolEditor_max_ha_dist_no_acc_set
    __swig_getmethods__["max_ha_dist_no_acc"] = _molset.MolEditor_max_ha_dist_no_acc_get
    if _newclass:
        max_ha_dist_no_acc = _swig_property(_molset.MolEditor_max_ha_dist_no_acc_get, _molset.MolEditor_max_ha_dist_no_acc_set)
    __swig_setmethods__["max_ha_dist_s_acc"] = _molset.MolEditor_max_ha_dist_s_acc_set
    __swig_getmethods__["max_ha_dist_s_acc"] = _molset.MolEditor_max_ha_dist_s_acc_get
    if _newclass:
        max_ha_dist_s_acc = _swig_property(_molset.MolEditor_max_ha_dist_s_acc_get, _molset.MolEditor_max_ha_dist_s_acc_set)
    __swig_setmethods__["max_hda_angle"] = _molset.MolEditor_max_hda_angle_set
    __swig_getmethods__["max_hda_angle"] = _molset.MolEditor_max_hda_angle_get
    if _newclass:
        max_hda_angle = _swig_property(_molset.MolEditor_max_hda_angle_get, _molset.MolEditor_max_hda_angle_set)
    __swig_setmethods__["m_calc_s_hbonds_flag"] = _molset.MolEditor_m_calc_s_hbonds_flag_set
    __swig_getmethods__["m_calc_s_hbonds_flag"] = _molset.MolEditor_m_calc_s_hbonds_flag_get
    if _newclass:
        m_calc_s_hbonds_flag = _swig_property(_molset.MolEditor_m_calc_s_hbonds_flag_get, _molset.MolEditor_m_calc_s_hbonds_flag_set)

    def CenterAtOrigin(self, at_cont):
        return _molset.MolEditor_CenterAtOrigin(self, at_cont)

    def CenterAtOriginWithRad(self, at_cont):
        return _molset.MolEditor_CenterAtOriginWithRad(self, at_cont)

    def Solvate(self, pmset):
        return _molset.MolEditor_Solvate(self, pmset)

    def CenterSoluteInSolvent(self, pmset):
        return _molset.MolEditor_CenterSoluteInSolvent(self, pmset)

    def CenterMolInPBox(self, pmset):
        return _molset.MolEditor_CenterMolInPBox(self, pmset)

    def ReplicatePeriodBox(self, pmset, nx, ny, nz):
        return _molset.MolEditor_ReplicatePeriodBox(self, pmset, nx, ny, nz)

    def WrapToUnitCell(self, at_cont, per_info):
        return _molset.MolEditor_WrapToUnitCell(self, at_cont, per_info)

    def DeleteOverlapMols(self, pmset, at_coll):
        return _molset.MolEditor_DeleteOverlapMols(self, pmset, at_coll)

    def SplitToMolecules(self, p_at_coll, mols):
        return _molset.MolEditor_SplitToMolecules(self, p_at_coll, mols)

    def MergeMolecules(self, pMol1, pMol2):
        return _molset.MolEditor_MergeMolecules(self, pMol1, pMol2)

    def CreateTransAlk(self, *args):
        return _molset.MolEditor_CreateTransAlk(self, *args)

    def CreateSurf(self, *args):
        return _molset.MolEditor_CreateSurf(self, *args)

    def Create2DMolArray(self, pmset, pMol_ref, deltx, delty, nx, ny, alpha, tilt):
        return _molset.MolEditor_Create2DMolArray(self, pmset, pMol_ref, deltx, delty, nx, ny, alpha, tilt)

    def AddElectrSurf(self, pmset, add_surf_below_flag, add_surf_top_flag, add_atom_top_flag, add_atom_below_flag):
        return _molset.MolEditor_AddElectrSurf(self, pmset, add_surf_below_flag, add_surf_top_flag, add_atom_top_flag, add_atom_below_flag)
    __swig_setmethods__["solv_name"] = _molset.MolEditor_solv_name_set
    __swig_getmethods__["solv_name"] = _molset.MolEditor_solv_name_get
    if _newclass:
        solv_name = _swig_property(_molset.MolEditor_solv_name_get, _molset.MolEditor_solv_name_set)
    __swig_setmethods__["solv_buffer_dist"] = _molset.MolEditor_solv_buffer_dist_set
    __swig_getmethods__["solv_buffer_dist"] = _molset.MolEditor_solv_buffer_dist_get
    if _newclass:
        solv_buffer_dist = _swig_property(_molset.MolEditor_solv_buffer_dist_get, _molset.MolEditor_solv_buffer_dist_set)
MolEditor_swigregister = _molset.MolEditor_swigregister
MolEditor_swigregister(MolEditor)

def MolEditor_ClearAtomFFParams(pmset):
    return _molset.MolEditor_ClearAtomFFParams(pmset)
MolEditor_ClearAtomFFParams = _molset.MolEditor_ClearAtomFFParams

def MolEditor_BondIfClose(sptr, dptr):
    return _molset.MolEditor_BondIfClose(sptr, dptr)
MolEditor_BondIfClose = _molset.MolEditor_BondIfClose

BACKBONE_CHRG = _molset.BACKBONE_CHRG
PROT_CHARGED_GROUPS_CHRG = _molset.PROT_CHARGED_GROUPS_CHRG
ZERO_CHRG = _molset.ZERO_CHRG
AMBER_ALL_ATOM_CHRGS = _molset.AMBER_ALL_ATOM_CHRGS
AMBER_ALL_ATOM_FF_SYMBOLS = _molset.AMBER_ALL_ATOM_FF_SYMBOLS
AMBER_ALL_ATOM_MASSES = _molset.AMBER_ALL_ATOM_MASSES
ATOM_ELEM_FROM_TEMPL = _molset.ATOM_ELEM_FROM_TEMPL
ATOM_MASSES_ELEMENT = _molset.ATOM_MASSES_ELEMENT
ATOM_HBOND_DA_STATUS = _molset.ATOM_HBOND_DA_STATUS
class AltChemStateType(HaEnum1):
    __swig_setmethods__ = {}
    for _s in [HaEnum1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AltChemStateType, name, value)
    __swig_getmethods__ = {}
    for _s in [HaEnum1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AltChemStateType, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_AltChemStateType
    __del__ = lambda self: None
    PROTONATED = _molset.AltChemStateType_PROTONATED
    UNPROTONATED = _molset.AltChemStateType_UNPROTONATED
    REDUCED = _molset.AltChemStateType_REDUCED
    OXIDIZED = _molset.AltChemStateType_OXIDIZED

    def __eq__(self, val):
        return _molset.AltChemStateType___eq__(self, val)

    def __ne__(self, val):
        return _molset.AltChemStateType___ne__(self, val)

    def GetLabelsMap(self):
        return _molset.AltChemStateType_GetLabelsMap(self)

    def value(self):
        return _molset.AltChemStateType_value(self)

    def label(self):
        return _molset.AltChemStateType_label(self)

    def SetWithValue(self, val):
        return _molset.AltChemStateType_SetWithValue(self, val)

    def SetWithLabel(self, label):
        return _molset.AltChemStateType_SetWithLabel(self, label)

    def __init__(self, *args):
        this = _molset.new_AltChemStateType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
AltChemStateType_swigregister = _molset.AltChemStateType_swigregister
AltChemStateType_swigregister(AltChemStateType)

class AltChemState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AltChemState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AltChemState, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _molset.new_AltChemState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_AltChemState
    __del__ = lambda self: None

    def GetHostAtomGroup(self):
        return _molset.AltChemState_GetHostAtomGroup(self)

    def SetStdParam(self):
        return _molset.AltChemState_SetStdParam(self)

    def SetAltCharges(self, weight):
        return _molset.AltChemState_SetAltCharges(self, weight)

    def SetAltChForAtom(self, at_name, new_ch):
        return _molset.AltChemState_SetAltChForAtom(self, at_name, new_ch)
    __swig_setmethods__["id"] = _molset.AltChemState_id_set
    __swig_getmethods__["id"] = _molset.AltChemState_id_get
    if _newclass:
        id = _swig_property(_molset.AltChemState_id_get, _molset.AltChemState_id_set)
    __swig_setmethods__["chmap"] = _molset.AltChemState_chmap_set
    __swig_getmethods__["chmap"] = _molset.AltChemState_chmap_get
    if _newclass:
        chmap = _swig_property(_molset.AltChemState_chmap_get, _molset.AltChemState_chmap_set)
    __swig_setmethods__["mod_atom_name"] = _molset.AltChemState_mod_atom_name_set
    __swig_getmethods__["mod_atom_name"] = _molset.AltChemState_mod_atom_name_get
    if _newclass:
        mod_atom_name = _swig_property(_molset.AltChemState_mod_atom_name_get, _molset.AltChemState_mod_atom_name_set)
    __swig_setmethods__["alt_state_type"] = _molset.AltChemState_alt_state_type_set
    __swig_getmethods__["alt_state_type"] = _molset.AltChemState_alt_state_type_get
    if _newclass:
        alt_state_type = _swig_property(_molset.AltChemState_alt_state_type_get, _molset.AltChemState_alt_state_type_set)
    __swig_setmethods__["pk"] = _molset.AltChemState_pk_set
    __swig_getmethods__["pk"] = _molset.AltChemState_pk_get
    if _newclass:
        pk = _swig_property(_molset.AltChemState_pk_get, _molset.AltChemState_pk_set)
    __swig_setmethods__["std_pk"] = _molset.AltChemState_std_pk_set
    __swig_getmethods__["std_pk"] = _molset.AltChemState_std_pk_get
    if _newclass:
        std_pk = _swig_property(_molset.AltChemState_std_pk_get, _molset.AltChemState_std_pk_set)
    __swig_setmethods__["active_flag"] = _molset.AltChemState_active_flag_set
    __swig_getmethods__["active_flag"] = _molset.AltChemState_active_flag_get
    if _newclass:
        active_flag = _swig_property(_molset.AltChemState_active_flag_get, _molset.AltChemState_active_flag_set)
    __swig_setmethods__["host_atom_group"] = _molset.AltChemState_host_atom_group_set
    __swig_getmethods__["host_atom_group"] = _molset.AltChemState_host_atom_group_get
    if _newclass:
        host_atom_group = _swig_property(_molset.AltChemState_host_atom_group_get, _molset.AltChemState_host_atom_group_set)
AltChemState_swigregister = _molset.AltChemState_swigregister
AltChemState_swigregister(AltChemState)
PROTONATED = cvar.PROTONATED
UNPROTONATED = cvar.UNPROTONATED
REDUCED = cvar.REDUCED
OXIDIZED = cvar.OXIDIZED

class vector_AltChemState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_AltChemState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_AltChemState, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _molset.vector_AltChemState_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _molset.vector_AltChemState___nonzero__(self)

    def __bool__(self):
        return _molset.vector_AltChemState___bool__(self)

    def __len__(self):
        return _molset.vector_AltChemState___len__(self)

    def __getslice__(self, i, j):
        return _molset.vector_AltChemState___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _molset.vector_AltChemState___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _molset.vector_AltChemState___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _molset.vector_AltChemState___delitem__(self, *args)

    def __getitem__(self, *args):
        return _molset.vector_AltChemState___getitem__(self, *args)

    def __setitem__(self, *args):
        return _molset.vector_AltChemState___setitem__(self, *args)

    def pop(self):
        return _molset.vector_AltChemState_pop(self)

    def append(self, x):
        return _molset.vector_AltChemState_append(self, x)

    def empty(self):
        return _molset.vector_AltChemState_empty(self)

    def size(self):
        return _molset.vector_AltChemState_size(self)

    def swap(self, v):
        return _molset.vector_AltChemState_swap(self, v)

    def begin(self):
        return _molset.vector_AltChemState_begin(self)

    def end(self):
        return _molset.vector_AltChemState_end(self)

    def rbegin(self):
        return _molset.vector_AltChemState_rbegin(self)

    def rend(self):
        return _molset.vector_AltChemState_rend(self)

    def clear(self):
        return _molset.vector_AltChemState_clear(self)

    def get_allocator(self):
        return _molset.vector_AltChemState_get_allocator(self)

    def pop_back(self):
        return _molset.vector_AltChemState_pop_back(self)

    def erase(self, *args):
        return _molset.vector_AltChemState_erase(self, *args)

    def __init__(self, *args):
        this = _molset.new_vector_AltChemState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _molset.vector_AltChemState_push_back(self, x)

    def front(self):
        return _molset.vector_AltChemState_front(self)

    def back(self):
        return _molset.vector_AltChemState_back(self)

    def assign(self, n, x):
        return _molset.vector_AltChemState_assign(self, n, x)

    def resize(self, *args):
        return _molset.vector_AltChemState_resize(self, *args)

    def insert(self, *args):
        return _molset.vector_AltChemState_insert(self, *args)

    def reserve(self, n):
        return _molset.vector_AltChemState_reserve(self, n)

    def capacity(self):
        return _molset.vector_AltChemState_capacity(self)
    __swig_destroy__ = _molset.delete_vector_AltChemState
    __del__ = lambda self: None
vector_AltChemState_swigregister = _molset.vector_AltChemState_swigregister
vector_AltChemState_swigregister(vector_AltChemState)

class MultiSitePopulationMethod(HaEnum1):
    __swig_setmethods__ = {}
    for _s in [HaEnum1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiSitePopulationMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaEnum1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiSitePopulationMethod, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _molset.delete_MultiSitePopulationMethod
    __del__ = lambda self: None
    SCF_MULTI_SITE_CALC = _molset.MultiSitePopulationMethod_SCF_MULTI_SITE_CALC
    MC_MULTI_SITE_CALC = _molset.MultiSitePopulationMethod_MC_MULTI_SITE_CALC
    PFUNC_MULTI_SITE_CALC = _molset.MultiSitePopulationMethod_PFUNC_MULTI_SITE_CALC

    def __eq__(self, val):
        return _molset.MultiSitePopulationMethod___eq__(self, val)

    def __ne__(self, val):
        return _molset.MultiSitePopulationMethod___ne__(self, val)

    def GetLabelsMap(self):
        return _molset.MultiSitePopulationMethod_GetLabelsMap(self)

    def value(self):
        return _molset.MultiSitePopulationMethod_value(self)

    def label(self):
        return _molset.MultiSitePopulationMethod_label(self)

    def SetWithValue(self, val):
        return _molset.MultiSitePopulationMethod_SetWithValue(self, val)

    def SetWithLabel(self, label):
        return _molset.MultiSitePopulationMethod_SetWithLabel(self, label)

    def __init__(self, *args):
        this = _molset.new_MultiSitePopulationMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
MultiSitePopulationMethod_swigregister = _molset.MultiSitePopulationMethod_swigregister
MultiSitePopulationMethod_swigregister(MultiSitePopulationMethod)

class ProtonRedoxMod(HaCompMod):
    __swig_setmethods__ = {}
    for _s in [HaCompMod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProtonRedoxMod, name, value)
    __swig_getmethods__ = {}
    for _s in [HaCompMod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProtonRedoxMod, name)
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset):
        this = _molset.new_ProtonRedoxMod(new_phost_mset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _molset.delete_ProtonRedoxMod
    __del__ = lambda self: None
    __swig_setmethods__["alt_chem_states"] = _molset.ProtonRedoxMod_alt_chem_states_set
    __swig_getmethods__["alt_chem_states"] = _molset.ProtonRedoxMod_alt_chem_states_get
    if _newclass:
        alt_chem_states = _swig_property(_molset.ProtonRedoxMod_alt_chem_states_get, _molset.ProtonRedoxMod_alt_chem_states_set)

    def ClearResAltChemStates(self, pres):
        return _molset.ProtonRedoxMod_ClearResAltChemStates(self, pres)

    def ClearAltChemStates(self):
        return _molset.ProtonRedoxMod_ClearAltChemStates(self)

    def GetNumResAltChemStates(self, pres):
        return _molset.ProtonRedoxMod_GetNumResAltChemStates(self, pres)

    def GetResAltChemState(self, pres, alt_state_idx):
        return _molset.ProtonRedoxMod_GetResAltChemState(self, pres, alt_state_idx)

    def GetResAltChemStateByAtName(self, pres, at_name):
        return _molset.ProtonRedoxMod_GetResAltChemStateByAtName(self, pres, at_name)
    __swig_setmethods__["heme_model"] = _molset.ProtonRedoxMod_heme_model_set
    __swig_getmethods__["heme_model"] = _molset.ProtonRedoxMod_heme_model_get
    if _newclass:
        heme_model = _swig_property(_molset.ProtonRedoxMod_heme_model_get, _molset.ProtonRedoxMod_heme_model_set)

    def PrintResPKa(self, pres):
        return _molset.ProtonRedoxMod_PrintResPKa(self, pres)

    def AddAltChemState(self, pgrp):
        return _molset.ProtonRedoxMod_AddAltChemState(self, pgrp)

    def SetStdResPKa(self, pres, set_redox_pot):
        return _molset.ProtonRedoxMod_SetStdResPKa(self, pres, set_redox_pot)

    def SetStdResPKa_G1(self, pres, set_redox_pot):
        return _molset.ProtonRedoxMod_SetStdResPKa_G1(self, pres, set_redox_pot)

    def SetStdPKa(self):
        return _molset.ProtonRedoxMod_SetStdPKa(self)

    def SetStdPKa_G1(self):
        return _molset.ProtonRedoxMod_SetStdPKa_G1(self)

    def CalcPKaForSelection(self, *args):
        return _molset.ProtonRedoxMod_CalcPKaForSelection(self, *args)

    def SetStdPKforAtName(self, pres, at_name, std_pk_new):
        return _molset.ProtonRedoxMod_SetStdPKforAtName(self, pres, at_name, std_pk_new)
    if _newclass:
        CalcAvgPopMC = staticmethod(_molset.ProtonRedoxMod_CalcAvgPopMC)
    else:
        CalcAvgPopMC = _molset.ProtonRedoxMod_CalcAvgPopMC
    if _newclass:
        CalcAvgPopSCF = staticmethod(_molset.ProtonRedoxMod_CalcAvgPopSCF)
    else:
        CalcAvgPopSCF = _molset.ProtonRedoxMod_CalcAvgPopSCF
    if _newclass:
        CalcAvgPopPFunc = staticmethod(_molset.ProtonRedoxMod_CalcAvgPopPFunc)
    else:
        CalcAvgPopPFunc = _molset.ProtonRedoxMod_CalcAvgPopPFunc
    if _newclass:
        TestCalcPopFun = staticmethod(_molset.ProtonRedoxMod_TestCalcPopFun)
    else:
        TestCalcPopFun = _molset.ProtonRedoxMod_TestCalcPopFun

    def SetAltStatesActive(self, set_flag):
        return _molset.ProtonRedoxMod_SetAltStatesActive(self, set_flag)

    def SetResChargesForPH(self, pres, pH_val):
        return _molset.ProtonRedoxMod_SetResChargesForPH(self, pres, pH_val)

    def SetChargesForPH(self, pH_val):
        return _molset.ProtonRedoxMod_SetChargesForPH(self, pH_val)

    def SetChargesForCurrentPH(self):
        return _molset.ProtonRedoxMod_SetChargesForCurrentPH(self)

    def SetPH(self, new_ph):
        return _molset.ProtonRedoxMod_SetPH(self, new_ph)

    def GetPH(self):
        return _molset.ProtonRedoxMod_GetPH(self)
    __swig_setmethods__["set_std_redox_pot"] = _molset.ProtonRedoxMod_set_std_redox_pot_set
    __swig_getmethods__["set_std_redox_pot"] = _molset.ProtonRedoxMod_set_std_redox_pot_get
    if _newclass:
        set_std_redox_pot = _swig_property(_molset.ProtonRedoxMod_set_std_redox_pot_get, _molset.ProtonRedoxMod_set_std_redox_pot_set)
    __swig_setmethods__["save_alt_st_inter"] = _molset.ProtonRedoxMod_save_alt_st_inter_set
    __swig_getmethods__["save_alt_st_inter"] = _molset.ProtonRedoxMod_save_alt_st_inter_get
    if _newclass:
        save_alt_st_inter = _swig_property(_molset.ProtonRedoxMod_save_alt_st_inter_get, _molset.ProtonRedoxMod_save_alt_st_inter_set)
    __swig_setmethods__["read_alt_st_inter"] = _molset.ProtonRedoxMod_read_alt_st_inter_set
    __swig_getmethods__["read_alt_st_inter"] = _molset.ProtonRedoxMod_read_alt_st_inter_get
    if _newclass:
        read_alt_st_inter = _swig_property(_molset.ProtonRedoxMod_read_alt_st_inter_get, _molset.ProtonRedoxMod_read_alt_st_inter_set)
    __swig_setmethods__["save_titration_data"] = _molset.ProtonRedoxMod_save_titration_data_set
    __swig_getmethods__["save_titration_data"] = _molset.ProtonRedoxMod_save_titration_data_get
    if _newclass:
        save_titration_data = _swig_property(_molset.ProtonRedoxMod_save_titration_data_get, _molset.ProtonRedoxMod_save_titration_data_set)
    __swig_setmethods__["save_only_redox_titr"] = _molset.ProtonRedoxMod_save_only_redox_titr_set
    __swig_getmethods__["save_only_redox_titr"] = _molset.ProtonRedoxMod_save_only_redox_titr_get
    if _newclass:
        save_only_redox_titr = _swig_property(_molset.ProtonRedoxMod_save_only_redox_titr_get, _molset.ProtonRedoxMod_save_only_redox_titr_set)
    __swig_setmethods__["n_mc_cyc"] = _molset.ProtonRedoxMod_n_mc_cyc_set
    __swig_getmethods__["n_mc_cyc"] = _molset.ProtonRedoxMod_n_mc_cyc_get
    if _newclass:
        n_mc_cyc = _swig_property(_molset.ProtonRedoxMod_n_mc_cyc_get, _molset.ProtonRedoxMod_n_mc_cyc_set)
    __swig_setmethods__["multi_site_pop_method"] = _molset.ProtonRedoxMod_multi_site_pop_method_set
    __swig_getmethods__["multi_site_pop_method"] = _molset.ProtonRedoxMod_multi_site_pop_method_get
    if _newclass:
        multi_site_pop_method = _swig_property(_molset.ProtonRedoxMod_multi_site_pop_method_get, _molset.ProtonRedoxMod_multi_site_pop_method_set)
    __swig_setmethods__["ph_min"] = _molset.ProtonRedoxMod_ph_min_set
    __swig_getmethods__["ph_min"] = _molset.ProtonRedoxMod_ph_min_get
    if _newclass:
        ph_min = _swig_property(_molset.ProtonRedoxMod_ph_min_get, _molset.ProtonRedoxMod_ph_min_set)
    __swig_setmethods__["ph_max"] = _molset.ProtonRedoxMod_ph_max_set
    __swig_getmethods__["ph_max"] = _molset.ProtonRedoxMod_ph_max_get
    if _newclass:
        ph_max = _swig_property(_molset.ProtonRedoxMod_ph_max_get, _molset.ProtonRedoxMod_ph_max_set)
    __swig_setmethods__["ph_step"] = _molset.ProtonRedoxMod_ph_step_set
    __swig_getmethods__["ph_step"] = _molset.ProtonRedoxMod_ph_step_get
    if _newclass:
        ph_step = _swig_property(_molset.ProtonRedoxMod_ph_step_get, _molset.ProtonRedoxMod_ph_step_set)
    __swig_setmethods__["e0_min"] = _molset.ProtonRedoxMod_e0_min_set
    __swig_getmethods__["e0_min"] = _molset.ProtonRedoxMod_e0_min_get
    if _newclass:
        e0_min = _swig_property(_molset.ProtonRedoxMod_e0_min_get, _molset.ProtonRedoxMod_e0_min_set)
    __swig_setmethods__["e0_max"] = _molset.ProtonRedoxMod_e0_max_set
    __swig_getmethods__["e0_max"] = _molset.ProtonRedoxMod_e0_max_get
    if _newclass:
        e0_max = _swig_property(_molset.ProtonRedoxMod_e0_max_get, _molset.ProtonRedoxMod_e0_max_set)
    __swig_setmethods__["e0_step"] = _molset.ProtonRedoxMod_e0_step_set
    __swig_getmethods__["e0_step"] = _molset.ProtonRedoxMod_e0_step_get
    if _newclass:
        e0_step = _swig_property(_molset.ProtonRedoxMod_e0_step_get, _molset.ProtonRedoxMod_e0_step_set)
    __swig_setmethods__["e0"] = _molset.ProtonRedoxMod_e0_set
    __swig_getmethods__["e0"] = _molset.ProtonRedoxMod_e0_get
    if _newclass:
        e0 = _swig_property(_molset.ProtonRedoxMod_e0_get, _molset.ProtonRedoxMod_e0_set)
    __swig_setmethods__["ph"] = _molset.ProtonRedoxMod_ph_set
    __swig_getmethods__["ph"] = _molset.ProtonRedoxMod_ph_get
    if _newclass:
        ph = _swig_property(_molset.ProtonRedoxMod_ph_get, _molset.ProtonRedoxMod_ph_set)
ProtonRedoxMod_swigregister = _molset.ProtonRedoxMod_swigregister
ProtonRedoxMod_swigregister(ProtonRedoxMod)
SCF_MULTI_SITE_CALC = cvar.SCF_MULTI_SITE_CALC
MC_MULTI_SITE_CALC = cvar.MC_MULTI_SITE_CALC
PFUNC_MULTI_SITE_CALC = cvar.PFUNC_MULTI_SITE_CALC

def ProtonRedoxMod_CalcAvgPopMC(inter_mat, avg_st_pop, alt_st_ene, N_mc_cyc=10000):
    return _molset.ProtonRedoxMod_CalcAvgPopMC(inter_mat, avg_st_pop, alt_st_ene, N_mc_cyc)
ProtonRedoxMod_CalcAvgPopMC = _molset.ProtonRedoxMod_CalcAvgPopMC

def ProtonRedoxMod_CalcAvgPopSCF(inter_mat, avg_st_pop, alt_st_ene):
    return _molset.ProtonRedoxMod_CalcAvgPopSCF(inter_mat, avg_st_pop, alt_st_ene)
ProtonRedoxMod_CalcAvgPopSCF = _molset.ProtonRedoxMod_CalcAvgPopSCF

def ProtonRedoxMod_CalcAvgPopPFunc(inter_mat, avg_st_pop, alt_st_ene):
    return _molset.ProtonRedoxMod_CalcAvgPopPFunc(inter_mat, avg_st_pop, alt_st_ene)
ProtonRedoxMod_CalcAvgPopPFunc = _molset.ProtonRedoxMod_CalcAvgPopPFunc

def ProtonRedoxMod_TestCalcPopFun():
    return _molset.ProtonRedoxMod_TestCalcPopFun()
ProtonRedoxMod_TestCalcPopFun = _molset.ProtonRedoxMod_TestCalcPopFun

# This file is compatible with both classic and new-style classes.


