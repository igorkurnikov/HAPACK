import logging as log
import wx

try:
    import pnps
except ImportError:
    pnps = None

try:
    from harlempy import molset
except ImportError:
    molset = None

from .utils import FileBB_CheckFileExistence, ShowVectorField3D, MolSet_RefreshAllViews


def pnps_run(ScriptFileName):
    import inspect
    import os
    import subprocess
    curdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
    return subprocess.Popen(
        [os.path.join(curdir,"PNPS64","PNPS.EXE"), ScriptFileName],
        env={"PYTHONPATH": ""}
    )


def add_script_header():
    return "# Generated by PNPS-GUI in Harlem\n" + \
        "# Execute this scipt in Harlem or in stand-alone PNPS\n" + \
        "import pnps\n\n"


def format_cmd(cmd, *args, **kwarg):
    """Just a pretty function to make formatting little bit slicker"""
    cmd = cmd.format(*args, **kwarg)
    return cmd


class PNPSBasePanel(wx.Panel):
    """
    Base panel for PNPS tabs
    """
    def __init__(self, parent, widgets_init_function, widgets_ids):
        """
        `parent` should be Notebook of  PNPFrame
        `widgets_init_function` is function to build widgets in this panel
        `widgets_ids` is module which have used widgets ids
        """
        super(PNPSBasePanel, self).__init__(parent)

        # init widgets
        widgets_init_function(self, False)

        # set ref to PNPFrame
        self.pnps_frame = parent.GetParent()
        self.pmset = self.pnps_frame.pmset
        from . import pnpsgui
        assert isinstance(self.pnps_frame, pnpsgui.PNPFrame)

        # Validation list of NumCtrls
        self.Validation_NumCtrls = []
        # FBB_InputFiles/FBB_OutputFiles are list of (FileBrowseButton, NoneIsAllowed) values
        self.FBB_InputFiles = []
        self.FBB_OutputFiles = []

        # Set references to widgets
        # Process Control
        self.Btn_Save = self.FindWindowByIdName(widgets_ids, "IDBpnpSaveScript")
        self.Btn_Run = self.FindWindowByIdName(widgets_ids, "IDBpnpRunScript")
        self.Btn_Interrupt = self.FindWindowByIdName(widgets_ids, "IDBpnpInterruptScript")
        self.Btn_Stop = self.FindWindowByIdName(widgets_ids, "IDBpnpStopScript")

        # if it is not present, it will be set to None
        self.FBB_ScriptFileName = self.FindWindowByIdName(widgets_ids, "IDTCpnpScriptFileName")

        self.FBB_SysTopFileName_Out = self.FindWindowByIdName(widgets_ids, "IDTCpnpSysTopFileNameOut")
        self.FBB_DiffFileName_Out = self.FindWindowByIdName(widgets_ids, "IDTCpnpDiffFileNameOut")
        self.FBB_SRFileName_Out = self.FindWindowByIdName(widgets_ids, "IDTCpnpSRFileNameOut")
        self.FBB_PotFileName_Out = self.FindWindowByIdName(widgets_ids, "IDTCpnpPotFileNameOut")
        self.FBB_ConcFileName_Out = self.FindWindowByIdName(widgets_ids, "IDTCpnpConcFileNameOut")
        
        self.FBB_SysTopFileName_In = self.FindWindowByIdName(widgets_ids, "IDTCpnpSysTopFileNameIn")
        self.FBB_DiffFileName_In = self.FindWindowByIdName(widgets_ids, "IDTCpnpDiffFileNameIn")
        self.FBB_SRFileName_In = self.FindWindowByIdName(widgets_ids, "IDTCpnpSRFileNameIn")
        self.FBB_PotFileName_In = self.FindWindowByIdName(widgets_ids, "IDTCpnpPotFileNameIn")
        self.FBB_ConcFileName_In = self.FindWindowByIdName(widgets_ids, "IDTCpnpConcFileNameIn")

        # Buttons to view results
        self.Btn_ViewStaticCharge = self.FindWindowByIdName(widgets_ids, "IDBpnpViewStaticCharge")
        self.Btn_ViewDiel = self.FindWindowByIdName(widgets_ids, "IDBpnpViewDiel")
        self.Btn_ViewSR = self.FindWindowByIdName(widgets_ids, "IDBpnpViewSR")
        self.Btn_ViewPlainDiff = self.FindWindowByIdName(widgets_ids, "IDBpnpViewPlainDiff")
        self.Btn_ViewDiff = self.FindWindowByIdName(widgets_ids, "IDBpnpViewDiff")
        self.Btn_ViewPot = self.FindWindowByIdName(widgets_ids, "IDBpnpViewPot")
        self.Btn_ViewConc = self.FindWindowByIdName(widgets_ids, "IDBpnpViewConc")
        # timer
        self.timer = wx.Timer(self)

        # bind events
        # Process Control
        if self.Btn_Save is not None:
            self.Bind(wx.EVT_BUTTON, self.OnSaveScript, id=widgets_ids.IDBpnpSaveScript)
        if self.Btn_Run is not None:
            self.Bind(wx.EVT_BUTTON, self.OnRunScript, id=widgets_ids.IDBpnpRunScript)
        if self.Btn_Interrupt is not None:
            self.Bind(wx.EVT_BUTTON, self.OnInterruptScript, id=widgets_ids.IDBpnpInterruptScript)
        if self.Btn_Stop is not None:
            self.Bind(wx.EVT_BUTTON, self.OnStopScript, id=widgets_ids.IDBpnpStopScript)
        self.Bind(wx.EVT_TIMER, self.CheckProcess, self.timer)
        # Bind results viewing
        if self.Btn_ViewStaticCharge is not None:
            self.Bind(wx.EVT_BUTTON, self.OnViewStaticCharge, id=widgets_ids.IDBpnpViewStaticCharge)
        if self.Btn_ViewDiel is not None:
            self.Bind(wx.EVT_BUTTON, self.OnViewDiel, id=widgets_ids.IDBpnpViewDiel)
        if self.Btn_ViewSR is not None:
            self.Bind(wx.EVT_BUTTON, self.OnViewSR, id=widgets_ids.IDBpnpViewSR)
        if self.Btn_ViewPlainDiff is not None:
            self.Bind(wx.EVT_BUTTON, self.OnViewPlainDiff, id=widgets_ids.IDBpnpViewPlainDiff)
        if self.Btn_ViewDiff is not None:
            self.Bind(wx.EVT_BUTTON, self.OnViewDiff, id=widgets_ids.IDBpnpViewDiff)
        if self.Btn_ViewPot is not None:
            self.Bind(wx.EVT_BUTTON, self.OnViewPot, id=widgets_ids.IDBpnpViewPot)
        if self.Btn_ViewConc is not None:
            self.Bind(wx.EVT_BUTTON, self.OnViewConc, id=widgets_ids.IDBpnpViewConc)

        # Other internal values
        self.pnps_process = None
        self.pnps_stop_send_times = 0
        self.script_interruption_is_possible = True

    def FindWindowByIdName(self, widgets_ids, id_name):
        Id = getattr(widgets_ids, id_name, None)
        if Id is None:
            return None
        return self.FindWindowById(Id)

    def _ValidateNumCtrls(self):
        for ctrl in self.Validation_NumCtrls:
            if not ctrl.IsInBounds():
                msg = "Some input values are incorrect (some can be marked by yellow background)"
                log.error(msg)
                dlg = wx.MessageDialog(self, msg, "Error In Input Values", wx.OK)
                dlg.ShowModal()  # Show it
                dlg.Destroy()  # finally destroy it when finished.
                return False
        return True

    def _CheckInputFilesExistence(self):
        # check the existence of these file and ask user for permission to rewrite
        count = 0
        msg = ""
        for file_browser, none_is_valid in self.FBB_InputFiles:
            filename = str(file_browser.GetValue())
            if filename == "None" and none_is_valid:
                continue
            if not FileBB_CheckFileExistence(file_browser, none_is_valid):
                count += 1
                msg += "File %s does not exist.\n" % (file_browser.GetValue())
        if count > 0:
            if count == 1:
                msg += "\nOne input file does not exist. Can not continue!"
            else:
                msg += "\nSeveral input files do not exist. Can not continue!"
            log.error(msg)
            dlg = wx.MessageDialog(self, msg, "Error In Input Values", wx.OK)
            dlg.ShowModal()
            dlg.Destroy()
            return False
        return True

    def _CheckOutputFilesExistence(self):
        # check the existence of these file and ask user for permission to rewrite
        count = 0
        msg = ""
        for file_browser, none_is_valid in self.FBB_OutputFiles:
            filename = str(file_browser.GetValue())
            if filename == "None" and none_is_valid:
                continue
            if FileBB_CheckFileExistence(file_browser, none_is_valid):
                count += 1
                msg += "File %s exists.\n" % (file_browser.GetValue())
        if count > 0:
            if count == 1:
                msg += "\nIf execution will be continued this file will be overwritten."
            else:
                msg += "\nIf execution will be continued these files will be overwritten."
                msg += "\nContinue?"
            log.error(msg)
            dlg = wx.MessageDialog(self, msg, "Error In Input Values", wx.OK | wx.CANCEL)
            if dlg.ShowModal() != wx.ID_OK:
                dlg.Destroy()
                return False
            dlg.Destroy()
        return True

    def _ValidateParameters(self):
        """
        default validator
        """
        if not self._ValidateNumCtrls():
            return False
        if not self._CheckInputFilesExistence():
            return False
        if not self._CheckOutputFilesExistence():
            return False
        return True

    def ValidateParameters(self):
        """interface for user input validation should return True if correct"""
        raise NotImplementedError("ValidateParameters should be implemented in derived class")

    def GenerateRunScript(self):
        """interface for script generation"""
        raise NotImplementedError("GenerateRunScript should be implemented in derived class")

    def OnSaveScript(self, _):
        """Save script"""
        # Check validity of user entries
        if not self.ValidateParameters():
            return False

        print("Saving PNPS run-script ...")
        script = self.GenerateRunScript()
        if script is None:
            log.error("Can not generate script!")
            return False

        ScriptFileName = str(self.FBB_ScriptFileName.GetValue())
        try:
            with open(ScriptFileName, "wt") as fout:
                fout.write(script)
        except IOError as e:
            msg = "Can not write %s\n%s" % (ScriptFileName, str(e))
            log.error(msg)
            dlg = wx.MessageDialog(self, msg, "Error In Input Values", wx.OK)
            dlg.ShowModal()  # Show it
            dlg.Destroy()
            return False

        log.debug(script)

        print("done with saving")
        return True

    def OnRunScript(self, _):
        """Save script and start execution in separate process"""
        print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")

        if not self.OnSaveScript(_):
            return

        ScriptFileName = str(self.FBB_ScriptFileName.GetValue())

        print("Running " + ScriptFileName)

        self.pnps_process = pnps_run(ScriptFileName)

        # start timer to periodically check status
        self.timer.Start(1000)
        self.Btn_Stop.Enable(True)

        print("done with running " + ScriptFileName)
        print("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<")

    def OnStopScript(self, _):
        """Terminate script execution"""
        if self.pnps_process is None:
            return
        if self.pnps_process.poll() is not None:
            return

        if self.pnps_stop_send_times == 0:
            self.pnps_stop_send_times += 1
            self.pnps_process.terminate()
        else:
            self.pnps_stop_send_times += 1
            self.pnps_process.kill()

    def OnInterruptScript(self, _):
        if not self.script_interruption_is_possible:
            log.error("Can not interrupt this script.")
            return
        if self.pnps_process is None:
            log.error("Can not interrupt this script, because it is not running.")
            return
        # @todo implement sending interruption signal
        raise NotImplementedError()

    def CheckProcess(self, _):
        """check PNPS process status. If it is done show message and stop checking"""
        if self.pnps_process is None:
            return
        if self.pnps_process.poll() is not None:
            return_code = self.pnps_process.poll()
            msg = "Script is done, exit code: "+str(return_code)
            log.info(msg)
            self.timer.Stop()
            self.Btn_Stop.Enable(False)
            self.pnps_stop_send_times = 0
            del self.pnps_process
            self.pnps_process = None

            return self.AnalyseOutput(return_code)

    def _AnalyseOutput(self, return_code, msg=None):
        if msg is None:
            msg = "Script execution is complete, exit code: "+str(return_code)
        log.info(msg)
        dlg = wx.MessageDialog(self, msg, "Script finished", wx.OK)
        dlg.ShowModal()  # Show it
        dlg.Destroy()

    def AnalyseOutput(self, return_code):
        self._AnalyseOutput(return_code, None)

    def _CheckFileExistence(self, file_browse_button):
        if file_browse_button is None:
            return False

        if not FileBB_CheckFileExistence(file_browse_button):
            dlg = wx.MessageDialog(self, "File %s does not exist" % (file_browse_button.GetValue()),
                                   "Error In Input Values", wx.OK)
            dlg.ShowModal()  # Show it
            dlg.Destroy()  # finally destroy it when finished.
            return False

        return True

    def OnViewStaticCharge(self, _):
        """
        View static charge if this panel support it.
        """
        # Check that in Harlem
        if molset is None or pnps is None or self.pmset is None:
            log.error("Can only do it in Harlem.")
            return
        # Check that this panel should do it
        if self.Btn_ViewStaticCharge is None or self.FBB_SysTopFileName_Out is None:
            log.error("This panel can not show it.")
            return
        # Check that file exist
        if not self._CheckFileExistence(self.FBB_SysTopFileName_Out):
            log.error("File %s do not exists." % str(self.FBB_SysTopFileName_Out.GetValue()))
            return

        NIndex = pnps.NodeIndexing()
        NIndex.ReadFromFile(str(self.FBB_SysTopFileName_Out.GetValue()))

        field = NIndex.GetHaField3D(pnps.NodeIndexing.Charge, pnps.NodeIndexing.ChargeMask)
        Name = "Static Charge (%s , %s)" % (str(self.FBB_SysTopFileName_Out.GetValue()), self.pmset.GetName())
        field.SetName(Name)
        field.thisown = 0
        PlaneV = molset.PlaneViewOfHaField3D(field, Name, 1)
        PlaneV.SetHideZeroValues(1)
        PlaneV.thisown = 0

        self.pmset.AddObject3D(PlaneV)
        MolSet_RefreshAllViews(self.pmset)
        molset.CreatewxFieldPlaneView(PlaneV, self.pmset, Name, 1)
        del NIndex

    def OnViewDiel(self, _):
        """
        View three maps of dielectric constant if this panel support it.
        """
        if molset is None or pnps is None or self.pmset is None:
            log.error("Can only do it in Harlem.")
            return
        # Check that this panel should do it
        if self.Btn_ViewDiel is None or self.FBB_SysTopFileName_Out is None:
            log.error("This panel can not show it.")
            return
        # Check that file exist
        if not self._CheckFileExistence(self.FBB_SysTopFileName_Out):
            log.error("File %s do not exists." % str(self.FBB_SysTopFileName_Out.GetValue()))
            return

        NIndex = pnps.NodeIndexing()
        NIndex.ReadFromFile(str(self.FBB_SysTopFileName_Out.GetValue()))

        Axes = ["X", "Y", "Z"]
        Mask = [pnps.NodeIndexing.Epsilon0, pnps.NodeIndexing.Epsilon1, pnps.NodeIndexing.Epsilon2]
        for i in range(3):
            field = NIndex.GetHaField3D(pnps.NodeIndexing.DielConst, Mask[i])
            Name = "Diel.Const; Displaced in %s Charge (%s , %s)" % (
                Axes[i], str(self.FBB_SysTopFileName_Out.GetValue()), self.pmset.GetName())
            field.SetName(Name)
            field.thisown = 0
            PlaneV = molset.PlaneViewOfHaField3D(field, Name, 1)
            PlaneV.SetHideZeroValues(1)
            PlaneV.thisown = 0

            self.pmset.AddObject3D(PlaneV)
            self.pmset.RefreshAllViews(molset.RFRefresh)

            molset.CreatewxFieldPlaneView(PlaneV, self.pmset, Name, 1)
        MolSet_RefreshAllViews(self.pmset)
        del NIndex

    def OnViewSR(self, _):
        if molset is None or pnps is None or self.pmset is None:
            log.error("Can only do it in Harlem.")
            return
        # Check that this panel should do it
        if self.Btn_ViewSR is None or self.FBB_SRFileName_Out is None:
            log.error("This panel can not show it.")
            return
        # Check that file exist
        if not self._CheckFileExistence(self.FBB_SRFileName_Out):
            log.error("File %s do not exists." % str(self.FBB_SRFileName_Out.GetValue()))
            return

        ShowVectorField3D(str(self.FBB_SRFileName_Out.GetValue()), self.pmset, "Soft Repulsion")

    def OnViewPlainDiff(self, _):
        """
        View simple diffusion coefficient map if this panel support it.
        """
        if molset is None or pnps is None or self.pmset is None:
            log.error("Can only do it in Harlem.")
            return
        # Check that this panel should do it
        if self.Btn_ViewPlainDiff is None or self.FBB_SysTopFileName_Out is None:
            log.error("This panel can not show it.")
            return
        # Check that file exist
        if not self._CheckFileExistence(self.FBB_SysTopFileName_Out):
            log.error("File %s do not exists." % str(self.FBB_SysTopFileName_Out.GetValue()))
            return

        NIndex = pnps.NodeIndexing()
        NIndex.ReadFromFile(str(self.FBB_SysTopFileName_Out.GetValue()))

        Mask = [pnps.NodeIndexing.Ion0, pnps.NodeIndexing.Ion1]
        for i in range(3):
            field = NIndex.GetHaField3D(pnps.NodeIndexing.DiffConst, Mask[i])
            Name = "Plain Diffusion; Ion%d (%s , %s)" % (
                i, str(self.FBB_SysTopFileName_Out.GetValue()), self.pmset.GetName())
            field.SetName(Name)
            field.thisown = 0
            PlaneV = molset.PlaneViewOfHaField3D(field, Name, 1)
            PlaneV.SetHideZeroValues(1)
            PlaneV.thisown = 0

            self.pmset.AddObject3D(PlaneV)
            self.pmset.RefreshAllViews(molset.RFRefresh)

            molset.CreatewxFieldPlaneView(PlaneV, self.pmset, Name, 1)
        MolSet_RefreshAllViews(self.pmset)
        del NIndex

    def OnViewDiff(self, _):
        if molset is None or pnps is None or self.pmset is None:
            log.error("Can only do it in Harlem.")
            return
        # Check that this panel should do it
        if self.Btn_ViewDiff is None or self.FBB_DiffFileName_Out is None:
            log.error("This panel can not show it.")
            return
        # Check that file exist
        if not self._CheckFileExistence(self.FBB_DiffFileName_Out):
            log.error("File %s do not exists." % str(self.FBB_DiffFileName_Out.GetValue()))
            return

        ShowVectorField3D(str(self.FBB_DiffFileName_Out.GetValue()), self.pmset, "Diffusion")

    def OnViewPot(self, _):
        if molset is None or pnps is None or self.pmset is None:
            log.error("Can only do it in Harlem.")
            return
        # Check that this panel should do it
        if self.Btn_ViewPot is None or self.FBB_PotFileName_Out is None:
            log.error("This panel can not show it.")
            return
        # Check that file exist
        if not self._CheckFileExistence(self.FBB_PotFileName_Out):
            log.error("File %s do not exists." % str(self.FBB_PotFileName_Out.GetValue()))
            return

        ShowVectorField3D(str(self.FBB_PotFileName_Out.GetValue()), self.pmset, "Potential")

    def OnViewConc(self, _):
        if molset is None or pnps is None or self.pmset is None:
            log.error("Can only do it in Harlem.")
            return
        # Check that this panel should do it
        if self.Btn_ViewConc is None or self.FBB_ConcFileName_Out is None:
            log.error("This panel can not show it.")
            return
        # Check that file exist
        if not self._CheckFileExistence(self.FBB_ConcFileName_Out):
            log.error("File %s do not exists." % str(self.FBB_ConcFileName_Out.GetValue()))
            return

        ShowVectorField3D(str(self.FBB_ConcFileName_Out.GetValue()), self.pmset, "Concentration")
