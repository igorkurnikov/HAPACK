# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _molsetc
else:
    import _molsetc

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _molsetc.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _molsetc.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _molsetc.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _molsetc.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _molsetc.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _molsetc.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _molsetc.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _molsetc.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _molsetc.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _molsetc.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _molsetc.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _molsetc.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _molsetc.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _molsetc.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _molsetc.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _molsetc.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _molsetc:
_molsetc.SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _molsetc.ios_base_erase_event
    imbue_event = _molsetc.ios_base_imbue_event
    copyfmt_event = _molsetc.ios_base_copyfmt_event

    def register_callback(self, __fn: "std::ios_base::event_callback", __index: "int") -> "void":
        return _molsetc.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args) -> "std::ios_base::fmtflags":
        return _molsetc.ios_base_flags(self, *args)

    def setf(self, *args) -> "std::ios_base::fmtflags":
        return _molsetc.ios_base_setf(self, *args)

    def unsetf(self, __mask: "std::ios_base::fmtflags") -> "void":
        return _molsetc.ios_base_unsetf(self, __mask)

    def precision(self, *args) -> "std::streamsize":
        return _molsetc.ios_base_precision(self, *args)

    def width(self, *args) -> "std::streamsize":
        return _molsetc.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync: "bool"=True) -> "bool":
        return _molsetc.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc: "std::locale const &") -> "std::locale":
        return _molsetc.ios_base_imbue(self, __loc)

    def getloc(self) -> "std::locale":
        return _molsetc.ios_base_getloc(self)

    @staticmethod
    def xalloc() -> "int":
        return _molsetc.ios_base_xalloc()

    def iword(self, __ix: "int") -> "long &":
        return _molsetc.ios_base_iword(self, __ix)

    def pword(self, __ix: "int") -> "void *&":
        return _molsetc.ios_base_pword(self, __ix)
    __swig_destroy__ = _molsetc.delete_ios_base

# Register ios_base in _molsetc:
_molsetc.ios_base_swigregister(ios_base)
cvar = _molsetc.cvar
ios_base.boolalpha = _molsetc.cvar.ios_base_boolalpha
ios_base.dec = _molsetc.cvar.ios_base_dec
ios_base.fixed = _molsetc.cvar.ios_base_fixed
ios_base.hex = _molsetc.cvar.ios_base_hex
ios_base.internal = _molsetc.cvar.ios_base_internal
ios_base.left = _molsetc.cvar.ios_base_left
ios_base.oct = _molsetc.cvar.ios_base_oct
ios_base.right = _molsetc.cvar.ios_base_right
ios_base.scientific = _molsetc.cvar.ios_base_scientific
ios_base.showbase = _molsetc.cvar.ios_base_showbase
ios_base.showpoint = _molsetc.cvar.ios_base_showpoint
ios_base.showpos = _molsetc.cvar.ios_base_showpos
ios_base.skipws = _molsetc.cvar.ios_base_skipws
ios_base.unitbuf = _molsetc.cvar.ios_base_unitbuf
ios_base.uppercase = _molsetc.cvar.ios_base_uppercase
ios_base.adjustfield = _molsetc.cvar.ios_base_adjustfield
ios_base.basefield = _molsetc.cvar.ios_base_basefield
ios_base.floatfield = _molsetc.cvar.ios_base_floatfield
ios_base.badbit = _molsetc.cvar.ios_base_badbit
ios_base.eofbit = _molsetc.cvar.ios_base_eofbit
ios_base.failbit = _molsetc.cvar.ios_base_failbit
ios_base.goodbit = _molsetc.cvar.ios_base_goodbit
ios_base.app = _molsetc.cvar.ios_base_app
ios_base.ate = _molsetc.cvar.ios_base_ate
ios_base.binary = _molsetc.cvar.ios_base_binary
ios_base.ios_base_in = _molsetc.cvar.ios_base_ios_base_in
ios_base.out = _molsetc.cvar.ios_base_out
ios_base.trunc = _molsetc.cvar.ios_base_trunc
ios_base.beg = _molsetc.cvar.ios_base_beg
ios_base.cur = _molsetc.cvar.ios_base_cur
ios_base.end = _molsetc.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync: "bool"=True) -> "bool":
    return _molsetc.ios_base_sync_with_stdio(__sync)

def ios_base_xalloc() -> "int":
    return _molsetc.ios_base_xalloc()

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self) -> "std::ios_base::iostate":
        return _molsetc.ios_rdstate(self)

    def clear(self, *args) -> "void":
        return _molsetc.ios_clear(self, *args)

    def setstate(self, __state: "std::ios_base::iostate") -> "void":
        return _molsetc.ios_setstate(self, __state)

    def good(self) -> "bool":
        return _molsetc.ios_good(self)

    def eof(self) -> "bool":
        return _molsetc.ios_eof(self)

    def fail(self) -> "bool":
        return _molsetc.ios_fail(self)

    def bad(self) -> "bool":
        return _molsetc.ios_bad(self)

    def exceptions(self, *args) -> "void":
        return _molsetc.ios_exceptions(self, *args)

    def __init__(self, __sb: "std::basic_streambuf< char,std::char_traits< char > > *"):
        _molsetc.ios_swiginit(self, _molsetc.new_ios(__sb))
    __swig_destroy__ = _molsetc.delete_ios

    def tie(self, *args) -> "std::basic_ostream< char,std::char_traits< char > > *":
        return _molsetc.ios_tie(self, *args)

    def rdbuf(self, *args) -> "std::basic_streambuf< char,std::char_traits< char > > *":
        return _molsetc.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs: "ios") -> "std::basic_ios< char > &":
        return _molsetc.ios_copyfmt(self, __rhs)

    def fill(self, *args) -> "std::basic_ios< char >::char_type":
        return _molsetc.ios_fill(self, *args)

    def imbue(self, __loc: "std::locale const &") -> "std::locale":
        return _molsetc.ios_imbue(self, __loc)

    def narrow(self, __c: "std::basic_ios< char >::char_type", __dfault: "char") -> "char":
        return _molsetc.ios_narrow(self, __c, __dfault)

    def widen(self, __c: "char") -> "std::basic_ios< char >::char_type":
        return _molsetc.ios_widen(self, __c)

# Register ios in _molsetc:
_molsetc.ios_swigregister(ios)

class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb: "std::basic_streambuf< char,std::char_traits< char > > *"):
        _molsetc.ostream_swiginit(self, _molsetc.new_ostream(__sb))
    __swig_destroy__ = _molsetc.delete_ostream

    def __lshift__(self, *args) -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _molsetc.ostream___lshift__(self, *args)

    def put(self, __c: "std::basic_ostream< char >::char_type") -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _molsetc.ostream_put(self, __c)

    def write(self, __s: "std::basic_ostream< char >::char_type const *", __n: "std::streamsize") -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _molsetc.ostream_write(self, __s, __n)

    def flush(self) -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _molsetc.ostream_flush(self)

    def tellp(self) -> "std::basic_ostream< char >::pos_type":
        return _molsetc.ostream_tellp(self)

    def seekp(self, *args) -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _molsetc.ostream_seekp(self, *args)

# Register ostream in _molsetc:
_molsetc.ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb: "std::basic_streambuf< char,std::char_traits< char > > *"):
        _molsetc.istream_swiginit(self, _molsetc.new_istream(__sb))
    __swig_destroy__ = _molsetc.delete_istream

    def __rshift__(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _molsetc.istream___rshift__(self, *args)

    def gcount(self) -> "std::streamsize":
        return _molsetc.istream_gcount(self)

    def get(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _molsetc.istream_get(self, *args)

    def getline(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _molsetc.istream_getline(self, *args)

    def ignore(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _molsetc.istream_ignore(self, *args)

    def peek(self) -> "std::basic_istream< char >::int_type":
        return _molsetc.istream_peek(self)

    def read(self, __s: "std::basic_istream< char >::char_type *", __n: "std::streamsize") -> "std::basic_istream< char,std::char_traits< char > > &":
        return _molsetc.istream_read(self, __s, __n)

    def readsome(self, __s: "std::basic_istream< char >::char_type *", __n: "std::streamsize") -> "std::streamsize":
        return _molsetc.istream_readsome(self, __s, __n)

    def putback(self, __c: "std::basic_istream< char >::char_type") -> "std::basic_istream< char,std::char_traits< char > > &":
        return _molsetc.istream_putback(self, __c)

    def unget(self) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _molsetc.istream_unget(self)

    def sync(self) -> "int":
        return _molsetc.istream_sync(self)

    def tellg(self) -> "std::basic_istream< char >::pos_type":
        return _molsetc.istream_tellg(self)

    def seekg(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _molsetc.istream_seekg(self, *args)

# Register istream in _molsetc:
_molsetc.istream_swigregister(istream)

class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb: "std::basic_streambuf< char,std::char_traits< char > > *"):
        _molsetc.iostream_swiginit(self, _molsetc.new_iostream(__sb))
    __swig_destroy__ = _molsetc.delete_iostream

# Register iostream in _molsetc:
_molsetc.iostream_swigregister(iostream)

endl_cb_ptr = _molsetc.endl_cb_ptr
endl = _molsetc.endl
ends_cb_ptr = _molsetc.ends_cb_ptr
ends = _molsetc.ends
flush_cb_ptr = _molsetc.flush_cb_ptr
flush = _molsetc.flush
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _molsetc.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _molsetc.StringVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _molsetc.StringVector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _molsetc.StringVector___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _molsetc.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _molsetc.StringVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _molsetc.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _molsetc.StringVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _molsetc.StringVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _molsetc.StringVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _molsetc.StringVector_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _molsetc.StringVector_append(self, x)

    def empty(self) -> "bool":
        return _molsetc.StringVector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _molsetc.StringVector_size(self)

    def swap(self, v: "StringVector") -> "void":
        return _molsetc.StringVector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _molsetc.StringVector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _molsetc.StringVector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _molsetc.StringVector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _molsetc.StringVector_rend(self)

    def clear(self) -> "void":
        return _molsetc.StringVector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _molsetc.StringVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _molsetc.StringVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _molsetc.StringVector_erase(self, *args)

    def __init__(self, *args):
        _molsetc.StringVector_swiginit(self, _molsetc.new_StringVector(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _molsetc.StringVector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _molsetc.StringVector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _molsetc.StringVector_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _molsetc.StringVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _molsetc.StringVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _molsetc.StringVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _molsetc.StringVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _molsetc.StringVector_capacity(self)
    __swig_destroy__ = _molsetc.delete_StringVector

# Register StringVector in _molsetc:
_molsetc.StringVector_swigregister(StringVector)

class AtomGroupList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _molsetc.AtomGroupList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _molsetc.AtomGroupList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _molsetc.AtomGroupList___bool__(self)

    def __len__(self) -> "std::list< AtomGroup >::size_type":
        return _molsetc.AtomGroupList___len__(self)

    def __getslice__(self, i: "std::list< AtomGroup >::difference_type", j: "std::list< AtomGroup >::difference_type") -> "std::list< AtomGroup,std::allocator< AtomGroup > > *":
        return _molsetc.AtomGroupList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _molsetc.AtomGroupList___setslice__(self, *args)

    def __delslice__(self, i: "std::list< AtomGroup >::difference_type", j: "std::list< AtomGroup >::difference_type") -> "void":
        return _molsetc.AtomGroupList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _molsetc.AtomGroupList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::list< AtomGroup >::value_type const &":
        return _molsetc.AtomGroupList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _molsetc.AtomGroupList___setitem__(self, *args)

    def pop(self) -> "std::list< AtomGroup >::value_type":
        return _molsetc.AtomGroupList_pop(self)

    def append(self, x: "AtomGroup") -> "void":
        return _molsetc.AtomGroupList_append(self, x)

    def empty(self) -> "bool":
        return _molsetc.AtomGroupList_empty(self)

    def size(self) -> "std::list< AtomGroup >::size_type":
        return _molsetc.AtomGroupList_size(self)

    def swap(self, v: "AtomGroupList") -> "void":
        return _molsetc.AtomGroupList_swap(self, v)

    def begin(self) -> "std::list< AtomGroup >::iterator":
        return _molsetc.AtomGroupList_begin(self)

    def end(self) -> "std::list< AtomGroup >::iterator":
        return _molsetc.AtomGroupList_end(self)

    def rbegin(self) -> "std::list< AtomGroup >::reverse_iterator":
        return _molsetc.AtomGroupList_rbegin(self)

    def rend(self) -> "std::list< AtomGroup >::reverse_iterator":
        return _molsetc.AtomGroupList_rend(self)

    def clear(self) -> "void":
        return _molsetc.AtomGroupList_clear(self)

    def get_allocator(self) -> "std::list< AtomGroup >::allocator_type":
        return _molsetc.AtomGroupList_get_allocator(self)

    def pop_back(self) -> "void":
        return _molsetc.AtomGroupList_pop_back(self)

    def erase(self, *args) -> "std::list< AtomGroup >::iterator":
        return _molsetc.AtomGroupList_erase(self, *args)

    def __init__(self, *args):
        _molsetc.AtomGroupList_swiginit(self, _molsetc.new_AtomGroupList(*args))

    def push_back(self, x: "AtomGroup") -> "void":
        return _molsetc.AtomGroupList_push_back(self, x)

    def front(self) -> "std::list< AtomGroup >::value_type const &":
        return _molsetc.AtomGroupList_front(self)

    def back(self) -> "std::list< AtomGroup >::value_type const &":
        return _molsetc.AtomGroupList_back(self)

    def assign(self, n: "std::list< AtomGroup >::size_type", x: "AtomGroup") -> "void":
        return _molsetc.AtomGroupList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _molsetc.AtomGroupList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _molsetc.AtomGroupList_insert(self, *args)

    def pop_front(self) -> "void":
        return _molsetc.AtomGroupList_pop_front(self)

    def push_front(self, x: "AtomGroup") -> "void":
        return _molsetc.AtomGroupList_push_front(self, x)

    def reverse(self) -> "void":
        return _molsetc.AtomGroupList_reverse(self)
    __swig_destroy__ = _molsetc.delete_AtomGroupList

# Register AtomGroupList in _molsetc:
_molsetc.AtomGroupList_swigregister(AtomGroupList)

class HaAtomVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _molsetc.HaAtomVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _molsetc.HaAtomVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _molsetc.HaAtomVector___bool__(self)

    def __len__(self) -> "std::vector< HaAtom * >::size_type":
        return _molsetc.HaAtomVector___len__(self)

    def __getslice__(self, i: "std::vector< HaAtom * >::difference_type", j: "std::vector< HaAtom * >::difference_type") -> "std::vector< HaAtom *,std::allocator< HaAtom * > > *":
        return _molsetc.HaAtomVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _molsetc.HaAtomVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< HaAtom * >::difference_type", j: "std::vector< HaAtom * >::difference_type") -> "void":
        return _molsetc.HaAtomVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _molsetc.HaAtomVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< HaAtom * >::value_type":
        return _molsetc.HaAtomVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _molsetc.HaAtomVector___setitem__(self, *args)

    def pop(self) -> "std::vector< HaAtom * >::value_type":
        return _molsetc.HaAtomVector_pop(self)

    def append(self, x: "HaAtom") -> "void":
        return _molsetc.HaAtomVector_append(self, x)

    def empty(self) -> "bool":
        return _molsetc.HaAtomVector_empty(self)

    def size(self) -> "std::vector< HaAtom * >::size_type":
        return _molsetc.HaAtomVector_size(self)

    def swap(self, v: "HaAtomVector") -> "void":
        return _molsetc.HaAtomVector_swap(self, v)

    def begin(self) -> "std::vector< HaAtom * >::iterator":
        return _molsetc.HaAtomVector_begin(self)

    def end(self) -> "std::vector< HaAtom * >::iterator":
        return _molsetc.HaAtomVector_end(self)

    def rbegin(self) -> "std::vector< HaAtom * >::reverse_iterator":
        return _molsetc.HaAtomVector_rbegin(self)

    def rend(self) -> "std::vector< HaAtom * >::reverse_iterator":
        return _molsetc.HaAtomVector_rend(self)

    def clear(self) -> "void":
        return _molsetc.HaAtomVector_clear(self)

    def get_allocator(self) -> "std::vector< HaAtom * >::allocator_type":
        return _molsetc.HaAtomVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _molsetc.HaAtomVector_pop_back(self)

    def erase(self, *args) -> "std::vector< HaAtom * >::iterator":
        return _molsetc.HaAtomVector_erase(self, *args)

    def __init__(self, *args):
        _molsetc.HaAtomVector_swiginit(self, _molsetc.new_HaAtomVector(*args))

    def push_back(self, x: "HaAtom") -> "void":
        return _molsetc.HaAtomVector_push_back(self, x)

    def front(self) -> "std::vector< HaAtom * >::value_type":
        return _molsetc.HaAtomVector_front(self)

    def back(self) -> "std::vector< HaAtom * >::value_type":
        return _molsetc.HaAtomVector_back(self)

    def assign(self, n: "std::vector< HaAtom * >::size_type", x: "HaAtom") -> "void":
        return _molsetc.HaAtomVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _molsetc.HaAtomVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _molsetc.HaAtomVector_insert(self, *args)

    def reserve(self, n: "std::vector< HaAtom * >::size_type") -> "void":
        return _molsetc.HaAtomVector_reserve(self, n)

    def capacity(self) -> "std::vector< HaAtom * >::size_type":
        return _molsetc.HaAtomVector_capacity(self)
    __swig_destroy__ = _molsetc.delete_HaAtomVector

# Register HaAtomVector in _molsetc:
_molsetc.HaAtomVector_swigregister(HaAtomVector)

class CrdSnapshotVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _molsetc.CrdSnapshotVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _molsetc.CrdSnapshotVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _molsetc.CrdSnapshotVector___bool__(self)

    def __len__(self) -> "std::vector< CrdSnapshot * >::size_type":
        return _molsetc.CrdSnapshotVector___len__(self)

    def __getslice__(self, i: "std::vector< CrdSnapshot * >::difference_type", j: "std::vector< CrdSnapshot * >::difference_type") -> "std::vector< CrdSnapshot *,std::allocator< CrdSnapshot * > > *":
        return _molsetc.CrdSnapshotVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _molsetc.CrdSnapshotVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< CrdSnapshot * >::difference_type", j: "std::vector< CrdSnapshot * >::difference_type") -> "void":
        return _molsetc.CrdSnapshotVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _molsetc.CrdSnapshotVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< CrdSnapshot * >::value_type":
        return _molsetc.CrdSnapshotVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _molsetc.CrdSnapshotVector___setitem__(self, *args)

    def pop(self) -> "std::vector< CrdSnapshot * >::value_type":
        return _molsetc.CrdSnapshotVector_pop(self)

    def append(self, x: "CrdSnapshot") -> "void":
        return _molsetc.CrdSnapshotVector_append(self, x)

    def empty(self) -> "bool":
        return _molsetc.CrdSnapshotVector_empty(self)

    def size(self) -> "std::vector< CrdSnapshot * >::size_type":
        return _molsetc.CrdSnapshotVector_size(self)

    def swap(self, v: "CrdSnapshotVector") -> "void":
        return _molsetc.CrdSnapshotVector_swap(self, v)

    def begin(self) -> "std::vector< CrdSnapshot * >::iterator":
        return _molsetc.CrdSnapshotVector_begin(self)

    def end(self) -> "std::vector< CrdSnapshot * >::iterator":
        return _molsetc.CrdSnapshotVector_end(self)

    def rbegin(self) -> "std::vector< CrdSnapshot * >::reverse_iterator":
        return _molsetc.CrdSnapshotVector_rbegin(self)

    def rend(self) -> "std::vector< CrdSnapshot * >::reverse_iterator":
        return _molsetc.CrdSnapshotVector_rend(self)

    def clear(self) -> "void":
        return _molsetc.CrdSnapshotVector_clear(self)

    def get_allocator(self) -> "std::vector< CrdSnapshot * >::allocator_type":
        return _molsetc.CrdSnapshotVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _molsetc.CrdSnapshotVector_pop_back(self)

    def erase(self, *args) -> "std::vector< CrdSnapshot * >::iterator":
        return _molsetc.CrdSnapshotVector_erase(self, *args)

    def __init__(self, *args):
        _molsetc.CrdSnapshotVector_swiginit(self, _molsetc.new_CrdSnapshotVector(*args))

    def push_back(self, x: "CrdSnapshot") -> "void":
        return _molsetc.CrdSnapshotVector_push_back(self, x)

    def front(self) -> "std::vector< CrdSnapshot * >::value_type":
        return _molsetc.CrdSnapshotVector_front(self)

    def back(self) -> "std::vector< CrdSnapshot * >::value_type":
        return _molsetc.CrdSnapshotVector_back(self)

    def assign(self, n: "std::vector< CrdSnapshot * >::size_type", x: "CrdSnapshot") -> "void":
        return _molsetc.CrdSnapshotVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _molsetc.CrdSnapshotVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _molsetc.CrdSnapshotVector_insert(self, *args)

    def reserve(self, n: "std::vector< CrdSnapshot * >::size_type") -> "void":
        return _molsetc.CrdSnapshotVector_reserve(self, n)

    def capacity(self) -> "std::vector< CrdSnapshot * >::size_type":
        return _molsetc.CrdSnapshotVector_capacity(self)
    __swig_destroy__ = _molsetc.delete_CrdSnapshotVector

# Register CrdSnapshotVector in _molsetc:
_molsetc.CrdSnapshotVector_swigregister(CrdSnapshotVector)

class AtomIntMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _molsetc.AtomIntMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _molsetc.AtomIntMap___nonzero__(self)

    def __bool__(self) -> "bool":
        return _molsetc.AtomIntMap___bool__(self)

    def __len__(self) -> "std::map< HaAtom *,int,less< HaAtom * > >::size_type":
        return _molsetc.AtomIntMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "HaAtom") -> "std::map< HaAtom *,int,less< HaAtom * > >::mapped_type const &":
        return _molsetc.AtomIntMap___getitem__(self, key)

    def __delitem__(self, key: "HaAtom") -> "void":
        return _molsetc.AtomIntMap___delitem__(self, key)

    def has_key(self, key: "HaAtom") -> "bool":
        return _molsetc.AtomIntMap_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _molsetc.AtomIntMap_keys(self)

    def values(self) -> "PyObject *":
        return _molsetc.AtomIntMap_values(self)

    def items(self) -> "PyObject *":
        return _molsetc.AtomIntMap_items(self)

    def __contains__(self, key: "HaAtom") -> "bool":
        return _molsetc.AtomIntMap___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _molsetc.AtomIntMap_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _molsetc.AtomIntMap_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _molsetc.AtomIntMap___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _molsetc.AtomIntMap_asdict(self)

    def __init__(self, *args):
        _molsetc.AtomIntMap_swiginit(self, _molsetc.new_AtomIntMap(*args))

    def empty(self) -> "bool":
        return _molsetc.AtomIntMap_empty(self)

    def size(self) -> "std::map< HaAtom *,int,less< HaAtom * > >::size_type":
        return _molsetc.AtomIntMap_size(self)

    def swap(self, v: "AtomIntMap") -> "void":
        return _molsetc.AtomIntMap_swap(self, v)

    def begin(self) -> "std::map< HaAtom *,int,less< HaAtom * > >::iterator":
        return _molsetc.AtomIntMap_begin(self)

    def end(self) -> "std::map< HaAtom *,int,less< HaAtom * > >::iterator":
        return _molsetc.AtomIntMap_end(self)

    def rbegin(self) -> "std::map< HaAtom *,int,less< HaAtom * > >::reverse_iterator":
        return _molsetc.AtomIntMap_rbegin(self)

    def rend(self) -> "std::map< HaAtom *,int,less< HaAtom * > >::reverse_iterator":
        return _molsetc.AtomIntMap_rend(self)

    def clear(self) -> "void":
        return _molsetc.AtomIntMap_clear(self)

    def get_allocator(self) -> "std::map< HaAtom *,int,less< HaAtom * > >::allocator_type":
        return _molsetc.AtomIntMap_get_allocator(self)

    def count(self, x: "HaAtom") -> "std::map< HaAtom *,int,less< HaAtom * > >::size_type":
        return _molsetc.AtomIntMap_count(self, x)

    def erase(self, *args) -> "void":
        return _molsetc.AtomIntMap_erase(self, *args)

    def find(self, x: "HaAtom") -> "std::map< HaAtom *,int,less< HaAtom * > >::iterator":
        return _molsetc.AtomIntMap_find(self, x)

    def lower_bound(self, x: "HaAtom") -> "std::map< HaAtom *,int,less< HaAtom * > >::iterator":
        return _molsetc.AtomIntMap_lower_bound(self, x)

    def upper_bound(self, x: "HaAtom") -> "std::map< HaAtom *,int,less< HaAtom * > >::iterator":
        return _molsetc.AtomIntMap_upper_bound(self, x)
    __swig_destroy__ = _molsetc.delete_AtomIntMap

# Register AtomIntMap in _molsetc:
_molsetc.AtomIntMap_swigregister(AtomIntMap)

class intp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.intp_swiginit(self, _molsetc.new_intp())
    __swig_destroy__ = _molsetc.delete_intp

    def assign(self, value: "int") -> "void":
        return _molsetc.intp_assign(self, value)

    def value(self) -> "int":
        return _molsetc.intp_value(self)

    def cast(self) -> "int *":
        return _molsetc.intp_cast(self)

    @staticmethod
    def frompointer(t: "int *") -> "intp *":
        return _molsetc.intp_frompointer(t)

# Register intp in _molsetc:
_molsetc.intp_swigregister(intp)

def intp_frompointer(t: "int *") -> "intp *":
    return _molsetc.intp_frompointer(t)

class doublep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.doublep_swiginit(self, _molsetc.new_doublep())
    __swig_destroy__ = _molsetc.delete_doublep

    def assign(self, value: "double") -> "void":
        return _molsetc.doublep_assign(self, value)

    def value(self) -> "double":
        return _molsetc.doublep_value(self)

    def cast(self) -> "double *":
        return _molsetc.doublep_cast(self)

    @staticmethod
    def frompointer(t: "double *") -> "doublep *":
        return _molsetc.doublep_frompointer(t)

# Register doublep in _molsetc:
_molsetc.doublep_swigregister(doublep)

def doublep_frompointer(t: "double *") -> "doublep *":
    return _molsetc.doublep_frompointer(t)


def intp_to_voidp(x: "int *") -> "void *":
    return _molsetc.intp_to_voidp(x)

def voidp_to_intp(x: "void *") -> "int *":
    return _molsetc.voidp_to_intp(x)

def PredAbsOrd(x: "int") -> "int":
    return _molsetc.PredAbsOrd(x)

def PredAbsChr(x: "int") -> "int":
    return _molsetc.PredAbsChr(x)
class Branch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    set = property(_molsetc.Branch_set_get, _molsetc.Branch_set_set)
    ptr = property(_molsetc.Branch_ptr_get, _molsetc.Branch_ptr_set)
    limit = property(_molsetc.Branch_limit_get, _molsetc.Branch_limit_set)
    val = property(_molsetc.Branch_val_get, _molsetc.Branch_val_set)
    dval = property(_molsetc.Branch_dval_get, _molsetc.Branch_dval_set)

    def __init__(self):
        _molsetc.Branch_swiginit(self, _molsetc.new_Branch())
    __swig_destroy__ = _molsetc.delete_Branch

# Register Branch in _molsetc:
_molsetc.Branch_swigregister(Branch)
OpAnd = cvar.OpAnd
OpOr = cvar.OpOr
OpNot = cvar.OpNot
OpEqual = cvar.OpEqual
OpNotEq = cvar.OpNotEq
OpLess = cvar.OpLess
OpMore = cvar.OpMore
OpLessEq = cvar.OpLessEq
OpMoreEq = cvar.OpMoreEq
OpConst = cvar.OpConst
OpWithin = cvar.OpWithin
OpMember = cvar.OpMember
OpLftProp = cvar.OpLftProp
OpLftVal = cvar.OpLftVal
OpRgtProp = cvar.OpRgtProp
OpRgtVal = cvar.OpRgtVal
PropIdent = cvar.PropIdent
PropXCord = cvar.PropXCord
PropYCord = cvar.PropYCord
PropZCord = cvar.PropZCord
PropTemp = cvar.PropTemp
PropRad = cvar.PropRad
PropResId = cvar.PropResId
PropName = cvar.PropName
PropChain = cvar.PropChain
PropResName = cvar.PropResName
PropSelect = cvar.PropSelect
PropElemNo = cvar.PropElemNo
PropModel = cvar.PropModel
PropChemGroup = cvar.PropChemGroup
PropMolPtr = cvar.PropMolPtr
PropAtGroup = cvar.PropAtGroup
PredAlpha = cvar.PredAlpha
PredAmino = cvar.PredAmino
PredAT = cvar.PredAT
PredBonded = cvar.PredBonded
PredCG = cvar.PredCG
PredCystine = cvar.PredCystine
PredDNA = cvar.PredDNA
PredHelix = cvar.PredHelix
PredHetero = cvar.PredHetero
PredHydrogen = cvar.PredHydrogen
PredIon = cvar.PredIon
PredLigand = cvar.PredLigand
PredMainChain = cvar.PredMainChain
PredNucleic = cvar.PredNucleic
PredProtein = cvar.PredProtein
PredPurine = cvar.PredPurine
PredPyrimidine = cvar.PredPyrimidine
PredRNA = cvar.PredRNA
PredSelected = cvar.PredSelected
PredSheet = cvar.PredSheet
PredSidechain = cvar.PredSidechain
PredSolvent = cvar.PredSolvent
PredTurn = cvar.PredTurn
PredWater = cvar.PredWater
PredAcidic = cvar.PredAcidic
PredAcyclic = cvar.PredAcyclic
PredAliphatic = cvar.PredAliphatic
PredAromatic = cvar.PredAromatic
PredBasic = cvar.PredBasic
PredBuried = cvar.PredBuried
PredCharged = cvar.PredCharged
PredCyclic = cvar.PredCyclic
PredHydrophobic = cvar.PredHydrophobic
PredLarge = cvar.PredLarge
PredMedium = cvar.PredMedium
PredNeutral = cvar.PredNeutral
PredPolar = cvar.PredPolar
PredSmall = cvar.PredSmall
PredSurface = cvar.PredSurface

class AtomExpr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.AtomExpr_swiginit(self, _molsetc.new_AtomExpr(*args))
    __swig_destroy__ = _molsetc.delete_AtomExpr
    type = property(_molsetc.AtomExpr_type_get, _molsetc.AtomExpr_type_set)
    rgt = property(_molsetc.AtomExpr_rgt_get, _molsetc.AtomExpr_rgt_set)
    lft = property(_molsetc.AtomExpr_lft_get, _molsetc.AtomExpr_lft_set)

    def EvaluateExprFor(self, aptr: "HaAtom") -> "long":
        return _molsetc.AtomExpr_EvaluateExprFor(self, aptr)

    def EvaluateProperty(self, prop: "long") -> "long":
        return _molsetc.AtomExpr_EvaluateProperty(self, prop)

    @staticmethod
    def LookUpAtGroupExpr(grp_name: "char const *", pmset: "MolSet") -> "AtomExpr *":
        return _molsetc.AtomExpr_LookUpAtGroupExpr(grp_name, pmset)

    @staticmethod
    def LookUpElement(arg1: "char const *") -> "AtomExpr *":
        return _molsetc.AtomExpr_LookUpElement(arg1)

    @staticmethod
    def ParsePrimitiveExpr(pmset: "MolSet", expr_str: "char const *", cr_pos: "size_t &") -> "AtomExpr *":
        return _molsetc.AtomExpr_ParsePrimitiveExpr(pmset, expr_str, cr_pos)

    @staticmethod
    def ParseExpression(expr_str: "std::string const &", pmset: "MolSet") -> "AtomExpr *":
        return _molsetc.AtomExpr_ParseExpression(expr_str, pmset)

    @staticmethod
    def CreateTrueExpr() -> "AtomExpr *":
        return _molsetc.AtomExpr_CreateTrueExpr()

    @staticmethod
    def CreateFalseExpr() -> "AtomExpr *":
        return _molsetc.AtomExpr_CreateFalseExpr()

    @staticmethod
    def IsTrueExpr(p_expr: "AtomExpr") -> "bool":
        return _molsetc.AtomExpr_IsTrueExpr(p_expr)

    @staticmethod
    def IsFalseExpr(p_expr: "AtomExpr") -> "bool":
        return _molsetc.AtomExpr_IsFalseExpr(p_expr)

# Register AtomExpr in _molsetc:
_molsetc.AtomExpr_swigregister(AtomExpr)

def AtomExpr_LookUpAtGroupExpr(grp_name: "char const *", pmset: "MolSet") -> "AtomExpr *":
    return _molsetc.AtomExpr_LookUpAtGroupExpr(grp_name, pmset)

def AtomExpr_LookUpElement(arg1: "char const *") -> "AtomExpr *":
    return _molsetc.AtomExpr_LookUpElement(arg1)

def AtomExpr_ParsePrimitiveExpr(pmset: "MolSet", expr_str: "char const *", cr_pos: "size_t &") -> "AtomExpr *":
    return _molsetc.AtomExpr_ParsePrimitiveExpr(pmset, expr_str, cr_pos)

def AtomExpr_ParseExpression(expr_str: "std::string const &", pmset: "MolSet") -> "AtomExpr *":
    return _molsetc.AtomExpr_ParseExpression(expr_str, pmset)

def AtomExpr_CreateTrueExpr() -> "AtomExpr *":
    return _molsetc.AtomExpr_CreateTrueExpr()

def AtomExpr_CreateFalseExpr() -> "AtomExpr *":
    return _molsetc.AtomExpr_CreateFalseExpr()

def AtomExpr_IsTrueExpr(p_expr: "AtomExpr") -> "bool":
    return _molsetc.AtomExpr_IsTrueExpr(p_expr)

def AtomExpr_IsFalseExpr(p_expr: "AtomExpr") -> "bool":
    return _molsetc.AtomExpr_IsFalseExpr(p_expr)

TRUE = _molsetc.TRUE
FALSE = _molsetc.FALSE
TNT_BASE_OFFSET = _molsetc.TNT_BASE_OFFSET
RUN_FOREGROUND = _molsetc.RUN_FOREGROUND
RUN_BACKGROUND = _molsetc.RUN_BACKGROUND
class dirent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    d_name = property(_molsetc.dirent_d_name_get, _molsetc.dirent_d_name_set)

    def __init__(self):
        _molsetc.dirent_swiginit(self, _molsetc.new_dirent())
    __swig_destroy__ = _molsetc.delete_dirent

# Register dirent in _molsetc:
_molsetc.dirent_swigregister(dirent)
SelectRad = cvar.SelectRad
PI = cvar.PI
BOHR_TO_ANG = cvar.BOHR_TO_ANG
ANG_TO_BOHR = cvar.ANG_TO_BOHR
HARTREE_TO_EV = cvar.HARTREE_TO_EV
HARTREE_TO_KT = cvar.HARTREE_TO_KT
KT_TO_KJ_PER_MOL = cvar.KT_TO_KJ_PER_MOL
HARTREE_TO_JOULES = cvar.HARTREE_TO_JOULES
AU_TO_KG = cvar.AU_TO_KG
EV_TO_KT = cvar.EV_TO_KT
AVOG_NUM = cvar.AVOG_NUM
CAL_TO_JOULES = cvar.CAL_TO_JOULES
PLANCK = cvar.PLANCK
LIGHT_SPEED_CM = cvar.LIGHT_SPEED_CM
BOLTZ = cvar.BOLTZ
R_HALF_KCAL = cvar.R_HALF_KCAL
HARTREE_TO_KCAL = cvar.HARTREE_TO_KCAL
KT_300_KCAL = cvar.KT_300_KCAL
RAD_TO_DEG = cvar.RAD_TO_DEG
DEG_TO_RAD = cvar.DEG_TO_RAD
EL_ANG_TO_DEBYE = cvar.EL_ANG_TO_DEBYE
AU_TO_DEBYE = cvar.AU_TO_DEBYE
ItemCount = cvar.ItemCount
AdvPickAtom = cvar.AdvPickAtom
AdvPickNumber = cvar.AdvPickNumber
AdvSelectCount = cvar.AdvSelectCount
AdvName = cvar.AdvName
AdvIdent = cvar.AdvIdent
AdvClass = cvar.AdvClass
AdvImage = cvar.AdvImage
AdvPickCoord = cvar.AdvPickCoord


def opendir(arg1: "char const *") -> "DIR *":
    return _molsetc.opendir(arg1)

def closedir(arg1: "DIR *") -> "int":
    return _molsetc.closedir(arg1)

def readdir(arg1: "DIR *") -> "dirent *":
    return _molsetc.readdir(arg1)

def rewinddir(arg1: "DIR *") -> "void":
    return _molsetc.rewinddir(arg1)

def ErrorMessage(str: "char const *") -> "int":
    return _molsetc.ErrorMessage(str)

def PrintMessage(str: "char const *") -> "int":
    return _molsetc.PrintMessage(str)

def ha_copy_file(src: "char const *", tgt: "char const *", mode: "int const"=0) -> "int":
    return _molsetc.ha_copy_file(src, tgt, mode)

def ha_delete_file(fname: "char const *") -> "int":
    return _molsetc.ha_delete_file(fname)

def RedirectIOToFile(fname: "char const *") -> "int":
    return _molsetc.RedirectIOToFile(fname)

def RedirectIOToMultipleFilesMPI(fname: "char const *") -> "int":
    return _molsetc.RedirectIOToMultipleFilesMPI(fname)

def write_log_(str: "char const *", n: "int") -> "void":
    return _molsetc.write_log_(str, n)

def RestoreIOToConsole() -> "int":
    return _molsetc.RestoreIOToConsole()

def PrintLog(*args) -> "int":
    return _molsetc.PrintLog(*args)

def ErrorInMod(module: "char const *", msg: "char const *") -> "int":
    return _molsetc.ErrorInMod(module, msg)
class IntIntMap_parent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clear(self) -> "void":
        return _molsetc.IntIntMap_parent_clear(self)

    def count(self, ikey: "int") -> "int":
        return _molsetc.IntIntMap_parent_count(self, ikey)

    def size(self) -> "int":
        return _molsetc.IntIntMap_parent_size(self)

    def empty(self) -> "bool":
        return _molsetc.IntIntMap_parent_empty(self)

    def __init__(self):
        _molsetc.IntIntMap_parent_swiginit(self, _molsetc.new_IntIntMap_parent())
    __swig_destroy__ = _molsetc.delete_IntIntMap_parent

# Register IntIntMap_parent in _molsetc:
_molsetc.IntIntMap_parent_swigregister(IntIntMap_parent)
path_sep = cvar.path_sep
FLOAT_E16_8 = cvar.FLOAT_E16_8
FLOAT_F12_7 = cvar.FLOAT_F12_7
FLOAT_F15_7 = cvar.FLOAT_F15_7
FLOAT_F8_3 = cvar.FLOAT_F8_3

class IntPtrMap_parent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clear(self) -> "void":
        return _molsetc.IntPtrMap_parent_clear(self)

    def count(self, ikey: "int") -> "int":
        return _molsetc.IntPtrMap_parent_count(self, ikey)

    def size(self) -> "int":
        return _molsetc.IntPtrMap_parent_size(self)

    def empty(self) -> "bool":
        return _molsetc.IntPtrMap_parent_empty(self)

    def __init__(self):
        _molsetc.IntPtrMap_parent_swiginit(self, _molsetc.new_IntPtrMap_parent())
    __swig_destroy__ = _molsetc.delete_IntPtrMap_parent

# Register IntPtrMap_parent in _molsetc:
_molsetc.IntPtrMap_parent_swigregister(IntPtrMap_parent)

class PtrIntMap_parent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clear(self) -> "void":
        return _molsetc.PtrIntMap_parent_clear(self)

    def count(self, ptr: "void *") -> "int":
        return _molsetc.PtrIntMap_parent_count(self, ptr)

    def size(self) -> "int":
        return _molsetc.PtrIntMap_parent_size(self)

    def empty(self) -> "bool":
        return _molsetc.PtrIntMap_parent_empty(self)

    def __init__(self):
        _molsetc.PtrIntMap_parent_swiginit(self, _molsetc.new_PtrIntMap_parent())
    __swig_destroy__ = _molsetc.delete_PtrIntMap_parent

# Register PtrIntMap_parent in _molsetc:
_molsetc.PtrIntMap_parent_swigregister(PtrIntMap_parent)

class PtrPtrMap_parent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clear(self) -> "void":
        return _molsetc.PtrPtrMap_parent_clear(self)

    def count(self, ptr: "void *") -> "int":
        return _molsetc.PtrPtrMap_parent_count(self, ptr)

    def size(self) -> "int":
        return _molsetc.PtrPtrMap_parent_size(self)

    def empty(self) -> "bool":
        return _molsetc.PtrPtrMap_parent_empty(self)

    def __init__(self):
        _molsetc.PtrPtrMap_parent_swiginit(self, _molsetc.new_PtrPtrMap_parent())
    __swig_destroy__ = _molsetc.delete_PtrPtrMap_parent

# Register PtrPtrMap_parent in _molsetc:
_molsetc.PtrPtrMap_parent_swigregister(PtrPtrMap_parent)

class PtrDoubleMap_parent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clear(self) -> "void":
        return _molsetc.PtrDoubleMap_parent_clear(self)

    def count(self, ptr: "void *") -> "int":
        return _molsetc.PtrDoubleMap_parent_count(self, ptr)

    def size(self) -> "int":
        return _molsetc.PtrDoubleMap_parent_size(self)

    def empty(self) -> "bool":
        return _molsetc.PtrDoubleMap_parent_empty(self)

    def __init__(self):
        _molsetc.PtrDoubleMap_parent_swiginit(self, _molsetc.new_PtrDoubleMap_parent())
    __swig_destroy__ = _molsetc.delete_PtrDoubleMap_parent

# Register PtrDoubleMap_parent in _molsetc:
_molsetc.PtrDoubleMap_parent_swigregister(PtrDoubleMap_parent)

class IntIntMap_itr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.IntIntMap_itr_swiginit(self, _molsetc.new_IntIntMap_itr(*args))

    def GetKey(self) -> "int":
        return _molsetc.IntIntMap_itr_GetKey(self)

    def GetVal(self) -> "int":
        return _molsetc.IntIntMap_itr_GetVal(self)

    def __eq__(self, ref: "IntIntMap_itr") -> "bool":
        return _molsetc.IntIntMap_itr___eq__(self, ref)

    def __ne__(self, ref: "IntIntMap_itr") -> "bool":
        return _molsetc.IntIntMap_itr___ne__(self, ref)

    def next(self) -> "IntIntMap_itr &":
        return _molsetc.IntIntMap_itr_next(self)
    __swig_destroy__ = _molsetc.delete_IntIntMap_itr

# Register IntIntMap_itr in _molsetc:
_molsetc.IntIntMap_itr_swigregister(IntIntMap_itr)

class IntIntMap(IntIntMap_parent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.IntIntMap_swiginit(self, _molsetc.new_IntIntMap())

    def begin(self) -> "IntIntMap_itr":
        return _molsetc.IntIntMap_begin(self)

    def end(self) -> "IntIntMap_itr":
        return _molsetc.IntIntMap_end(self)

    def GetVal(self, ikey: "int") -> "int":
        return _molsetc.IntIntMap_GetVal(self, ikey)

    def SetVal(self, ikey: "int", val: "int") -> "void":
        return _molsetc.IntIntMap_SetVal(self, ikey, val)
    ierr = property(_molsetc.IntIntMap_ierr_get, _molsetc.IntIntMap_ierr_set)
    __swig_destroy__ = _molsetc.delete_IntIntMap

# Register IntIntMap in _molsetc:
_molsetc.IntIntMap_swigregister(IntIntMap)

class IntPtrMap_itr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.IntPtrMap_itr_swiginit(self, _molsetc.new_IntPtrMap_itr(*args))

    def GetKey(self) -> "int":
        return _molsetc.IntPtrMap_itr_GetKey(self)

    def GetVal(self) -> "void *":
        return _molsetc.IntPtrMap_itr_GetVal(self)

    def __eq__(self, ref: "IntPtrMap_itr") -> "bool":
        return _molsetc.IntPtrMap_itr___eq__(self, ref)

    def __ne__(self, ref: "IntPtrMap_itr") -> "bool":
        return _molsetc.IntPtrMap_itr___ne__(self, ref)

    def next(self) -> "IntPtrMap_itr &":
        return _molsetc.IntPtrMap_itr_next(self)
    __swig_destroy__ = _molsetc.delete_IntPtrMap_itr

# Register IntPtrMap_itr in _molsetc:
_molsetc.IntPtrMap_itr_swigregister(IntPtrMap_itr)

class IntPtrMap(IntPtrMap_parent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.IntPtrMap_swiginit(self, _molsetc.new_IntPtrMap())

    def begin(self) -> "IntPtrMap_itr":
        return _molsetc.IntPtrMap_begin(self)

    def end(self) -> "IntPtrMap_itr":
        return _molsetc.IntPtrMap_end(self)

    def GetVal(self, ikey: "int") -> "void *":
        return _molsetc.IntPtrMap_GetVal(self, ikey)

    def SetVal(self, ikey: "int", val: "void *") -> "void":
        return _molsetc.IntPtrMap_SetVal(self, ikey, val)
    ierr = property(_molsetc.IntPtrMap_ierr_get, _molsetc.IntPtrMap_ierr_set)
    __swig_destroy__ = _molsetc.delete_IntPtrMap

# Register IntPtrMap in _molsetc:
_molsetc.IntPtrMap_swigregister(IntPtrMap)

class PtrIntMap_itr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.PtrIntMap_itr_swiginit(self, _molsetc.new_PtrIntMap_itr(*args))

    def GetKey(self) -> "void *":
        return _molsetc.PtrIntMap_itr_GetKey(self)

    def GetVal(self) -> "int":
        return _molsetc.PtrIntMap_itr_GetVal(self)

    def __eq__(self, ref: "PtrIntMap_itr") -> "bool":
        return _molsetc.PtrIntMap_itr___eq__(self, ref)

    def __ne__(self, ref: "PtrIntMap_itr") -> "bool":
        return _molsetc.PtrIntMap_itr___ne__(self, ref)

    def next(self) -> "PtrIntMap_itr &":
        return _molsetc.PtrIntMap_itr_next(self)
    __swig_destroy__ = _molsetc.delete_PtrIntMap_itr

# Register PtrIntMap_itr in _molsetc:
_molsetc.PtrIntMap_itr_swigregister(PtrIntMap_itr)

class PtrIntMap(PtrIntMap_parent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.PtrIntMap_swiginit(self, _molsetc.new_PtrIntMap())

    def begin(self) -> "PtrIntMap_itr":
        return _molsetc.PtrIntMap_begin(self)

    def end(self) -> "PtrIntMap_itr":
        return _molsetc.PtrIntMap_end(self)

    def GetVal(self, ptr: "void *") -> "int":
        return _molsetc.PtrIntMap_GetVal(self, ptr)

    def SetVal(self, ptr: "void *", val: "int") -> "void":
        return _molsetc.PtrIntMap_SetVal(self, ptr, val)
    ierr = property(_molsetc.PtrIntMap_ierr_get, _molsetc.PtrIntMap_ierr_set)
    __swig_destroy__ = _molsetc.delete_PtrIntMap

# Register PtrIntMap in _molsetc:
_molsetc.PtrIntMap_swigregister(PtrIntMap)

class PtrPtrMap_itr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.PtrPtrMap_itr_swiginit(self, _molsetc.new_PtrPtrMap_itr(*args))

    def GetKey(self) -> "void *":
        return _molsetc.PtrPtrMap_itr_GetKey(self)

    def GetVal(self) -> "void *":
        return _molsetc.PtrPtrMap_itr_GetVal(self)

    def __eq__(self, ref: "PtrPtrMap_itr") -> "bool":
        return _molsetc.PtrPtrMap_itr___eq__(self, ref)

    def __ne__(self, ref: "PtrPtrMap_itr") -> "bool":
        return _molsetc.PtrPtrMap_itr___ne__(self, ref)

    def next(self) -> "PtrPtrMap_itr &":
        return _molsetc.PtrPtrMap_itr_next(self)
    __swig_destroy__ = _molsetc.delete_PtrPtrMap_itr

# Register PtrPtrMap_itr in _molsetc:
_molsetc.PtrPtrMap_itr_swigregister(PtrPtrMap_itr)

class PtrPtrMap(PtrPtrMap_parent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.PtrPtrMap_swiginit(self, _molsetc.new_PtrPtrMap())

    def begin(self) -> "PtrPtrMap_itr":
        return _molsetc.PtrPtrMap_begin(self)

    def end(self) -> "PtrPtrMap_itr":
        return _molsetc.PtrPtrMap_end(self)

    def GetVal(self, ptr: "void *") -> "void *":
        return _molsetc.PtrPtrMap_GetVal(self, ptr)

    def SetVal(self, ptr: "void *", val: "void *") -> "void":
        return _molsetc.PtrPtrMap_SetVal(self, ptr, val)
    ierr = property(_molsetc.PtrPtrMap_ierr_get, _molsetc.PtrPtrMap_ierr_set)
    __swig_destroy__ = _molsetc.delete_PtrPtrMap

# Register PtrPtrMap in _molsetc:
_molsetc.PtrPtrMap_swigregister(PtrPtrMap)

class PtrDoubleMap_itr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.PtrDoubleMap_itr_swiginit(self, _molsetc.new_PtrDoubleMap_itr(*args))

    def GetKey(self) -> "void *":
        return _molsetc.PtrDoubleMap_itr_GetKey(self)

    def GetVal(self) -> "double":
        return _molsetc.PtrDoubleMap_itr_GetVal(self)

    def __eq__(self, ref: "PtrDoubleMap_itr") -> "bool":
        return _molsetc.PtrDoubleMap_itr___eq__(self, ref)

    def __ne__(self, ref: "PtrDoubleMap_itr") -> "bool":
        return _molsetc.PtrDoubleMap_itr___ne__(self, ref)

    def next(self) -> "PtrDoubleMap_itr &":
        return _molsetc.PtrDoubleMap_itr_next(self)
    __swig_destroy__ = _molsetc.delete_PtrDoubleMap_itr

# Register PtrDoubleMap_itr in _molsetc:
_molsetc.PtrDoubleMap_itr_swigregister(PtrDoubleMap_itr)

class PtrDoubleMap(PtrDoubleMap_parent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.PtrDoubleMap_swiginit(self, _molsetc.new_PtrDoubleMap())

    def begin(self) -> "PtrDoubleMap_itr":
        return _molsetc.PtrDoubleMap_begin(self)

    def end(self) -> "PtrDoubleMap_itr":
        return _molsetc.PtrDoubleMap_end(self)

    def GetVal(self, ptr: "void *") -> "double":
        return _molsetc.PtrDoubleMap_GetVal(self, ptr)

    def SetVal(self, ptr: "void *", val: "double") -> "void":
        return _molsetc.PtrDoubleMap_SetVal(self, ptr, val)
    ierr = property(_molsetc.PtrDoubleMap_ierr_get, _molsetc.PtrDoubleMap_ierr_set)
    __swig_destroy__ = _molsetc.delete_PtrDoubleMap

# Register PtrDoubleMap in _molsetc:
_molsetc.PtrDoubleMap_swigregister(PtrDoubleMap)

class PtrSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.PtrSet_swiginit(self, _molsetc.new_PtrSet())

    def IsMember(self, ptr: "void *const") -> "int":
        return _molsetc.PtrSet_IsMember(self, ptr)
    __swig_destroy__ = _molsetc.delete_PtrSet

# Register PtrSet in _molsetc:
_molsetc.PtrSet_swigregister(PtrSet)

class VecPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.VecPtr_swiginit(self, _molsetc.new_VecPtr(*args))

    def Delete(self, ptr_set: "PtrSet") -> "int":
        return _molsetc.VecPtr_Delete(self, ptr_set)
    __swig_destroy__ = _molsetc.delete_VecPtr

# Register VecPtr in _molsetc:
_molsetc.VecPtr_swigregister(VecPtr)


def GetDirFromFileName(fname: "std::string const &") -> "std::string":
    return _molsetc.GetDirFromFileName(fname)

def GetPrefixFromFullName(fname: "std::string const &") -> "std::string":
    return _molsetc.GetPrefixFromFullName(fname)

def GetExtFromFileName(fname: "std::string const &") -> "std::string":
    return _molsetc.GetExtFromFileName(fname)

def IsFloat(str: "std::string const &") -> "bool":
    return _molsetc.IsFloat(str)

def IsInt(str: "std::string const &") -> "bool":
    return _molsetc.IsInt(str)

def ToString(ival: "int") -> "std::string":
    return _molsetc.ToString(ival)

def ToDouble(str: "std::string") -> "double":
    return _molsetc.ToDouble(str)

def StdXMLHeader() -> "std::string":
    return _molsetc.StdXMLHeader()

def HarlemDataHeader() -> "std::string":
    return _molsetc.HarlemDataHeader()

def HarlemDataFooter() -> "std::string":
    return _molsetc.HarlemDataFooter()
class StrDoubleMap_itr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.StrDoubleMap_itr_swiginit(self, _molsetc.new_StrDoubleMap_itr(*args))

    def GetKey(self) -> "std::string":
        return _molsetc.StrDoubleMap_itr_GetKey(self)

    def GetVal(self) -> "double":
        return _molsetc.StrDoubleMap_itr_GetVal(self)

    def GetFirst(self) -> "int":
        return _molsetc.StrDoubleMap_itr_GetFirst(self)

    def GetNext(self) -> "int":
        return _molsetc.StrDoubleMap_itr_GetNext(self)
    __swig_destroy__ = _molsetc.delete_StrDoubleMap_itr

# Register StrDoubleMap_itr in _molsetc:
_molsetc.StrDoubleMap_itr_swigregister(StrDoubleMap_itr)

class StrDoubleMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clear(self) -> "void":
        return _molsetc.StrDoubleMap_clear(self)

    def size(self) -> "int":
        return _molsetc.StrDoubleMap_size(self)

    def GetVal(self, str: "char const *") -> "double":
        return _molsetc.StrDoubleMap_GetVal(self, str)

    def SetVal(self, str: "char const *", val: "double") -> "void":
        return _molsetc.StrDoubleMap_SetVal(self, str, val)
    ierr = property(_molsetc.StrDoubleMap_ierr_get, _molsetc.StrDoubleMap_ierr_set)

    def __init__(self):
        _molsetc.StrDoubleMap_swiginit(self, _molsetc.new_StrDoubleMap())
    __swig_destroy__ = _molsetc.delete_StrDoubleMap

# Register StrDoubleMap in _molsetc:
_molsetc.StrDoubleMap_swigregister(StrDoubleMap)

class StrStrMap_itr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.StrStrMap_itr_swiginit(self, _molsetc.new_StrStrMap_itr(*args))

    def GetKey(self) -> "char const *":
        return _molsetc.StrStrMap_itr_GetKey(self)

    def GetVal(self) -> "char const *":
        return _molsetc.StrStrMap_itr_GetVal(self)

    def GetFirst(self) -> "int":
        return _molsetc.StrStrMap_itr_GetFirst(self)

    def GetNext(self) -> "int":
        return _molsetc.StrStrMap_itr_GetNext(self)
    __swig_destroy__ = _molsetc.delete_StrStrMap_itr

# Register StrStrMap_itr in _molsetc:
_molsetc.StrStrMap_itr_swigregister(StrStrMap_itr)

class StrStrMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clear(self) -> "void":
        return _molsetc.StrStrMap_clear(self)

    def count(self, str: "char const *") -> "int":
        return _molsetc.StrStrMap_count(self, str)

    def size(self) -> "int":
        return _molsetc.StrStrMap_size(self)

    def GetVal(self, str: "char const *") -> "char const *":
        return _molsetc.StrStrMap_GetVal(self, str)

    def SetVal(self, str: "char const *", val: "char const *") -> "void":
        return _molsetc.StrStrMap_SetVal(self, str, val)
    ierr = property(_molsetc.StrStrMap_ierr_get, _molsetc.StrStrMap_ierr_set)

    def __init__(self):
        _molsetc.StrStrMap_swiginit(self, _molsetc.new_StrStrMap())
    __swig_destroy__ = _molsetc.delete_StrStrMap

# Register StrStrMap in _molsetc:
_molsetc.StrStrMap_swigregister(StrStrMap)

class StrIntMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clear(self) -> "void":
        return _molsetc.StrIntMap_clear(self)

    def size(self) -> "int":
        return _molsetc.StrIntMap_size(self)

    def count(self, str: "char const *") -> "int":
        return _molsetc.StrIntMap_count(self, str)

    def GetVal(self, str: "char const *") -> "int":
        return _molsetc.StrIntMap_GetVal(self, str)

    def SetVal(self, str: "char const *", val: "int") -> "void":
        return _molsetc.StrIntMap_SetVal(self, str, val)
    ierr = property(_molsetc.StrIntMap_ierr_get, _molsetc.StrIntMap_ierr_set)

    def __init__(self):
        _molsetc.StrIntMap_swiginit(self, _molsetc.new_StrIntMap())
    __swig_destroy__ = _molsetc.delete_StrIntMap

# Register StrIntMap in _molsetc:
_molsetc.StrIntMap_swigregister(StrIntMap)

class StrVec(StringVector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.StrVec_swiginit(self, _molsetc.new_StrVec(*args))

    def reserve(self, n: "size_t") -> "void":
        return _molsetc.StrVec_reserve(self, n)

    def resize(self, n: "size_t", str: "char const *") -> "void":
        return _molsetc.StrVec_resize(self, n, str)

    def size(self) -> "size_t":
        return _molsetc.StrVec_size(self)

    def push_back(self, str: "char const *") -> "void":
        return _molsetc.StrVec_push_back(self, str)

    def GetVal(self, idx: "size_t") -> "char const *":
        return _molsetc.StrVec_GetVal(self, idx)

    def SetVal(self, idx: "size_t", val: "char const *") -> "void":
        return _molsetc.StrVec_SetVal(self, idx, val)
    __swig_destroy__ = _molsetc.delete_StrVec

# Register StrVec in _molsetc:
_molsetc.StrVec_swigregister(StrVec)


def stricmp_loc(str1: "char const *", str2: "char const *") -> "int":
    return _molsetc.stricmp_loc(str1, str2)

def strcmp_trunc(str1: "char const *", str2: "char const *") -> "int":
    return _molsetc.strcmp_trunc(str1, str2)

def strcpy_to_fort(str_fort: "char *", c_str: "char const *", len_fort: "int") -> "int":
    return _molsetc.strcpy_to_fort(str_fort, c_str, len_fort)

def stricmp_trunc(str1: "char const *", str2: "char const *") -> "int":
    return _molsetc.stricmp_trunc(str1, str2)
class HaConsts(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaConsts_swiginit(self, _molsetc.new_HaConsts())
    __swig_destroy__ = _molsetc.delete_HaConsts
    e = property(_molsetc.HaConsts_e_get, _molsetc.HaConsts_e_set)
    Na = property(_molsetc.HaConsts_Na_get, _molsetc.HaConsts_Na_set)
    R = property(_molsetc.HaConsts_R_get, _molsetc.HaConsts_R_set)
    k = property(_molsetc.HaConsts_k_get, _molsetc.HaConsts_k_set)
    eV = property(_molsetc.HaConsts_eV_get, _molsetc.HaConsts_eV_set)
    a0 = property(_molsetc.HaConsts_a0_get, _molsetc.HaConsts_a0_set)
    Eh = property(_molsetc.HaConsts_Eh_get, _molsetc.HaConsts_Eh_set)
    Eh_eV = property(_molsetc.HaConsts_Eh_eV_get, _molsetc.HaConsts_Eh_eV_set)
    Tstd = property(_molsetc.HaConsts_Tstd_get, _molsetc.HaConsts_Tstd_set)
    J_to_eV = property(_molsetc.HaConsts_J_to_eV_get, _molsetc.HaConsts_J_to_eV_set)
    J_to_Eh = property(_molsetc.HaConsts_J_to_Eh_get, _molsetc.HaConsts_J_to_Eh_set)
    kT_to_J = property(_molsetc.HaConsts_kT_to_J_get, _molsetc.HaConsts_kT_to_J_set)
    J_to_kT = property(_molsetc.HaConsts_J_to_kT_get, _molsetc.HaConsts_J_to_kT_set)
    kT_to_kJ_mol = property(_molsetc.HaConsts_kT_to_kJ_mol_get, _molsetc.HaConsts_kT_to_kJ_mol_set)
    kJ_mol_to_kT = property(_molsetc.HaConsts_kJ_mol_to_kT_get, _molsetc.HaConsts_kJ_mol_to_kT_set)
    kT_to_Eh = property(_molsetc.HaConsts_kT_to_Eh_get, _molsetc.HaConsts_kT_to_Eh_set)
    Bohr_to_A = property(_molsetc.HaConsts_Bohr_to_A_get, _molsetc.HaConsts_Bohr_to_A_set)
    A_to_Bohr = property(_molsetc.HaConsts_A_to_Bohr_get, _molsetc.HaConsts_A_to_Bohr_set)
    ef = property(_molsetc.HaConsts_ef_get, _molsetc.HaConsts_ef_set)
    Naf = property(_molsetc.HaConsts_Naf_get, _molsetc.HaConsts_Naf_set)
    calorie_to_J = property(_molsetc.HaConsts_calorie_to_J_get, _molsetc.HaConsts_calorie_to_J_set)
    kT_to_kcal_mol = property(_molsetc.HaConsts_kT_to_kcal_mol_get, _molsetc.HaConsts_kT_to_kcal_mol_set)

# Register HaConsts in _molsetc:
_molsetc.HaConsts_swigregister(HaConsts)

class TiXmlCursor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.TiXmlCursor_swiginit(self, _molsetc.new_TiXmlCursor())

    def Clear(self) -> "void":
        return _molsetc.TiXmlCursor_Clear(self)
    row = property(_molsetc.TiXmlCursor_row_get, _molsetc.TiXmlCursor_row_set)
    col = property(_molsetc.TiXmlCursor_col_get, _molsetc.TiXmlCursor_col_set)
    __swig_destroy__ = _molsetc.delete_TiXmlCursor

# Register TiXmlCursor in _molsetc:
_molsetc.TiXmlCursor_swigregister(TiXmlCursor)
TIXML_MAJOR_VERSION = cvar.TIXML_MAJOR_VERSION
TIXML_MINOR_VERSION = cvar.TIXML_MINOR_VERSION
TIXML_PATCH_VERSION = cvar.TIXML_PATCH_VERSION

class TiXmlVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_TiXmlVisitor

    def VisitEnter(self, *args) -> "bool":
        return _molsetc.TiXmlVisitor_VisitEnter(self, *args)

    def VisitExit(self, *args) -> "bool":
        return _molsetc.TiXmlVisitor_VisitExit(self, *args)

    def Visit(self, *args) -> "bool":
        return _molsetc.TiXmlVisitor_Visit(self, *args)

    def __init__(self):
        _molsetc.TiXmlVisitor_swiginit(self, _molsetc.new_TiXmlVisitor())

# Register TiXmlVisitor in _molsetc:
_molsetc.TiXmlVisitor_swigregister(TiXmlVisitor)

TIXML_SUCCESS = _molsetc.TIXML_SUCCESS
TIXML_NO_ATTRIBUTE = _molsetc.TIXML_NO_ATTRIBUTE
TIXML_WRONG_TYPE = _molsetc.TIXML_WRONG_TYPE
TIXML_ENCODING_UNKNOWN = _molsetc.TIXML_ENCODING_UNKNOWN
TIXML_ENCODING_UTF8 = _molsetc.TIXML_ENCODING_UTF8
TIXML_ENCODING_LEGACY = _molsetc.TIXML_ENCODING_LEGACY
class TiXmlBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_TiXmlBase

    def Print(self, cfile: "FILE *", depth: "int") -> "void":
        return _molsetc.TiXmlBase_Print(self, cfile, depth)

    @staticmethod
    def SetCondenseWhiteSpace(condense: "bool") -> "void":
        return _molsetc.TiXmlBase_SetCondenseWhiteSpace(condense)

    @staticmethod
    def IsWhiteSpaceCondensed() -> "bool":
        return _molsetc.TiXmlBase_IsWhiteSpaceCondensed()

    def Row(self) -> "int":
        return _molsetc.TiXmlBase_Row(self)

    def Column(self) -> "int":
        return _molsetc.TiXmlBase_Column(self)

    def SetUserData(self, user: "void *") -> "void":
        return _molsetc.TiXmlBase_SetUserData(self, user)

    def GetUserData(self, *args) -> "void const *":
        return _molsetc.TiXmlBase_GetUserData(self, *args)

    def Parse(self, p: "char const *", data: "TiXmlParsingData *", encoding: "TiXmlEncoding") -> "char const *":
        return _molsetc.TiXmlBase_Parse(self, p, data, encoding)
    TIXML_NO_ERROR = _molsetc.TiXmlBase_TIXML_NO_ERROR
    TIXML_ERROR = _molsetc.TiXmlBase_TIXML_ERROR
    TIXML_ERROR_OPENING_FILE = _molsetc.TiXmlBase_TIXML_ERROR_OPENING_FILE
    TIXML_ERROR_OUT_OF_MEMORY = _molsetc.TiXmlBase_TIXML_ERROR_OUT_OF_MEMORY
    TIXML_ERROR_PARSING_ELEMENT = _molsetc.TiXmlBase_TIXML_ERROR_PARSING_ELEMENT
    TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME = _molsetc.TiXmlBase_TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME
    TIXML_ERROR_READING_ELEMENT_VALUE = _molsetc.TiXmlBase_TIXML_ERROR_READING_ELEMENT_VALUE
    TIXML_ERROR_READING_ATTRIBUTES = _molsetc.TiXmlBase_TIXML_ERROR_READING_ATTRIBUTES
    TIXML_ERROR_PARSING_EMPTY = _molsetc.TiXmlBase_TIXML_ERROR_PARSING_EMPTY
    TIXML_ERROR_READING_END_TAG = _molsetc.TiXmlBase_TIXML_ERROR_READING_END_TAG
    TIXML_ERROR_PARSING_UNKNOWN = _molsetc.TiXmlBase_TIXML_ERROR_PARSING_UNKNOWN
    TIXML_ERROR_PARSING_COMMENT = _molsetc.TiXmlBase_TIXML_ERROR_PARSING_COMMENT
    TIXML_ERROR_PARSING_DECLARATION = _molsetc.TiXmlBase_TIXML_ERROR_PARSING_DECLARATION
    TIXML_ERROR_DOCUMENT_EMPTY = _molsetc.TiXmlBase_TIXML_ERROR_DOCUMENT_EMPTY
    TIXML_ERROR_EMBEDDED_NULL = _molsetc.TiXmlBase_TIXML_ERROR_EMBEDDED_NULL
    TIXML_ERROR_PARSING_CDATA = _molsetc.TiXmlBase_TIXML_ERROR_PARSING_CDATA
    TIXML_ERROR_DOCUMENT_TOP_ONLY = _molsetc.TiXmlBase_TIXML_ERROR_DOCUMENT_TOP_ONLY
    TIXML_ERROR_STRING_COUNT = _molsetc.TiXmlBase_TIXML_ERROR_STRING_COUNT

# Register TiXmlBase in _molsetc:
_molsetc.TiXmlBase_swigregister(TiXmlBase)
TIXML_DEFAULT_ENCODING = cvar.TIXML_DEFAULT_ENCODING

def TiXmlBase_SetCondenseWhiteSpace(condense: "bool") -> "void":
    return _molsetc.TiXmlBase_SetCondenseWhiteSpace(condense)

def TiXmlBase_IsWhiteSpaceCondensed() -> "bool":
    return _molsetc.TiXmlBase_IsWhiteSpaceCondensed()
TiXmlBase.utf8ByteTable = _molsetc.cvar.TiXmlBase_utf8ByteTable

class TiXmlNode(TiXmlBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DOCUMENT = _molsetc.TiXmlNode_DOCUMENT
    ELEMENT = _molsetc.TiXmlNode_ELEMENT
    COMMENT = _molsetc.TiXmlNode_COMMENT
    UNKNOWN = _molsetc.TiXmlNode_UNKNOWN
    TEXT = _molsetc.TiXmlNode_TEXT
    DECLARATION = _molsetc.TiXmlNode_DECLARATION
    TYPECOUNT = _molsetc.TiXmlNode_TYPECOUNT
    __swig_destroy__ = _molsetc.delete_TiXmlNode

    def Value(self) -> "char const *":
        return _molsetc.TiXmlNode_Value(self)

    def ValueStr(self) -> "std::string const &":
        return _molsetc.TiXmlNode_ValueStr(self)

    def SetValue(self, *args) -> "void":
        return _molsetc.TiXmlNode_SetValue(self, *args)

    def Clear(self) -> "void":
        return _molsetc.TiXmlNode_Clear(self)

    def Parent(self, *args) -> "TiXmlNode const *":
        return _molsetc.TiXmlNode_Parent(self, *args)

    def FirstChild(self, *args) -> "TiXmlNode *":
        return _molsetc.TiXmlNode_FirstChild(self, *args)

    def LastChild(self, *args) -> "TiXmlNode *":
        return _molsetc.TiXmlNode_LastChild(self, *args)

    def IterateChildren(self, *args) -> "TiXmlNode *":
        return _molsetc.TiXmlNode_IterateChildren(self, *args)

    def InsertEndChild(self, addThis: "TiXmlNode") -> "TiXmlNode *":
        return _molsetc.TiXmlNode_InsertEndChild(self, addThis)

    def LinkEndChild(self, addThis: "TiXmlNode") -> "TiXmlNode *":
        return _molsetc.TiXmlNode_LinkEndChild(self, addThis)

    def InsertBeforeChild(self, beforeThis: "TiXmlNode", addThis: "TiXmlNode") -> "TiXmlNode *":
        return _molsetc.TiXmlNode_InsertBeforeChild(self, beforeThis, addThis)

    def InsertAfterChild(self, afterThis: "TiXmlNode", addThis: "TiXmlNode") -> "TiXmlNode *":
        return _molsetc.TiXmlNode_InsertAfterChild(self, afterThis, addThis)

    def ReplaceChild(self, replaceThis: "TiXmlNode", withThis: "TiXmlNode") -> "TiXmlNode *":
        return _molsetc.TiXmlNode_ReplaceChild(self, replaceThis, withThis)

    def RemoveChild(self, removeThis: "TiXmlNode") -> "bool":
        return _molsetc.TiXmlNode_RemoveChild(self, removeThis)

    def PreviousSibling(self, *args) -> "TiXmlNode *":
        return _molsetc.TiXmlNode_PreviousSibling(self, *args)

    def NextSibling(self, *args) -> "TiXmlNode *":
        return _molsetc.TiXmlNode_NextSibling(self, *args)

    def NextSiblingElement(self, *args) -> "TiXmlElement *":
        return _molsetc.TiXmlNode_NextSiblingElement(self, *args)

    def FirstChildElement(self, *args) -> "TiXmlElement *":
        return _molsetc.TiXmlNode_FirstChildElement(self, *args)

    def Type(self) -> "int":
        return _molsetc.TiXmlNode_Type(self)

    def GetDocument(self, *args) -> "TiXmlDocument *":
        return _molsetc.TiXmlNode_GetDocument(self, *args)

    def NoChildren(self) -> "bool":
        return _molsetc.TiXmlNode_NoChildren(self)

    def ToDocument(self, *args) -> "TiXmlDocument *":
        return _molsetc.TiXmlNode_ToDocument(self, *args)

    def ToElement(self, *args) -> "TiXmlElement *":
        return _molsetc.TiXmlNode_ToElement(self, *args)

    def ToComment(self, *args) -> "TiXmlComment *":
        return _molsetc.TiXmlNode_ToComment(self, *args)

    def ToUnknown(self, *args) -> "TiXmlUnknown *":
        return _molsetc.TiXmlNode_ToUnknown(self, *args)

    def ToText(self, *args) -> "TiXmlText *":
        return _molsetc.TiXmlNode_ToText(self, *args)

    def ToDeclaration(self, *args) -> "TiXmlDeclaration *":
        return _molsetc.TiXmlNode_ToDeclaration(self, *args)

    def Clone(self) -> "TiXmlNode *":
        return _molsetc.TiXmlNode_Clone(self)

    def Accept(self, visitor: "TiXmlVisitor") -> "bool":
        return _molsetc.TiXmlNode_Accept(self, visitor)

    def LastChildElementRecursively(self, _value: "char const *") -> "TiXmlElement const *":
        return _molsetc.TiXmlNode_LastChildElementRecursively(self, _value)

# Register TiXmlNode in _molsetc:
_molsetc.TiXmlNode_swigregister(TiXmlNode)

class TiXmlAttribute(TiXmlBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.TiXmlAttribute_swiginit(self, _molsetc.new_TiXmlAttribute(*args))

    def Name(self) -> "char const *":
        return _molsetc.TiXmlAttribute_Name(self)

    def Value(self) -> "char const *":
        return _molsetc.TiXmlAttribute_Value(self)

    def ValueStr(self) -> "std::string const &":
        return _molsetc.TiXmlAttribute_ValueStr(self)

    def IntValue(self) -> "int":
        return _molsetc.TiXmlAttribute_IntValue(self)

    def DoubleValue(self) -> "double":
        return _molsetc.TiXmlAttribute_DoubleValue(self)

    def NameTStr(self) -> "std::string const &":
        return _molsetc.TiXmlAttribute_NameTStr(self)

    def QueryIntValue(self, _value: "int *") -> "int":
        return _molsetc.TiXmlAttribute_QueryIntValue(self, _value)

    def QueryDoubleValue(self, _value: "double *") -> "int":
        return _molsetc.TiXmlAttribute_QueryDoubleValue(self, _value)

    def SetIntValue(self, _value: "int") -> "void":
        return _molsetc.TiXmlAttribute_SetIntValue(self, _value)

    def SetDoubleValue(self, _value: "double") -> "void":
        return _molsetc.TiXmlAttribute_SetDoubleValue(self, _value)

    def SetName(self, *args) -> "void":
        return _molsetc.TiXmlAttribute_SetName(self, *args)

    def SetValue(self, *args) -> "void":
        return _molsetc.TiXmlAttribute_SetValue(self, *args)

    def Next(self, *args) -> "TiXmlAttribute *":
        return _molsetc.TiXmlAttribute_Next(self, *args)

    def Previous(self, *args) -> "TiXmlAttribute *":
        return _molsetc.TiXmlAttribute_Previous(self, *args)

    def __eq__(self, rhs: "TiXmlAttribute") -> "bool":
        return _molsetc.TiXmlAttribute___eq__(self, rhs)

    def __lt__(self, rhs: "TiXmlAttribute") -> "bool":
        return _molsetc.TiXmlAttribute___lt__(self, rhs)

    def __gt__(self, rhs: "TiXmlAttribute") -> "bool":
        return _molsetc.TiXmlAttribute___gt__(self, rhs)

    def Parse(self, p: "char const *", data: "TiXmlParsingData *", encoding: "TiXmlEncoding") -> "char const *":
        return _molsetc.TiXmlAttribute_Parse(self, p, data, encoding)

    def Print(self, *args) -> "void":
        return _molsetc.TiXmlAttribute_Print(self, *args)

    def SetDocument(self, doc: "TiXmlDocument") -> "void":
        return _molsetc.TiXmlAttribute_SetDocument(self, doc)
    __swig_destroy__ = _molsetc.delete_TiXmlAttribute

# Register TiXmlAttribute in _molsetc:
_molsetc.TiXmlAttribute_swigregister(TiXmlAttribute)

class TiXmlAttributeSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.TiXmlAttributeSet_swiginit(self, _molsetc.new_TiXmlAttributeSet())
    __swig_destroy__ = _molsetc.delete_TiXmlAttributeSet

    def Add(self, attribute: "TiXmlAttribute") -> "void":
        return _molsetc.TiXmlAttributeSet_Add(self, attribute)

    def Remove(self, attribute: "TiXmlAttribute") -> "void":
        return _molsetc.TiXmlAttributeSet_Remove(self, attribute)

    def First(self, *args) -> "TiXmlAttribute *":
        return _molsetc.TiXmlAttributeSet_First(self, *args)

    def Last(self, *args) -> "TiXmlAttribute *":
        return _molsetc.TiXmlAttributeSet_Last(self, *args)

    def Find(self, *args) -> "TiXmlAttribute *":
        return _molsetc.TiXmlAttributeSet_Find(self, *args)

# Register TiXmlAttributeSet in _molsetc:
_molsetc.TiXmlAttributeSet_swigregister(TiXmlAttributeSet)

class TiXmlElement(TiXmlNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.TiXmlElement_swiginit(self, _molsetc.new_TiXmlElement(*args))
    __swig_destroy__ = _molsetc.delete_TiXmlElement

    def CStrAttribute(self, name: "char const *") -> "char const *":
        return _molsetc.TiXmlElement_CStrAttribute(self, name)

    def StdStrAttribute(self, name: "std::string const &") -> "std::string const *":
        return _molsetc.TiXmlElement_StdStrAttribute(self, name)

    def QueryFloatAttribute(self, name: "char const *", _value: "float *") -> "int":
        return _molsetc.TiXmlElement_QueryFloatAttribute(self, name, _value)

    def Attribute(self, *args) -> "std::string const *":
        return _molsetc.TiXmlElement_Attribute(self, *args)

    def QueryIntAttribute(self, *args) -> "int":
        return _molsetc.TiXmlElement_QueryIntAttribute(self, *args)

    def QueryDoubleAttribute(self, *args) -> "int":
        return _molsetc.TiXmlElement_QueryDoubleAttribute(self, *args)

    def SetAttribute(self, *args) -> "void":
        return _molsetc.TiXmlElement_SetAttribute(self, *args)

    def RemoveAttribute(self, *args) -> "void":
        return _molsetc.TiXmlElement_RemoveAttribute(self, *args)

    def FirstAttribute(self, *args) -> "TiXmlAttribute *":
        return _molsetc.TiXmlElement_FirstAttribute(self, *args)

    def LastAttribute(self, *args) -> "TiXmlAttribute *":
        return _molsetc.TiXmlElement_LastAttribute(self, *args)

    def GetText(self) -> "char const *":
        return _molsetc.TiXmlElement_GetText(self)

    def Clone(self) -> "TiXmlNode *":
        return _molsetc.TiXmlElement_Clone(self)

    def Print(self, cfile: "FILE *", depth: "int") -> "void":
        return _molsetc.TiXmlElement_Print(self, cfile, depth)

    def Parse(self, p: "char const *", data: "TiXmlParsingData *", encoding: "TiXmlEncoding") -> "char const *":
        return _molsetc.TiXmlElement_Parse(self, p, data, encoding)

    def ToElement(self, *args) -> "TiXmlElement *":
        return _molsetc.TiXmlElement_ToElement(self, *args)

    def Accept(self, visitor: "TiXmlVisitor") -> "bool":
        return _molsetc.TiXmlElement_Accept(self, visitor)

    def SetCStrAttribute(self, name: "char const *", val: "char const *") -> "int":
        return _molsetc.TiXmlElement_SetCStrAttribute(self, name, val)

    def SetStdStrAttribute(self, name: "char const *", val: "std::string const *") -> "int":
        return _molsetc.TiXmlElement_SetStdStrAttribute(self, name, val)

    def SetBoolAttribute(self, name: "char const *", val: "bool") -> "int":
        return _molsetc.TiXmlElement_SetBoolAttribute(self, name, val)

    def SetIntAttribute(self, name: "char const *", val: "int") -> "int":
        return _molsetc.TiXmlElement_SetIntAttribute(self, name, val)

    def SetFloatAttribute(self, *args) -> "int":
        return _molsetc.TiXmlElement_SetFloatAttribute(self, *args)

    def SetDoubleAttribute(self, *args) -> "int":
        return _molsetc.TiXmlElement_SetDoubleAttribute(self, *args)

    def SetStdStrIndex(self, name: "char const *", val: "int", StrList: "StringVector") -> "int":
        return _molsetc.TiXmlElement_SetStdStrIndex(self, name, val, StrList)

    def SetArrOfBoolAttribute(self, name: "char const *", vals: "bool *", n: "int") -> "int":
        return _molsetc.TiXmlElement_SetArrOfBoolAttribute(self, name, vals, n)

    def SetArrOfIntAttribute(self, name: "char const *", vals: "int *", n: "int") -> "int":
        return _molsetc.TiXmlElement_SetArrOfIntAttribute(self, name, vals, n)

    def SetArrOfFloatAttribute(self, *args) -> "int":
        return _molsetc.TiXmlElement_SetArrOfFloatAttribute(self, *args)

    def SetArrOfDoubleAttribute(self, *args) -> "int":
        return _molsetc.TiXmlElement_SetArrOfDoubleAttribute(self, *args)

    def GetCStrAttribute(self, name: "char const *", val: "char *") -> "int":
        return _molsetc.TiXmlElement_GetCStrAttribute(self, name, val)

    def GetStdStrAttribute(self, name: "char const *", val: "std::string *") -> "int":
        return _molsetc.TiXmlElement_GetStdStrAttribute(self, name, val)

    def GetBoolAttribute(self, name: "char const *", val: "bool *") -> "int":
        return _molsetc.TiXmlElement_GetBoolAttribute(self, name, val)

    def GetIntAttribute(self, name: "char const *", val: "int *") -> "int":
        return _molsetc.TiXmlElement_GetIntAttribute(self, name, val)

    def GetFloatAttribute(self, name: "char const *", val: "float *") -> "int":
        return _molsetc.TiXmlElement_GetFloatAttribute(self, name, val)

    def GetDoubleAttribute(self, name: "char const *", val: "double *") -> "int":
        return _molsetc.TiXmlElement_GetDoubleAttribute(self, name, val)

    def GetStdStrIndex(self, name: "char const *", val: "int *", StrList: "StringVector") -> "int":
        return _molsetc.TiXmlElement_GetStdStrIndex(self, name, val, StrList)

    def GetBoolAttributeRetVal(self, name: "char const *") -> "bool":
        return _molsetc.TiXmlElement_GetBoolAttributeRetVal(self, name)

    def GetIntAttributeRetVal(self, name: "char const *") -> "int":
        return _molsetc.TiXmlElement_GetIntAttributeRetVal(self, name)

    def GetFloatAttributeRetVal(self, name: "char const *") -> "float":
        return _molsetc.TiXmlElement_GetFloatAttributeRetVal(self, name)

    def GetDoubleAttributeRetVal(self, name: "char const *") -> "double":
        return _molsetc.TiXmlElement_GetDoubleAttributeRetVal(self, name)

    def GetArrOfBoolAttribute(self, name: "char const *", vars: "bool *", n: "int") -> "int":
        return _molsetc.TiXmlElement_GetArrOfBoolAttribute(self, name, vars, n)

    def GetArrOfIntAttribute(self, name: "char const *", vars: "int *", n: "int") -> "int":
        return _molsetc.TiXmlElement_GetArrOfIntAttribute(self, name, vars, n)

    def GetArrOfFloatAttribute(self, name: "char const *", vars: "float *", n: "int") -> "int":
        return _molsetc.TiXmlElement_GetArrOfFloatAttribute(self, name, vars, n)

    def GetArrOfDoubleAttribute(self, name: "char const *", vars: "double *", n: "int") -> "int":
        return _molsetc.TiXmlElement_GetArrOfDoubleAttribute(self, name, vars, n)

    def GetNumOfElmOfArrAttribute(self, name: "char const *") -> "int":
        return _molsetc.TiXmlElement_GetNumOfElmOfArrAttribute(self, name)

    def GetArrOfFloatAttributeWithAllocation(self, name: "char const *", vars: "float **", n: "int *") -> "int":
        return _molsetc.TiXmlElement_GetArrOfFloatAttributeWithAllocation(self, name, vars, n)

    def GetArrOfIntAttributeWithAllocation(self, name: "char const *", vars: "int **", n: "int *") -> "int":
        return _molsetc.TiXmlElement_GetArrOfIntAttributeWithAllocation(self, name, vars, n)

    def GetArrOfStdStrAttribute(self, name: "char const *", VStr: "StringVector") -> "int":
        return _molsetc.TiXmlElement_GetArrOfStdStrAttribute(self, name, VStr)

    def GetArrOfIntFromText(self, vars: "int **", n: "int *") -> "int":
        return _molsetc.TiXmlElement_GetArrOfIntFromText(self, vars, n)

    def GetArrOfFloatCoordFromText(self, x: "float **", y: "float **", z: "float **", n: "int *") -> "int":
        return _molsetc.TiXmlElement_GetArrOfFloatCoordFromText(self, x, y, z, n)

    def GetArrOfFloatFromText(self, vars: "float **", n: "int *") -> "int":
        return _molsetc.TiXmlElement_GetArrOfFloatFromText(self, vars, n)

    def GetTwoArrOfFloatFromText(self, vars1: "float **", vars2: "float **", n: "int *") -> "int":
        return _molsetc.TiXmlElement_GetTwoArrOfFloatFromText(self, vars1, vars2, n)

    def GetVectorFloatElement(self, TagName: "char const *", Vec: "std::vector< float,std::allocator< float > > *") -> "int":
        return _molsetc.TiXmlElement_GetVectorFloatElement(self, TagName, Vec)

    def GetTwoVectorFloatElement(self, TagName: "char const *", Vec1: "std::vector< float,std::allocator< float > > *", Vec2: "std::vector< float,std::allocator< float > > *") -> "int":
        return _molsetc.TiXmlElement_GetTwoVectorFloatElement(self, TagName, Vec1, Vec2)

    def GetNumOfElement(self, name: "char const *") -> "int":
        return _molsetc.TiXmlElement_GetNumOfElement(self, name)

    def SetHaVec_doubleElement(self, *args) -> "int":
        return _molsetc.TiXmlElement_SetHaVec_doubleElement(self, *args)

    def GetHaVec_doubleElement(self, TagName: "char const *", Vec: "HaVec_double") -> "int":
        return _molsetc.TiXmlElement_GetHaVec_doubleElement(self, TagName, Vec)

    def SetHaMat_doubleElement(self, *args) -> "int":
        return _molsetc.TiXmlElement_SetHaMat_doubleElement(self, *args)

    def GetHaMat_doubleElement(self, TagName: "char const *", Mat: "HaMat_double") -> "int":
        return _molsetc.TiXmlElement_GetHaMat_doubleElement(self, TagName, Mat)

    def SetVectorStringElement(self, TagName: "char const *", Vec: "StringVector") -> "int":
        return _molsetc.TiXmlElement_SetVectorStringElement(self, TagName, Vec)

    def GetVectorStringElement(self, TagName: "char const *", Vec: "StringVector") -> "int":
        return _molsetc.TiXmlElement_GetVectorStringElement(self, TagName, Vec)

# Register TiXmlElement in _molsetc:
_molsetc.TiXmlElement_swigregister(TiXmlElement)

class TiXmlComment(TiXmlNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.TiXmlComment_swiginit(self, _molsetc.new_TiXmlComment(*args))
    __swig_destroy__ = _molsetc.delete_TiXmlComment

    def Clone(self) -> "TiXmlNode *":
        return _molsetc.TiXmlComment_Clone(self)

    def Print(self, cfile: "FILE *", depth: "int") -> "void":
        return _molsetc.TiXmlComment_Print(self, cfile, depth)

    def Parse(self, p: "char const *", data: "TiXmlParsingData *", encoding: "TiXmlEncoding") -> "char const *":
        return _molsetc.TiXmlComment_Parse(self, p, data, encoding)

    def ToComment(self, *args) -> "TiXmlComment *":
        return _molsetc.TiXmlComment_ToComment(self, *args)

    def Accept(self, visitor: "TiXmlVisitor") -> "bool":
        return _molsetc.TiXmlComment_Accept(self, visitor)

# Register TiXmlComment in _molsetc:
_molsetc.TiXmlComment_swigregister(TiXmlComment)

class TiXmlText(TiXmlNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_TiXmlText

    def __init__(self, *args):
        _molsetc.TiXmlText_swiginit(self, _molsetc.new_TiXmlText(*args))

    def Print(self, cfile: "FILE *", depth: "int") -> "void":
        return _molsetc.TiXmlText_Print(self, cfile, depth)

    def CDATA(self) -> "bool":
        return _molsetc.TiXmlText_CDATA(self)

    def SetCDATA(self, _cdata: "bool") -> "void":
        return _molsetc.TiXmlText_SetCDATA(self, _cdata)

    def Parse(self, p: "char const *", data: "TiXmlParsingData *", encoding: "TiXmlEncoding") -> "char const *":
        return _molsetc.TiXmlText_Parse(self, p, data, encoding)

    def ToText(self, *args) -> "TiXmlText *":
        return _molsetc.TiXmlText_ToText(self, *args)

    def Accept(self, content: "TiXmlVisitor") -> "bool":
        return _molsetc.TiXmlText_Accept(self, content)

# Register TiXmlText in _molsetc:
_molsetc.TiXmlText_swigregister(TiXmlText)

class TiXmlDeclaration(TiXmlNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.TiXmlDeclaration_swiginit(self, _molsetc.new_TiXmlDeclaration(*args))
    __swig_destroy__ = _molsetc.delete_TiXmlDeclaration

    def Version(self) -> "char const *":
        return _molsetc.TiXmlDeclaration_Version(self)

    def Encoding(self) -> "char const *":
        return _molsetc.TiXmlDeclaration_Encoding(self)

    def Standalone(self) -> "char const *":
        return _molsetc.TiXmlDeclaration_Standalone(self)

    def Clone(self) -> "TiXmlNode *":
        return _molsetc.TiXmlDeclaration_Clone(self)

    def Print(self, *args) -> "void":
        return _molsetc.TiXmlDeclaration_Print(self, *args)

    def Parse(self, p: "char const *", data: "TiXmlParsingData *", encoding: "TiXmlEncoding") -> "char const *":
        return _molsetc.TiXmlDeclaration_Parse(self, p, data, encoding)

    def ToDeclaration(self, *args) -> "TiXmlDeclaration *":
        return _molsetc.TiXmlDeclaration_ToDeclaration(self, *args)

    def Accept(self, visitor: "TiXmlVisitor") -> "bool":
        return _molsetc.TiXmlDeclaration_Accept(self, visitor)

# Register TiXmlDeclaration in _molsetc:
_molsetc.TiXmlDeclaration_swigregister(TiXmlDeclaration)

class TiXmlUnknown(TiXmlNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_TiXmlUnknown

    def __init__(self, *args):
        _molsetc.TiXmlUnknown_swiginit(self, _molsetc.new_TiXmlUnknown(*args))

    def Clone(self) -> "TiXmlNode *":
        return _molsetc.TiXmlUnknown_Clone(self)

    def Print(self, cfile: "FILE *", depth: "int") -> "void":
        return _molsetc.TiXmlUnknown_Print(self, cfile, depth)

    def Parse(self, p: "char const *", data: "TiXmlParsingData *", encoding: "TiXmlEncoding") -> "char const *":
        return _molsetc.TiXmlUnknown_Parse(self, p, data, encoding)

    def ToUnknown(self, *args) -> "TiXmlUnknown *":
        return _molsetc.TiXmlUnknown_ToUnknown(self, *args)

    def Accept(self, content: "TiXmlVisitor") -> "bool":
        return _molsetc.TiXmlUnknown_Accept(self, content)

# Register TiXmlUnknown in _molsetc:
_molsetc.TiXmlUnknown_swigregister(TiXmlUnknown)

class TiXmlDocument(TiXmlNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.TiXmlDocument_swiginit(self, _molsetc.new_TiXmlDocument(*args))
    __swig_destroy__ = _molsetc.delete_TiXmlDocument

    def LoadFile(self, *args) -> "bool":
        return _molsetc.TiXmlDocument_LoadFile(self, *args)

    def SaveFile(self, *args) -> "bool":
        return _molsetc.TiXmlDocument_SaveFile(self, *args)

    def Parse(self, *args) -> "char const *":
        return _molsetc.TiXmlDocument_Parse(self, *args)

    def RootElement(self, *args) -> "TiXmlElement *":
        return _molsetc.TiXmlDocument_RootElement(self, *args)

    def Error(self) -> "bool":
        return _molsetc.TiXmlDocument_Error(self)

    def ErrorDesc(self) -> "char const *":
        return _molsetc.TiXmlDocument_ErrorDesc(self)

    def ErrorId(self) -> "int":
        return _molsetc.TiXmlDocument_ErrorId(self)

    def ErrorRow(self) -> "int":
        return _molsetc.TiXmlDocument_ErrorRow(self)

    def ErrorCol(self) -> "int":
        return _molsetc.TiXmlDocument_ErrorCol(self)

    def SetTabSize(self, _tabsize: "int") -> "void":
        return _molsetc.TiXmlDocument_SetTabSize(self, _tabsize)

    def TabSize(self) -> "int":
        return _molsetc.TiXmlDocument_TabSize(self)

    def ClearError(self) -> "void":
        return _molsetc.TiXmlDocument_ClearError(self)

    def Print(self, *args) -> "void":
        return _molsetc.TiXmlDocument_Print(self, *args)

    def SetError(self, err: "int", errorLocation: "char const *", prevData: "TiXmlParsingData *", encoding: "TiXmlEncoding") -> "void":
        return _molsetc.TiXmlDocument_SetError(self, err, errorLocation, prevData, encoding)

    def ToDocument(self, *args) -> "TiXmlDocument *":
        return _molsetc.TiXmlDocument_ToDocument(self, *args)

    def Accept(self, content: "TiXmlVisitor") -> "bool":
        return _molsetc.TiXmlDocument_Accept(self, content)

# Register TiXmlDocument in _molsetc:
_molsetc.TiXmlDocument_swigregister(TiXmlDocument)

class TiXmlHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.TiXmlHandle_swiginit(self, _molsetc.new_TiXmlHandle(*args))

    def FirstChild(self, *args) -> "TiXmlHandle":
        return _molsetc.TiXmlHandle_FirstChild(self, *args)

    def FirstChildElement(self, *args) -> "TiXmlHandle":
        return _molsetc.TiXmlHandle_FirstChildElement(self, *args)

    def Child(self, *args) -> "TiXmlHandle":
        return _molsetc.TiXmlHandle_Child(self, *args)

    def ChildElement(self, *args) -> "TiXmlHandle":
        return _molsetc.TiXmlHandle_ChildElement(self, *args)

    def ToNode(self) -> "TiXmlNode *":
        return _molsetc.TiXmlHandle_ToNode(self)

    def ToElement(self) -> "TiXmlElement *":
        return _molsetc.TiXmlHandle_ToElement(self)

    def ToText(self) -> "TiXmlText *":
        return _molsetc.TiXmlHandle_ToText(self)

    def ToUnknown(self) -> "TiXmlUnknown *":
        return _molsetc.TiXmlHandle_ToUnknown(self)

    def Node(self) -> "TiXmlNode *":
        return _molsetc.TiXmlHandle_Node(self)

    def Element(self) -> "TiXmlElement *":
        return _molsetc.TiXmlHandle_Element(self)

    def Text(self) -> "TiXmlText *":
        return _molsetc.TiXmlHandle_Text(self)

    def Unknown(self) -> "TiXmlUnknown *":
        return _molsetc.TiXmlHandle_Unknown(self)
    __swig_destroy__ = _molsetc.delete_TiXmlHandle

# Register TiXmlHandle in _molsetc:
_molsetc.TiXmlHandle_swigregister(TiXmlHandle)

class TiXmlPrinter(TiXmlVisitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.TiXmlPrinter_swiginit(self, _molsetc.new_TiXmlPrinter())

    def VisitEnter(self, *args) -> "bool":
        return _molsetc.TiXmlPrinter_VisitEnter(self, *args)

    def VisitExit(self, *args) -> "bool":
        return _molsetc.TiXmlPrinter_VisitExit(self, *args)

    def Visit(self, *args) -> "bool":
        return _molsetc.TiXmlPrinter_Visit(self, *args)

    def SetIndent(self, _indent: "char const *") -> "void":
        return _molsetc.TiXmlPrinter_SetIndent(self, _indent)

    def Indent(self) -> "char const *":
        return _molsetc.TiXmlPrinter_Indent(self)

    def SetLineBreak(self, _lineBreak: "char const *") -> "void":
        return _molsetc.TiXmlPrinter_SetLineBreak(self, _lineBreak)

    def LineBreak(self) -> "char const *":
        return _molsetc.TiXmlPrinter_LineBreak(self)

    def SetStreamPrinting(self) -> "void":
        return _molsetc.TiXmlPrinter_SetStreamPrinting(self)

    def CStr(self) -> "char const *":
        return _molsetc.TiXmlPrinter_CStr(self)

    def Size(self) -> "size_t":
        return _molsetc.TiXmlPrinter_Size(self)

    def Str(self) -> "std::string const &":
        return _molsetc.TiXmlPrinter_Str(self)
    __swig_destroy__ = _molsetc.delete_TiXmlPrinter

# Register TiXmlPrinter in _molsetc:
_molsetc.TiXmlPrinter_swigregister(TiXmlPrinter)


def BldXmlEltFromCstr(Cstr: "char const *") -> "TiXmlElement *":
    return _molsetc.BldXmlEltFromCstr(Cstr)
class HaAutoTreeObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.HaAutoTreeObject_swiginit(self, _molsetc.new_HaAutoTreeObject(*args))
    __swig_destroy__ = _molsetc.delete_HaAutoTreeObject

    def Clear(self) -> "void":
        return _molsetc.HaAutoTreeObject_Clear(self)

    @staticmethod
    def Create(*args) -> "HaAutoTreeObject *":
        return _molsetc.HaAutoTreeObject_Create(*args)

    def Save(self, filename: "char const *") -> "void":
        return _molsetc.HaAutoTreeObject_Save(self, filename)

    def Load(self, filename: "char const *") -> "void":
        return _molsetc.HaAutoTreeObject_Load(self, filename)

    def SetObject(self, Elt: "TiXmlElement") -> "void":
        return _molsetc.HaAutoTreeObject_SetObject(self, Elt)

    def GetObject(self) -> "TiXmlElement *":
        return _molsetc.HaAutoTreeObject_GetObject(self)

    def AddChild(self, Obj: "HaAutoTreeObject", Position: "int"=-1) -> "void":
        return _molsetc.HaAutoTreeObject_AddChild(self, Obj, Position)

    def AppendChild(self, Elt: "TiXmlElement") -> "void":
        return _molsetc.HaAutoTreeObject_AppendChild(self, Elt)

    def Print(self, *args) -> "void":
        return _molsetc.HaAutoTreeObject_Print(self, *args)

    def SetPreviousSibling(self, Obj: "HaAutoTreeObject") -> "void":
        return _molsetc.HaAutoTreeObject_SetPreviousSibling(self, Obj)

    def SetNextSibling(self, Obj: "HaAutoTreeObject") -> "void":
        return _molsetc.HaAutoTreeObject_SetNextSibling(self, Obj)

    def GetPreviousSibling(self) -> "HaAutoTreeObject *":
        return _molsetc.HaAutoTreeObject_GetPreviousSibling(self)

    def GetNextSibling(self) -> "HaAutoTreeObject *":
        return _molsetc.HaAutoTreeObject_GetNextSibling(self)

    def GetParentObject(self) -> "HaAutoTreeObject *":
        return _molsetc.HaAutoTreeObject_GetParentObject(self)

    def CreateChild(self, Tag: "char const *", Position: "int"=-1) -> "HaAutoTreeObject *":
        return _molsetc.HaAutoTreeObject_CreateChild(self, Tag, Position)

    def GetChild(self, Tag: "char const *", recursevly: "bool"=False) -> "HaAutoTreeObject *":
        return _molsetc.HaAutoTreeObject_GetChild(self, Tag, recursevly)

    def GetFirstChild(self, *args) -> "HaAutoTreeObject *":
        return _molsetc.HaAutoTreeObject_GetFirstChild(self, *args)

    def GetChildList(self, *args) -> "std::vector< HaAutoTreeObject *,std::allocator< HaAutoTreeObject * > >":
        return _molsetc.HaAutoTreeObject_GetChildList(self, *args)

    def GetTagName(self) -> "char const *":
        return _molsetc.HaAutoTreeObject_GetTagName(self)
    Children = property(_molsetc.HaAutoTreeObject_Children_get, _molsetc.HaAutoTreeObject_Children_set)

# Register HaAutoTreeObject in _molsetc:
_molsetc.HaAutoTreeObject_swigregister(HaAutoTreeObject)

def HaAutoTreeObject_Create(*args) -> "HaAutoTreeObject *":
    return _molsetc.HaAutoTreeObject_Create(*args)

class HaXML(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaXML_swiginit(self, _molsetc.new_HaXML())
    __swig_destroy__ = _molsetc.delete_HaXML

    @staticmethod
    def ReplaceCommaWithSpace(str: "std::string *") -> "void":
        return _molsetc.HaXML_ReplaceCommaWithSpace(str)

    @staticmethod
    def GetBool(cstr: "char const *", b: "bool *") -> "int":
        return _molsetc.HaXML_GetBool(cstr, b)

    @staticmethod
    def SetAtribute(*args) -> "int":
        return _molsetc.HaXML_SetAtribute(*args)

    @staticmethod
    def SetAtributeV(*args) -> "int":
        return _molsetc.HaXML_SetAtributeV(*args)

    @staticmethod
    def SetTableElement(*args) -> "int":
        return _molsetc.HaXML_SetTableElement(*args)

    @staticmethod
    def SetText(Elt: "TiXmlElement", Vec: "std_vector_int") -> "int":
        return _molsetc.HaXML_SetText(Elt, Vec)

    @staticmethod
    def GetAtribute(*args) -> "int":
        return _molsetc.HaXML_GetAtribute(*args)

    @staticmethod
    def GetAtributeV(*args) -> "int":
        return _molsetc.HaXML_GetAtributeV(*args)

    @staticmethod
    def GetVVIntElement(Elt: "TiXmlElement", TagName: "char const *", VVec: "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *") -> "int":
        return _molsetc.HaXML_GetVVIntElement(Elt, TagName, VVec)

    @staticmethod
    def SetElement(*args) -> "int":
        return _molsetc.HaXML_SetElement(*args)

    @staticmethod
    def GetElement(*args) -> "int":
        return _molsetc.HaXML_GetElement(*args)

    @staticmethod
    def GetTableElement(*args) -> "int":
        return _molsetc.HaXML_GetTableElement(*args)

    @staticmethod
    def GetText(Elt: "TiXmlElement", Vec: "std_vector_int") -> "int":
        return _molsetc.HaXML_GetText(Elt, Vec)

    @staticmethod
    def GetStrIndex(StrList: "StringVector", StrToComp: "std::string") -> "int":
        return _molsetc.HaXML_GetStrIndex(StrList, StrToComp)

    @staticmethod
    def GetStrByIndex(StrList: "StringVector", Index: "int") -> "std::string":
        return _molsetc.HaXML_GetStrByIndex(StrList, Index)

# Register HaXML in _molsetc:
_molsetc.HaXML_swigregister(HaXML)

def HaXML_ReplaceCommaWithSpace(str: "std::string *") -> "void":
    return _molsetc.HaXML_ReplaceCommaWithSpace(str)

def HaXML_GetBool(cstr: "char const *", b: "bool *") -> "int":
    return _molsetc.HaXML_GetBool(cstr, b)

def HaXML_SetAtribute(*args) -> "int":
    return _molsetc.HaXML_SetAtribute(*args)

def HaXML_SetAtributeV(*args) -> "int":
    return _molsetc.HaXML_SetAtributeV(*args)

def HaXML_SetTableElement(*args) -> "int":
    return _molsetc.HaXML_SetTableElement(*args)

def HaXML_SetText(Elt: "TiXmlElement", Vec: "std_vector_int") -> "int":
    return _molsetc.HaXML_SetText(Elt, Vec)

def HaXML_GetAtribute(*args) -> "int":
    return _molsetc.HaXML_GetAtribute(*args)

def HaXML_GetAtributeV(*args) -> "int":
    return _molsetc.HaXML_GetAtributeV(*args)

def HaXML_GetVVIntElement(Elt: "TiXmlElement", TagName: "char const *", VVec: "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *") -> "int":
    return _molsetc.HaXML_GetVVIntElement(Elt, TagName, VVec)

def HaXML_SetElement(*args) -> "int":
    return _molsetc.HaXML_SetElement(*args)

def HaXML_GetElement(*args) -> "int":
    return _molsetc.HaXML_GetElement(*args)

def HaXML_GetTableElement(*args) -> "int":
    return _molsetc.HaXML_GetTableElement(*args)

def HaXML_GetText(Elt: "TiXmlElement", Vec: "std_vector_int") -> "int":
    return _molsetc.HaXML_GetText(Elt, Vec)

def HaXML_GetStrIndex(StrList: "StringVector", StrToComp: "std::string") -> "int":
    return _molsetc.HaXML_GetStrIndex(StrList, StrToComp)

def HaXML_GetStrByIndex(StrList: "StringVector", Index: "int") -> "std::string":
    return _molsetc.HaXML_GetStrByIndex(StrList, Index)


def HaWriteMapGZ(filename: "char const *", header: "TiXmlElement", fmap: "float *", gridsize: "int *", coef: "float", Comments: "char *") -> "int":
    return _molsetc.HaWriteMapGZ(filename, header, fmap, gridsize, coef, Comments)

def HaReadMapGZ(filename: "char const *", pheader: "TiXmlElement **", pfmap: "float **", gridsize: "int *", coef: "float") -> "int":
    return _molsetc.HaReadMapGZ(filename, pheader, pfmap, gridsize, coef)
class HaObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaObject_swiginit(self, _molsetc.new_HaObject())
    __swig_destroy__ = _molsetc.delete_HaObject

    def Clear(self) -> "int":
        return _molsetc.HaObject_Clear(self)

    def SetDefaultValues(self, p_ctxt: "HaContext"=None) -> "int":
        return _molsetc.HaObject_SetDefaultValues(self, p_ctxt)

    def SaveXML(self, Elt: "TiXmlElement", p_ctxt: "HaContext"=None) -> "int":
        return _molsetc.HaObject_SaveXML(self, Elt, p_ctxt)

    def LoadXML(self, Elt: "TiXmlElement", p_ctxt: "HaContext"=None) -> "int":
        return _molsetc.HaObject_LoadXML(self, Elt, p_ctxt)

    def SetName(self, name_new: "std::string const &") -> "void":
        return _molsetc.HaObject_SetName(self, name_new)

    def GetName(self) -> "char const *":
        return _molsetc.HaObject_GetName(self)

    def GetCStrName(self) -> "char const *":
        return _molsetc.HaObject_GetCStrName(self)

    def GetStdStrName(self) -> "std::string":
        return _molsetc.HaObject_GetStdStrName(self)

# Register HaObject in _molsetc:
_molsetc.HaObject_swigregister(HaObject)

class HaContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaContext_swiginit(self, _molsetc.new_HaContext())
    __swig_destroy__ = _molsetc.delete_HaContext

    def GetPrimaryOption(self) -> "int":
        return _molsetc.HaContext_GetPrimaryOption(self)

    def SetPrimaryOption(self, option_primary_new: "int") -> "void":
        return _molsetc.HaContext_SetPrimaryOption(self, option_primary_new)

# Register HaContext in _molsetc:
_molsetc.HaContext_swigregister(HaContext)

class std_vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _molsetc.std_vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _molsetc.std_vector_double___nonzero__(self)

    def __bool__(self) -> "bool":
        return _molsetc.std_vector_double___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _molsetc.std_vector_double___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _molsetc.std_vector_double___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _molsetc.std_vector_double___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _molsetc.std_vector_double___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _molsetc.std_vector_double___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _molsetc.std_vector_double___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _molsetc.std_vector_double___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _molsetc.std_vector_double_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _molsetc.std_vector_double_append(self, x)

    def empty(self) -> "bool":
        return _molsetc.std_vector_double_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _molsetc.std_vector_double_size(self)

    def swap(self, v: "std_vector_double") -> "void":
        return _molsetc.std_vector_double_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _molsetc.std_vector_double_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _molsetc.std_vector_double_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _molsetc.std_vector_double_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _molsetc.std_vector_double_rend(self)

    def clear(self) -> "void":
        return _molsetc.std_vector_double_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _molsetc.std_vector_double_get_allocator(self)

    def pop_back(self) -> "void":
        return _molsetc.std_vector_double_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _molsetc.std_vector_double_erase(self, *args)

    def __init__(self, *args):
        _molsetc.std_vector_double_swiginit(self, _molsetc.new_std_vector_double(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _molsetc.std_vector_double_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _molsetc.std_vector_double_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _molsetc.std_vector_double_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _molsetc.std_vector_double_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _molsetc.std_vector_double_resize(self, *args)

    def insert(self, *args) -> "void":
        return _molsetc.std_vector_double_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _molsetc.std_vector_double_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _molsetc.std_vector_double_capacity(self)
    __swig_destroy__ = _molsetc.delete_std_vector_double

# Register std_vector_double in _molsetc:
_molsetc.std_vector_double_swigregister(std_vector_double)

class std_vector_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _molsetc.std_vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _molsetc.std_vector_int___nonzero__(self)

    def __bool__(self) -> "bool":
        return _molsetc.std_vector_int___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _molsetc.std_vector_int___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _molsetc.std_vector_int___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _molsetc.std_vector_int___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _molsetc.std_vector_int___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _molsetc.std_vector_int___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _molsetc.std_vector_int___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _molsetc.std_vector_int___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _molsetc.std_vector_int_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _molsetc.std_vector_int_append(self, x)

    def empty(self) -> "bool":
        return _molsetc.std_vector_int_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _molsetc.std_vector_int_size(self)

    def swap(self, v: "std_vector_int") -> "void":
        return _molsetc.std_vector_int_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _molsetc.std_vector_int_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _molsetc.std_vector_int_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _molsetc.std_vector_int_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _molsetc.std_vector_int_rend(self)

    def clear(self) -> "void":
        return _molsetc.std_vector_int_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _molsetc.std_vector_int_get_allocator(self)

    def pop_back(self) -> "void":
        return _molsetc.std_vector_int_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _molsetc.std_vector_int_erase(self, *args)

    def __init__(self, *args):
        _molsetc.std_vector_int_swiginit(self, _molsetc.new_std_vector_int(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _molsetc.std_vector_int_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _molsetc.std_vector_int_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _molsetc.std_vector_int_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _molsetc.std_vector_int_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _molsetc.std_vector_int_resize(self, *args)

    def insert(self, *args) -> "void":
        return _molsetc.std_vector_int_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _molsetc.std_vector_int_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _molsetc.std_vector_int_capacity(self)
    __swig_destroy__ = _molsetc.delete_std_vector_int

# Register std_vector_int in _molsetc:
_molsetc.std_vector_int_swigregister(std_vector_int)

class HaVec_int_parent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def newsize(self, size: "int") -> "void":
        return _molsetc.HaVec_int_parent_newsize(self, size)

    def begin(self) -> "int *":
        return _molsetc.HaVec_int_parent_begin(self)

    def end(self) -> "int *":
        return _molsetc.HaVec_int_parent_end(self)

    def size(self) -> "int":
        return _molsetc.HaVec_int_parent_size(self)

    def GetVal(self, i: "size_t") -> "int":
        return _molsetc.HaVec_int_parent_GetVal(self, i)

    def SetVal(self, i: "size_t", new_val: "int const") -> "void":
        return _molsetc.HaVec_int_parent_SetVal(self, i, new_val)

    def GetVal_idx0(self, i: "size_t") -> "int":
        return _molsetc.HaVec_int_parent_GetVal_idx0(self, i)

    def SetVal_idx0(self, i: "size_t", new_val: "int const") -> "void":
        return _molsetc.HaVec_int_parent_SetVal_idx0(self, i, new_val)
    __swig_destroy__ = _molsetc.delete_HaVec_int_parent

# Register HaVec_int_parent in _molsetc:
_molsetc.HaVec_int_parent_swigregister(HaVec_int_parent)

class HaVec_float_parent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaVec_float_parent_swiginit(self, _molsetc.new_HaVec_float_parent())

    def newsize(self, size: "int") -> "void":
        return _molsetc.HaVec_float_parent_newsize(self, size)

    def begin(self) -> "float *":
        return _molsetc.HaVec_float_parent_begin(self)

    def end(self) -> "float *":
        return _molsetc.HaVec_float_parent_end(self)

    def size(self) -> "int":
        return _molsetc.HaVec_float_parent_size(self)

    def GetVal(self, i: "size_t") -> "float":
        return _molsetc.HaVec_float_parent_GetVal(self, i)

    def SetVal(self, i: "size_t", new_val: "float const") -> "void":
        return _molsetc.HaVec_float_parent_SetVal(self, i, new_val)

    def GetVal_idx0(self, i: "size_t") -> "float":
        return _molsetc.HaVec_float_parent_GetVal_idx0(self, i)

    def SetVal_idx0(self, i: "size_t", new_val: "float const") -> "void":
        return _molsetc.HaVec_float_parent_SetVal_idx0(self, i, new_val)
    __swig_destroy__ = _molsetc.delete_HaVec_float_parent

# Register HaVec_float_parent in _molsetc:
_molsetc.HaVec_float_parent_swigregister(HaVec_float_parent)

class HaVec_double_parent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaVec_double_parent_swiginit(self, _molsetc.new_HaVec_double_parent())

    def newsize(self, size: "int") -> "void":
        return _molsetc.HaVec_double_parent_newsize(self, size)

    def begin(self) -> "double *":
        return _molsetc.HaVec_double_parent_begin(self)

    def end(self) -> "double *":
        return _molsetc.HaVec_double_parent_end(self)

    def r0(self, *args) -> "double":
        return _molsetc.HaVec_double_parent_r0(self, *args)

    def r1(self, *args) -> "double":
        return _molsetc.HaVec_double_parent_r1(self, *args)

    def size(self) -> "int":
        return _molsetc.HaVec_double_parent_size(self)

    def GetVal(self, i: "size_t") -> "double":
        return _molsetc.HaVec_double_parent_GetVal(self, i)

    def SetVal(self, i: "size_t", new_val: "double const") -> "void":
        return _molsetc.HaVec_double_parent_SetVal(self, i, new_val)

    def GetVal_idx0(self, i: "size_t") -> "double":
        return _molsetc.HaVec_double_parent_GetVal_idx0(self, i)

    def SetVal_idx0(self, i: "size_t", new_val: "double const") -> "void":
        return _molsetc.HaVec_double_parent_SetVal_idx0(self, i, new_val)
    __swig_destroy__ = _molsetc.delete_HaVec_double_parent

# Register HaVec_double_parent in _molsetc:
_molsetc.HaVec_double_parent_swigregister(HaVec_double_parent)

class HaVec_int(HaVec_int_parent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.HaVec_int_swiginit(self, _molsetc.new_HaVec_int(*args))
    __swig_destroy__ = _molsetc.delete_HaVec_int

# Register HaVec_int in _molsetc:
_molsetc.HaVec_int_swigregister(HaVec_int)

class HaVec_double(HaVec_double_parent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.HaVec_double_swiginit(self, _molsetc.new_HaVec_double(*args))
    __swig_destroy__ = _molsetc.delete_HaVec_double

# Register HaVec_double in _molsetc:
_molsetc.HaVec_double_swigregister(HaVec_double)

class HaVec_float(HaVec_float_parent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.HaVec_float_swiginit(self, _molsetc.new_HaVec_float(*args))
    __swig_destroy__ = _molsetc.delete_HaVec_float

# Register HaVec_float in _molsetc:
_molsetc.HaVec_float_swigregister(HaVec_float)

class HaHist(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, min: "double", max: "double", binsize: "double"):
        _molsetc.HaHist_swiginit(self, _molsetc.new_HaHist(min, max, binsize))
    __swig_destroy__ = _molsetc.delete_HaHist
    rleft = property(_molsetc.HaHist_rleft_get, _molsetc.HaHist_rleft_set)
    rcenter = property(_molsetc.HaHist_rcenter_get, _molsetc.HaHist_rcenter_set)
    ibins = property(_molsetc.HaHist_ibins_get, _molsetc.HaHist_ibins_set)
    dbins = property(_molsetc.HaHist_dbins_get, _molsetc.HaHist_dbins_set)

    def PutToIBins(self, val: "double") -> "int":
        return _molsetc.HaHist_PutToIBins(self, val)

# Register HaHist in _molsetc:
_molsetc.HaHist_swigregister(HaHist)

class HaMat_double_parent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def reserve(self, M: "size_t", N: "size_t") -> "void":
        return _molsetc.HaMat_double_parent_reserve(self, M, N)

    def newsize(self, M: "size_t", N: "size_t") -> "void":
        return _molsetc.HaMat_double_parent_newsize(self, M, N)

    def resize(self, M: "size_t", N: "size_t") -> "void":
        return _molsetc.HaMat_double_parent_resize(self, M, N)

    def GetVal(self, i: "size_t", j: "size_t") -> "double":
        return _molsetc.HaMat_double_parent_GetVal(self, i, j)

    def SetVal(self, i: "size_t", j: "size_t", new_val: "double const") -> "void":
        return _molsetc.HaMat_double_parent_SetVal(self, i, j, new_val)

    def GetVal_idx0(self, i: "size_t", j: "size_t") -> "double":
        return _molsetc.HaMat_double_parent_GetVal_idx0(self, i, j)

    def SetVal_idx0(self, i: "size_t", j: "size_t", new_val: "double const") -> "void":
        return _molsetc.HaMat_double_parent_SetVal_idx0(self, i, j, new_val)

    def r0(self, *args) -> "double":
        return _molsetc.HaMat_double_parent_r0(self, *args)

    def r1(self, *args) -> "double":
        return _molsetc.HaMat_double_parent_r1(self, *args)

    def dim(self, d: "int") -> "int":
        return _molsetc.HaMat_double_parent_dim(self, d)

    def num_rows(self) -> "int":
        return _molsetc.HaMat_double_parent_num_rows(self)

    def num_cols(self) -> "int":
        return _molsetc.HaMat_double_parent_num_cols(self)

    def begin(self) -> "double *":
        return _molsetc.HaMat_double_parent_begin(self)

    def end(self) -> "double *":
        return _molsetc.HaMat_double_parent_end(self)

    def __init__(self):
        _molsetc.HaMat_double_parent_swiginit(self, _molsetc.new_HaMat_double_parent())
    __swig_destroy__ = _molsetc.delete_HaMat_double_parent

# Register HaMat_double_parent in _molsetc:
_molsetc.HaMat_double_parent_swigregister(HaMat_double_parent)

class HaMat_double(HaMat_double_parent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.HaMat_double_swiginit(self, _molsetc.new_HaMat_double(*args))

    def set_from(self, ipack_mat: "Matrix &") -> "int":
        return _molsetc.HaMat_double_set_from(self, ipack_mat)

    def SetFromStr(self, str: "char const *") -> "int":
        return _molsetc.HaMat_double_SetFromStr(self, str)

    @staticmethod
    def mat_inverse(aa: "HaMat_double") -> "int":
        return _molsetc.HaMat_double_mat_inverse(aa)

    @staticmethod
    def mat_transpose(aa: "HaMat_double") -> "int":
        return _molsetc.HaMat_double_mat_transpose(aa)

    @staticmethod
    def mat_sdiag(aa: "HaMat_double", cc: "HaMat_double", eig: "HaVec_double") -> "int":
        return _molsetc.HaMat_double_mat_sdiag(aa, cc, eig)

    def SqRoot(self, isign: "int const"=1) -> "int":
        return _molsetc.HaMat_double_SqRoot(self, isign)

    @staticmethod
    def solv_lin_syst_1(a: "HaMat_double", b: "HaMat_double") -> "int":
        return _molsetc.HaMat_double_solv_lin_syst_1(a, b)

    @staticmethod
    def DiagMat(hmat: "HaMat_double", ss: "HaMat_double", eigv: "HaMat_double", eig_ene: "HaVec_double") -> "int":
        return _molsetc.HaMat_double_DiagMat(hmat, ss, eigv, eig_ene)

    @staticmethod
    def PrintSymmMat(*args) -> "int":
        return _molsetc.HaMat_double_PrintSymmMat(*args)

    def AddXml(self, *args) -> "TiXmlElement *":
        return _molsetc.HaMat_double_AddXml(self, *args)

    def LoadXml(self, mat_element: "TiXmlElement", option: "int"=0) -> "int":
        return _molsetc.HaMat_double_LoadXml(self, mat_element, option)
    __swig_destroy__ = _molsetc.delete_HaMat_double

# Register HaMat_double in _molsetc:
_molsetc.HaMat_double_swigregister(HaMat_double)

def HaMat_double_mat_inverse(aa: "HaMat_double") -> "int":
    return _molsetc.HaMat_double_mat_inverse(aa)

def HaMat_double_mat_transpose(aa: "HaMat_double") -> "int":
    return _molsetc.HaMat_double_mat_transpose(aa)

def HaMat_double_mat_sdiag(aa: "HaMat_double", cc: "HaMat_double", eig: "HaVec_double") -> "int":
    return _molsetc.HaMat_double_mat_sdiag(aa, cc, eig)

def HaMat_double_solv_lin_syst_1(a: "HaMat_double", b: "HaMat_double") -> "int":
    return _molsetc.HaMat_double_solv_lin_syst_1(a, b)

def HaMat_double_DiagMat(hmat: "HaMat_double", ss: "HaMat_double", eigv: "HaMat_double", eig_ene: "HaVec_double") -> "int":
    return _molsetc.HaMat_double_DiagMat(hmat, ss, eigv, eig_ene)

def HaMat_double_PrintSymmMat(*args) -> "int":
    return _molsetc.HaMat_double_PrintSymmMat(*args)


def matmult(C: "HaMat_double", A: "HaMat_double", B: "HaMat_double") -> "int":
    return _molsetc.matmult(C, A, B)

def matmult_T1(C: "HaMat_double", A: "HaMat_double", B: "HaMat_double") -> "int":
    return _molsetc.matmult_T1(C, A, B)

def matmult_T2(C: "HaMat_double", A: "HaMat_double", B: "HaMat_double") -> "int":
    return _molsetc.matmult_T2(C, A, B)
class HaSMat_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.HaSMat_double_swiginit(self, _molsetc.new_HaSMat_double(*args))
    __swig_destroy__ = _molsetc.delete_HaSMat_double

    def newsize(self, n: "int") -> "int":
        return _molsetc.HaSMat_double_newsize(self, n)

    def CopyFrom(self, *args) -> "int":
        return _molsetc.HaSMat_double_CopyFrom(self, *args)

    def CopyTo(self, dmat: "HaMat_double") -> "int":
        return _molsetc.HaSMat_double_CopyTo(self, dmat)

    def num_rows(self) -> "int":
        return _molsetc.HaSMat_double_num_rows(self)

    def num_cols(self) -> "int":
        return _molsetc.HaSMat_double_num_cols(self)

    def r0(self, *args) -> "double const &":
        return _molsetc.HaSMat_double_r0(self, *args)

    def begin(self, *args) -> "double const *":
        return _molsetc.HaSMat_double_begin(self, *args)
    ndim = property(_molsetc.HaSMat_double_ndim_get, _molsetc.HaSMat_double_ndim_set)
    amode = property(_molsetc.HaSMat_double_amode_get, _molsetc.HaSMat_double_amode_set)

# Register HaSMat_double in _molsetc:
_molsetc.HaSMat_double_swigregister(HaSMat_double)

class MultiVarFunctor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_MultiVarFunctor

    def __call__(self, xv: "HaVec_double") -> "double":
        return _molsetc.MultiVarFunctor___call__(self, xv)

    def CalcGrad(self, grad: "HaVec_double", xv: "HaVec_double") -> "int":
        return _molsetc.MultiVarFunctor_CalcGrad(self, grad, xv)

# Register MultiVarFunctor in _molsetc:
_molsetc.MultiVarFunctor_swigregister(MultiVarFunctor)


def va13ad_(iptr: "int *", pfunc: "ptrMinFunc1", n: "int *", x: "double *", f: "double *", g: "double *", scale: "double *", acc: "double *", w: "double *") -> "void":
    return _molsetc.va13ad_(iptr, pfunc, n, x, f, g, scale, acc, w)
class HaMinimizer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaMinimizer_swiginit(self, _molsetc.new_HaMinimizer())
    __swig_destroy__ = _molsetc.delete_HaMinimizer
    min_method = property(_molsetc.HaMinimizer_min_method_get, _molsetc.HaMinimizer_min_method_set)

    def GetNVar(self) -> "int":
        return _molsetc.HaMinimizer_GetNVar(self)

    def SetNVar(self, nvar: "int") -> "void":
        return _molsetc.HaMinimizer_SetNVar(self, nvar)

    def SetInitPoint(self, init_pt: "HaVec_double") -> "int":
        return _molsetc.HaMinimizer_SetInitPoint(self, init_pt)

    def CalcValGrad(self, x: "HaVec_double", val: "double &", grad: "HaVec_double") -> "int":
        return _molsetc.HaMinimizer_CalcValGrad(self, x, val, grad)

    def Minimize(self) -> "int":
        return _molsetc.HaMinimizer_Minimize(self)
    vvar = property(_molsetc.HaMinimizer_vvar_get, _molsetc.HaMinimizer_vvar_set)
    scale = property(_molsetc.HaMinimizer_scale_get, _molsetc.HaMinimizer_scale_set)
    fun_val = property(_molsetc.HaMinimizer_fun_val_get, _molsetc.HaMinimizer_fun_val_set)
    nitr = property(_molsetc.HaMinimizer_nitr_get, _molsetc.HaMinimizer_nitr_set)
    flast = property(_molsetc.HaMinimizer_flast_get, _molsetc.HaMinimizer_flast_set)
    glast = property(_molsetc.HaMinimizer_glast_get, _molsetc.HaMinimizer_glast_set)

# Register HaMinimizer in _molsetc:
_molsetc.HaMinimizer_swigregister(HaMinimizer)
BFGS_MIN_METH = cvar.BFGS_MIN_METH


def ij_indx0(i: "size_t", j: "size_t") -> "size_t":
    return _molsetc.ij_indx0(i, j)

def ij_indx1(i: "size_t", j: "size_t") -> "size_t":
    return _molsetc.ij_indx1(i, j)

def write_double_array_chuncks(os: "ostream", dvec: "HaVec_double", chunck_size: "int", form_str: "std::string const &") -> "int":
    return _molsetc.write_double_array_chuncks(os, dvec, chunck_size, form_str)

def write_float_array_chuncks(os: "ostream", fvec: "HaVec_float", chunck_size: "int", form_str: "std::string const &") -> "int":
    return _molsetc.write_float_array_chuncks(os, fvec, chunck_size, form_str)

def write_int_array_chuncks(os: "ostream", ivec: "HaVec_int", chunck_size: "int", form_str: "std::string const &") -> "int":
    return _molsetc.write_int_array_chuncks(os, ivec, chunck_size, form_str)

def dot_double(a: "double *", b: "double *", n: "int") -> "double":
    return _molsetc.dot_double(a, b, n)
class LanzPars(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.LanzPars_swiginit(self, _molsetc.new_LanzPars())
    __swig_destroy__ = _molsetc.delete_LanzPars
    mat_order = property(_molsetc.LanzPars_mat_order_get, _molsetc.LanzPars_mat_order_set)
    max_eigv_store = property(_molsetc.LanzPars_max_eigv_store_get, _molsetc.LanzPars_max_eigv_store_set)
    num_eigv_search = property(_molsetc.LanzPars_num_eigv_search_get, _molsetc.LanzPars_num_eigv_search_set)
    num_steps = property(_molsetc.LanzPars_num_steps_get, _molsetc.LanzPars_num_steps_set)
    iret = property(_molsetc.LanzPars_iret_get, _molsetc.LanzPars_iret_set)
    nfound = property(_molsetc.LanzPars_nfound_get, _molsetc.LanzPars_nfound_set)
    debug_lvl = property(_molsetc.LanzPars_debug_lvl_get, _molsetc.LanzPars_debug_lvl_set)
    problem_type = property(_molsetc.LanzPars_problem_type_get, _molsetc.LanzPars_problem_type_set)
    inertia_check = property(_molsetc.LanzPars_inertia_check_get, _molsetc.LanzPars_inertia_check_set)
    output_amount = property(_molsetc.LanzPars_output_amount_get, _molsetc.LanzPars_output_amount_set)
    max_steps_shift = property(_molsetc.LanzPars_max_steps_shift_get, _molsetc.LanzPars_max_steps_shift_set)
    search_in_boundary = property(_molsetc.LanzPars_search_in_boundary_get, _molsetc.LanzPars_search_in_boundary_set)
    fc_mat_fmt = property(_molsetc.LanzPars_fc_mat_fmt_get, _molsetc.LanzPars_fc_mat_fmt_set)
    m_mat_fmt = property(_molsetc.LanzPars_m_mat_fmt_get, _molsetc.LanzPars_m_mat_fmt_set)
    loop_unroll_lvl = property(_molsetc.LanzPars_loop_unroll_lvl_get, _molsetc.LanzPars_loop_unroll_lvl_set)
    factor_type = property(_molsetc.LanzPars_factor_type_get, _molsetc.LanzPars_factor_type_set)
    dyn_shift_off = property(_molsetc.LanzPars_dyn_shift_off_get, _molsetc.LanzPars_dyn_shift_off_set)
    init_guess = property(_molsetc.LanzPars_init_guess_get, _molsetc.LanzPars_init_guess_set)
    lead_y_idx = property(_molsetc.LanzPars_lead_y_idx_get, _molsetc.LanzPars_lead_y_idx_set)
    num_delay_piv = property(_molsetc.LanzPars_num_delay_piv_get, _molsetc.LanzPars_num_delay_piv_set)
    init_val = property(_molsetc.LanzPars_init_val_get, _molsetc.LanzPars_init_val_set)
    accuracy = property(_molsetc.LanzPars_accuracy_get, _molsetc.LanzPars_accuracy_set)
    left_bound = property(_molsetc.LanzPars_left_bound_get, _molsetc.LanzPars_left_bound_set)
    right_bound = property(_molsetc.LanzPars_right_bound_get, _molsetc.LanzPars_right_bound_set)
    store_factor = property(_molsetc.LanzPars_store_factor_get, _molsetc.LanzPars_store_factor_set)

# Register LanzPars in _molsetc:
_molsetc.LanzPars_swigregister(LanzPars)


def dgesv_(n: "int *", nrhs: "int *", a: "double *", lda: "int *", ipiv: "int *", b: "double *", ldb: "int *", info: "int *") -> "void":
    return _molsetc.dgesv_(n, nrhs, a, lda, ipiv, b, ldb, info)

def dsyev_(jobz: "char *", uplo: "char *", n: "int *", a: "double *", lda: "int *", w: "double *", work: "double *", lwork: "int *", info: "int *") -> "void":
    return _molsetc.dsyev_(jobz, uplo, n, a, lda, w, work, lwork, info)

def dsygv_(itype: "int *", jobz: "char *", uplo: "char *", n: "int *", a: "double *", lda: "int *", b: "double *", ldb: "int *", w: "double *", work: "double *", lwork: "int *", info: "int *") -> "void":
    return _molsetc.dsygv_(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, info)
class CmdParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.CmdParser_swiginit(self, _molsetc.new_CmdParser())
    __swig_destroy__ = _molsetc.delete_CmdParser
    CurToken = property(_molsetc.CmdParser_CurToken_get, _molsetc.CmdParser_CurToken_set)
    cmd_history = property(_molsetc.CmdParser_cmd_history_get, _molsetc.CmdParser_cmd_history_set)
    max_history_save = property(_molsetc.CmdParser_max_history_save_get, _molsetc.CmdParser_max_history_save_set)
    cur_history_cmd = property(_molsetc.CmdParser_cur_history_cmd_get, _molsetc.CmdParser_cur_history_cmd_set)
    Keywords = property(_molsetc.CmdParser_Keywords_get, _molsetc.CmdParser_Keywords_set)

    @staticmethod
    def InitKeywords() -> "int":
        return _molsetc.CmdParser_InitKeywords()

    @staticmethod
    def RegisterKeyword(keyw: "std::string", itok: "int const") -> "int":
        return _molsetc.CmdParser_RegisterKeyword(keyw, itok)
    TokenValue = property(_molsetc.CmdParser_TokenValue_get, _molsetc.CmdParser_TokenValue_set)
    TokenValueFloat = property(_molsetc.CmdParser_TokenValueFloat_get, _molsetc.CmdParser_TokenValueFloat_set)
    TokenIdent = property(_molsetc.CmdParser_TokenIdent_get, _molsetc.CmdParser_TokenIdent_set)
    str_start_pos = property(_molsetc.CmdParser_str_start_pos_get, _molsetc.CmdParser_str_start_pos_set)
    cursor_pos = property(_molsetc.CmdParser_cursor_pos_get, _molsetc.CmdParser_cursor_pos_set)

    def SetCmdLine(self, cmd_line: "std::string const &") -> "int":
        return _molsetc.CmdParser_SetCmdLine(self, cmd_line)

    def GetCmdLine(self) -> "char const *":
        return _molsetc.CmdParser_GetCmdLine(self)

    def GetStartPosSubstr(self) -> "char const *":
        return _molsetc.CmdParser_GetStartPosSubstr(self)

    def RollHistory(self, step: "int") -> "std::string":
        return _molsetc.CmdParser_RollHistory(self, step)

    def ResetCursorPosition(self) -> "void":
        return _molsetc.CmdParser_ResetCursorPosition(self)

    def CommandError(self, error: "char const *") -> "void":
        return _molsetc.CmdParser_CommandError(self, error)

    def LookUpKeyword(self) -> "int":
        return _molsetc.CmdParser_LookUpKeyword(self)

    def FetchToken(self) -> "int":
        return _molsetc.CmdParser_FetchToken(self)

    def NextIf(self, token: "int", error: "char const *") -> "int":
        return _molsetc.CmdParser_NextIf(self, token, error)

    def ParseColour(self, RVal: "int &", GVal: "int &", BVal: "int &") -> "int":
        return _molsetc.CmdParser_ParseColour(self, RVal, GVal, BVal)

    def ParseRange(self, neg: "int") -> "AtomExpr *":
        return _molsetc.CmdParser_ParseRange(self, neg)

    def ParseExpression(self, level: "int", pmset: "MolSet") -> "AtomExpr *":
        return _molsetc.CmdParser_ParseExpression(self, level, pmset)

# Register CmdParser in _molsetc:
_molsetc.CmdParser_swigregister(CmdParser)
FormatPDB = cvar.FormatPDB
FormatMacroMod = cvar.FormatMacroMod
FormatGaussian = cvar.FormatGaussian
FormatAlchemy = cvar.FormatAlchemy
FormatNMRPDB = cvar.FormatNMRPDB
FormatCharmm = cvar.FormatCharmm
FormatBiosym = cvar.FormatBiosym
FormatMOPAC = cvar.FormatMOPAC
FormatSHELX = cvar.FormatSHELX
FormatMol2 = cvar.FormatMol2
FormatFDAT = cvar.FormatFDAT
FormatMMDB = cvar.FormatMMDB
FormatMDL = cvar.FormatMDL
FormatXYZ = cvar.FormatXYZ
FormatCIF = cvar.FormatCIF
FormatCEX = cvar.FormatCEX
FormatRWF = cvar.FormatRWF
FormatHarlem = cvar.FormatHarlem
FormatAmberPrep = cvar.FormatAmberPrep
FormatAmberTop = cvar.FormatAmberTop
FormatAmberOff = cvar.FormatAmberOff
FormatHIN = cvar.FormatHIN
FormatGUESS = cvar.FormatGUESS

def CmdParser_InitKeywords() -> "int":
    return _molsetc.CmdParser_InitKeywords()

def CmdParser_RegisterKeyword(keyw: "std::string", itok: "int const") -> "int":
    return _molsetc.CmdParser_RegisterKeyword(keyw, itok)

DirChar = _molsetc.DirChar
BOHR_U = _molsetc.BOHR_U
ANGSTROM_U = _molsetc.ANGSTROM_U
DEGREE_U = _molsetc.DEGREE_U
RADIAN_U = _molsetc.RADIAN_U
class Vec3D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.Vec3D_swiginit(self, _molsetc.new_Vec3D(*args))
    __swig_destroy__ = _molsetc.delete_Vec3D

    def GetX(self) -> "double":
        return _molsetc.Vec3D_GetX(self)

    def GetY(self) -> "double":
        return _molsetc.Vec3D_GetY(self)

    def GetZ(self) -> "double":
        return _molsetc.Vec3D_GetZ(self)

    def GetX_Bohr(self) -> "double":
        return _molsetc.Vec3D_GetX_Bohr(self)

    def GetY_Bohr(self) -> "double":
        return _molsetc.Vec3D_GetY_Bohr(self)

    def GetZ_Bohr(self) -> "double":
        return _molsetc.Vec3D_GetZ_Bohr(self)

    def GetX_Ang(self) -> "double":
        return _molsetc.Vec3D_GetX_Ang(self)

    def GetY_Ang(self) -> "double":
        return _molsetc.Vec3D_GetY_Ang(self)

    def GetZ_Ang(self) -> "double":
        return _molsetc.Vec3D_GetZ_Ang(self)

    def SetCoordFrom(self, ref_vec: "Vec3D") -> "void":
        return _molsetc.Vec3D_SetCoordFrom(self, ref_vec)

    def __iadd__(self, v: "Vec3D") -> "Vec3D &":
        return _molsetc.Vec3D___iadd__(self, v)

    def length(self) -> "double":
        return _molsetc.Vec3D_length(self)

    def length2(self) -> "double":
        return _molsetc.Vec3D_length2(self)

    def IsClose(self, pt: "Vec3D", crit: "double"=0.001) -> "int":
        return _molsetc.Vec3D_IsClose(self, pt, crit)

    def SetX(self, x_new: "double const") -> "void":
        return _molsetc.Vec3D_SetX(self, x_new)

    def SetY(self, y_new: "double const") -> "void":
        return _molsetc.Vec3D_SetY(self, y_new)

    def SetZ(self, z_new: "double const") -> "void":
        return _molsetc.Vec3D_SetZ(self, z_new)

    def SetX_Bohr(self, x_new: "double") -> "void":
        return _molsetc.Vec3D_SetX_Bohr(self, x_new)

    def SetY_Bohr(self, y_new: "double") -> "void":
        return _molsetc.Vec3D_SetY_Bohr(self, y_new)

    def SetZ_Bohr(self, z_new: "double") -> "void":
        return _molsetc.Vec3D_SetZ_Bohr(self, z_new)

    def SetX_Ang(self, x_new: "double") -> "void":
        return _molsetc.Vec3D_SetX_Ang(self, x_new)

    def SetY_Ang(self, y_new: "double") -> "void":
        return _molsetc.Vec3D_SetY_Ang(self, y_new)

    def SetZ_Ang(self, z_new: "double") -> "void":
        return _molsetc.Vec3D_SetZ_Ang(self, z_new)

    def SetFromStr(self, str: "char const *") -> "int":
        return _molsetc.Vec3D_SetFromStr(self, str)

    def Scale(self, scale: "double") -> "void":
        return _molsetc.Vec3D_Scale(self, scale)

    def normalize(self) -> "int":
        return _molsetc.Vec3D_normalize(self)

    def SetZeros(self) -> "void":
        return _molsetc.Vec3D_SetZeros(self)

    def RotatePt(self, still_pt: "Vec3D", n: "Vec3D", cosa: "double", sina: "double") -> "int":
        return _molsetc.Vec3D_RotatePt(self, still_pt, n, cosa, sina)

    def Rotate(self, n: "Vec3D", cosa: "double", sina: "double") -> "int":
        return _molsetc.Vec3D_Rotate(self, n, cosa, sina)

    @staticmethod
    def CalcTorsion(atm1: "Vec3D", atm2: "Vec3D", atm3: "Vec3D", atm4: "Vec3D") -> "double":
        return _molsetc.Vec3D_CalcTorsion(atm1, atm2, atm3, atm4)

    @staticmethod
    def CalcDihedral(atm1: "Vec3D", atm2: "Vec3D", atm3: "Vec3D", atm4: "Vec3D") -> "double":
        return _molsetc.Vec3D_CalcDihedral(atm1, atm2, atm3, atm4)

    @staticmethod
    def CalcAngle(atm1: "Vec3D", atm2: "Vec3D", atm3: "Vec3D") -> "double":
        return _molsetc.Vec3D_CalcAngle(atm1, atm2, atm3)

    @staticmethod
    def CalcDistance(atm1: "Vec3D", atm2: "Vec3D", units: "CoordUnits const"=ANGSTROM_U) -> "double":
        return _molsetc.Vec3D_CalcDistance(atm1, atm2, units)

    @staticmethod
    def CalcDistanceSq(atm1: "Vec3D", atm2: "Vec3D", units: "CoordUnits const"=ANGSTROM_U) -> "double":
        return _molsetc.Vec3D_CalcDistanceSq(atm1, atm2, units)

    @staticmethod
    def VecProduct(vprod: "Vec3D", vec1: "Vec3D", vec2: "Vec3D") -> "int":
        return _molsetc.Vec3D_VecProduct(vprod, vec1, vec2)

    @staticmethod
    def DotProduct(vec1: "Vec3D", vec2: "Vec3D") -> "double":
        return _molsetc.Vec3D_DotProduct(vec1, vec2)

    @staticmethod
    def diff(c: "Vec3D", vec1: "Vec3D", vec2: "Vec3D") -> "int":
        return _molsetc.Vec3D_diff(c, vec1, vec2)

    @staticmethod
    def sum(c: "Vec3D", vec1: "Vec3D", vec2: "Vec3D") -> "int":
        return _molsetc.Vec3D_sum(c, vec1, vec2)

    @staticmethod
    def CalcHlxParams(c0_1: "Vec3D", v1_1: "Vec3D", v2_1: "Vec3D", v3_1: "Vec3D", c0_2: "Vec3D", v1_2: "Vec3D", v2_2: "Vec3D", v3_2: "Vec3D", shift: "double &", slide: "double &", rise: "double &", tilt: "double &", roll: "double &", twist: "double &", idir: "int"=1) -> "int":
        return _molsetc.Vec3D_CalcHlxParams(c0_1, v1_1, v2_1, v3_1, c0_2, v1_2, v2_2, v3_2, shift, slide, rise, tilt, roll, twist, idir)

    @staticmethod
    def SetAtomPos(pptr: "Vec3D", ptr1: "Vec3D", pptr2: "Vec3D", pptr3: "Vec3D", dist: "double", val_angle: "double", dih_angle: "double") -> "int":
        return _molsetc.Vec3D_SetAtomPos(pptr, ptr1, pptr2, pptr3, dist, val_angle, dih_angle)

    def GetPnt(self) -> "double *":
        return _molsetc.Vec3D_GetPnt(self)

# Register Vec3D in _molsetc:
_molsetc.Vec3D_swigregister(Vec3D)

def Vec3D_CalcTorsion(atm1: "Vec3D", atm2: "Vec3D", atm3: "Vec3D", atm4: "Vec3D") -> "double":
    return _molsetc.Vec3D_CalcTorsion(atm1, atm2, atm3, atm4)

def Vec3D_CalcDihedral(atm1: "Vec3D", atm2: "Vec3D", atm3: "Vec3D", atm4: "Vec3D") -> "double":
    return _molsetc.Vec3D_CalcDihedral(atm1, atm2, atm3, atm4)

def Vec3D_CalcAngle(atm1: "Vec3D", atm2: "Vec3D", atm3: "Vec3D") -> "double":
    return _molsetc.Vec3D_CalcAngle(atm1, atm2, atm3)

def Vec3D_CalcDistance(atm1: "Vec3D", atm2: "Vec3D", units: "CoordUnits const"=ANGSTROM_U) -> "double":
    return _molsetc.Vec3D_CalcDistance(atm1, atm2, units)

def Vec3D_CalcDistanceSq(atm1: "Vec3D", atm2: "Vec3D", units: "CoordUnits const"=ANGSTROM_U) -> "double":
    return _molsetc.Vec3D_CalcDistanceSq(atm1, atm2, units)

def Vec3D_VecProduct(vprod: "Vec3D", vec1: "Vec3D", vec2: "Vec3D") -> "int":
    return _molsetc.Vec3D_VecProduct(vprod, vec1, vec2)

def Vec3D_DotProduct(vec1: "Vec3D", vec2: "Vec3D") -> "double":
    return _molsetc.Vec3D_DotProduct(vec1, vec2)

def Vec3D_diff(c: "Vec3D", vec1: "Vec3D", vec2: "Vec3D") -> "int":
    return _molsetc.Vec3D_diff(c, vec1, vec2)

def Vec3D_sum(c: "Vec3D", vec1: "Vec3D", vec2: "Vec3D") -> "int":
    return _molsetc.Vec3D_sum(c, vec1, vec2)

def Vec3D_CalcHlxParams(c0_1: "Vec3D", v1_1: "Vec3D", v2_1: "Vec3D", v3_1: "Vec3D", c0_2: "Vec3D", v1_2: "Vec3D", v2_2: "Vec3D", v3_2: "Vec3D", shift: "double &", slide: "double &", rise: "double &", tilt: "double &", roll: "double &", twist: "double &", idir: "int"=1) -> "int":
    return _molsetc.Vec3D_CalcHlxParams(c0_1, v1_1, v2_1, v3_1, c0_2, v1_2, v2_2, v3_2, shift, slide, rise, tilt, roll, twist, idir)

def Vec3D_SetAtomPos(pptr: "Vec3D", ptr1: "Vec3D", pptr2: "Vec3D", pptr3: "Vec3D", dist: "double", val_angle: "double", dih_angle: "double") -> "int":
    return _molsetc.Vec3D_SetAtomPos(pptr, ptr1, pptr2, pptr3, dist, val_angle, dih_angle)

class PointIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_PointIterator

    def GetFirstPt(self) -> "Vec3D *":
        return _molsetc.PointIterator_GetFirstPt(self)

    def GetNextPt(self) -> "Vec3D *":
        return _molsetc.PointIterator_GetNextPt(self)

# Register PointIterator in _molsetc:
_molsetc.PointIterator_swigregister(PointIterator)

class PointIterator_const(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_PointIterator_const

    def GetFirstPt(self) -> "Vec3D const *":
        return _molsetc.PointIterator_const_GetFirstPt(self)

    def GetNextPt(self) -> "Vec3D const *":
        return _molsetc.PointIterator_const_GetNextPt(self)

# Register PointIterator_const in _molsetc:
_molsetc.PointIterator_const_swigregister(PointIterator_const)

class PointContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetPointIteratorPtr(self, *args) -> "PointIterator_const *":
        return _molsetc.PointContainer_GetPointIteratorPtr(self, *args)

    def GetNumPt(self) -> "int":
        return _molsetc.PointContainer_GetNumPt(self)

    def IsAtomCollection(self) -> "int":
        return _molsetc.PointContainer_IsAtomCollection(self)

    def IsWithinRadius(self, pptr: "Vec3D", dlimit2: "double") -> "int":
        return _molsetc.PointContainer_IsWithinRadius(self, pptr, dlimit2)

    def GetMinMaxCrd(self, MinX_v: "double &", MinY_v: "double &", MinZ_v: "double &", MaxX_v: "double &", MaxY_v: "double &", MaxZ_v: "double &") -> "bool":
        return _molsetc.PointContainer_GetMinMaxCrd(self, MinX_v, MinY_v, MinZ_v, MaxX_v, MaxY_v, MaxZ_v)

    def GetAverageCoord(self, *args) -> "Vec3D":
        return _molsetc.PointContainer_GetAverageCoord(self, *args)

    @staticmethod
    def FindCoordMatch(g1: "PointContainer", g2: "PointContainer", pt_pt_map: "PtrPtrMap") -> "int":
        return _molsetc.PointContainer_FindCoordMatch(g1, g2, pt_pt_map)

    @staticmethod
    def GetSuperimposeMat(*args) -> "int":
        return _molsetc.PointContainer_GetSuperimposeMat(*args)

    @staticmethod
    def CalcRMSD(g1: "PointContainer", g2: "PointContainer", transform: "int"=1) -> "double":
        return _molsetc.PointContainer_CalcRMSD(g1, g2, transform)

    def Transform(self, rot_mat: "HaMat_double", transl_vec: "HaVec_double") -> "int":
        return _molsetc.PointContainer_Transform(self, rot_mat, transl_vec)

    def SaveCrdToArray(self, crd_arr: "HaVec_double") -> "int":
        return _molsetc.PointContainer_SaveCrdToArray(self, crd_arr)

    def GetCrdArray(self) -> "HaVec_double":
        return _molsetc.PointContainer_GetCrdArray(self)

    def SetCrdFromArray(self, crd_arr: "HaVec_double") -> "int":
        return _molsetc.PointContainer_SetCrdFromArray(self, crd_arr)
    __swig_destroy__ = _molsetc.delete_PointContainer

# Register PointContainer in _molsetc:
_molsetc.PointContainer_swigregister(PointContainer)

def PointContainer_FindCoordMatch(g1: "PointContainer", g2: "PointContainer", pt_pt_map: "PtrPtrMap") -> "int":
    return _molsetc.PointContainer_FindCoordMatch(g1, g2, pt_pt_map)

def PointContainer_GetSuperimposeMat(*args) -> "int":
    return _molsetc.PointContainer_GetSuperimposeMat(*args)

def PointContainer_CalcRMSD(g1: "PointContainer", g2: "PointContainer", transform: "int"=1) -> "double":
    return _molsetc.PointContainer_CalcRMSD(g1, g2, transform)


def GetSuperimposeMat(ref_crd: "HaVec_double", g2: "PointContainer", rot_mat: "HaMat_double", transl_vec: "HaVec_double") -> "double":
    return _molsetc.GetSuperimposeMat(ref_crd, g2, rot_mat, transl_vec)
class PointIteratorGen(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.PointIteratorGen_swiginit(self, _molsetc.new_PointIteratorGen(*args))
    __swig_destroy__ = _molsetc.delete_PointIteratorGen

    def GetFirstPt(self) -> "Vec3D *":
        return _molsetc.PointIteratorGen_GetFirstPt(self)

    def GetNextPt(self) -> "Vec3D *":
        return _molsetc.PointIteratorGen_GetNextPt(self)

    def GetNumPt(self) -> "int":
        return _molsetc.PointIteratorGen_GetNumPt(self)

# Register PointIteratorGen in _molsetc:
_molsetc.PointIteratorGen_swigregister(PointIteratorGen)

class PointIteratorGen_const(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.PointIteratorGen_const_swiginit(self, _molsetc.new_PointIteratorGen_const(*args))
    __swig_destroy__ = _molsetc.delete_PointIteratorGen_const

    def GetFirstPt(self) -> "Vec3D const *":
        return _molsetc.PointIteratorGen_const_GetFirstPt(self)

    def GetNextPt(self) -> "Vec3D const *":
        return _molsetc.PointIteratorGen_const_GetNextPt(self)

    def GetNumPt(self) -> "int":
        return _molsetc.PointIteratorGen_const_GetNumPt(self)

# Register PointIteratorGen_const in _molsetc:
_molsetc.PointIteratorGen_const_swigregister(PointIteratorGen_const)

class Vec3DValArrayIterator(PointIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pt_array: "Vec3DValArray"):
        _molsetc.Vec3DValArrayIterator_swiginit(self, _molsetc.new_Vec3DValArrayIterator(pt_array))
    __swig_destroy__ = _molsetc.delete_Vec3DValArrayIterator

    def GetFirstPt(self) -> "Vec3D *":
        return _molsetc.Vec3DValArrayIterator_GetFirstPt(self)

    def GetNextPt(self) -> "Vec3D *":
        return _molsetc.Vec3DValArrayIterator_GetNextPt(self)

# Register Vec3DValArrayIterator in _molsetc:
_molsetc.Vec3DValArrayIterator_swigregister(Vec3DValArrayIterator)

class Vec3DValArrayIterator_const(PointIterator_const):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pt_array: "Vec3DValArray"):
        _molsetc.Vec3DValArrayIterator_const_swiginit(self, _molsetc.new_Vec3DValArrayIterator_const(pt_array))
    __swig_destroy__ = _molsetc.delete_Vec3DValArrayIterator_const

    def GetFirstPt(self) -> "Vec3D const *":
        return _molsetc.Vec3DValArrayIterator_const_GetFirstPt(self)

    def GetNextPt(self) -> "Vec3D const *":
        return _molsetc.Vec3DValArrayIterator_const_GetNextPt(self)

# Register Vec3DValArrayIterator_const in _molsetc:
_molsetc.Vec3DValArrayIterator_const_swigregister(Vec3DValArrayIterator_const)

class Vec3DValArray(PointContainer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.Vec3DValArray_swiginit(self, _molsetc.new_Vec3DValArray(*args))
    __swig_destroy__ = _molsetc.delete_Vec3DValArray

    def GetPointIteratorPtr(self, *args) -> "PointIterator_const *":
        return _molsetc.Vec3DValArray_GetPointIteratorPtr(self, *args)

    def GetNumPt(self) -> "int":
        return _molsetc.Vec3DValArray_GetNumPt(self)

# Register Vec3DValArray in _molsetc:
_molsetc.Vec3DValArray_swigregister(Vec3DValArray)

class Quaternion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.Quaternion_swiginit(self, _molsetc.new_Quaternion(*args))
    __swig_destroy__ = _molsetc.delete_Quaternion

    def __imul__(self, arg2: "Quaternion") -> "Quaternion const &":
        return _molsetc.Quaternion___imul__(self, arg2)

    def __invert__(self) -> "Quaternion const &":
        return _molsetc.Quaternion___invert__(self)

    def __neg__(self) -> "Quaternion const &":
        return _molsetc.Quaternion___neg__(self)

    def Normalize(self) -> "Quaternion const &":
        return _molsetc.Quaternion_Normalize(self)

    def GetQuaternion(self, w: "double &", x: "double &", y: "double &", z: "double &") -> "int":
        return _molsetc.Quaternion_GetQuaternion(self, w, x, y, z)

    def SetQuaternion(self, w: "double &", x: "double &", y: "double &", z: "double &") -> "int":
        return _molsetc.Quaternion_SetQuaternion(self, w, x, y, z)

    def QuaternionFromAxis(self, arg2: "double const", arg3: "double", arg4: "double", arg5: "double") -> "Quaternion const &":
        return _molsetc.Quaternion_QuaternionFromAxis(self, arg2, arg3, arg4, arg5)

    @staticmethod
    def QuaternionToRotMat(q: "Quaternion", rmat: "HaMat_double") -> "int":
        return _molsetc.Quaternion_QuaternionToRotMat(q, rmat)

    @staticmethod
    def RotMatToQuaternion(rmat: "HaMat_double", q: "Quaternion") -> "int":
        return _molsetc.Quaternion_RotMatToQuaternion(rmat, q)

    def Slerp(self, arg2: "Quaternion", arg3: "Quaternion", arg4: "double const") -> "void":
        return _molsetc.Quaternion_Slerp(self, arg2, arg3, arg4)

    def exp(self) -> "Quaternion const &":
        return _molsetc.Quaternion_exp(self)

    def log(self) -> "Quaternion const &":
        return _molsetc.Quaternion_log(self)

    def PrintOn(self) -> "void":
        return _molsetc.Quaternion_PrintOn(self)

# Register Quaternion in _molsetc:
_molsetc.Quaternion_swigregister(Quaternion)

def Quaternion_QuaternionToRotMat(q: "Quaternion", rmat: "HaMat_double") -> "int":
    return _molsetc.Quaternion_QuaternionToRotMat(q, rmat)

def Quaternion_RotMatToQuaternion(rmat: "HaMat_double", q: "Quaternion") -> "int":
    return _molsetc.Quaternion_RotMatToQuaternion(rmat, q)

class Rot3D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def RotMatToEuler(rmat: "HaMat_double", phi: "double &", cos_theta: "double &", psi: "double &") -> "int":
        return _molsetc.Rot3D_RotMatToEuler(rmat, phi, cos_theta, psi)

    @staticmethod
    def EulerToRotMat(phi: "double const", cos_theta: "double const", psi: "double const", rmat: "HaMat_double") -> "int":
        return _molsetc.Rot3D_EulerToRotMat(phi, cos_theta, psi, rmat)

    @staticmethod
    def IncrEulerAng(phi: "double &", cos_theta: "double &", psi: "double &", delt_phi: "double", delt_cos_theta: "double", delt_psi: "double") -> "int":
        return _molsetc.Rot3D_IncrEulerAng(phi, cos_theta, psi, delt_phi, delt_cos_theta, delt_psi)

    @staticmethod
    def NormalizeEulerAng(phi: "double &", cos_theta: "double &", psi: "double &") -> "int":
        return _molsetc.Rot3D_NormalizeEulerAng(phi, cos_theta, psi)

    @staticmethod
    def RotMatToQuat(rmat: "HaMat_double", q: "Quaternion") -> "int":
        return _molsetc.Rot3D_RotMatToQuat(rmat, q)

    @staticmethod
    def QuatToRotMat(q: "Quaternion", rmat: "HaMat_double") -> "int":
        return _molsetc.Rot3D_QuatToRotMat(q, rmat)

    def __init__(self):
        _molsetc.Rot3D_swiginit(self, _molsetc.new_Rot3D())
    __swig_destroy__ = _molsetc.delete_Rot3D

# Register Rot3D in _molsetc:
_molsetc.Rot3D_swigregister(Rot3D)

def Rot3D_RotMatToEuler(rmat: "HaMat_double", phi: "double &", cos_theta: "double &", psi: "double &") -> "int":
    return _molsetc.Rot3D_RotMatToEuler(rmat, phi, cos_theta, psi)

def Rot3D_EulerToRotMat(phi: "double const", cos_theta: "double const", psi: "double const", rmat: "HaMat_double") -> "int":
    return _molsetc.Rot3D_EulerToRotMat(phi, cos_theta, psi, rmat)

def Rot3D_IncrEulerAng(phi: "double &", cos_theta: "double &", psi: "double &", delt_phi: "double", delt_cos_theta: "double", delt_psi: "double") -> "int":
    return _molsetc.Rot3D_IncrEulerAng(phi, cos_theta, psi, delt_phi, delt_cos_theta, delt_psi)

def Rot3D_NormalizeEulerAng(phi: "double &", cos_theta: "double &", psi: "double &") -> "int":
    return _molsetc.Rot3D_NormalizeEulerAng(phi, cos_theta, psi)

def Rot3D_RotMatToQuat(rmat: "HaMat_double", q: "Quaternion") -> "int":
    return _molsetc.Rot3D_RotMatToQuat(rmat, q)

def Rot3D_QuatToRotMat(q: "Quaternion", rmat: "HaMat_double") -> "int":
    return _molsetc.Rot3D_QuatToRotMat(q, rmat)

class BoxRegionPointIterator(PointIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.BoxRegionPointIterator_swiginit(self, _molsetc.new_BoxRegionPointIterator(*args))
    __swig_destroy__ = _molsetc.delete_BoxRegionPointIterator

    def GetFirstPt(self) -> "Vec3D *":
        return _molsetc.BoxRegionPointIterator_GetFirstPt(self)

    def GetNextPt(self) -> "Vec3D *":
        return _molsetc.BoxRegionPointIterator_GetNextPt(self)

    def GetNumPt(self) -> "int":
        return _molsetc.BoxRegionPointIterator_GetNumPt(self)
    iax_min = property(_molsetc.BoxRegionPointIterator_iax_min_get, _molsetc.BoxRegionPointIterator_iax_min_set)
    iay_min = property(_molsetc.BoxRegionPointIterator_iay_min_get, _molsetc.BoxRegionPointIterator_iay_min_set)
    iaz_min = property(_molsetc.BoxRegionPointIterator_iaz_min_get, _molsetc.BoxRegionPointIterator_iaz_min_set)
    iax_max = property(_molsetc.BoxRegionPointIterator_iax_max_get, _molsetc.BoxRegionPointIterator_iax_max_set)
    iay_max = property(_molsetc.BoxRegionPointIterator_iay_max_get, _molsetc.BoxRegionPointIterator_iay_max_set)
    iaz_max = property(_molsetc.BoxRegionPointIterator_iaz_max_get, _molsetc.BoxRegionPointIterator_iaz_max_set)
    partition = property(_molsetc.BoxRegionPointIterator_partition_get, _molsetc.BoxRegionPointIterator_partition_set)

# Register BoxRegionPointIterator in _molsetc:
_molsetc.BoxRegionPointIterator_swigregister(BoxRegionPointIterator)

class BoxPartition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.BoxPartition_swiginit(self, _molsetc.new_BoxPartition())

    def SetDimensions(self, nx_new: "int", ny_new: "int", nz_new: "int") -> "int":
        return _molsetc.BoxPartition_SetDimensions(self, nx_new, ny_new, nz_new)

    def SetBoundaries(self, xmin_new: "double", ymin_new: "double", zmin_new: "double", xmax_new: "double", ymax_new: "double", zmax_new: "double") -> "int":
        return _molsetc.BoxPartition_SetBoundaries(self, xmin_new, ymin_new, zmin_new, xmax_new, ymax_new, zmax_new)

    def DistributePointsToCells(self, pt_coll: "PointContainer") -> "int":
        return _molsetc.BoxPartition_DistributePointsToCells(self, pt_coll)

    def AddPoint(self, pt: "Vec3D") -> "int":
        return _molsetc.BoxPartition_AddPoint(self, pt)
    xmin = property(_molsetc.BoxPartition_xmin_get, _molsetc.BoxPartition_xmin_set)
    ymin = property(_molsetc.BoxPartition_ymin_get, _molsetc.BoxPartition_ymin_set)
    zmin = property(_molsetc.BoxPartition_zmin_get, _molsetc.BoxPartition_zmin_set)
    dx = property(_molsetc.BoxPartition_dx_get, _molsetc.BoxPartition_dx_set)
    dy = property(_molsetc.BoxPartition_dy_get, _molsetc.BoxPartition_dy_set)
    dz = property(_molsetc.BoxPartition_dz_get, _molsetc.BoxPartition_dz_set)
    nx = property(_molsetc.BoxPartition_nx_get, _molsetc.BoxPartition_nx_set)
    ny = property(_molsetc.BoxPartition_ny_get, _molsetc.BoxPartition_ny_set)
    nz = property(_molsetc.BoxPartition_nz_get, _molsetc.BoxPartition_nz_set)

    def GetIdx_x(self, x_coord: "double") -> "int":
        return _molsetc.BoxPartition_GetIdx_x(self, x_coord)

    def GetIdx_y(self, y_coord: "double") -> "int":
        return _molsetc.BoxPartition_GetIdx_y(self, y_coord)

    def GetIdx_z(self, z_coord: "double") -> "int":
        return _molsetc.BoxPartition_GetIdx_z(self, z_coord)

    def GetPointCellIdx(self, *args) -> "int":
        return _molsetc.BoxPartition_GetPointCellIdx(self, *args)

    def GetLinCellIdx(self, ix: "int", iy: "int", iz: "int") -> "int":
        return _molsetc.BoxPartition_GetLinCellIdx(self, ix, iy, iz)
    ixrad = property(_molsetc.BoxPartition_ixrad_get, _molsetc.BoxPartition_ixrad_set)
    iyrad = property(_molsetc.BoxPartition_iyrad_get, _molsetc.BoxPartition_iyrad_set)
    izrad = property(_molsetc.BoxPartition_izrad_get, _molsetc.BoxPartition_izrad_set)

    def SetRegionRad(self, dist: "double") -> "int":
        return _molsetc.BoxPartition_SetRegionRad(self, dist)

    def GetNeighbors(self, pt: "Vec3D", neighbors: "AtomGroup") -> "int":
        return _molsetc.BoxPartition_GetNeighbors(self, pt, neighbors)

    def GetRegionPointIterator(self) -> "BoxRegionPointIterator":
        return _molsetc.BoxPartition_GetRegionPointIterator(self)
    __swig_destroy__ = _molsetc.delete_BoxPartition

# Register BoxPartition in _molsetc:
_molsetc.BoxPartition_swigregister(BoxPartition)

NO_HYBRID = _molsetc.NO_HYBRID
SP_HYBRID = _molsetc.SP_HYBRID
SP2_HYBRID = _molsetc.SP2_HYBRID
SP3_HYBRID = _molsetc.SP3_HYBRID
class HaAtom(Vec3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaAtom_swiginit(self, _molsetc.new_HaAtom())
    __swig_destroy__ = _molsetc.delete_HaAtom

    def SetParamFrom(self, atom_ref: "HaAtom") -> "bool":
        return _molsetc.HaAtom_SetParamFrom(self, atom_ref)

    def GetElemNo(self) -> "int":
        return _molsetc.HaAtom_GetElemNo(self)

    def SetElemNo(self, new_elem_no: "int const") -> "void":
        return _molsetc.HaAtom_SetElemNo(self, new_elem_no)

    def SetName(self, atname: "std::string const &") -> "void":
        return _molsetc.HaAtom_SetName(self, atname)

    def SetNameFast(self, atname: "std::string const &") -> "void":
        return _molsetc.HaAtom_SetNameFast(self, atname)

    def GetName(self) -> "char const *":
        return _molsetc.HaAtom_GetName(self)

    def GetStdSymbol(self) -> "std::string":
        return _molsetc.HaAtom_GetStdSymbol(self)

    def Select(self) -> "void":
        return _molsetc.HaAtom_Select(self)

    def UnSelect(self) -> "void":
        return _molsetc.HaAtom_UnSelect(self)

    def Selected(self) -> "int":
        return _molsetc.HaAtom_Selected(self)

    def IsDrawSphere(self) -> "bool":
        return _molsetc.HaAtom_IsDrawSphere(self)

    def SetDrawSphere(self, set_mode: "bool") -> "void":
        return _molsetc.HaAtom_SetDrawSphere(self, set_mode)

    def SetDisplayed(self, set_mode: "bool") -> "void":
        return _molsetc.HaAtom_SetDisplayed(self, set_mode)

    def IsDisplayed(self) -> "bool":
        return _molsetc.HaAtom_IsDisplayed(self)

    def IsDummy(self) -> "bool":
        return _molsetc.HaAtom_IsDummy(self)

    def SetDummy(self) -> "void":
        return _molsetc.HaAtom_SetDummy(self)

    def IsProxy(self) -> "bool":
        return _molsetc.HaAtom_IsProxy(self)

    def SetProxy(self, proxy_flag_new: "bool"=True) -> "void":
        return _molsetc.HaAtom_SetProxy(self, proxy_flag_new)

    def GetReplacedAtName(self) -> "std::string":
        return _molsetc.HaAtom_GetReplacedAtName(self)

    def SetReplacedAtName(self, repl_atom_name: "std::string const &") -> "void":
        return _molsetc.HaAtom_SetReplacedAtName(self, repl_atom_name)

    def IsHydrogen(self) -> "bool":
        return _molsetc.HaAtom_IsHydrogen(self)

    def GetDescription(self) -> "std::string":
        return _molsetc.HaAtom_GetDescription(self)

    def SetDescription(self, desc: "std::string const &") -> "void":
        return _molsetc.HaAtom_SetDescription(self, desc)

    def IsHBDonor(self) -> "bool":
        return _molsetc.HaAtom_IsHBDonor(self)

    def IsHBAcceptor(self) -> "bool":
        return _molsetc.HaAtom_IsHBAcceptor(self)

    def SetHBDonor(self, set_mode: "bool") -> "void":
        return _molsetc.HaAtom_SetHBDonor(self, set_mode)

    def SetHBAcceptor(self, set_mode: "bool") -> "void":
        return _molsetc.HaAtom_SetHBAcceptor(self, set_mode)

    def SetHBStatus(self, hb_status_str: "char const *") -> "int":
        return _molsetc.HaAtom_SetHBStatus(self, hb_status_str)

    def GetHBStatusTextStr(self, hb_status_str: "std::string &") -> "int":
        return _molsetc.HaAtom_GetHBStatusTextStr(self, hb_status_str)

    def GetHostRes(self, *args) -> "HaResidue const *":
        return _molsetc.HaAtom_GetHostRes(self, *args)

    def GetHostChain(self, *args) -> "HaChain const *":
        return _molsetc.HaAtom_GetHostChain(self, *args)

    def GetHostChemGroup(self) -> "ChemGroup *":
        return _molsetc.HaAtom_GetHostChemGroup(self)

    def GetHostMol(self, *args) -> "HaMolecule const *":
        return _molsetc.HaAtom_GetHostMol(self, *args)

    def GetHostMolSet(self, *args) -> "MolSet const *":
        return _molsetc.HaAtom_GetHostMolSet(self, *args)

    def SetHostRes(self, new_phost_res: "HaResidue") -> "void":
        return _molsetc.HaAtom_SetHostRes(self, new_phost_res)

    def Bonds_begin(self, *args) -> "HaAtom::BondIterator_const":
        return _molsetc.HaAtom_Bonds_begin(self, *args)

    def Bonds_end(self, *args) -> "HaAtom::BondIterator_const":
        return _molsetc.HaAtom_Bonds_end(self, *args)

    def GetBonds(self) -> "std::vector< HaBond *,std::allocator< HaBond * > > &":
        return _molsetc.HaAtom_GetBonds(self)

    def GetBondedAtoms(self, bonded_atoms: "AtomGroup") -> "int":
        return _molsetc.HaAtom_GetBondedAtoms(self, bonded_atoms)

    def GetHBondAcc(self, hbonded_acc_atoms: "AtomGroup") -> "int":
        return _molsetc.HaAtom_GetHBondAcc(self, hbonded_acc_atoms)

    def IsBonded(self, at2: "HaAtom") -> "bool":
        return _molsetc.HaAtom_IsBonded(self, at2)

    def RemoveBond(self, pb: "HaBond") -> "void":
        return _molsetc.HaAtom_RemoveBond(self, pb)

    @staticmethod
    def CreateBond(aptr1: "HaAtom", aptr2: "HaAtom") -> "int":
        return _molsetc.HaAtom_CreateBond(aptr1, aptr2)

    @staticmethod
    def DeleteBond(aptr1: "HaAtom", aptr2: "HaAtom") -> "int":
        return _molsetc.HaAtom_DeleteBond(aptr1, aptr2)

    @staticmethod
    def AddAtomFromTempl(aptr2: "HaAtom", aptr3: "HaAtom", aptr4: "HaAtom", aptr_templ: "HaAtom", aptr_templ_2: "HaAtom", aptr_templ_3: "HaAtom", aptr_templ_4: "HaAtom") -> "HaAtom *":
        return _molsetc.HaAtom_AddAtomFromTempl(aptr2, aptr3, aptr4, aptr_templ, aptr_templ_2, aptr_templ_3, aptr_templ_4)

    @staticmethod
    def SetCoordSubstH(aptr1: "HaAtom", aptr2: "HaAtom", haptr: "HaAtom") -> "bool":
        return _molsetc.HaAtom_SetCoordSubstH(aptr1, aptr2, haptr)

    @staticmethod
    def GetReachableAtoms(block_atoms: "AtomGroup", aptr2: "HaAtom", reach_atoms: "AtomGroup", loop: "int &") -> "int":
        return _molsetc.HaAtom_GetReachableAtoms(block_atoms, aptr2, reach_atoms, loop)

    @staticmethod
    def RegisterAtName(at_name: "std::string const &") -> "int":
        return _molsetc.HaAtom_RegisterAtName(at_name)

    @staticmethod
    def FillStdAtomTypes() -> "void":
        return _molsetc.HaAtom_FillStdAtomTypes()
    ElemDesc = property(_molsetc.HaAtom_ElemDesc_get, _molsetc.HaAtom_ElemDesc_set)
    at_name_refno_map = property(_molsetc.HaAtom_at_name_refno_map_get, _molsetc.HaAtom_at_name_refno_map_set)

    def IsSameName(self, aptr_ref: "HaAtom") -> "bool":
        return _molsetc.HaAtom_IsSameName(self, aptr_ref)

    def IsMatch(self, atempl: "HaAtom") -> "bool":
        return _molsetc.HaAtom_IsMatch(self, atempl)

    @staticmethod
    def AtTypeFromLbl(Label: "std::string const &") -> "int":
        return _molsetc.HaAtom_AtTypeFromLbl(Label)

    def Print_info(self, sout: "ostream", level: "int const") -> "bool":
        return _molsetc.HaAtom_Print_info(self, sout, level)
    ATOMREF_FULL = _molsetc.HaAtom_ATOMREF_FULL
    ATOMREF_STD = _molsetc.HaAtom_ATOMREF_STD
    ATOMREF_NO_MOL = _molsetc.HaAtom_ATOMREF_NO_MOL
    ATOMREF_NO_RES = _molsetc.HaAtom_ATOMREF_NO_RES
    ATOMREF_ELEM_NAME = _molsetc.HaAtom_ATOMREF_ELEM_NAME
    ATOMREF_ELEM_NO = _molsetc.HaAtom_ATOMREF_ELEM_NO

    def GetRef(self, *args) -> "std::string":
        return _molsetc.HaAtom_GetRef(self, *args)

    def FillRef(self, *args) -> "bool":
        return _molsetc.HaAtom_FillRef(self, *args)

    def GetSerNo(self) -> "int":
        return _molsetc.HaAtom_GetSerNo(self)

    @staticmethod
    def GetElemNoFromName(at_name: "std::string const &", pres: "HaResidue"=None) -> "int":
        return _molsetc.HaAtom_GetElemNoFromName(at_name, pres)

    @staticmethod
    def GetElemNoFromChar(ch_fst: "char") -> "int":
        return _molsetc.HaAtom_GetElemNoFromChar(ch_fst)

    @staticmethod
    def GetStdSymbolElem(elem: "int") -> "std::string":
        return _molsetc.HaAtom_GetStdSymbolElem(elem)

    @staticmethod
    def ElemVDWRadius(elem: "int", united_atom_flag: "bool"=False) -> "double":
        return _molsetc.HaAtom_ElemVDWRadius(elem, united_atom_flag)

    @staticmethod
    def StdElemMass(elem: "int") -> "double":
        return _molsetc.HaAtom_StdElemMass(elem)

    def GetStdMass(self) -> "double":
        return _molsetc.HaAtom_GetStdMass(self)

    @staticmethod
    def ElemDuttonRadius(elem: "int") -> "double":
        return _molsetc.HaAtom_ElemDuttonRadius(elem)

    def GetFFSymbol(self) -> "char const *":
        return _molsetc.HaAtom_GetFFSymbol(self)

    def SetFFSymbol(self, new_ff_symbol: "std::string") -> "char const *":
        return _molsetc.HaAtom_SetFFSymbol(self, new_ff_symbol)

    def SetCharge(self, new_charge: "double") -> "bool":
        return _molsetc.HaAtom_SetCharge(self, new_charge)

    def GetCharge(self) -> "double":
        return _molsetc.HaAtom_GetCharge(self)

    def GetMass(self) -> "double":
        return _molsetc.HaAtom_GetMass(self)

    def SetMass(self, new_mass: "double") -> "bool":
        return _molsetc.HaAtom_SetMass(self, new_mass)
    charge = property(_molsetc.HaAtom_charge_get, _molsetc.HaAtom_charge_set)
    mass = property(_molsetc.HaAtom_mass_get, _molsetc.HaAtom_mass_set)
    vdw_rad = property(_molsetc.HaAtom_vdw_rad_get, _molsetc.HaAtom_vdw_rad_set)
    ew = property(_molsetc.HaAtom_ew_get, _molsetc.HaAtom_ew_set)
    FFSymbol = property(_molsetc.HaAtom_FFSymbol_get, _molsetc.HaAtom_FFSymbol_set)
    comments = property(_molsetc.HaAtom_comments_get, _molsetc.HaAtom_comments_set)

    def AddXml(self, *args) -> "TiXmlElement *":
        return _molsetc.HaAtom_AddXml(self, *args)

    def LoadXml(self, xml_element: "TiXmlElement", option: "int"=0) -> "int":
        return _molsetc.HaAtom_LoadXml(self, xml_element, option)

    def IsAlphaCarbon(self) -> "bool":
        return _molsetc.HaAtom_IsAlphaCarbon(self)

    def IsSugarPhosphate(self) -> "bool":
        return _molsetc.HaAtom_IsSugarPhosphate(self)

    def IsAminoBackbone(self) -> "bool":
        return _molsetc.HaAtom_IsAminoBackbone(self)

    def IsShapelyBackbone(self) -> "bool":
        return _molsetc.HaAtom_IsShapelyBackbone(self)

    def IsNucleicBackbone(self) -> "bool":
        return _molsetc.HaAtom_IsNucleicBackbone(self)

    def IsShapelySpecial(self) -> "bool":
        return _molsetc.HaAtom_IsShapelySpecial(self)

    def IsCysteineSulfur(self) -> "bool":
        return _molsetc.HaAtom_IsCysteineSulfur(self)
    x = property(_molsetc.HaAtom_x_get, _molsetc.HaAtom_x_set)
    y = property(_molsetc.HaAtom_y_get, _molsetc.HaAtom_y_set)
    z = property(_molsetc.HaAtom_z_get, _molsetc.HaAtom_z_set)
    tempf = property(_molsetc.HaAtom_tempf_get, _molsetc.HaAtom_tempf_set)
    col = property(_molsetc.HaAtom_col_get, _molsetc.HaAtom_col_set)
    label = property(_molsetc.HaAtom_label_get, _molsetc.HaAtom_label_set)
    elemno = property(_molsetc.HaAtom_elemno_get, _molsetc.HaAtom_elemno_set)
    refno = property(_molsetc.HaAtom_refno_get, _molsetc.HaAtom_refno_set)
    flag = property(_molsetc.HaAtom_flag_get, _molsetc.HaAtom_flag_set)
    radius = property(_molsetc.HaAtom_radius_get, _molsetc.HaAtom_radius_set)
    image_radius = property(_molsetc.HaAtom_image_radius_get, _molsetc.HaAtom_image_radius_set)
    irad = property(_molsetc.HaAtom_irad_get, _molsetc.HaAtom_irad_set)
    solv_access_area = property(_molsetc.HaAtom_solv_access_area_get, _molsetc.HaAtom_solv_access_area_set)
    hybrid = property(_molsetc.HaAtom_hybrid_get, _molsetc.HaAtom_hybrid_set)

    def GetHybrid(self) -> "HYBRIDIZATION":
        return _molsetc.HaAtom_GetHybrid(self)

    def GetHybridTextStr(self, hybrid_str: "std::string &") -> "int":
        return _molsetc.HaAtom_GetHybridTextStr(self, hybrid_str)

    def SetHybrid(self, hybrid_str: "std::string const &") -> "int":
        return _molsetc.HaAtom_SetHybrid(self, hybrid_str)

    @staticmethod
    def StdBondLen(aptr1: "HaAtom", aptr2: "HaAtom") -> "double":
        return _molsetc.HaAtom_StdBondLen(aptr1, aptr2)

    def GetNBonds(self) -> "int":
        return _molsetc.HaAtom_GetNBonds(self)

# Register HaAtom in _molsetc:
_molsetc.HaAtom_swigregister(HaAtom)
DUMMY_ELEM = cvar.DUMMY_ELEM
SphereFlag = cvar.SphereFlag
HeteroFlag = cvar.HeteroFlag
HydrogenFlag = cvar.HydrogenFlag
NormAtomFlag = cvar.NormAtomFlag
NonBondFlag = cvar.NonBondFlag
BreakFlag = cvar.BreakFlag
DisplayedFlag = cvar.DisplayedFlag
HBDonorFlag = cvar.HBDonorFlag
HBAcceptorFlag = cvar.HBAcceptorFlag

def HaAtom_CreateBond(aptr1: "HaAtom", aptr2: "HaAtom") -> "int":
    return _molsetc.HaAtom_CreateBond(aptr1, aptr2)

def HaAtom_DeleteBond(aptr1: "HaAtom", aptr2: "HaAtom") -> "int":
    return _molsetc.HaAtom_DeleteBond(aptr1, aptr2)

def HaAtom_AddAtomFromTempl(aptr2: "HaAtom", aptr3: "HaAtom", aptr4: "HaAtom", aptr_templ: "HaAtom", aptr_templ_2: "HaAtom", aptr_templ_3: "HaAtom", aptr_templ_4: "HaAtom") -> "HaAtom *":
    return _molsetc.HaAtom_AddAtomFromTempl(aptr2, aptr3, aptr4, aptr_templ, aptr_templ_2, aptr_templ_3, aptr_templ_4)

def HaAtom_SetCoordSubstH(aptr1: "HaAtom", aptr2: "HaAtom", haptr: "HaAtom") -> "bool":
    return _molsetc.HaAtom_SetCoordSubstH(aptr1, aptr2, haptr)

def HaAtom_GetReachableAtoms(block_atoms: "AtomGroup", aptr2: "HaAtom", reach_atoms: "AtomGroup", loop: "int &") -> "int":
    return _molsetc.HaAtom_GetReachableAtoms(block_atoms, aptr2, reach_atoms, loop)

def HaAtom_RegisterAtName(at_name: "std::string const &") -> "int":
    return _molsetc.HaAtom_RegisterAtName(at_name)

def HaAtom_FillStdAtomTypes() -> "void":
    return _molsetc.HaAtom_FillStdAtomTypes()

def HaAtom_AtTypeFromLbl(Label: "std::string const &") -> "int":
    return _molsetc.HaAtom_AtTypeFromLbl(Label)

def HaAtom_GetElemNoFromName(at_name: "std::string const &", pres: "HaResidue"=None) -> "int":
    return _molsetc.HaAtom_GetElemNoFromName(at_name, pres)

def HaAtom_GetElemNoFromChar(ch_fst: "char") -> "int":
    return _molsetc.HaAtom_GetElemNoFromChar(ch_fst)

def HaAtom_GetStdSymbolElem(elem: "int") -> "std::string":
    return _molsetc.HaAtom_GetStdSymbolElem(elem)

def HaAtom_ElemVDWRadius(elem: "int", united_atom_flag: "bool"=False) -> "double":
    return _molsetc.HaAtom_ElemVDWRadius(elem, united_atom_flag)

def HaAtom_StdElemMass(elem: "int") -> "double":
    return _molsetc.HaAtom_StdElemMass(elem)

def HaAtom_ElemDuttonRadius(elem: "int") -> "double":
    return _molsetc.HaAtom_ElemDuttonRadius(elem)

def HaAtom_StdBondLen(aptr1: "HaAtom", aptr2: "HaAtom") -> "double":
    return _molsetc.HaAtom_StdBondLen(aptr1, aptr2)

class AtomDoubleMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.AtomDoubleMap_swiginit(self, _molsetc.new_AtomDoubleMap(*args))
    __swig_destroy__ = _molsetc.delete_AtomDoubleMap

    def GetValue(self, aptr: "HaAtom") -> "double":
        return _molsetc.AtomDoubleMap_GetValue(self, aptr)

    def SetValue(self, aptr: "HaAtom", new_val: "double") -> "int":
        return _molsetc.AtomDoubleMap_SetValue(self, aptr, new_val)

    def GetName(self) -> "char const *":
        return _molsetc.AtomDoubleMap_GetName(self)

    def SetName(self, new_name: "char const *") -> "void":
        return _molsetc.AtomDoubleMap_SetName(self, new_name)

# Register AtomDoubleMap in _molsetc:
_molsetc.AtomDoubleMap_swigregister(AtomDoubleMap)

class AtomAtomMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.AtomAtomMap_swiginit(self, _molsetc.new_AtomAtomMap())
    __swig_destroy__ = _molsetc.delete_AtomAtomMap

    def GetValue(self, aptr: "HaAtom") -> "HaAtom *":
        return _molsetc.AtomAtomMap_GetValue(self, aptr)

    def SetValue(self, aptr: "HaAtom", val: "HaAtom") -> "void":
        return _molsetc.AtomAtomMap_SetValue(self, aptr, val)

# Register AtomAtomMap in _molsetc:
_molsetc.AtomAtomMap_swigregister(AtomAtomMap)

class ElemStruct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    symbol = property(_molsetc.ElemStruct_symbol_get, _molsetc.ElemStruct_symbol_set)
    covalrad = property(_molsetc.ElemStruct_covalrad_get, _molsetc.ElemStruct_covalrad_set)
    vdwrad = property(_molsetc.ElemStruct_vdwrad_get, _molsetc.ElemStruct_vdwrad_set)
    mass = property(_molsetc.ElemStruct_mass_get, _molsetc.ElemStruct_mass_set)
    cpkcol = property(_molsetc.ElemStruct_cpkcol_get, _molsetc.ElemStruct_cpkcol_set)
    name = property(_molsetc.ElemStruct_name_get, _molsetc.ElemStruct_name_set)

    def __init__(self):
        _molsetc.ElemStruct_swiginit(self, _molsetc.new_ElemStruct())
    __swig_destroy__ = _molsetc.delete_ElemStruct

# Register ElemStruct in _molsetc:
_molsetc.ElemStruct_swigregister(ElemStruct)
MAXELEMNO = cvar.MAXELEMNO

class AtomIterator(PointIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_AtomIterator

    def GetFirstAtom(self) -> "HaAtom *":
        return _molsetc.AtomIterator_GetFirstAtom(self)

    def GetNextAtom(self) -> "HaAtom *":
        return _molsetc.AtomIterator_GetNextAtom(self)

    def GetFirstPt(self) -> "Vec3D *":
        return _molsetc.AtomIterator_GetFirstPt(self)

    def GetNextPt(self) -> "Vec3D *":
        return _molsetc.AtomIterator_GetNextPt(self)

# Register AtomIterator in _molsetc:
_molsetc.AtomIterator_swigregister(AtomIterator)

class AtomIterator_const(PointIterator_const):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_AtomIterator_const

    def GetFirstAtom(self) -> "HaAtom const *":
        return _molsetc.AtomIterator_const_GetFirstAtom(self)

    def GetNextAtom(self) -> "HaAtom const *":
        return _molsetc.AtomIterator_const_GetNextAtom(self)

    def GetFirstPt(self) -> "Vec3D const *":
        return _molsetc.AtomIterator_const_GetFirstPt(self)

    def GetNextPt(self) -> "Vec3D const *":
        return _molsetc.AtomIterator_const_GetNextPt(self)

# Register AtomIterator_const in _molsetc:
_molsetc.AtomIterator_const_swigregister(AtomIterator_const)

class AtomLoadOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.AtomLoadOptions_swiginit(self, _molsetc.new_AtomLoadOptions(*args))
    __swig_destroy__ = _molsetc.delete_AtomLoadOptions

    def Copy(self, ref: "HashMap") -> "void":
        return _molsetc.AtomLoadOptions_Copy(self, ref)

    def clone(self) -> "harlem::HashMap *":
        return _molsetc.AtomLoadOptions_clone(self)

    def SetStdOptions(self) -> "void":
        return _molsetc.AtomLoadOptions_SetStdOptions(self)

    def GetDefaultMolName(self) -> "std::string const &":
        return _molsetc.AtomLoadOptions_GetDefaultMolName(self)

    def SetDefaultMolName(self, mol_name: "std::string const &") -> "void":
        return _molsetc.AtomLoadOptions_SetDefaultMolName(self, mol_name)

    def ConvertResNames(self) -> "int":
        return _molsetc.AtomLoadOptions_ConvertResNames(self)

    def SetConvertResNames(self, convert_res_names_opt: "int") -> "void":
        return _molsetc.AtomLoadOptions_SetConvertResNames(self, convert_res_names_opt)

    def ToCalcBonds(self) -> "bool":
        return _molsetc.AtomLoadOptions_ToCalcBonds(self)

    def SetCalcBonds(self, set_par: "bool"=True) -> "void":
        return _molsetc.AtomLoadOptions_SetCalcBonds(self, set_par)

    def UniqueAtNames(self) -> "bool":
        return _molsetc.AtomLoadOptions_UniqueAtNames(self)

    def SetUniqueAtNames(self, set_par: "bool"=True) -> "void":
        return _molsetc.AtomLoadOptions_SetUniqueAtNames(self, set_par)

# Register AtomLoadOptions in _molsetc:
_molsetc.AtomLoadOptions_swigregister(AtomLoadOptions)

class AtomSaveOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.AtomSaveOptions_swiginit(self, _molsetc.new_AtomSaveOptions(*args))
    __swig_destroy__ = _molsetc.delete_AtomSaveOptions

    def Copy(self, ref: "HashMap") -> "void":
        return _molsetc.AtomSaveOptions_Copy(self, ref)

    def clone(self) -> "harlem::HashMap *":
        return _molsetc.AtomSaveOptions_clone(self)

    def SetStdOptions(self) -> "void":
        return _molsetc.AtomSaveOptions_SetStdOptions(self)
    save_selected = property(_molsetc.AtomSaveOptions_save_selected_get, _molsetc.AtomSaveOptions_save_selected_set)
    save_connect = property(_molsetc.AtomSaveOptions_save_connect_get, _molsetc.AtomSaveOptions_save_connect_set)
    save_transform = property(_molsetc.AtomSaveOptions_save_transform_get, _molsetc.AtomSaveOptions_save_transform_set)
    save_atom_ref = property(_molsetc.AtomSaveOptions_save_atom_ref_get, _molsetc.AtomSaveOptions_save_atom_ref_set)
    save_amber_pdb = property(_molsetc.AtomSaveOptions_save_amber_pdb_get, _molsetc.AtomSaveOptions_save_amber_pdb_set)
    save_sep_wat_mol = property(_molsetc.AtomSaveOptions_save_sep_wat_mol_get, _molsetc.AtomSaveOptions_save_sep_wat_mol_set)
    at_ref_type = property(_molsetc.AtomSaveOptions_at_ref_type_get, _molsetc.AtomSaveOptions_at_ref_type_set)

# Register AtomSaveOptions in _molsetc:
_molsetc.AtomSaveOptions_swigregister(AtomSaveOptions)

class AtomContainer(PointContainer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetAtomIteratorPtr(self) -> "AtomIterator *":
        return _molsetc.AtomContainer_GetAtomIteratorPtr(self)

    def GetNAtoms(self) -> "int":
        return _molsetc.AtomContainer_GetNAtoms(self)

    def IsMember(self, aptr: "HaAtom") -> "int":
        return _molsetc.AtomContainer_IsMember(self, aptr)

    def __iter__(self) -> "AtomIteratorGen":
        return _molsetc.AtomContainer___iter__(self)

    def GetAtomIterator(self) -> "AtomIteratorGen":
        return _molsetc.AtomContainer_GetAtomIterator(self)

    def IsAtomCollection(self) -> "int":
        return _molsetc.AtomContainer_IsAtomCollection(self)

    def GetStdRotMat(self, rot_mat: "HaMat_double") -> "bool":
        return _molsetc.AtomContainer_GetStdRotMat(self, rot_mat)

    def GetStdMomInertRotMat(self, rot_mat: "HaMat_double") -> "bool":
        return _molsetc.AtomContainer_GetStdMomInertRotMat(self, rot_mat)

    def GetStdPosition(self, rot_std: "HaMat_double", trans_std: "Vec3D") -> "int":
        return _molsetc.AtomContainer_GetStdPosition(self, rot_std, trans_std)

    def SetPosition(self, rot_new: "HaMat_double", trans_new: "Vec3D") -> "int":
        return _molsetc.AtomContainer_SetPosition(self, rot_new, trans_new)

    def GetStdPositionMomInertia(self, rot_std: "HaMat_double", trans_std: "Vec3D") -> "int":
        return _molsetc.AtomContainer_GetStdPositionMomInertia(self, rot_std, trans_std)

    def SetPositionMomInertia(self, rot_new: "HaMat_double", trans_new: "Vec3D") -> "int":
        return _molsetc.AtomContainer_SetPositionMomInertia(self, rot_new, trans_new)

    def RotateAtoms(self, rot_mat: "HaMat_double", cnt: "Vec3D") -> "int":
        return _molsetc.AtomContainer_RotateAtoms(self, rot_mat, cnt)

    def TranslateAtoms(self, tr_vec: "Vec3D") -> "int":
        return _molsetc.AtomContainer_TranslateAtoms(self, tr_vec)

    def SetPosEulerTrans(self, phi: "double", cos_theta: "double", psi: "double", trans: "Vec3D") -> "int":
        return _molsetc.AtomContainer_SetPosEulerTrans(self, phi, cos_theta, psi, trans)

    def GetPosEulerTrans(self, phi: "double &", cos_theta: "double &", psi: "double &", trans: "Vec3D") -> "void":
        return _molsetc.AtomContainer_GetPosEulerTrans(self, phi, cos_theta, psi, trans)

    def SetQuaternionTrans(self, q: "Quaternion", trans: "Vec3D") -> "int":
        return _molsetc.AtomContainer_SetQuaternionTrans(self, q, trans)

    def GetQuaternionTrans(self, q: "Quaternion", trans: "Vec3D") -> "void":
        return _molsetc.AtomContainer_GetQuaternionTrans(self, q, trans)

    def SetIntCoordFromStr(self, int_crd_str: "char const *") -> "int":
        return _molsetc.AtomContainer_SetIntCoordFromStr(self, int_crd_str)

    def SaveXYZFile(self, fout_name: "char const *", p_opt: "AtomSaveOptions"=None) -> "int":
        return _molsetc.AtomContainer_SaveXYZFile(self, fout_name, p_opt)

    def SaveXYZStream(self, sout: "ostream", p_opt: "AtomSaveOptions"=None) -> "int":
        return _molsetc.AtomContainer_SaveXYZStream(self, sout, p_opt)

    def SaveGROFile(self, fout_name: "char const *", p_opt: "AtomSaveOptions"=None) -> "int":
        return _molsetc.AtomContainer_SaveGROFile(self, fout_name, p_opt)

    def SaveGROStream(self, sout: "ostream", p_opt: "AtomSaveOptions"=None) -> "int":
        return _molsetc.AtomContainer_SaveGROStream(self, sout, p_opt)
    __swig_destroy__ = _molsetc.delete_AtomContainer

# Register AtomContainer in _molsetc:
_molsetc.AtomContainer_swigregister(AtomContainer)

class AtomIteratorGen(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.AtomIteratorGen_swiginit(self, _molsetc.new_AtomIteratorGen(*args))
    __swig_destroy__ = _molsetc.delete_AtomIteratorGen

    def GetFirstAtom(self) -> "HaAtom *":
        return _molsetc.AtomIteratorGen_GetFirstAtom(self)

    def GetNextAtom(self) -> "HaAtom *":
        return _molsetc.AtomIteratorGen_GetNextAtom(self)

    def GetNAtoms(self) -> "int":
        return _molsetc.AtomIteratorGen_GetNAtoms(self)

    def next(self) -> "HaAtom *":
        return _molsetc.AtomIteratorGen_next(self)

    def __next__(self) -> "HaAtom *":
        return _molsetc.AtomIteratorGen___next__(self)

    def __iter__(self) -> "AtomIteratorGen":
        return _molsetc.AtomIteratorGen___iter__(self)

# Register AtomIteratorGen in _molsetc:
_molsetc.AtomIteratorGen_swigregister(AtomIteratorGen)

class AtomIteratorAtomGroup(AtomIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_p_at_group: "AtomGroup"):
        _molsetc.AtomIteratorAtomGroup_swiginit(self, _molsetc.new_AtomIteratorAtomGroup(new_p_at_group))
    __swig_destroy__ = _molsetc.delete_AtomIteratorAtomGroup

    def GetFirstAtom(self) -> "HaAtom *":
        return _molsetc.AtomIteratorAtomGroup_GetFirstAtom(self)

    def GetNextAtom(self) -> "HaAtom *":
        return _molsetc.AtomIteratorAtomGroup_GetNextAtom(self)

# Register AtomIteratorAtomGroup in _molsetc:
_molsetc.AtomIteratorAtomGroup_swigregister(AtomIteratorAtomGroup)

class AtomIteratorAtomGroup_const(AtomIterator_const):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_p_at_group: "AtomGroup"):
        _molsetc.AtomIteratorAtomGroup_const_swiginit(self, _molsetc.new_AtomIteratorAtomGroup_const(new_p_at_group))
    __swig_destroy__ = _molsetc.delete_AtomIteratorAtomGroup_const

    def GetFirstAtom(self) -> "HaAtom const *":
        return _molsetc.AtomIteratorAtomGroup_const_GetFirstAtom(self)

    def GetNextAtom(self) -> "HaAtom const *":
        return _molsetc.AtomIteratorAtomGroup_const_GetNextAtom(self)

# Register AtomIteratorAtomGroup_const in _molsetc:
_molsetc.AtomIteratorAtomGroup_const_swigregister(AtomIteratorAtomGroup_const)

class AtomGroup(HaAtomVector, AtomContainer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.AtomGroup_swiginit(self, _molsetc.new_AtomGroup(*args))
    __swig_destroy__ = _molsetc.delete_AtomGroup

    def GetAtomIteratorPtr(self) -> "AtomIterator *":
        return _molsetc.AtomGroup_GetAtomIteratorPtr(self)

    def GetNAtoms(self) -> "int":
        return _molsetc.AtomGroup_GetNAtoms(self)

    def IsMember(self, aptr: "HaAtom") -> "int":
        return _molsetc.AtomGroup_IsMember(self, aptr)

    def GetPointIteratorPtr(self, *args) -> "PointIterator_const *":
        return _molsetc.AtomGroup_GetPointIteratorPtr(self, *args)

    def GetNumPt(self) -> "int":
        return _molsetc.AtomGroup_GetNumPt(self)

    def GetAtomByName(self, at_name: "std::string const &") -> "HaAtom *":
        return _molsetc.AtomGroup_GetAtomByName(self, at_name)

    def GetAtomByIdx(self, idx: "size_t") -> "HaAtom *":
        return _molsetc.AtomGroup_GetAtomByIdx(self, idx)

    def InsertAtom(self, aptr: "HaAtom") -> "bool":
        return _molsetc.AtomGroup_InsertAtom(self, aptr)

    def DeleteAtom(self, aptr: "HaAtom") -> "bool":
        return _molsetc.AtomGroup_DeleteAtom(self, aptr)

    def DeleteAtoms(self, ptr_set: "PtrSet") -> "int":
        return _molsetc.AtomGroup_DeleteAtoms(self, ptr_set)

    def DelSelAtoms(self) -> "int":
        return _molsetc.AtomGroup_DelSelAtoms(self)

    def SetFromExpr(self, expr: "AtomExpr", pmset: "MolSet") -> "void":
        return _molsetc.AtomGroup_SetFromExpr(self, expr, pmset)

    def SetFromExprStr(self, expr_str: "char const *", pmset: "MolSet") -> "void":
        return _molsetc.AtomGroup_SetFromExprStr(self, expr_str, pmset)

    def AddFromExpr(self, expr: "AtomExpr", pmset: "MolSet") -> "void":
        return _molsetc.AtomGroup_AddFromExpr(self, expr, pmset)

    def AddFromExprStr(self, expr_str: "char const *", pmset: "MolSet") -> "void":
        return _molsetc.AtomGroup_AddFromExprStr(self, expr_str, pmset)

    def DeleteAtomsExpr(self, expr: "AtomExpr", pmset: "MolSet") -> "void":
        return _molsetc.AtomGroup_DeleteAtomsExpr(self, expr, pmset)

    def DeleteAtomsExprStr(self, expr_str: "char const *", pmset: "MolSet") -> "void":
        return _molsetc.AtomGroup_DeleteAtomsExprStr(self, expr_str, pmset)

    def KeepOnlyAtomsExpr(self, expr: "AtomExpr", pmset: "MolSet") -> "void":
        return _molsetc.AtomGroup_KeepOnlyAtomsExpr(self, expr, pmset)

    def KeepOnlyAtomsExprStr(self, expr_str: "char const *", pmset: "MolSet") -> "void":
        return _molsetc.AtomGroup_KeepOnlyAtomsExprStr(self, expr_str, pmset)

    def GetID(self) -> "char const *":
        return _molsetc.AtomGroup_GetID(self)

    def SetID(self, new_id: "std::string const &") -> "void":
        return _molsetc.AtomGroup_SetID(self, new_id)

    def HasSelectedAtoms(self) -> "int":
        return _molsetc.AtomGroup_HasSelectedAtoms(self)

    def SelectAtomsAll(self) -> "void":
        return _molsetc.AtomGroup_SelectAtomsAll(self)

# Register AtomGroup in _molsetc:
_molsetc.AtomGroup_swigregister(AtomGroup)

class ChemGroup(AtomGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.ChemGroup_swiginit(self, _molsetc.new_ChemGroup(*args))
    __swig_destroy__ = _molsetc.delete_ChemGroup

    def FillRef(self, buf: "char *") -> "bool":
        return _molsetc.ChemGroup_FillRef(self, buf)

    def GetProtect(self) -> "double":
        return _molsetc.ChemGroup_GetProtect(self)

    def SetProtect(self, new_protect: "double const") -> "bool":
        return _molsetc.ChemGroup_SetProtect(self, new_protect)

    @staticmethod
    def GetIDFromRef(buf: "std::string const &") -> "std::string":
        return _molsetc.ChemGroup_GetIDFromRef(buf)

    def Print_info(self, sout: "ostream", level: "int const") -> "bool":
        return _molsetc.ChemGroup_Print_info(self, sout, level)

# Register ChemGroup in _molsetc:
_molsetc.ChemGroup_swigregister(ChemGroup)

def ChemGroup_GetIDFromRef(buf: "std::string const &") -> "std::string":
    return _molsetc.ChemGroup_GetIDFromRef(buf)

ADD_ALL_ATOMS = _molsetc.ADD_ALL_ATOMS
ADD_HYDROGENS = _molsetc.ADD_HYDROGENS
ADD_POLAR_HYDROGENS = _molsetc.ADD_POLAR_HYDROGENS
ADD_HEAVY_ATOMS = _molsetc.ADD_HEAVY_ATOMS
class HaResidue(AtomGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.HaResidue_swiginit(self, _molsetc.new_HaResidue(*args))
    __swig_destroy__ = _molsetc.delete_HaResidue

    def SetParamFrom(self, res_ref: "HaResidue") -> "bool":
        return _molsetc.HaResidue_SetParamFrom(self, res_ref)

    def GetNAtomsNonProxy(self) -> "int":
        return _molsetc.HaResidue_GetNAtomsNonProxy(self)

    def AddNewAtom(self) -> "HaAtom *":
        return _molsetc.HaResidue_AddNewAtom(self)

    def GetAtomByName(self, *args) -> "HaAtom const *":
        return _molsetc.HaResidue_GetAtomByName(self, *args)

    def GetHostChain(self) -> "HaChain *":
        return _molsetc.HaResidue_GetHostChain(self)

    def SetHostChain(self, new_phost: "HaChain") -> "bool":
        return _molsetc.HaResidue_SetHostChain(self, new_phost)

    def GetHostMol(self, *args) -> "HaMolecule const *":
        return _molsetc.HaResidue_GetHostMol(self, *args)

    def GetHostMolSet(self, *args) -> "MolSet const *":
        return _molsetc.HaResidue_GetHostMolSet(self, *args)

    def GetNextResInChain(self, *args) -> "HaResidue *":
        return _molsetc.HaResidue_GetNextResInChain(self, *args)

    def GetPrevResInChain(self, *args) -> "HaResidue *":
        return _molsetc.HaResidue_GetPrevResInChain(self, *args)

    def IsBonded(self, res2: "HaResidue") -> "bool":
        return _molsetc.HaResidue_IsBonded(self, res2)

    def HasBackBHBond(self, res2: "HaResidue") -> "int":
        return _molsetc.HaResidue_HasBackBHBond(self, res2)

    def GetName(self) -> "char const *":
        return _molsetc.HaResidue_GetName(self)

    def SetName(self, res_name: "std::string const &", convert_res_names: "int"=0) -> "void":
        return _molsetc.HaResidue_SetName(self, res_name, convert_res_names)

    def SetNameModifier(self, new_name_mod: "std::string const &") -> "void":
        return _molsetc.HaResidue_SetNameModifier(self, new_name_mod)

    def GetNameModifier(self) -> "char const *":
        return _molsetc.HaResidue_GetNameModifier(self)

    def GetFullName(self) -> "std::string":
        return _molsetc.HaResidue_GetFullName(self)

    @staticmethod
    def GetResNameFromFullName(res_full_name: "char const *") -> "std::string":
        return _molsetc.HaResidue_GetResNameFromFullName(res_full_name)

    def GetRef(self) -> "std::string":
        return _molsetc.HaResidue_GetRef(self)

    def FillRef(self, buf: "char *", mode: "int"=0) -> "bool":
        return _molsetc.HaResidue_FillRef(self, buf, mode)

    def GetAtomSeqNumMap(self, *args) -> "CAtomIntMap":
        return _molsetc.HaResidue_GetAtomSeqNumMap(self, *args)

    def SetUniqueAtomNames(self) -> "bool":
        return _molsetc.HaResidue_SetUniqueAtomNames(self)

    def GetUniqueAtomName(self, elem_no: "int") -> "std::string":
        return _molsetc.HaResidue_GetUniqueAtomName(self, elem_no)

    def SplitResidue(self) -> "bool":
        return _molsetc.HaResidue_SplitResidue(self)

    def SetStdCharges(self) -> "int":
        return _molsetc.HaResidue_SetStdCharges(self)

    def InterpolResParams(self, res_name_1: "char const *", res_name_2: "char const *", weight_1: "double") -> "int":
        return _molsetc.HaResidue_InterpolResParams(self, res_name_1, res_name_2, weight_1)

    def GetTemplate(self) -> "HaResidue *":
        return _molsetc.HaResidue_GetTemplate(self)

    def CheckStruct(self) -> "int":
        return _molsetc.HaResidue_CheckStruct(self)

    def CheckStructMortLib(self, ff_type: "ForceFieldType") -> "int":
        return _molsetc.HaResidue_CheckStructMortLib(self, ff_type)

    def AddMissingAtoms(self, atom_type: "ADD_ATOM_TYPE") -> "int":
        return _molsetc.HaResidue_AddMissingAtoms(self, atom_type)

    def AddWaterHydrogens(self) -> "int":
        return _molsetc.HaResidue_AddWaterHydrogens(self)

    def GetSerNo(self) -> "int":
        return _molsetc.HaResidue_GetSerNo(self)

    @staticmethod
    def GetResNameInTable(j: "int const") -> "char const *":
        return _molsetc.HaResidue_GetResNameInTable(j)

    def IsAmino(self) -> "bool":
        return _molsetc.HaResidue_IsAmino(self)

    def IsAminoNucleo(self) -> "bool":
        return _molsetc.HaResidue_IsAminoNucleo(self)

    def IsNucleo(self) -> "bool":
        return _molsetc.HaResidue_IsNucleo(self)

    def IsProtein(self) -> "bool":
        return _molsetc.HaResidue_IsProtein(self)

    def IsDNA(self) -> "bool":
        return _molsetc.HaResidue_IsDNA(self)

    def IsSolvent(self) -> "bool":
        return _molsetc.HaResidue_IsSolvent(self)

    def IsWater(self) -> "bool":
        return _molsetc.HaResidue_IsWater(self)

    def IsIon(self) -> "bool":
        return _molsetc.HaResidue_IsIon(self)

    def IsPyrimidine(self) -> "bool":
        return _molsetc.HaResidue_IsPyrimidine(self)

    def IsPurine(self) -> "bool":
        return _molsetc.HaResidue_IsPurine(self)

    def IsRNA(self) -> "bool":
        return _molsetc.HaResidue_IsRNA(self)

    def IsProline(self) -> "bool":
        return _molsetc.HaResidue_IsProline(self)

    def IsHistidine(self) -> "bool":
        return _molsetc.HaResidue_IsHistidine(self)

    def IsCysteine(self) -> "bool":
        return _molsetc.HaResidue_IsCysteine(self)

    def IsAdenine(self) -> "bool":
        return _molsetc.HaResidue_IsAdenine(self)

    def IsCytosine(self) -> "bool":
        return _molsetc.HaResidue_IsCytosine(self)

    def IsGuanine(self) -> "bool":
        return _molsetc.HaResidue_IsGuanine(self)

    def IsThymine(self) -> "bool":
        return _molsetc.HaResidue_IsThymine(self)

    def IsCoenzyme(self) -> "bool":
        return _molsetc.HaResidue_IsCoenzyme(self)

    def IsTerm(self) -> "bool":
        return _molsetc.HaResidue_IsTerm(self)

    def CalcStdCrdSys(self, fit_std_geom: "int"=0) -> "int":
        return _molsetc.HaResidue_CalcStdCrdSys(self, fit_std_geom)

    @staticmethod
    def CalcPhiAngle(prev: "HaResidue", curr: "HaResidue") -> "double":
        return _molsetc.HaResidue_CalcPhiAngle(prev, curr)

    @staticmethod
    def CalcPsiAngle(curr: "HaResidue", next: "HaResidue") -> "double":
        return _molsetc.HaResidue_CalcPsiAngle(curr, next)
    phost_ch = property(_molsetc.HaResidue_phost_ch_get, _molsetc.HaResidue_phost_ch_set)
    serno = property(_molsetc.HaResidue_serno_get, _molsetc.HaResidue_serno_set)
    width = property(_molsetc.HaResidue_width_get, _molsetc.HaResidue_width_set)
    col1 = property(_molsetc.HaResidue_col1_get, _molsetc.HaResidue_col1_set)
    col2 = property(_molsetc.HaResidue_col2_get, _molsetc.HaResidue_col2_set)
    insert = property(_molsetc.HaResidue_insert_get, _molsetc.HaResidue_insert_set)
    refno = property(_molsetc.HaResidue_refno_get, _molsetc.HaResidue_refno_set)
    struc = property(_molsetc.HaResidue_struc_get, _molsetc.HaResidue_struc_set)
    flag = property(_molsetc.HaResidue_flag_get, _molsetc.HaResidue_flag_set)
    NameModifier = property(_molsetc.HaResidue_NameModifier_get, _molsetc.HaResidue_NameModifier_set)
    std_crd_sys = property(_molsetc.HaResidue_std_crd_sys_get, _molsetc.HaResidue_std_crd_sys_set)

    @staticmethod
    def RegisterResName(res_name: "std::string const &") -> "int":
        return _molsetc.HaResidue_RegisterResName(res_name)

    @staticmethod
    def InitStdResNames() -> "void":
        return _molsetc.HaResidue_InitStdResNames()

    @staticmethod
    def InitResSynonym() -> "void":
        return _molsetc.HaResidue_InitResSynonym()
    ResNames = property(_molsetc.HaResidue_ResNames_get, _molsetc.HaResidue_ResNames_set)
    res_name_refno_map = property(_molsetc.HaResidue_res_name_refno_map_get, _molsetc.HaResidue_res_name_refno_map_set)
    ResSynonym_to_std = property(_molsetc.HaResidue_ResSynonym_to_std_get, _molsetc.HaResidue_ResSynonym_to_std_set)
    ResSynonym_std_to_AMBER = property(_molsetc.HaResidue_ResSynonym_std_to_AMBER_get, _molsetc.HaResidue_ResSynonym_std_to_AMBER_set)

# Register HaResidue in _molsetc:
_molsetc.HaResidue_swigregister(HaResidue)

def HaResidue_GetResNameFromFullName(res_full_name: "char const *") -> "std::string":
    return _molsetc.HaResidue_GetResNameFromFullName(res_full_name)

def HaResidue_GetResNameInTable(j: "int const") -> "char const *":
    return _molsetc.HaResidue_GetResNameInTable(j)

def HaResidue_CalcPhiAngle(prev: "HaResidue", curr: "HaResidue") -> "double":
    return _molsetc.HaResidue_CalcPhiAngle(prev, curr)

def HaResidue_CalcPsiAngle(curr: "HaResidue", next: "HaResidue") -> "double":
    return _molsetc.HaResidue_CalcPsiAngle(curr, next)

def HaResidue_RegisterResName(res_name: "std::string const &") -> "int":
    return _molsetc.HaResidue_RegisterResName(res_name)

def HaResidue_InitStdResNames() -> "void":
    return _molsetc.HaResidue_InitStdResNames()

def HaResidue_InitResSynonym() -> "void":
    return _molsetc.HaResidue_InitResSynonym()

class AtomIteratorChain(AtomIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.AtomIteratorChain_swiginit(self, _molsetc.new_AtomIteratorChain(*args))
    __swig_destroy__ = _molsetc.delete_AtomIteratorChain

    def SetForChain(self, new_chain: "HaChain") -> "int":
        return _molsetc.AtomIteratorChain_SetForChain(self, new_chain)

    def GetFirstAtom(self) -> "HaAtom *":
        return _molsetc.AtomIteratorChain_GetFirstAtom(self)

    def GetNextAtom(self) -> "HaAtom *":
        return _molsetc.AtomIteratorChain_GetNextAtom(self)

# Register AtomIteratorChain in _molsetc:
_molsetc.AtomIteratorChain_swigregister(AtomIteratorChain)

class AtomIteratorChain_const(AtomIterator_const):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.AtomIteratorChain_const_swiginit(self, _molsetc.new_AtomIteratorChain_const(*args))
    __swig_destroy__ = _molsetc.delete_AtomIteratorChain_const

    def SetForChain(self, new_chain: "HaChain") -> "int":
        return _molsetc.AtomIteratorChain_const_SetForChain(self, new_chain)

    def GetFirstAtom(self) -> "HaAtom const *":
        return _molsetc.AtomIteratorChain_const_GetFirstAtom(self)

    def GetNextAtom(self) -> "HaAtom const *":
        return _molsetc.AtomIteratorChain_const_GetNextAtom(self)

# Register AtomIteratorChain_const in _molsetc:
_molsetc.AtomIteratorChain_const_swigregister(AtomIteratorChain_const)

class ResidueIteratorChain(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.ResidueIteratorChain_swiginit(self, _molsetc.new_ResidueIteratorChain(*args))
    __swig_destroy__ = _molsetc.delete_ResidueIteratorChain

    def GetFirstRes(self) -> "HaResidue *":
        return _molsetc.ResidueIteratorChain_GetFirstRes(self)

    def GetNextRes(self) -> "HaResidue *":
        return _molsetc.ResidueIteratorChain_GetNextRes(self)

# Register ResidueIteratorChain in _molsetc:
_molsetc.ResidueIteratorChain_swigregister(ResidueIteratorChain)

class HaChain(AtomContainer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.HaChain_swiginit(self, _molsetc.new_HaChain(*args))
    __swig_destroy__ = _molsetc.delete_HaChain

    def SetParamFrom(self, chain_ref: "HaChain") -> "bool":
        return _molsetc.HaChain_SetParamFrom(self, chain_ref)

    def AddResidue(self, res_ser_no: "int") -> "HaResidue *":
        return _molsetc.HaChain_AddResidue(self, res_ser_no)

    def GetUniqResSerNo(self, term_res_flag: "int"=0) -> "int":
        return _molsetc.HaChain_GetUniqResSerNo(self, term_res_flag)

    def SetUniqueResNo(self) -> "bool":
        return _molsetc.HaChain_SetUniqueResNo(self)

    def GetFirstRes(self) -> "HaResidue *":
        return _molsetc.HaChain_GetFirstRes(self)

    def GetResBySerNo(self, res_ser_no: "int const") -> "HaResidue *":
        return _molsetc.HaChain_GetResBySerNo(self, res_ser_no)

    def GetNRes(self) -> "int":
        return _molsetc.HaChain_GetNRes(self)

    def GetAtomIteratorPtr(self, *args) -> "AtomIterator_const *":
        return _molsetc.HaChain_GetAtomIteratorPtr(self, *args)

    def GetNAtoms(self) -> "int":
        return _molsetc.HaChain_GetNAtoms(self)

    def IsMember(self, aptr: "HaAtom") -> "int":
        return _molsetc.HaChain_IsMember(self, aptr)

    def GetPointIteratorPtr(self, *args) -> "PointIterator_const *":
        return _molsetc.HaChain_GetPointIteratorPtr(self, *args)

    def GetNumPt(self) -> "int":
        return _molsetc.HaChain_GetNumPt(self)
    ident = property(_molsetc.HaChain_ident_get, _molsetc.HaChain_ident_set)
    res_arr = property(_molsetc.HaChain_res_arr_get, _molsetc.HaChain_res_arr_set)
    res_map = property(_molsetc.HaChain_res_map_get, _molsetc.HaChain_res_map_set)

    def GetHostMol(self, *args) -> "HaMolecule const *":
        return _molsetc.HaChain_GetHostMol(self, *args)

    def SetMolHost(self, new_phost_mol: "HaMolecule") -> "void":
        return _molsetc.HaChain_SetMolHost(self, new_phost_mol)

# Register HaChain in _molsetc:
_molsetc.HaChain_swigregister(HaChain)

class PeriodicUnitInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.PeriodicUnitInfo_swiginit(self, _molsetc.new_PeriodicUnitInfo(*args))
    __swig_destroy__ = _molsetc.delete_PeriodicUnitInfo

    def SetBox(self, *args) -> "int":
        return _molsetc.PeriodicUnitInfo_SetBox(self, *args)

    def IsSet(self) -> "int":
        return _molsetc.PeriodicUnitInfo_IsSet(self)

    def IsOrthogonal(self) -> "int":
        return _molsetc.PeriodicUnitInfo_IsOrthogonal(self)

    def IsOctahedron(self) -> "bool":
        return _molsetc.PeriodicUnitInfo_IsOctahedron(self)

    def IsValid(self) -> "int":
        return _molsetc.PeriodicUnitInfo_IsValid(self)

    def Set(self, to_set: "bool"=True) -> "void":
        return _molsetc.PeriodicUnitInfo_Set(self, to_set)

    def SetOctahedron(self, to_set: "bool"=True) -> "void":
        return _molsetc.PeriodicUnitInfo_SetOctahedron(self, to_set)

    def SetStdBox(self, at_coll: "AtomContainer") -> "int":
        return _molsetc.PeriodicUnitInfo_SetStdBox(self, at_coll)
    spacegroup = property(_molsetc.PeriodicUnitInfo_spacegroup_get, _molsetc.PeriodicUnitInfo_spacegroup_set)
    orthogonal_flag = property(_molsetc.PeriodicUnitInfo_orthogonal_flag_get, _molsetc.PeriodicUnitInfo_orthogonal_flag_set)
    octahedron_flag = property(_molsetc.PeriodicUnitInfo_octahedron_flag_get, _molsetc.PeriodicUnitInfo_octahedron_flag_set)
    ucell = property(_molsetc.PeriodicUnitInfo_ucell_get, _molsetc.PeriodicUnitInfo_ucell_set)
    recip_ucell = property(_molsetc.PeriodicUnitInfo_recip_ucell_get, _molsetc.PeriodicUnitInfo_recip_ucell_set)

    def GetA(self) -> "double":
        return _molsetc.PeriodicUnitInfo_GetA(self)

    def GetB(self) -> "double":
        return _molsetc.PeriodicUnitInfo_GetB(self)

    def GetC(self) -> "double":
        return _molsetc.PeriodicUnitInfo_GetC(self)

    def GetAlpha(self) -> "double":
        return _molsetc.PeriodicUnitInfo_GetAlpha(self)

    def GetBeta(self) -> "double":
        return _molsetc.PeriodicUnitInfo_GetBeta(self)

    def GetGamma(self) -> "double":
        return _molsetc.PeriodicUnitInfo_GetGamma(self)
    ucell_vol = property(_molsetc.PeriodicUnitInfo_ucell_vol_get, _molsetc.PeriodicUnitInfo_ucell_vol_set)
    ucell_sph = property(_molsetc.PeriodicUnitInfo_ucell_sph_get, _molsetc.PeriodicUnitInfo_ucell_sph_set)
    cut_factor = property(_molsetc.PeriodicUnitInfo_cut_factor_get, _molsetc.PeriodicUnitInfo_cut_factor_set)
    reclng = property(_molsetc.PeriodicUnitInfo_reclng_get, _molsetc.PeriodicUnitInfo_reclng_set)

# Register PeriodicUnitInfo in _molsetc:
_molsetc.PeriodicUnitInfo_swigregister(PeriodicUnitInfo)

class CrdSnapshot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.CrdSnapshot_swiginit(self, _molsetc.new_CrdSnapshot(*args))
    __swig_destroy__ = _molsetc.delete_CrdSnapshot

    def Clear(self) -> "void":
        return _molsetc.CrdSnapshot_Clear(self)

    def SaveCrd(self, crd: "HaVec_double") -> "int":
        return _molsetc.CrdSnapshot_SaveCrd(self, crd)

    def SavePBox(self, pbox: "HaVec_double") -> "int":
        return _molsetc.CrdSnapshot_SavePBox(self, pbox)

    def SaveCurrentAtomCrd(self) -> "int":
        return _molsetc.CrdSnapshot_SaveCurrentAtomCrd(self)

    def SetAtomCrd(self) -> "int":
        return _molsetc.CrdSnapshot_SetAtomCrd(self)

    def IsValid(self) -> "int":
        return _molsetc.CrdSnapshot_IsValid(self)

    def HasPBox(self) -> "int":
        return _molsetc.CrdSnapshot_HasPBox(self)

    def GetName(self) -> "std::string":
        return _molsetc.CrdSnapshot_GetName(self)

    def SetName(self, name_new: "std::string const &") -> "void":
        return _molsetc.CrdSnapshot_SetName(self, name_new)

    def GetDesc(self) -> "std::string":
        return _molsetc.CrdSnapshot_GetDesc(self)

    def SetDesc(self, desc_new: "std::string const &") -> "void":
        return _molsetc.CrdSnapshot_SetDesc(self, desc_new)

    def GetCrd(self) -> "HaVec_double":
        return _molsetc.CrdSnapshot_GetCrd(self)

    def GetPBox(self) -> "HaVec_double":
        return _molsetc.CrdSnapshot_GetPBox(self)

    def LoadXMLNode(self, node: "rapidxml::xml_node< > *", popt: "HashMap") -> "int":
        return _molsetc.CrdSnapshot_LoadXMLNode(self, node, popt)

    def OnDelAtoms(self, at_del: "AtomContainer") -> "int":
        return _molsetc.CrdSnapshot_OnDelAtoms(self, at_del)
    p_at_cont = property(_molsetc.CrdSnapshot_p_at_cont_get, _molsetc.CrdSnapshot_p_at_cont_set)

# Register CrdSnapshot in _molsetc:
_molsetc.CrdSnapshot_swigregister(CrdSnapshot)

class CrdSnapshotIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.CrdSnapshotIterator_swiginit(self, _molsetc.new_CrdSnapshotIterator(*args))
    __swig_destroy__ = _molsetc.delete_CrdSnapshotIterator

    def next(self) -> "CrdSnapshot *":
        return _molsetc.CrdSnapshotIterator_next(self)

    def __iter__(self) -> "CrdSnapshotIterator":
        return _molsetc.CrdSnapshotIterator___iter__(self)

# Register CrdSnapshotIterator in _molsetc:
_molsetc.CrdSnapshotIterator_swigregister(CrdSnapshotIterator)

class HaBond(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.HaBond_swiginit(self, _molsetc.new_HaBond(*args))
    __swig_destroy__ = _molsetc.delete_HaBond

    def SetParamFrom(self, ref: "HaBond") -> "bool":
        return _molsetc.HaBond_SetParamFrom(self, ref)

    def SetTypeFrom(self, ref: "HaBond") -> "bool":
        return _molsetc.HaBond_SetTypeFrom(self, ref)

    def assign(self, src: "HaAtom", dst: "HaAtom") -> "HaBond *":
        return _molsetc.HaBond_assign(self, src, dst)

    def __eq__(self, rhs: "HaBond") -> "bool":
        return _molsetc.HaBond___eq__(self, rhs)

    def __lt__(self, rhs: "HaBond") -> "bool":
        return _molsetc.HaBond___lt__(self, rhs)

    def IsSingle(self) -> "bool":
        return _molsetc.HaBond_IsSingle(self)

    def IsAromatic(self) -> "bool":
        return _molsetc.HaBond_IsAromatic(self)

    def IsDouble(self) -> "bool":
        return _molsetc.HaBond_IsDouble(self)

    def IsTriple(self) -> "bool":
        return _molsetc.HaBond_IsTriple(self)

    def IsVirtual(self) -> "bool":
        return _molsetc.HaBond_IsVirtual(self)

    def SetSingle(self) -> "void":
        return _molsetc.HaBond_SetSingle(self)

    def SetAromatic(self) -> "void":
        return _molsetc.HaBond_SetAromatic(self)

    def SetDouble(self) -> "void":
        return _molsetc.HaBond_SetDouble(self)

    def SetTriple(self) -> "void":
        return _molsetc.HaBond_SetTriple(self)

    def SetVirtual(self) -> "void":
        return _molsetc.HaBond_SetVirtual(self)

    def GetTypeString(self) -> "std::string":
        return _molsetc.HaBond_GetTypeString(self)

    def Select(self) -> "void":
        return _molsetc.HaBond_Select(self)

    def UnSelect(self) -> "void":
        return _molsetc.HaBond_UnSelect(self)

    def Selected(self) -> "int":
        return _molsetc.HaBond_Selected(self)

    def SetNotDraw(self) -> "void":
        return _molsetc.HaBond_SetNotDraw(self)

    def DrawWire(self) -> "void":
        return _molsetc.HaBond_DrawWire(self)

    def DrawDashed(self) -> "void":
        return _molsetc.HaBond_DrawDashed(self)

    def DrawCylinder(self, rad: "double") -> "void":
        return _molsetc.HaBond_DrawCylinder(self, rad)

    def IsToDraw(self) -> "int":
        return _molsetc.HaBond_IsToDraw(self)

    def GetFirstAtom(self, *args) -> "HaAtom const *":
        return _molsetc.HaBond_GetFirstAtom(self, *args)

    def GetSecondAtom(self, *args) -> "HaAtom const *":
        return _molsetc.HaBond_GetSecondAtom(self, *args)
    srcatom = property(_molsetc.HaBond_srcatom_get, _molsetc.HaBond_srcatom_set)
    dstatom = property(_molsetc.HaBond_dstatom_get, _molsetc.HaBond_dstatom_set)
    radius = property(_molsetc.HaBond_radius_get, _molsetc.HaBond_radius_set)
    irad = property(_molsetc.HaBond_irad_get, _molsetc.HaBond_irad_set)
    col = property(_molsetc.HaBond_col_get, _molsetc.HaBond_col_set)
    flag = property(_molsetc.HaBond_flag_get, _molsetc.HaBond_flag_set)
    SINGLE_BOND = _molsetc.HaBond_SINGLE_BOND
    DOUBLE_BOND = _molsetc.HaBond_DOUBLE_BOND
    TRIPLE_BOND = _molsetc.HaBond_TRIPLE_BOND
    AROMATIC_BOND = _molsetc.HaBond_AROMATIC_BOND
    VIRTUAL_BOND = _molsetc.HaBond_VIRTUAL_BOND
    type = property(_molsetc.HaBond_type_get, _molsetc.HaBond_type_set)

# Register HaBond in _molsetc:
_molsetc.HaBond_swigregister(HaBond)
DrawBondFlag = cvar.DrawBondFlag
WireFlag = cvar.WireFlag
DashFlag = cvar.DashFlag
CylinderFlag = cvar.CylinderFlag
HydrBondFlag = cvar.HydrBondFlag
NormBondFlag = cvar.NormBondFlag
DoubBondFlag = cvar.DoubBondFlag
TripBondFlag = cvar.TripBondFlag
AromBondFlag = cvar.AromBondFlag

class HaHBond(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.HaHBond_swiginit(self, _molsetc.new_HaHBond(*args))
    __swig_destroy__ = _molsetc.delete_HaHBond

    def __eq__(self, rhs: "HaHBond") -> "bool":
        return _molsetc.HaHBond___eq__(self, rhs)

    def __lt__(self, rhs: "HaHBond") -> "bool":
        return _molsetc.HaHBond___lt__(self, rhs)

    def Select(self) -> "void":
        return _molsetc.HaHBond_Select(self)

    def UnSelect(self) -> "void":
        return _molsetc.HaHBond_UnSelect(self)

    def Selected(self) -> "int":
        return _molsetc.HaHBond_Selected(self)

    def SetNotDraw(self) -> "void":
        return _molsetc.HaHBond_SetNotDraw(self)

    def SetDraw(self) -> "void":
        return _molsetc.HaHBond_SetDraw(self)

    def DrawWire(self) -> "void":
        return _molsetc.HaHBond_DrawWire(self)

    def DrawDashed(self) -> "void":
        return _molsetc.HaHBond_DrawDashed(self)

    def DrawCylinder(self, rad: "double") -> "void":
        return _molsetc.HaHBond_DrawCylinder(self, rad)

    def IsToDrawCylinder(self) -> "int":
        return _molsetc.HaHBond_IsToDrawCylinder(self)

    def IsToDrawWire(self) -> "int":
        return _molsetc.HaHBond_IsToDrawWire(self)

    def IsToDrawDashed(self) -> "int":
        return _molsetc.HaHBond_IsToDrawDashed(self)

    def IsToDraw(self) -> "int":
        return _molsetc.HaHBond_IsToDraw(self)

    def GetDonorAtom(self) -> "HaAtom *":
        return _molsetc.HaHBond_GetDonorAtom(self)

    def GetAcceptorAtom(self) -> "HaAtom *":
        return _molsetc.HaHBond_GetAcceptorAtom(self)

    def GetHAtom(self) -> "HaAtom *":
        return _molsetc.HaHBond_GetHAtom(self)

    def GetHCoord(self, pt: "Vec3D") -> "int":
        return _molsetc.HaHBond_GetHCoord(self, pt)
    srcCA = property(_molsetc.HaHBond_srcCA_get, _molsetc.HaHBond_srcCA_set)
    dstCA = property(_molsetc.HaHBond_dstCA_get, _molsetc.HaHBond_dstCA_set)
    dst = property(_molsetc.HaHBond_dst_get, _molsetc.HaHBond_dst_set)
    src = property(_molsetc.HaHBond_src_get, _molsetc.HaHBond_src_set)
    p_hatom = property(_molsetc.HaHBond_p_hatom_get, _molsetc.HaHBond_p_hatom_set)
    energy = property(_molsetc.HaHBond_energy_get, _molsetc.HaHBond_energy_set)
    radius = property(_molsetc.HaHBond_radius_get, _molsetc.HaHBond_radius_set)
    irad = property(_molsetc.HaHBond_irad_get, _molsetc.HaHBond_irad_set)
    offset = property(_molsetc.HaHBond_offset_get, _molsetc.HaHBond_offset_set)
    col = property(_molsetc.HaHBond_col_get, _molsetc.HaHBond_col_set)

# Register HaHBond in _molsetc:
_molsetc.HaHBond_swigregister(HaHBond)

class Object3D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.Object3D_swiginit(self, _molsetc.new_Object3D(*args))
    __swig_destroy__ = _molsetc.delete_Object3D

    def IsConnected(self) -> "bool":
        return _molsetc.Object3D_IsConnected(self)

    def SetConnected(self, status: "bool const") -> "void":
        return _molsetc.Object3D_SetConnected(self, status)

    def IsDisplayed(self) -> "bool":
        return _molsetc.Object3D_IsDisplayed(self)

    def SetDisplayed(self, status: "bool const") -> "void":
        return _molsetc.Object3D_SetDisplayed(self, status)

    def GetObjName(self) -> "char const *":
        return _molsetc.Object3D_GetObjName(self)

    def SetObjName(self, new_name: "char const *") -> "bool":
        return _molsetc.Object3D_SetObjName(self, new_name)

    def RotateX(self, theta: "double", cnt: "Vec3D") -> "int":
        return _molsetc.Object3D_RotateX(self, theta, cnt)

    def RotateY(self, theta: "double", cnt: "Vec3D") -> "int":
        return _molsetc.Object3D_RotateY(self, theta, cnt)

    def RotateZ(self, theta: "double", cnt: "Vec3D") -> "int":
        return _molsetc.Object3D_RotateZ(self, theta, cnt)

    def RotateObj(self, rot_mat: "HaMat_double", cnt: "Vec3D") -> "int":
        return _molsetc.Object3D_RotateObj(self, rot_mat, cnt)

    def Translate(self, tr_vec: "Vec3D") -> "int":
        return _molsetc.Object3D_Translate(self, tr_vec)

    def GetObjType(self) -> "int":
        return _molsetc.Object3D_GetObjType(self)

    def DrawObj(self, molview: "HaMolView") -> "int":
        return _molsetc.Object3D_DrawObj(self, molview)

    def SetTransparency(self, trasp_new: "double") -> "int":
        return _molsetc.Object3D_SetTransparency(self, trasp_new)
    transparency = property(_molsetc.Object3D_transparency_get, _molsetc.Object3D_transparency_set)

    def GetObjectMinMaxCrd(self, MinX_v: "double &", MinY_v: "double &", MinZ_v: "double &", MaxX_v: "double &", MaxY_v: "double &", MaxZ_v: "double &") -> "bool":
        return _molsetc.Object3D_GetObjectMinMaxCrd(self, MinX_v, MinY_v, MinZ_v, MaxX_v, MaxY_v, MaxZ_v)

# Register Object3D in _molsetc:
_molsetc.Object3D_swigregister(Object3D)
OBJ3D_MOLECULE = cvar.OBJ3D_MOLECULE
OBJ3D_SURFACE = cvar.OBJ3D_SURFACE
OBJ3D_DOT_SURFACE = cvar.OBJ3D_DOT_SURFACE
OBJ3D_BOX = cvar.OBJ3D_BOX
OBJ3D_MEMBRANEZ = cvar.OBJ3D_MEMBRANEZ
OBJ3D_MEMBRANE_TUBE = cvar.OBJ3D_MEMBRANE_TUBE
OBJ3D_MATRIX = cvar.OBJ3D_MATRIX
OBJ3D_PlaneViewerOfHaField3D = cvar.OBJ3D_PlaneViewerOfHaField3D

class BoxObj3D(Object3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.BoxObj3D_swiginit(self, _molsetc.new_BoxObj3D(*args))
    __swig_destroy__ = _molsetc.delete_BoxObj3D
    x0 = property(_molsetc.BoxObj3D_x0_get, _molsetc.BoxObj3D_x0_set)
    y0 = property(_molsetc.BoxObj3D_y0_get, _molsetc.BoxObj3D_y0_set)
    z0 = property(_molsetc.BoxObj3D_z0_get, _molsetc.BoxObj3D_z0_set)
    x1 = property(_molsetc.BoxObj3D_x1_get, _molsetc.BoxObj3D_x1_set)
    y1 = property(_molsetc.BoxObj3D_y1_get, _molsetc.BoxObj3D_y1_set)
    z1 = property(_molsetc.BoxObj3D_z1_get, _molsetc.BoxObj3D_z1_set)

    def SetBox(self, the_x0: "float", the_y0: "float", the_z0: "float", the_x1: "float", the_y1: "float", the_z1: "float") -> "void":
        return _molsetc.BoxObj3D_SetBox(self, the_x0, the_y0, the_z0, the_x1, the_y1, the_z1)
    Color = property(_molsetc.BoxObj3D_Color_get, _molsetc.BoxObj3D_Color_set)

    def RotateObj(self, rot_mat: "HaMat_double", cnt: "Vec3D") -> "int":
        return _molsetc.BoxObj3D_RotateObj(self, rot_mat, cnt)

    def Translate(self, tr_vec: "Vec3D") -> "int":
        return _molsetc.BoxObj3D_Translate(self, tr_vec)

    def DrawObj(self, molview: "HaMolView") -> "int":
        return _molsetc.BoxObj3D_DrawObj(self, molview)

    def GetObjectMinMaxCrd(self, MinX_v: "double &", MinY_v: "double &", MinZ_v: "double &", MaxX_v: "double &", MaxY_v: "double &", MaxZ_v: "double &") -> "bool":
        return _molsetc.BoxObj3D_GetObjectMinMaxCrd(self, MinX_v, MinY_v, MinZ_v, MaxX_v, MaxY_v, MaxZ_v)

# Register BoxObj3D in _molsetc:
_molsetc.BoxObj3D_swigregister(BoxObj3D)
SCREEN_ORIENTATION = cvar.SCREEN_ORIENTATION
REFERENCE_ORIENTATION = cvar.REFERENCE_ORIENTATION

class MatrixObj3D(Object3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.MatrixObj3D_swiginit(self, _molsetc.new_MatrixObj3D(*args))
    __swig_destroy__ = _molsetc.delete_MatrixObj3D
    x0 = property(_molsetc.MatrixObj3D_x0_get, _molsetc.MatrixObj3D_x0_set)
    y0 = property(_molsetc.MatrixObj3D_y0_get, _molsetc.MatrixObj3D_y0_set)
    z0 = property(_molsetc.MatrixObj3D_z0_get, _molsetc.MatrixObj3D_z0_set)
    dx1 = property(_molsetc.MatrixObj3D_dx1_get, _molsetc.MatrixObj3D_dx1_set)
    dy1 = property(_molsetc.MatrixObj3D_dy1_get, _molsetc.MatrixObj3D_dy1_set)
    dz1 = property(_molsetc.MatrixObj3D_dz1_get, _molsetc.MatrixObj3D_dz1_set)
    dx2 = property(_molsetc.MatrixObj3D_dx2_get, _molsetc.MatrixObj3D_dx2_set)
    dy2 = property(_molsetc.MatrixObj3D_dy2_get, _molsetc.MatrixObj3D_dy2_set)
    dz2 = property(_molsetc.MatrixObj3D_dz2_get, _molsetc.MatrixObj3D_dz2_set)
    Ni = property(_molsetc.MatrixObj3D_Ni_get, _molsetc.MatrixObj3D_Ni_set)
    Nj = property(_molsetc.MatrixObj3D_Nj_get, _molsetc.MatrixObj3D_Nj_set)

    def SetMatrixGuiders(self, the_x0: "float", the_y0: "float", the_z0: "float", the_dx1: "float", the_dy1: "float", the_dz1: "float", the_dx2: "float", the_dy2: "float", the_dz2: "float") -> "void":
        return _molsetc.MatrixObj3D_SetMatrixGuiders(self, the_x0, the_y0, the_z0, the_dx1, the_dy1, the_dz1, the_dx2, the_dy2, the_dz2)

    def SetColors(self, Nx: "int", Ny: "int", fmap: "float *", elpot_high_val: "double", elpot_low_val: "double") -> "void":
        return _molsetc.MatrixObj3D_SetColors(self, Nx, Ny, fmap, elpot_high_val, elpot_low_val)
    Color = property(_molsetc.MatrixObj3D_Color_get, _molsetc.MatrixObj3D_Color_set)
    ColMat = property(_molsetc.MatrixObj3D_ColMat_get, _molsetc.MatrixObj3D_ColMat_set)

    def RotateObj(self, rot_mat: "HaMat_double", cnt: "Vec3D") -> "int":
        return _molsetc.MatrixObj3D_RotateObj(self, rot_mat, cnt)

    def Translate(self, tr_vec: "Vec3D") -> "int":
        return _molsetc.MatrixObj3D_Translate(self, tr_vec)

    def DrawObj(self, molview: "HaMolView") -> "int":
        return _molsetc.MatrixObj3D_DrawObj(self, molview)

# Register MatrixObj3D in _molsetc:
_molsetc.MatrixObj3D_swigregister(MatrixObj3D)

class MembraneZObj3D(Object3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.MembraneZObj3D_swiginit(self, _molsetc.new_MembraneZObj3D(*args))
    __swig_destroy__ = _molsetc.delete_MembraneZObj3D
    x0 = property(_molsetc.MembraneZObj3D_x0_get, _molsetc.MembraneZObj3D_x0_set)
    y0 = property(_molsetc.MembraneZObj3D_y0_get, _molsetc.MembraneZObj3D_y0_set)
    z0 = property(_molsetc.MembraneZObj3D_z0_get, _molsetc.MembraneZObj3D_z0_set)
    x1 = property(_molsetc.MembraneZObj3D_x1_get, _molsetc.MembraneZObj3D_x1_set)
    y1 = property(_molsetc.MembraneZObj3D_y1_get, _molsetc.MembraneZObj3D_y1_set)
    z1 = property(_molsetc.MembraneZObj3D_z1_get, _molsetc.MembraneZObj3D_z1_set)
    mem_z1 = property(_molsetc.MembraneZObj3D_mem_z1_get, _molsetc.MembraneZObj3D_mem_z1_set)
    mem_z2 = property(_molsetc.MembraneZObj3D_mem_z2_get, _molsetc.MembraneZObj3D_mem_z2_set)
    hstep = property(_molsetc.MembraneZObj3D_hstep_get, _molsetc.MembraneZObj3D_hstep_set)

    def SetBox(self, the_x0: "float", the_y0: "float", the_z0: "float", the_x1: "float", the_y1: "float", the_z1: "float") -> "void":
        return _molsetc.MembraneZObj3D_SetBox(self, the_x0, the_y0, the_z0, the_x1, the_y1, the_z1)

    def SetMembraneZ(self, the_mem_z1: "float", the_mem_z2: "float") -> "void":
        return _molsetc.MembraneZObj3D_SetMembraneZ(self, the_mem_z1, the_mem_z2)
    Color = property(_molsetc.MembraneZObj3D_Color_get, _molsetc.MembraneZObj3D_Color_set)

    def RotateObj(self, rot_mat: "HaMat_double", cnt: "Vec3D") -> "int":
        return _molsetc.MembraneZObj3D_RotateObj(self, rot_mat, cnt)

    def Translate(self, tr_vec: "Vec3D") -> "int":
        return _molsetc.MembraneZObj3D_Translate(self, tr_vec)

    def DrawObj(self, molview: "HaMolView") -> "int":
        return _molsetc.MembraneZObj3D_DrawObj(self, molview)

# Register MembraneZObj3D in _molsetc:
_molsetc.MembraneZObj3D_swigregister(MembraneZObj3D)

class TubeObj3D(Object3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.TubeObj3D_swiginit(self, _molsetc.new_TubeObj3D(*args))
    __swig_destroy__ = _molsetc.delete_TubeObj3D
    x0 = property(_molsetc.TubeObj3D_x0_get, _molsetc.TubeObj3D_x0_set)
    y0 = property(_molsetc.TubeObj3D_y0_get, _molsetc.TubeObj3D_y0_set)
    z0 = property(_molsetc.TubeObj3D_z0_get, _molsetc.TubeObj3D_z0_set)
    x1 = property(_molsetc.TubeObj3D_x1_get, _molsetc.TubeObj3D_x1_set)
    y1 = property(_molsetc.TubeObj3D_y1_get, _molsetc.TubeObj3D_y1_set)
    z1 = property(_molsetc.TubeObj3D_z1_get, _molsetc.TubeObj3D_z1_set)
    mem_z1 = property(_molsetc.TubeObj3D_mem_z1_get, _molsetc.TubeObj3D_mem_z1_set)
    mem_z2 = property(_molsetc.TubeObj3D_mem_z2_get, _molsetc.TubeObj3D_mem_z2_set)
    mem_x = property(_molsetc.TubeObj3D_mem_x_get, _molsetc.TubeObj3D_mem_x_set)
    mem_y = property(_molsetc.TubeObj3D_mem_y_get, _molsetc.TubeObj3D_mem_y_set)
    hstep = property(_molsetc.TubeObj3D_hstep_get, _molsetc.TubeObj3D_hstep_set)
    phistep = property(_molsetc.TubeObj3D_phistep_get, _molsetc.TubeObj3D_phistep_set)
    R1 = property(_molsetc.TubeObj3D_R1_get, _molsetc.TubeObj3D_R1_set)
    R2 = property(_molsetc.TubeObj3D_R2_get, _molsetc.TubeObj3D_R2_set)

    def SetBox(self, the_x0: "float", the_y0: "float", the_z0: "float", the_x1: "float", the_y1: "float", the_z1: "float") -> "void":
        return _molsetc.TubeObj3D_SetBox(self, the_x0, the_y0, the_z0, the_x1, the_y1, the_z1)

    def SetTube3d(self, the_mem_z1: "float", the_mem_z2: "float", the_mem_x: "float", the_mem_y: "float", the_R1: "float", the_R2: "float") -> "void":
        return _molsetc.TubeObj3D_SetTube3d(self, the_mem_z1, the_mem_z2, the_mem_x, the_mem_y, the_R1, the_R2)
    Color = property(_molsetc.TubeObj3D_Color_get, _molsetc.TubeObj3D_Color_set)
    Style = property(_molsetc.TubeObj3D_Style_get, _molsetc.TubeObj3D_Style_set)

    def RotateObj(self, rot_mat: "HaMat_double", cnt: "Vec3D") -> "int":
        return _molsetc.TubeObj3D_RotateObj(self, rot_mat, cnt)

    def Translate(self, tr_vec: "Vec3D") -> "int":
        return _molsetc.TubeObj3D_Translate(self, tr_vec)

    def DrawObj(self, molview: "HaMolView") -> "int":
        return _molsetc.TubeObj3D_DrawObj(self, molview)

    def GetObjectMinMaxCrd(self, MinX_v: "double &", MinY_v: "double &", MinZ_v: "double &", MaxX_v: "double &", MaxY_v: "double &", MaxZ_v: "double &") -> "bool":
        return _molsetc.TubeObj3D_GetObjectMinMaxCrd(self, MinX_v, MinY_v, MinZ_v, MaxX_v, MaxY_v, MaxZ_v)

# Register TubeObj3D in _molsetc:
_molsetc.TubeObj3D_swigregister(TubeObj3D)

class PlaneViewOfHaField3D(Object3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.PlaneViewOfHaField3D_swiginit(self, _molsetc.new_PlaneViewOfHaField3D(*args))
    __swig_destroy__ = _molsetc.delete_PlaneViewOfHaField3D
    PlaneXY = _molsetc.PlaneViewOfHaField3D_PlaneXY
    PlaneYZ = _molsetc.PlaneViewOfHaField3D_PlaneYZ
    PlaneZX = _molsetc.PlaneViewOfHaField3D_PlaneZX
    OwnerOfData = property(_molsetc.PlaneViewOfHaField3D_OwnerOfData_get, _molsetc.PlaneViewOfHaField3D_OwnerOfData_set)

    def SetMinMax(self, m_Min: "double", m_Max: "double") -> "void":
        return _molsetc.PlaneViewOfHaField3D_SetMinMax(self, m_Min, m_Max)

    def SetLevel(self, NewLevel: "int") -> "void":
        return _molsetc.PlaneViewOfHaField3D_SetLevel(self, NewLevel)

    def SetPlaneXY(self) -> "void":
        return _molsetc.PlaneViewOfHaField3D_SetPlaneXY(self)

    def SetPlaneYZ(self) -> "void":
        return _molsetc.PlaneViewOfHaField3D_SetPlaneYZ(self)

    def SetPlaneZX(self) -> "void":
        return _molsetc.PlaneViewOfHaField3D_SetPlaneZX(self)

    def SetPlane(self, newPlane: "int") -> "void":
        return _molsetc.PlaneViewOfHaField3D_SetPlane(self, newPlane)

    def SetHideZeroValues(self, newHideZeroValues: "bool") -> "void":
        return _molsetc.PlaneViewOfHaField3D_SetHideZeroValues(self, newHideZeroValues)

    def GetPlane(self) -> "int":
        return _molsetc.PlaneViewOfHaField3D_GetPlane(self)

    def GetLevel(self) -> "int":
        return _molsetc.PlaneViewOfHaField3D_GetLevel(self)

    def GetValueMin(self) -> "double":
        return _molsetc.PlaneViewOfHaField3D_GetValueMin(self)

    def GetValueMax(self) -> "double":
        return _molsetc.PlaneViewOfHaField3D_GetValueMax(self)

    def GetHaField3D(self) -> "HaField3D *":
        return _molsetc.PlaneViewOfHaField3D_GetHaField3D(self)

    def GetHideZeroValues(self) -> "bool":
        return _molsetc.PlaneViewOfHaField3D_GetHideZeroValues(self)

    def SetColorsOfPlane(self) -> "void":
        return _molsetc.PlaneViewOfHaField3D_SetColorsOfPlane(self)

    def RotateObj(self, rot_mat: "HaMat_double", cnt: "Vec3D") -> "int":
        return _molsetc.PlaneViewOfHaField3D_RotateObj(self, rot_mat, cnt)

    def Translate(self, tr_vec: "Vec3D") -> "int":
        return _molsetc.PlaneViewOfHaField3D_Translate(self, tr_vec)

    def DrawObj(self, molview: "HaMolView") -> "int":
        return _molsetc.PlaneViewOfHaField3D_DrawObj(self, molview)

    def GetObjectMinMaxCrd(self, MinX_v: "double &", MinY_v: "double &", MinZ_v: "double &", MaxX_v: "double &", MaxY_v: "double &", MaxZ_v: "double &") -> "bool":
        return _molsetc.PlaneViewOfHaField3D_GetObjectMinMaxCrd(self, MinX_v, MinY_v, MinZ_v, MaxX_v, MaxY_v, MaxZ_v)

# Register PlaneViewOfHaField3D in _molsetc:
_molsetc.PlaneViewOfHaField3D_swigregister(PlaneViewOfHaField3D)

class SecStructElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.SecStructElement_swiginit(self, _molsetc.new_SecStructElement())
    __swig_destroy__ = _molsetc.delete_SecStructElement
    init = property(_molsetc.SecStructElement_init_get, _molsetc.SecStructElement_init_set)
    term = property(_molsetc.SecStructElement_term_get, _molsetc.SecStructElement_term_set)
    chain = property(_molsetc.SecStructElement_chain_get, _molsetc.SecStructElement_chain_set)
    type = property(_molsetc.SecStructElement_type_get, _molsetc.SecStructElement_type_set)

    def __eq__(self, rhs: "SecStructElement") -> "bool":
        return _molsetc.SecStructElement___eq__(self, rhs)

    def __lt__(self, rhs: "SecStructElement") -> "bool":
        return _molsetc.SecStructElement___lt__(self, rhs)

# Register SecStructElement in _molsetc:
_molsetc.SecStructElement_swigregister(SecStructElement)
SourceNone = cvar.SourceNone
SourcePDB = cvar.SourcePDB
SourceCalc = cvar.SourceCalc
FeatHelix = cvar.FeatHelix
FeatSheet = cvar.FeatSheet
FeatTurn = cvar.FeatTurn

class HaMolecule(Object3D, AtomContainer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.HaMolecule_swiginit(self, _molsetc.new_HaMolecule(*args))
    __swig_destroy__ = _molsetc.delete_HaMolecule

    def GetHostMolSet(self, *args) -> "MolSet const *":
        return _molsetc.HaMolecule_GetHostMolSet(self, *args)

    def AddMolCopy(self, Mol_ref: "HaMolecule", create_new_chain: "bool"=True, ptr_atom_map: "AtomAtomMap"=None) -> "bool":
        return _molsetc.HaMolecule_AddMolCopy(self, Mol_ref, create_new_chain, ptr_atom_map)

    @staticmethod
    def AttachFragment(catom_host: "HaAtom", catom_frag: "HaAtom") -> "int":
        return _molsetc.HaMolecule_AttachFragment(catom_host, catom_frag)

    def CombineMolecules(self, frag_mol: "HaMolecule", catom_host: "HaAtom", catom_frag: "HaAtom") -> "int":
        return _molsetc.HaMolecule_CombineMolecules(self, frag_mol, catom_host, catom_frag)

    def GetName(self) -> "std::string":
        return _molsetc.HaMolecule_GetName(self)

    def GetSerNo(self) -> "int":
        return _molsetc.HaMolecule_GetSerNo(self)

    def GetRef(self) -> "std::string":
        return _molsetc.HaMolecule_GetRef(self)

    def FillRef(self, buf: "char *", mode: "int"=0) -> "bool":
        return _molsetc.HaMolecule_FillRef(self, buf, mode)

    def SetObjName(self, new_name: "char const *") -> "bool":
        return _molsetc.HaMolecule_SetObjName(self, new_name)

    def RotateObj(self, rot_mat: "HaMat_double", cnt: "Vec3D") -> "int":
        return _molsetc.HaMolecule_RotateObj(self, rot_mat, cnt)

    def RotateObjFromWorld(self, rot_mat: "HaMat_double", cnt: "Vec3D") -> "int":
        return _molsetc.HaMolecule_RotateObjFromWorld(self, rot_mat, cnt)

    def Translate(self, tr_vec: "Vec3D") -> "int":
        return _molsetc.HaMolecule_Translate(self, tr_vec)

    def SetAtomScreenCoord(self, pview: "HaMolView") -> "int":
        return _molsetc.HaMolecule_SetAtomScreenCoord(self, pview)

    def SetUniqueAtomNames(self) -> "bool":
        return _molsetc.HaMolecule_SetUniqueAtomNames(self)

    def InitAtoms(self, gfile: "GauFile &") -> "bool":
        return _molsetc.HaMolecule_InitAtoms(self, gfile)

    def GetAtomByRef(self, at_ref: "char const *") -> "HaAtom *":
        return _molsetc.HaMolecule_GetAtomByRef(self, at_ref)

    def GetNAtoms(self) -> "int":
        return _molsetc.HaMolecule_GetNAtoms(self)

    def GetAtomIteratorPtr(self) -> "AtomIterator *":
        return _molsetc.HaMolecule_GetAtomIteratorPtr(self)

    def IsMember(self, aptr: "HaAtom") -> "int":
        return _molsetc.HaMolecule_IsMember(self, aptr)

    def GetPointIteratorPtr(self, *args) -> "PointIterator_const *":
        return _molsetc.HaMolecule_GetPointIteratorPtr(self, *args)

    def GetNumPt(self) -> "int":
        return _molsetc.HaMolecule_GetNumPt(self)

    def GetNBonds(self) -> "int":
        return _molsetc.HaMolecule_GetNBonds(self)

    def GetNHBonds(self) -> "int":
        return _molsetc.HaMolecule_GetNHBonds(self)

    def GetNSSBonds(self) -> "int":
        return _molsetc.HaMolecule_GetNSSBonds(self)

    def SetTermResNames(self) -> "int":
        return _molsetc.HaMolecule_SetTermResNames(self)

    def SetHISNames(self) -> "int":
        return _molsetc.HaMolecule_SetHISNames(self)

    def SetCysBridgeNames(self) -> "int":
        return _molsetc.HaMolecule_SetCysBridgeNames(self)

    def Print_info(self, sout: "ostream", level: "int const") -> "bool":
        return _molsetc.HaMolecule_Print_info(self, sout, level)

    def AddChainAndResidue(self) -> "HaResidue *":
        return _molsetc.HaMolecule_AddChainAndResidue(self)

    def GetNRes(self) -> "int":
        return _molsetc.HaMolecule_GetNRes(self)

    def GetResByRef(self, res_str: "std::string const &") -> "HaResidue *":
        return _molsetc.HaMolecule_GetResByRef(self, res_str)

    def GetNChains(self) -> "int":
        return _molsetc.HaMolecule_GetNChains(self)

    def AddChain(self, ident: "char") -> "HaChain *":
        return _molsetc.HaMolecule_AddChain(self, ident)

    def GetChainIdentMax(self) -> "char":
        return _molsetc.HaMolecule_GetChainIdentMax(self)

    def GetFirstChain(self) -> "HaChain *":
        return _molsetc.HaMolecule_GetFirstChain(self)

    def GetChain(self, chain_id: "char const") -> "HaChain *":
        return _molsetc.HaMolecule_GetChain(self, chain_id)

    def FixChainsIdent(self) -> "bool":
        return _molsetc.HaMolecule_FixChainsIdent(self)

    def DescribeMolecule(self) -> "void":
        return _molsetc.HaMolecule_DescribeMolecule(self)

    def Renumber(self, start: "int") -> "void":
        return _molsetc.HaMolecule_Renumber(self, start)

    def GetAtomSeqNumMap(self, *args) -> "CAtomIntMap":
        return _molsetc.HaMolecule_GetAtomSeqNumMap(self, *args)

    def DescribeSequence(self) -> "void":
        return _molsetc.HaMolecule_DescribeSequence(self)
    SeqFormat = property(_molsetc.HaMolecule_SeqFormat_get, _molsetc.HaMolecule_SeqFormat_set)

    def AddFeature(self) -> "SecStructElement *":
        return _molsetc.HaMolecule_AddFeature(self)

    def DeleteFeatures(self, itype: "int const") -> "void":
        return _molsetc.HaMolecule_DeleteFeatures(self, itype)

    def GetNumFeatures(self, itype: "int const") -> "int":
        return _molsetc.HaMolecule_GetNumFeatures(self, itype)

    def UpdateFeature(self, ptr: "SecStructElement", mask: "int") -> "void":
        return _molsetc.HaMolecule_UpdateFeature(self, ptr, mask)

    def ProcessFeatures(self) -> "void":
        return _molsetc.HaMolecule_ProcessFeatures(self)

    def IsSecStructFound(self) -> "bool":
        return _molsetc.HaMolecule_IsSecStructFound(self)
    sec_struct_found = property(_molsetc.HaMolecule_sec_struct_found_get, _molsetc.HaMolecule_sec_struct_found_set)
    structsource = property(_molsetc.HaMolecule_structsource_get, _molsetc.HaMolecule_structsource_set)
    Features = property(_molsetc.HaMolecule_Features_get, _molsetc.HaMolecule_Features_set)
    classification = property(_molsetc.HaMolecule_classification_get, _molsetc.HaMolecule_classification_set)
    identcode = property(_molsetc.HaMolecule_identcode_get, _molsetc.HaMolecule_identcode_set)
    charge = property(_molsetc.HaMolecule_charge_get, _molsetc.HaMolecule_charge_set)
    comments = property(_molsetc.HaMolecule_comments_get, _molsetc.HaMolecule_comments_set)

# Register HaMolecule in _molsetc:
_molsetc.HaMolecule_swigregister(HaMolecule)

def HaMolecule_AttachFragment(catom_host: "HaAtom", catom_frag: "HaAtom") -> "int":
    return _molsetc.HaMolecule_AttachFragment(catom_host, catom_frag)

class AtomIteratorMolecule(AtomIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_pMol: "HaMolecule"):
        _molsetc.AtomIteratorMolecule_swiginit(self, _molsetc.new_AtomIteratorMolecule(new_pMol))
    __swig_destroy__ = _molsetc.delete_AtomIteratorMolecule

    def GetFirstAtom(self) -> "HaAtom *":
        return _molsetc.AtomIteratorMolecule_GetFirstAtom(self)

    def GetNextAtom(self) -> "HaAtom *":
        return _molsetc.AtomIteratorMolecule_GetNextAtom(self)

# Register AtomIteratorMolecule in _molsetc:
_molsetc.AtomIteratorMolecule_swigregister(AtomIteratorMolecule)

class AtomIteratorMolecule_const(AtomIterator_const):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_pMol: "HaMolecule"):
        _molsetc.AtomIteratorMolecule_const_swiginit(self, _molsetc.new_AtomIteratorMolecule_const(new_pMol))
    __swig_destroy__ = _molsetc.delete_AtomIteratorMolecule_const

    def GetFirstAtom(self) -> "HaAtom const *":
        return _molsetc.AtomIteratorMolecule_const_GetFirstAtom(self)

    def GetNextAtom(self) -> "HaAtom const *":
        return _molsetc.AtomIteratorMolecule_const_GetNextAtom(self)

# Register AtomIteratorMolecule_const in _molsetc:
_molsetc.AtomIteratorMolecule_const_swigregister(AtomIteratorMolecule_const)

class ResidueIteratorMolecule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.ResidueIteratorMolecule_swiginit(self, _molsetc.new_ResidueIteratorMolecule(*args))
    __swig_destroy__ = _molsetc.delete_ResidueIteratorMolecule

    def GetFirstRes(self) -> "HaResidue *":
        return _molsetc.ResidueIteratorMolecule_GetFirstRes(self)

    def GetNextRes(self) -> "HaResidue *":
        return _molsetc.ResidueIteratorMolecule_GetNextRes(self)

# Register ResidueIteratorMolecule in _molsetc:
_molsetc.ResidueIteratorMolecule_swigregister(ResidueIteratorMolecule)

class ChainIteratorMolecule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.ChainIteratorMolecule_swiginit(self, _molsetc.new_ChainIteratorMolecule(*args))
    __swig_destroy__ = _molsetc.delete_ChainIteratorMolecule

    def GetFirstChain(self) -> "HaChain *":
        return _molsetc.ChainIteratorMolecule_GetFirstChain(self)

    def GetNextChain(self) -> "HaChain *":
        return _molsetc.ChainIteratorMolecule_GetNextChain(self)

# Register ChainIteratorMolecule in _molsetc:
_molsetc.ChainIteratorMolecule_swigregister(ChainIteratorMolecule)

class AtomMapping(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.AtomMapping_swiginit(self, _molsetc.new_AtomMapping(*args))
    __swig_destroy__ = _molsetc.delete_AtomMapping

    def PrintInfo(self, detailed: "int"=0) -> "void":
        return _molsetc.AtomMapping_PrintInfo(self, detailed)
    p_ac_1 = property(_molsetc.AtomMapping_p_ac_1_get, _molsetc.AtomMapping_p_ac_1_set)
    p_ac_2 = property(_molsetc.AtomMapping_p_ac_2_get, _molsetc.AtomMapping_p_ac_2_set)
    atmap_2to1 = property(_molsetc.AtomMapping_atmap_2to1_get, _molsetc.AtomMapping_atmap_2to1_set)
    atmap_1to2 = property(_molsetc.AtomMapping_atmap_1to2_get, _molsetc.AtomMapping_atmap_1to2_set)
    SyncRules2from1 = property(_molsetc.AtomMapping_SyncRules2from1_get, _molsetc.AtomMapping_SyncRules2from1_set)
    SyncRules1from2 = property(_molsetc.AtomMapping_SyncRules1from2_get, _molsetc.AtomMapping_SyncRules1from2_set)

    def ClearSyncRules1from2(self) -> "void":
        return _molsetc.AtomMapping_ClearSyncRules1from2(self)

    def ClearSyncRules2from1(self) -> "void":
        return _molsetc.AtomMapping_ClearSyncRules2from1(self)

    def Map2to1ByAtomDistance(self) -> "int":
        return _molsetc.AtomMapping_Map2to1ByAtomDistance(self)

    def Map2to1ByAtomRef(self) -> "int":
        return _molsetc.AtomMapping_Map2to1ByAtomRef(self)

    def SetAtom3PtSyncRule(self, aptr_mng: "HaAtom", aref_1: "HaAtom", aref_2: "HaAtom", aref_3: "HaAtom", dist: "double"=-1.0, vang: "double"=-1.0, torsion: "double"=-500.0, priority: "int"=-1) -> "int":
        return _molsetc.AtomMapping_SetAtom3PtSyncRule(self, aptr_mng, aref_1, aref_2, aref_3, dist, vang, torsion, priority)

    def SyncAtomCrd1From2(self) -> "int":
        return _molsetc.AtomMapping_SyncAtomCrd1From2(self)

    def SyncAtomCrd2From1(self) -> "int":
        return _molsetc.AtomMapping_SyncAtomCrd2From1(self)

    @staticmethod
    def BuildSyncRulesForMissingAtoms(all_atoms: "AtomContainer", known_atoms: "AtomContainer", rules: "std::vector< Pt3CrdRule *,std::allocator< Pt3CrdRule * > > &") -> "int":
        return _molsetc.AtomMapping_BuildSyncRulesForMissingAtoms(all_atoms, known_atoms, rules)

# Register AtomMapping in _molsetc:
_molsetc.AtomMapping_swigregister(AtomMapping)
SelectFlag = cvar.SelectFlag
AllAtomFlag = cvar.AllAtomFlag
HelixFlag = cvar.HelixFlag
CystineFlag = cvar.CystineFlag
StrandFlag = cvar.StrandFlag
DashStrandFlag = cvar.DashStrandFlag
RibbonFlag = cvar.RibbonFlag
TraceFlag = cvar.TraceFlag
CartoonFlag = cvar.CartoonFlag
DotsFlag = cvar.DotsFlag
Helix3Flag = cvar.Helix3Flag
Helix4Flag = cvar.Helix4Flag
Helix5Flag = cvar.Helix5Flag
SheetFlag = cvar.SheetFlag
TurnFlag = cvar.TurnFlag

def AtomMapping_BuildSyncRulesForMissingAtoms(all_atoms: "AtomContainer", known_atoms: "AtomContainer", rules: "std::vector< Pt3CrdRule *,std::allocator< Pt3CrdRule * > > &") -> "int":
    return _molsetc.AtomMapping_BuildSyncRulesForMissingAtoms(all_atoms, known_atoms, rules)

class MolSet(AtomContainer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.MolSet_swiginit(self, _molsetc.new_MolSet())
    __swig_destroy__ = _molsetc.delete_MolSet
    file_reading_debug = _molsetc.MolSet_file_reading_debug
    debug_flag = property(_molsetc.MolSet_debug_flag_get, _molsetc.MolSet_debug_flag_set)

    def Print_info(self, sout: "ostream", level: "int const") -> "bool":
        return _molsetc.MolSet_Print_info(self, sout, level)

    def ExecuteCommand(self, cmd_pr: "CmdParser") -> "int":
        return _molsetc.MolSet_ExecuteCommand(self, cmd_pr)

    def ExecuteShowCommand(self, cmd_pr: "CmdParser") -> "int":
        return _molsetc.MolSet_ExecuteShowCommand(self, cmd_pr)

    def ProcessEvent(self, type: "int", id: "int") -> "int":
        return _molsetc.MolSet_ProcessEvent(self, type, id)

    def OverlapMol(self, fmolatset: "AtomGroup", smolatset: "AtomGroup") -> "double":
        return _molsetc.MolSet_OverlapMol(self, fmolatset, smolatset)

    def AlignOverlapMol(self, fmolatset: "AtomGroup", pMol2: "HaMolecule", fit: "PtrPtrMap"=None, p_trans: "HaVec_double"=None, p_rot: "HaMat_double"=None) -> "double":
        return _molsetc.MolSet_AlignOverlapMol(self, fmolatset, pMol2, fit, p_trans, p_rot)
    load_opt_default = property(_molsetc.MolSet_load_opt_default_get, _molsetc.MolSet_load_opt_default_set)
    save_opt_default = property(_molsetc.MolSet_save_opt_default_get, _molsetc.MolSet_save_opt_default_set)

    def FetchFile(self, *args) -> "int":
        return _molsetc.MolSet_FetchFile(self, *args)

    def LoadHarlemFile(self, *args) -> "int":
        return _molsetc.MolSet_LoadHarlemFile(self, *args)

    def LoadAmberPrepFile(self, *args) -> "int":
        return _molsetc.MolSet_LoadAmberPrepFile(self, *args)

    def LoadAmberOffFile(self, *args) -> "int":
        return _molsetc.MolSet_LoadAmberOffFile(self, *args)

    def LoadAmberTopFile(self, *args) -> "int":
        return _molsetc.MolSet_LoadAmberTopFile(self, *args)

    def LoadRWFMolecule(self, *args) -> "int":
        return _molsetc.MolSet_LoadRWFMolecule(self, *args)

    def LoadPDBFile(self, *args) -> "int":
        return _molsetc.MolSet_LoadPDBFile(self, *args)

    def LoadMol2File(self, *args) -> "int":
        return _molsetc.MolSet_LoadMol2File(self, *args)

    def LoadMDLFile(self, *args) -> "int":
        return _molsetc.MolSet_LoadMDLFile(self, *args)

    def LoadXYZFile(self, *args) -> "int":
        return _molsetc.MolSet_LoadXYZFile(self, *args)

    def LoadHINFile(self, *args) -> "int":
        return _molsetc.MolSet_LoadHINFile(self, *args)

    def LoadXYZStream(self, *args) -> "int":
        return _molsetc.MolSet_LoadXYZStream(self, *args)

    def LoadHINStream(self, *args) -> "int":
        return _molsetc.MolSet_LoadHINStream(self, *args)

    def LoadAmberOffStream(self, *args) -> "int":
        return _molsetc.MolSet_LoadAmberOffStream(self, *args)

    def LoadXMLStream(self, *args) -> "int":
        return _molsetc.MolSet_LoadXMLStream(self, *args)

    def LoadXMLNode(self, *args) -> "int":
        return _molsetc.MolSet_LoadXMLNode(self, *args)

    def LoadOldHarlemFile(self, *args) -> "int":
        return _molsetc.MolSet_LoadOldHarlemFile(self, *args)

    def SetCoordFromFile(self, *args) -> "int":
        return _molsetc.MolSet_SetCoordFromFile(self, *args)

    def SetCrdFromArray(self, crd_arr: "HaVec_double") -> "int":
        return _molsetc.MolSet_SetCrdFromArray(self, crd_arr)

    def SavePDBFile(self, *args) -> "int":
        return _molsetc.MolSet_SavePDBFile(self, *args)

    def SaveHarlemFile(self, *args) -> "int":
        return _molsetc.MolSet_SaveHarlemFile(self, *args)

    def SaveOldHarlemFile(self, *args) -> "int":
        return _molsetc.MolSet_SaveOldHarlemFile(self, *args)

    def SaveXYZRadFile(self, *args) -> "int":
        return _molsetc.MolSet_SaveXYZRadFile(self, *args)

    def SaveDimerXYZFile(self, *args) -> "int":
        return _molsetc.MolSet_SaveDimerXYZFile(self, *args)

    def SaveHINFile(self, *args) -> "int":
        return _molsetc.MolSet_SaveHINFile(self, *args)

    def SavePQRFile(self, *args) -> "int":
        return _molsetc.MolSet_SavePQRFile(self, *args)

    def SavePQRFreeFile(self, *args) -> "int":
        return _molsetc.MolSet_SavePQRFreeFile(self, *args)

    def AddXml(self, *args) -> "TiXmlElement *":
        return _molsetc.MolSet_AddXml(self, *args)

    def SaveXML(self, *args) -> "int":
        return _molsetc.MolSet_SaveXML(self, *args)

    def SavePDBToStream(self, *args) -> "int":
        return _molsetc.MolSet_SavePDBToStream(self, *args)

    def SavePDBToString(self, *args) -> "std::string":
        return _molsetc.MolSet_SavePDBToString(self, *args)

    def SaveOldHarlemStream(self, *args) -> "int":
        return _molsetc.MolSet_SaveOldHarlemStream(self, *args)

    def SaveHINToStream(self, *args) -> "int":
        return _molsetc.MolSet_SaveHINToStream(self, *args)

    def SaveXMLToStream(self, *args) -> "int":
        return _molsetc.MolSet_SaveXMLToStream(self, *args)

    def GetZMat(self, popt: "HashMap"=None) -> "ZMatCrd *":
        return _molsetc.MolSet_GetZMat(self, popt)
    CurMolSet = property(_molsetc.MolSet_CurMolSet_get, _molsetc.MolSet_CurMolSet_set)
    HostMolecules = property(_molsetc.MolSet_HostMolecules_get, _molsetc.MolSet_HostMolecules_set)
    serno_mol_map = property(_molsetc.MolSet_serno_mol_map_get, _molsetc.MolSet_serno_mol_map_set)
    name_mol_map = property(_molsetc.MolSet_name_mol_map_get, _molsetc.MolSet_name_mol_map_set)

    def AddNewMolecule(self, mol_ser_no: "int"=-1) -> "HaMolecule *":
        return _molsetc.MolSet_AddNewMolecule(self, mol_ser_no)

    def GetFirstMolecule(self) -> "HaMolecule *":
        return _molsetc.MolSet_GetFirstMolecule(self)

    def GetMolByIdx(self, imol: "int") -> "HaMolecule *":
        return _molsetc.MolSet_GetMolByIdx(self, imol)

    def GetMolByIdx0(self, imol: "int") -> "HaMolecule *":
        return _molsetc.MolSet_GetMolByIdx0(self, imol)

    def GetMolByIdx1(self, imol: "int") -> "HaMolecule *":
        return _molsetc.MolSet_GetMolByIdx1(self, imol)

    def GetMolByName(self, *args) -> "HaMolecule const *":
        return _molsetc.MolSet_GetMolByName(self, *args)

    def GetMolByRef(self, *args) -> "HaMolecule const *":
        return _molsetc.MolSet_GetMolByRef(self, *args)

    def DeleteAll(self) -> "void":
        return _molsetc.MolSet_DeleteAll(self)

    def DeleteMol(self, pMol: "HaMolecule") -> "bool":
        return _molsetc.MolSet_DeleteMol(self, pMol)

    def DeleteAtomWithRef(self, atref: "char const *") -> "bool":
        return _molsetc.MolSet_DeleteAtomWithRef(self, atref)

    def DeleteAtom(self, aptr: "HaAtom") -> "bool":
        return _molsetc.MolSet_DeleteAtom(self, aptr)

    def DeleteAtoms(self, atset: "AtomContainer") -> "bool":
        return _molsetc.MolSet_DeleteAtoms(self, atset)

    def OnAtomSeqChange(self) -> "void":
        return _molsetc.MolSet_OnAtomSeqChange(self)

    def OnChangePeriodicity(self) -> "void":
        return _molsetc.MolSet_OnChangePeriodicity(self)

    def RenumberSelectedRes(self, start_num: "int"=1) -> "int":
        return _molsetc.MolSet_RenumberSelectedRes(self, start_num)

    def GetPointIteratorPtr(self, *args) -> "PointIterator_const *":
        return _molsetc.MolSet_GetPointIteratorPtr(self, *args)

    def GetNumPt(self) -> "int":
        return _molsetc.MolSet_GetNumPt(self)

    def GetAtomIteratorPtr(self, *args) -> "AtomIterator_const *":
        return _molsetc.MolSet_GetAtomIteratorPtr(self, *args)

    def IsMember(self, aptr: "HaAtom") -> "int":
        return _molsetc.MolSet_IsMember(self, aptr)

    def GetNMol(self) -> "int":
        return _molsetc.MolSet_GetNMol(self)

    def GetNRes(self) -> "int":
        return _molsetc.MolSet_GetNRes(self)

    def GetNChains(self) -> "int":
        return _molsetc.MolSet_GetNChains(self)

    def GetNAtoms(self) -> "int":
        return _molsetc.MolSet_GetNAtoms(self)

    def GetNDumAtoms(self) -> "int":
        return _molsetc.MolSet_GetNDumAtoms(self)

    def GetNBonds(self) -> "int":
        return _molsetc.MolSet_GetNBonds(self)

    def GetNHBonds(self) -> "int":
        return _molsetc.MolSet_GetNHBonds(self)

    def GetNSSBonds(self) -> "int":
        return _molsetc.MolSet_GetNSSBonds(self)

    def GetNBackbBonds(self) -> "int":
        return _molsetc.MolSet_GetNBackbBonds(self)

    def FindClosestContact(self, atc1: "HaAtom", atc2: "HaAtom") -> "double":
        return _molsetc.MolSet_FindClosestContact(self, atc1, atc2)

    def GetResByRef(self, res_ref: "char const *") -> "HaResidue *":
        return _molsetc.MolSet_GetResByRef(self, res_ref)

    def GetAtomByRef(self, at_ref: "std::string const &") -> "HaAtom *":
        return _molsetc.MolSet_GetAtomByRef(self, at_ref)

    def GetAtomsByRef(self, at_ref: "char const *", at_set: "AtomGroup") -> "bool":
        return _molsetc.MolSet_GetAtomsByRef(self, at_ref, at_set)

    def GetAtomBySeqNum(self, seq_num: "int") -> "HaAtom *":
        return _molsetc.MolSet_GetAtomBySeqNum(self, seq_num)

    def GetSeqNumForAtom(self, aptr: "HaAtom") -> "int":
        return _molsetc.MolSet_GetSeqNumForAtom(self, aptr)

    def InitAtomIdx(self) -> "void":
        return _molsetc.MolSet_InitAtomIdx(self)

    def GetAtomSeqNumMap(self, *args) -> "CAtomIntMap":
        return _molsetc.MolSet_GetAtomSeqNumMap(self, *args)

    def SelectAtomsAll(self) -> "void":
        return _molsetc.MolSet_SelectAtomsAll(self)

    def SelectAtoms(self, atom_coll: "AtomContainer", add_to_selection: "bool"=False) -> "void":
        return _molsetc.MolSet_SelectAtoms(self, atom_coll, add_to_selection)

    def SelectAtomsMask(self, mask: "int") -> "void":
        return _molsetc.MolSet_SelectAtomsMask(self, mask)

    def SelectAtomsExprObj(self, expr: "AtomExpr") -> "void":
        return _molsetc.MolSet_SelectAtomsExprObj(self, expr)

    def SelectAtomsExpr(self, expr_str: "char const *") -> "void":
        return _molsetc.MolSet_SelectAtomsExpr(self, expr_str)

    def SelectAtomsInBoundaryBox(self) -> "void":
        return _molsetc.MolSet_SelectAtomsInBoundaryBox(self)

    def UnSelectAtomsAll(self) -> "void":
        return _molsetc.MolSet_UnSelectAtomsAll(self)

    def RevertAtomSelection(self) -> "void":
        return _molsetc.MolSet_RevertAtomSelection(self)

    def DisplaySelectCount(self) -> "void":
        return _molsetc.MolSet_DisplaySelectCount(self)

    def GetSelectedAtoms(self) -> "AtomGroup":
        return _molsetc.MolSet_GetSelectedAtoms(self)

    def GetBondIterator(self) -> "BondIteratorMolSet":
        return _molsetc.MolSet_GetBondIterator(self)

    def AreHBonded(self, src: "HaAtom", dst: "HaAtom") -> "int":
        return _molsetc.MolSet_AreHBonded(self, src, dst)

    def AddHBond(self, src: "HaAtom", dst: "HaAtom") -> "HaHBond *":
        return _molsetc.MolSet_AddHBond(self, src, dst)

    def CreateHydrogenBond(self, src: "HaAtom", dst: "HaAtom", energy: "int", offset: "int") -> "void":
        return _molsetc.MolSet_CreateHydrogenBond(self, src, dst, energy, offset)

    def AddBond(self, src: "HaAtom", dst: "HaAtom") -> "HaBond *":
        return _molsetc.MolSet_AddBond(self, src, dst)

    def DeleteBond(self, src: "HaAtom", dst: "HaAtom") -> "bool":
        return _molsetc.MolSet_DeleteBond(self, src, dst)

    def ClearBackbone(self) -> "void":
        return _molsetc.MolSet_ClearBackbone(self)
    HBonds = property(_molsetc.MolSet_HBonds_get, _molsetc.MolSet_HBonds_set)
    Bonds = property(_molsetc.MolSet_Bonds_get, _molsetc.MolSet_Bonds_set)
    BackboneBonds = property(_molsetc.MolSet_BackboneBonds_get, _molsetc.MolSet_BackboneBonds_set)
    SSBonds_found = property(_molsetc.MolSet_SSBonds_found_get, _molsetc.MolSet_SSBonds_found_set)
    HBonds_found = property(_molsetc.MolSet_HBonds_found_get, _molsetc.MolSet_HBonds_found_set)
    to_find_backb = property(_molsetc.MolSet_to_find_backb_get, _molsetc.MolSet_to_find_backb_set)
    per_bc = property(_molsetc.MolSet_per_bc_get, _molsetc.MolSet_per_bc_set)

    def WrapToUnitCell(self) -> "int":
        return _molsetc.MolSet_WrapToUnitCell(self)

    def WrapAndCenter(self, grp_name: "std::string const &", cnt_crd: "Vec3D") -> "int":
        return _molsetc.MolSet_WrapAndCenter(self, grp_name, cnt_crd)

    def SetName(self, new_name: "char const *") -> "void":
        return _molsetc.MolSet_SetName(self, new_name)

    def GetName(self) -> "char const *":
        return _molsetc.MolSet_GetName(self)

    def GetUniqueMolName(self, suggest_name: "std::string const &") -> "std::string":
        return _molsetc.MolSet_GetUniqueMolName(self, suggest_name)
    name_mset = property(_molsetc.MolSet_name_mset_get, _molsetc.MolSet_name_mset_set)

    def GetResidueIterator(self) -> "ResidueIteratorMolSet":
        return _molsetc.MolSet_GetResidueIterator(self)

    def GetNChemGroups(self) -> "int":
        return _molsetc.MolSet_GetNChemGroups(self)

    def AddBlankChemGroup(self, *args) -> "ChemGroup *":
        return _molsetc.MolSet_AddBlankChemGroup(self, *args)

    def DeleteChemGroup(self, gid: "std::string const &") -> "bool":
        return _molsetc.MolSet_DeleteChemGroup(self, gid)

    def DeleteChemGroupPtr(self, grp_ptr: "ChemGroup") -> "bool":
        return _molsetc.MolSet_DeleteChemGroupPtr(self, grp_ptr)

    def SetChemGrpSelected(self, gid: "std::string const &") -> "bool":
        return _molsetc.MolSet_SetChemGrpSelected(self, gid)

    def GetChemGroupByIdx(self, index: "int") -> "ChemGroup &":
        return _molsetc.MolSet_GetChemGroupByIdx(self, index)

    def GetChemGroupByID(self, gid: "std::string const &") -> "ChemGroup *":
        return _molsetc.MolSet_GetChemGroupByID(self, gid)

    def GetChemGroupByAtom(self, aptr: "HaAtom") -> "ChemGroup *":
        return _molsetc.MolSet_GetChemGroupByAtom(self, aptr)

    def SetStdChemGroups(self) -> "bool":
        return _molsetc.MolSet_SetStdChemGroups(self)

    def RenumberGrp(self) -> "void":
        return _molsetc.MolSet_RenumberGrp(self)

    def CheckUniqChemGrpID(self, gid: "std::string const &") -> "bool":
        return _molsetc.MolSet_CheckUniqChemGrpID(self, gid)

    def GetUniqChemGrpID(self, buf_reg_flag: "int") -> "std::string":
        return _molsetc.MolSet_GetUniqChemGrpID(self, buf_reg_flag)
    ChemGroups = property(_molsetc.MolSet_ChemGroups_get, _molsetc.MolSet_ChemGroups_set)
    chemg_idx = property(_molsetc.MolSet_chemg_idx_get, _molsetc.MolSet_chemg_idx_set)

    def AddAtomGroup(self, *args) -> "AtomGroup *":
        return _molsetc.MolSet_AddAtomGroup(self, *args)

    def GetAtomGroupByID(self, id: "char const *") -> "AtomGroup *":
        return _molsetc.MolSet_GetAtomGroupByID(self, id)

    def SetAtomGroupFromSelection(self, id: "char const *") -> "AtomGroup *":
        return _molsetc.MolSet_SetAtomGroupFromSelection(self, id)
    NamedAtomGroups = property(_molsetc.MolSet_NamedAtomGroups_get, _molsetc.MolSet_NamedAtomGroups_set)

    def DeleteAtomGroup(self, id: "char const *") -> "bool":
        return _molsetc.MolSet_DeleteAtomGroup(self, id)

    def DeleteAtomGroupPtr(self, atgrp_ptr: "AtomGroup") -> "bool":
        return _molsetc.MolSet_DeleteAtomGroupPtr(self, atgrp_ptr)

    def CreateAxxMol(self, mol_name: "char const *", id: "char const *") -> "int":
        return _molsetc.MolSet_CreateAxxMol(self, mol_name, id)

    def GetAtomGroupNdxStr(self, p_atgrp: "AtomGroup") -> "std::string":
        return _molsetc.MolSet_GetAtomGroupNdxStr(self, p_atgrp)

    def SaveAtomGroupToNDXFile(self, p_atgrp: "AtomGroup", fname: "std::string") -> "void":
        return _molsetc.MolSet_SaveAtomGroupToNDXFile(self, p_atgrp, fname)

    def SortAtomGroupByIdx(self, p_atgrp: "AtomGroup") -> "bool":
        return _molsetc.MolSet_SortAtomGroupByIdx(self, p_atgrp)

    def SetStdProteinGroups(self) -> "bool":
        return _molsetc.MolSet_SetStdProteinGroups(self)

    def IsDimer(self) -> "bool":
        return _molsetc.MolSet_IsDimer(self)

    def GetAtomsSubMol(self, idx: "int") -> "HaAtomVector":
        return _molsetc.MolSet_GetAtomsSubMol(self, idx)

    def GetCrdSnapshots(self) -> "CrdSnapshotIterator":
        return _molsetc.MolSet_GetCrdSnapshots(self)
    crd_snapshots = property(_molsetc.MolSet_crd_snapshots_get, _molsetc.MolSet_crd_snapshots_set)

    def DeleteCrdSnapshots(self) -> "void":
        return _molsetc.MolSet_DeleteCrdSnapshots(self)

    def AddCrdSnapshot(self, *args) -> "CrdSnapshot *":
        return _molsetc.MolSet_AddCrdSnapshot(self, *args)

    def AddCrdSnapshotForGroup(self, *args) -> "CrdSnapshot *":
        return _molsetc.MolSet_AddCrdSnapshotForGroup(self, *args)

    def GetCrdSnapshotByName(self, snp_name: "char const *", create: "bool"=False) -> "CrdSnapshot *":
        return _molsetc.MolSet_GetCrdSnapshotByName(self, snp_name, create)

    def DeleteCrdSnapshot(self, psnap: "CrdSnapshot") -> "int":
        return _molsetc.MolSet_DeleteCrdSnapshot(self, psnap)

    def SetCrdFromSnapshot(self, *args) -> "int":
        return _molsetc.MolSet_SetCrdFromSnapshot(self, *args)

    def SaveCrdSnapshots(self, *args) -> "int":
        return _molsetc.MolSet_SaveCrdSnapshots(self, *args)

    def LoadCrdSnapshots(self, *args) -> "int":
        return _molsetc.MolSet_LoadCrdSnapshots(self, *args)

    def DescribeSecStruct(self) -> "int":
        return _molsetc.MolSet_DescribeSecStruct(self)

    def PrintHBonds(self) -> "int":
        return _molsetc.MolSet_PrintHBonds(self)

    def GetMolSurface(self, create_flag: "int"=0) -> "HaDisplayedSurface *":
        return _molsetc.MolSet_GetMolSurface(self, create_flag)

    def CalcMolSurface(self, surf_type: "int"=1) -> "HaDisplayedSurface *":
        return _molsetc.MolSet_CalcMolSurface(self, surf_type)

    def CalcMolSurfDens(self) -> "HaDisplayedSurface *":
        return _molsetc.MolSet_CalcMolSurfDens(self)

    def CalcSolventAccessArea(self) -> "int":
        return _molsetc.MolSet_CalcSolventAccessArea(self)

    def CreateExcludedVolumeMol(self) -> "int":
        return _molsetc.MolSet_CreateExcludedVolumeMol(self)

    def SaveCrdExclVolArb(self) -> "int":
        return _molsetc.MolSet_SaveCrdExclVolArb(self)

    def CalculatePotential(self, x: "double", y: "double", z: "double") -> "double":
        return _molsetc.MolSet_CalculatePotential(self, x, y, z)

    def CalcDipole(self) -> "bool":
        return _molsetc.MolSet_CalcDipole(self)

    def SetVdwRadii(self) -> "bool":
        return _molsetc.MolSet_SetVdwRadii(self)

    def SetParseRadii(self) -> "bool":
        return _molsetc.MolSet_SetParseRadii(self)

    def SetHPPRadii(self) -> "bool":
        return _molsetc.MolSet_SetHPPRadii(self)
    ChargeMaps = property(_molsetc.MolSet_ChargeMaps_get, _molsetc.MolSet_ChargeMaps_set)

    def GetChargeMapByName(self, map_name: "char const *") -> "AtomDoubleMap *":
        return _molsetc.MolSet_GetChargeMapByName(self, map_name)

    def CreateChargeMap(self, map_name: "char const *") -> "AtomDoubleMap *":
        return _molsetc.MolSet_CreateChargeMap(self, map_name)

    def SetChargeMapByCurrentCharges(self, map_name: "char const *") -> "int":
        return _molsetc.MolSet_SetChargeMapByCurrentCharges(self, map_name)

    def SetChargesFromChargeMap(self, charge_map: "AtomDoubleMap") -> "int":
        return _molsetc.MolSet_SetChargesFromChargeMap(self, charge_map)
    parent_mset = property(_molsetc.MolSet_parent_mset_get, _molsetc.MolSet_parent_mset_set)

    def CreateFragmentFromAtomGroup(self, grp_name: "std::string", frag_name: "std::string", params: "StrStrMap"=None) -> "MolSet *":
        return _molsetc.MolSet_CreateFragmentFromAtomGroup(self, grp_name, frag_name, params)

    def CreateFragmentFromSelection(self, frag_name: "std::string", params: "StrStrMap"=None) -> "MolSet *":
        return _molsetc.MolSet_CreateFragmentFromSelection(self, frag_name, params)

    def CreateDimerFragmentFromAtomGroups(self, *args) -> "MolSet *":
        return _molsetc.MolSet_CreateDimerFragmentFromAtomGroups(self, *args)
    Fragments = property(_molsetc.MolSet_Fragments_get, _molsetc.MolSet_Fragments_set)
    frag_atom_maps = property(_molsetc.MolSet_frag_atom_maps_get, _molsetc.MolSet_frag_atom_maps_set)
    struct_elem_info = property(_molsetc.MolSet_struct_elem_info_get, _molsetc.MolSet_struct_elem_info_set)

    def AssociateFragment(self, frag: "MolSet") -> "int":
        return _molsetc.MolSet_AssociateFragment(self, frag)

    def ReleaseFragment(self, frag: "MolSet") -> "int":
        return _molsetc.MolSet_ReleaseFragment(self, frag)

    def DeleteFragment(self, frag: "MolSet") -> "int":
        return _molsetc.MolSet_DeleteFragment(self, frag)

    def ReleaseAllFragments(self) -> "int":
        return _molsetc.MolSet_ReleaseAllFragments(self)

    def DeleteAllFragments(self) -> "int":
        return _molsetc.MolSet_DeleteAllFragments(self)

    def BuildFragmentAtomMap(self, frag: "MolSet", frag_atom_map: "AtomAtomMap") -> "int":
        return _molsetc.MolSet_BuildFragmentAtomMap(self, frag, frag_atom_map)

    def SelectAtomsMatchingFragment(self, frag: "MolSet") -> "int":
        return _molsetc.MolSet_SelectAtomsMatchingFragment(self, frag)

    def IsFragment(self, pmset: "MolSet") -> "int":
        return _molsetc.MolSet_IsFragment(self, pmset)

    def FragmentIdx(self, pmset: "MolSet") -> "int":
        return _molsetc.MolSet_FragmentIdx(self, pmset)

    def SyncFragmentCoord(self, frag: "MolSet") -> "int":
        return _molsetc.MolSet_SyncFragmentCoord(self, frag)

    def SyncCoordFromParent(self) -> "int":
        return _molsetc.MolSet_SyncCoordFromParent(self)

    def GetCompModule(self, *args) -> "HaCompMod const *":
        return _molsetc.MolSet_GetCompModule(self, *args)

    def GetQCMod(self, *args) -> "HaQCMod const *":
        return _molsetc.MolSet_GetQCMod(self, *args)

    def GetETCouplMod(self, create_module: "bool const"=False) -> "ETCouplMod *":
        return _molsetc.MolSet_GetETCouplMod(self, create_module)

    def GetGaussMod(self, create_module: "bool const"=False) -> "HaGaussMod *":
        return _molsetc.MolSet_GetGaussMod(self, create_module)

    def GetDaltonMod(self, create_module: "bool const"=False) -> "HaDaltonMod *":
        return _molsetc.MolSet_GetDaltonMod(self, create_module)

    def GetElectrostMod(self, create_module: "bool const"=False) -> "ElectrostMod *":
        return _molsetc.MolSet_GetElectrostMod(self, create_module)

    def GetpKaCalcMod(self, create_module: "bool const"=False) -> "pKaCalcMod *":
        return _molsetc.MolSet_GetpKaCalcMod(self, create_module)

    def GetPNPMod(self, create_module: "bool const"=False) -> "PNPMod *":
        return _molsetc.MolSet_GetPNPMod(self, create_module)

    def GetAPBSMod(self, create_module: "bool const"=False) -> "APBSMod *":
        return _molsetc.MolSet_GetAPBSMod(self, create_module)

    def GetInterMolMod(self, create_module: "bool const"=False) -> "HaInterMolMod *":
        return _molsetc.MolSet_GetInterMolMod(self, create_module)

    def GetMolMechMod(self, *args) -> "HaMolMechMod const *":
        return _molsetc.MolSet_GetMolMechMod(self, *args)

    def GetTrajAnalMod(self, create_module: "bool"=False) -> "MDTrajAnalMod *":
        return _molsetc.MolSet_GetTrajAnalMod(self, create_module)

    def GetScatterMod(self, create_module: "bool const"=False) -> "HaScatterMod *":
        return _molsetc.MolSet_GetScatterMod(self, create_module)

    def GetSTMMod(self, create_module: "bool const"=False) -> "StmMod *":
        return _molsetc.MolSet_GetSTMMod(self, create_module)

    def GetNuclAcidMod(self, create_module: "bool const"=False) -> "NuclAcidMod *":
        return _molsetc.MolSet_GetNuclAcidMod(self, create_module)

    def GetZindoMod(self, create_module: "bool const"=False) -> "HaZindoMod *":
        return _molsetc.MolSet_GetZindoMod(self, create_module)

    def GetProtonRedoxMod(self, create_module: "bool const"=False) -> "ProtonRedoxMod *":
        return _molsetc.MolSet_GetProtonRedoxMod(self, create_module)

    def GetEmpiricalMod(self, create_module: "bool const"=False) -> "HaEmpiricalMod *":
        return _molsetc.MolSet_GetEmpiricalMod(self, create_module)

    def GetMolMembraneMod(self, create_module: "bool const"=False) -> "HaMolMembraneMod *":
        return _molsetc.MolSet_GetMolMembraneMod(self, create_module)

    def GetFlexMod(self, create_module: "bool const"=False) -> "HaFlexMod *":
        return _molsetc.MolSet_GetFlexMod(self, create_module)

    def GetMolEditor(self, create_module: "bool const"=False) -> "MolEditor *":
        return _molsetc.MolSet_GetMolEditor(self, create_module)

    def GetCollectCrdAnalMod(self, create_module: "bool const"=False) -> "CollectCrdAnalMod *":
        return _molsetc.MolSet_GetCollectCrdAnalMod(self, create_module)
    CompModules = property(_molsetc.MolSet_CompModules_get, _molsetc.MolSet_CompModules_set)

    def AnnounceGeomChange(self) -> "int":
        return _molsetc.MolSet_AnnounceGeomChange(self)

    def RefreshAllViews(self, lHint: "long"=0) -> "void":
        return _molsetc.MolSet_RefreshAllViews(self, lHint)

    def GetActiveMolView(self, *args) -> "HaMolView const *":
        return _molsetc.MolSet_GetActiveMolView(self, *args)
    mset_pview = property(_molsetc.MolSet_mset_pview_get, _molsetc.MolSet_mset_pview_set)
    canvas_wx = property(_molsetc.MolSet_canvas_wx_get, _molsetc.MolSet_canvas_wx_set)

    def AddObject3D(self, new_view_object: "Object3D") -> "bool":
        return _molsetc.MolSet_AddObject3D(self, new_view_object)

    def DeleteObject3D(self, *args) -> "bool":
        return _molsetc.MolSet_DeleteObject3D(self, *args)
    ViewObjects = property(_molsetc.MolSet_ViewObjects_get, _molsetc.MolSet_ViewObjects_set)

    def ClearPickedAtoms(self) -> "void":
        return _molsetc.MolSet_ClearPickedAtoms(self)
    picked_atoms = property(_molsetc.MolSet_picked_atoms_get, _molsetc.MolSet_picked_atoms_set)
    info_str = property(_molsetc.MolSet_info_str_get, _molsetc.MolSet_info_str_set)
    comments1 = property(_molsetc.MolSet_comments1_get, _molsetc.MolSet_comments1_set)
    comments2 = property(_molsetc.MolSet_comments2_get, _molsetc.MolSet_comments2_set)

    def SetMortMol(self, mort_mol: "mort::molecule_t &", ff_type: "ForceFieldType") -> "int":
        return _molsetc.MolSet_SetMortMol(self, mort_mol, ff_type)

    def SavePDBMort(self, fname: "char const *") -> "int":
        return _molsetc.MolSet_SavePDBMort(self, fname)

    def SaveSDFMort(self, fname: "char const *") -> "int":
        return _molsetc.MolSet_SaveSDFMort(self, fname)

# Register MolSet in _molsetc:
_molsetc.MolSet_swigregister(MolSet)

class AtomIteratorMolSet(AtomIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.AtomIteratorMolSet_swiginit(self, _molsetc.new_AtomIteratorMolSet(*args))
    __swig_destroy__ = _molsetc.delete_AtomIteratorMolSet

    def clone(self) -> "PointIterator *":
        return _molsetc.AtomIteratorMolSet_clone(self)

    def GetFirstAtom(self) -> "HaAtom *":
        return _molsetc.AtomIteratorMolSet_GetFirstAtom(self)

    def GetNextAtom(self) -> "HaAtom *":
        return _molsetc.AtomIteratorMolSet_GetNextAtom(self)

    def __ref__(self) -> "HaAtom *":
        return _molsetc.AtomIteratorMolSet___ref__(self)

    def next(self) -> "HaAtom *":
        return _molsetc.AtomIteratorMolSet_next(self)

    def __iter__(self) -> "AtomIteratorMolSet":
        return _molsetc.AtomIteratorMolSet___iter__(self)

# Register AtomIteratorMolSet in _molsetc:
_molsetc.AtomIteratorMolSet_swigregister(AtomIteratorMolSet)

class AtomIteratorMolSet_const(AtomIterator_const):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.AtomIteratorMolSet_const_swiginit(self, _molsetc.new_AtomIteratorMolSet_const(*args))
    __swig_destroy__ = _molsetc.delete_AtomIteratorMolSet_const

    def clone(self) -> "PointIterator_const *":
        return _molsetc.AtomIteratorMolSet_const_clone(self)

    def GetFirstAtom(self) -> "HaAtom const *":
        return _molsetc.AtomIteratorMolSet_const_GetFirstAtom(self)

    def GetNextAtom(self) -> "HaAtom const *":
        return _molsetc.AtomIteratorMolSet_const_GetNextAtom(self)

# Register AtomIteratorMolSet_const in _molsetc:
_molsetc.AtomIteratorMolSet_const_swigregister(AtomIteratorMolSet_const)

class ResidueIteratorMolSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.ResidueIteratorMolSet_swiginit(self, _molsetc.new_ResidueIteratorMolSet(*args))
    __swig_destroy__ = _molsetc.delete_ResidueIteratorMolSet

    def GetFirstRes(self) -> "HaResidue *":
        return _molsetc.ResidueIteratorMolSet_GetFirstRes(self)

    def GetNextRes(self) -> "HaResidue *":
        return _molsetc.ResidueIteratorMolSet_GetNextRes(self)

    def GetCurrRes(self) -> "HaResidue *":
        return _molsetc.ResidueIteratorMolSet_GetCurrRes(self)

    def next(self) -> "HaResidue *":
        return _molsetc.ResidueIteratorMolSet_next(self)

    def __next__(self) -> "HaResidue *":
        return _molsetc.ResidueIteratorMolSet___next__(self)

    def __iter__(self) -> "ResidueIteratorMolSet":
        return _molsetc.ResidueIteratorMolSet___iter__(self)

# Register ResidueIteratorMolSet in _molsetc:
_molsetc.ResidueIteratorMolSet_swigregister(ResidueIteratorMolSet)

class ResidueIteratorMolSet_const(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_pmset: "MolSet"):
        _molsetc.ResidueIteratorMolSet_const_swiginit(self, _molsetc.new_ResidueIteratorMolSet_const(new_pmset))
    __swig_destroy__ = _molsetc.delete_ResidueIteratorMolSet_const

    def GetFirstRes(self) -> "HaResidue const *":
        return _molsetc.ResidueIteratorMolSet_const_GetFirstRes(self)

    def GetNextRes(self) -> "HaResidue const *":
        return _molsetc.ResidueIteratorMolSet_const_GetNextRes(self)

# Register ResidueIteratorMolSet_const in _molsetc:
_molsetc.ResidueIteratorMolSet_const_swigregister(ResidueIteratorMolSet_const)

class ChainIteratorMolSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_pmset: "MolSet"):
        _molsetc.ChainIteratorMolSet_swiginit(self, _molsetc.new_ChainIteratorMolSet(new_pmset))
    __swig_destroy__ = _molsetc.delete_ChainIteratorMolSet

    def GetFirstChain(self) -> "HaChain *":
        return _molsetc.ChainIteratorMolSet_GetFirstChain(self)

    def GetNextChain(self) -> "HaChain *":
        return _molsetc.ChainIteratorMolSet_GetNextChain(self)

# Register ChainIteratorMolSet in _molsetc:
_molsetc.ChainIteratorMolSet_swigregister(ChainIteratorMolSet)

class ChemGroupIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_pmset: "MolSet"):
        _molsetc.ChemGroupIterator_swiginit(self, _molsetc.new_ChemGroupIterator(new_pmset))
    __swig_destroy__ = _molsetc.delete_ChemGroupIterator

    def GetFirst(self) -> "ChemGroup *":
        return _molsetc.ChemGroupIterator_GetFirst(self)

    def GetNext(self) -> "ChemGroup *":
        return _molsetc.ChemGroupIterator_GetNext(self)

# Register ChemGroupIterator in _molsetc:
_molsetc.ChemGroupIterator_swigregister(ChemGroupIterator)

class AtomGroupIteratorMolSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_pmset: "MolSet"):
        _molsetc.AtomGroupIteratorMolSet_swiginit(self, _molsetc.new_AtomGroupIteratorMolSet(new_pmset))
    __swig_destroy__ = _molsetc.delete_AtomGroupIteratorMolSet

    def GetFirst(self) -> "AtomGroup *":
        return _molsetc.AtomGroupIteratorMolSet_GetFirst(self)

    def GetNext(self) -> "AtomGroup *":
        return _molsetc.AtomGroupIteratorMolSet_GetNext(self)

# Register AtomGroupIteratorMolSet in _molsetc:
_molsetc.AtomGroupIteratorMolSet_swigregister(AtomGroupIteratorMolSet)

class AtomGroupIteratorMolSet_const(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_pmset: "MolSet"):
        _molsetc.AtomGroupIteratorMolSet_const_swiginit(self, _molsetc.new_AtomGroupIteratorMolSet_const(new_pmset))
    __swig_destroy__ = _molsetc.delete_AtomGroupIteratorMolSet_const

    def GetFirst(self) -> "AtomGroup const *":
        return _molsetc.AtomGroupIteratorMolSet_const_GetFirst(self)

    def GetNext(self) -> "AtomGroup const *":
        return _molsetc.AtomGroupIteratorMolSet_const_GetNext(self)

# Register AtomGroupIteratorMolSet_const in _molsetc:
_molsetc.AtomGroupIteratorMolSet_const_swigregister(AtomGroupIteratorMolSet_const)

class BondIteratorMolSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_pmset: "MolSet"):
        _molsetc.BondIteratorMolSet_swiginit(self, _molsetc.new_BondIteratorMolSet(new_pmset))
    __swig_destroy__ = _molsetc.delete_BondIteratorMolSet

    def GetFirstBond(self) -> "HaBond *":
        return _molsetc.BondIteratorMolSet_GetFirstBond(self)

    def GetNextBond(self) -> "HaBond *":
        return _molsetc.BondIteratorMolSet_GetNextBond(self)

    def next(self) -> "HaBond *":
        return _molsetc.BondIteratorMolSet_next(self)

    def __next__(self) -> "HaBond *":
        return _molsetc.BondIteratorMolSet___next__(self)

    def __iter__(self) -> "BondIteratorMolSet":
        return _molsetc.BondIteratorMolSet___iter__(self)

# Register BondIteratorMolSet in _molsetc:
_molsetc.BondIteratorMolSet_swigregister(BondIteratorMolSet)

class HBondIteratorMolSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_pmset: "MolSet"):
        _molsetc.HBondIteratorMolSet_swiginit(self, _molsetc.new_HBondIteratorMolSet(new_pmset))
    __swig_destroy__ = _molsetc.delete_HBondIteratorMolSet

    def GetFirstBond(self) -> "HaHBond *":
        return _molsetc.HBondIteratorMolSet_GetFirstBond(self)

    def GetNextBond(self) -> "HaHBond *":
        return _molsetc.HBondIteratorMolSet_GetNextBond(self)

# Register HBondIteratorMolSet in _molsetc:
_molsetc.HBondIteratorMolSet_swigregister(HBondIteratorMolSet)

class PyAccMolSetProp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_pmset: "MolSet"):
        _molsetc.PyAccMolSetProp_swiginit(self, _molsetc.new_PyAccMolSetProp(new_pmset))
    __swig_destroy__ = _molsetc.delete_PyAccMolSetProp
    pmset = property(_molsetc.PyAccMolSetProp_pmset_get, _molsetc.PyAccMolSetProp_pmset_set)

    def GetAtomsSerNoAsVec(self) -> "std::vector< int,std::allocator< int > > *":
        return _molsetc.PyAccMolSetProp_GetAtomsSerNoAsVec(self)

    def GetResidueSerNoAsVec(self) -> "std::vector< int,std::allocator< int > > *":
        return _molsetc.PyAccMolSetProp_GetResidueSerNoAsVec(self)

    def GetAtomsChargeAsVec(self) -> "std::vector< double,std::allocator< double > > *":
        return _molsetc.PyAccMolSetProp_GetAtomsChargeAsVec(self)

    def GetAtomsRadiusAsVec(self) -> "std::vector< double,std::allocator< double > > *":
        return _molsetc.PyAccMolSetProp_GetAtomsRadiusAsVec(self)

    def GetAtomsNameAsVec(self) -> "std::vector< std::string,std::allocator< std::string > > *":
        return _molsetc.PyAccMolSetProp_GetAtomsNameAsVec(self)

    def GetResidueNameAsVec(self) -> "std::vector< std::string,std::allocator< std::string > > *":
        return _molsetc.PyAccMolSetProp_GetResidueNameAsVec(self)

    def GetAtomsCoorXAsVec(self) -> "std::vector< double,std::allocator< double > > *":
        return _molsetc.PyAccMolSetProp_GetAtomsCoorXAsVec(self)

    def GetAtomsCoorYAsVec(self) -> "std::vector< double,std::allocator< double > > *":
        return _molsetc.PyAccMolSetProp_GetAtomsCoorYAsVec(self)

    def GetAtomsCoorZAsVec(self) -> "std::vector< double,std::allocator< double > > *":
        return _molsetc.PyAccMolSetProp_GetAtomsCoorZAsVec(self)

    def GetAtomsIonExcludedRadiusAsVec(self, Rion: "double") -> "std::vector< double,std::allocator< double > > *":
        return _molsetc.PyAccMolSetProp_GetAtomsIonExcludedRadiusAsVec(self, Rion)

    def WriteAtomParamFileForPNP(self, filename: "char const *", ResidueSerNo: "std_vector_int", ResidueName: "StringVector", AtomsSerNo: "std_vector_int", AtomsName: "StringVector", AtomsCoorX: "std_vector_double", AtomsCoorY: "std_vector_double", AtomsCoorZ: "std_vector_double", AtomsCharge: "std_vector_double", AtomsRadius: "std_vector_double", AtomsIER1: "std_vector_double", AtomsIER2: "std_vector_double", SR_A_K: "std::vector< float,std::allocator< float > > *", SR_N_K: "std::vector< float,std::allocator< float > > *", SR_A_Cl: "std::vector< float,std::allocator< float > > *", SR_N_Cl: "std::vector< float,std::allocator< float > > *") -> "void":
        return _molsetc.PyAccMolSetProp_WriteAtomParamFileForPNP(self, filename, ResidueSerNo, ResidueName, AtomsSerNo, AtomsName, AtomsCoorX, AtomsCoorY, AtomsCoorZ, AtomsCharge, AtomsRadius, AtomsIER1, AtomsIER2, SR_A_K, SR_N_K, SR_A_Cl, SR_N_Cl)

# Register PyAccMolSetProp in _molsetc:
_molsetc.PyAccMolSetProp_swigregister(PyAccMolSetProp)


def GetCurMolSet() -> "MolSet *":
    return _molsetc.GetCurMolSet()

def SetCurMolSet(pmset: "MolSet") -> "void":
    return _molsetc.SetCurMolSet(pmset)
class ComputerAccount(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    acc_id = property(_molsetc.ComputerAccount_acc_id_get, _molsetc.ComputerAccount_acc_id_set)
    login_str = property(_molsetc.ComputerAccount_login_str_get, _molsetc.ComputerAccount_login_str_set)
    interm_acc_ID = property(_molsetc.ComputerAccount_interm_acc_ID_get, _molsetc.ComputerAccount_interm_acc_ID_set)

    def __init__(self):
        _molsetc.ComputerAccount_swiginit(self, _molsetc.new_ComputerAccount())
    __swig_destroy__ = _molsetc.delete_ComputerAccount

# Register ComputerAccount in _molsetc:
_molsetc.ComputerAccount_swigregister(ComputerAccount)

class HarlemApp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HarlemApp_swiginit(self, _molsetc.new_HarlemApp())
    __swig_destroy__ = _molsetc.delete_HarlemApp

    def ProcessOptions(self) -> "int":
        return _molsetc.HarlemApp_ProcessOptions(self)

    def InitFirst(self) -> "int":
        return _molsetc.HarlemApp_InitFirst(self)

    def InitLast(self) -> "int":
        return _molsetc.HarlemApp_InitLast(self)

    def InitParallel(self) -> "int":
        return _molsetc.HarlemApp_InitParallel(self)

    def InitRemoteComp(self) -> "int":
        return _molsetc.HarlemApp_InitRemoteComp(self)

    def InitCommand(self) -> "void":
        return _molsetc.HarlemApp_InitCommand(self)

    def RedirectIOLogWindow(self) -> "int":
        return _molsetc.HarlemApp_RedirectIOLogWindow(self)

    def RedirectIOLogFile(self, *args) -> "int":
        return _molsetc.HarlemApp_RedirectIOLogFile(self, *args)

    def CreateCommandWindow(self) -> "int":
        return _molsetc.HarlemApp_CreateCommandWindow(self)

    def ExecuteCommand(self) -> "int":
        return _molsetc.HarlemApp_ExecuteCommand(self)

    def RasMolCmd(self, cmd: "char const *") -> "int":
        return _molsetc.HarlemApp_RasMolCmd(self, cmd)

    def ExecRasMolScript(self, file_name: "char const *") -> "int":
        return _molsetc.HarlemApp_ExecRasMolScript(self, file_name)

    def ExecuteScriptFromFile(self, script_fname: "char const *") -> "int":
        return _molsetc.HarlemApp_ExecuteScriptFromFile(self, script_fname)

    def ExecuteScriptInString(self, script_str: "char const *") -> "int":
        return _molsetc.HarlemApp_ExecuteScriptInString(self, script_str)

    @staticmethod
    def RunExternalProgram(rmode: "RunMode", prog_name: "std::string const &", prog_args: "StrVec", prog_output: "StrVec", get_prog_output: "int"=0) -> "long":
        return _molsetc.HarlemApp_RunExternalProgram(rmode, prog_name, prog_args, prog_output, get_prog_output)

    @staticmethod
    def CheckProcIsActive(proc_id: "long") -> "int":
        return _molsetc.HarlemApp_CheckProcIsActive(proc_id)

    @staticmethod
    def KillProc(proc_id: "long") -> "int":
        return _molsetc.HarlemApp_KillProc(proc_id)

    @staticmethod
    def SwitchThread() -> "int":
        return _molsetc.HarlemApp_SwitchThread()

    @staticmethod
    def SleepThread(ms_delay: "int") -> "int":
        return _molsetc.HarlemApp_SleepThread(ms_delay)

    def ProcessEvent(self, type: "int", id: "int") -> "int":
        return _molsetc.HarlemApp_ProcessEvent(self, type, id)
    comp_accounts = property(_molsetc.HarlemApp_comp_accounts_get, _molsetc.HarlemApp_comp_accounts_set)

    def GetAccountByID(self, acc_id: "char const *") -> "ComputerAccount *":
        return _molsetc.HarlemApp_GetAccountByID(self, acc_id)

    def ShowAccountsLoad(self) -> "int":
        return _molsetc.HarlemApp_ShowAccountsLoad(self)

    def ExecuteRemoteCmd(self, pacc: "ComputerAccount", cmd: "char const *", prog_output: "StrVec", get_prog_output: "int") -> "int":
        return _molsetc.HarlemApp_ExecuteRemoteCmd(self, pacc, cmd, prog_output, get_prog_output)

    def Exit(self) -> "void":
        return _molsetc.HarlemApp_Exit(self)

    def LoadInitFile(self) -> "void":
        return _molsetc.HarlemApp_LoadInitFile(self)

    def StartWait(self) -> "void":
        return _molsetc.HarlemApp_StartWait(self)

    def EndWait(self) -> "void":
        return _molsetc.HarlemApp_EndWait(self)

    def GetMolSetByName(self, name: "char const *") -> "MolSet *":
        return _molsetc.HarlemApp_GetMolSetByName(self, name)

    def AddMolSet(self, pmset: "MolSet") -> "void":
        return _molsetc.HarlemApp_AddMolSet(self, pmset)

    def DeleteMolSet(self, pmset: "MolSet") -> "void":
        return _molsetc.HarlemApp_DeleteMolSet(self, pmset)

    def GetAtomByRef(self, at_ref: "char const *") -> "HaAtom *":
        return _molsetc.HarlemApp_GetAtomByRef(self, at_ref)
    gui_mode = property(_molsetc.HarlemApp_gui_mode_get, _molsetc.HarlemApp_gui_mode_set)
    cmd_prompt_mode = property(_molsetc.HarlemApp_cmd_prompt_mode_get, _molsetc.HarlemApp_cmd_prompt_mode_set)
    mpi_py_script = property(_molsetc.HarlemApp_mpi_py_script_get, _molsetc.HarlemApp_mpi_py_script_set)
    argc_loc = property(_molsetc.HarlemApp_argc_loc_get, _molsetc.HarlemApp_argc_loc_set)
    argv_loc = property(_molsetc.HarlemApp_argv_loc_get, _molsetc.HarlemApp_argv_loc_set)
    FormatOpt = property(_molsetc.HarlemApp_FormatOpt_get, _molsetc.HarlemApp_FormatOpt_set)
    finp_name = property(_molsetc.HarlemApp_finp_name_get, _molsetc.HarlemApp_finp_name_set)
    script_name = property(_molsetc.HarlemApp_script_name_get, _molsetc.HarlemApp_script_name_set)
    script_str = property(_molsetc.HarlemApp_script_str_get, _molsetc.HarlemApp_script_str_set)
    cmd_pr = property(_molsetc.HarlemApp_cmd_pr_get, _molsetc.HarlemApp_cmd_pr_set)
    only_rasmol_command = property(_molsetc.HarlemApp_only_rasmol_command_get, _molsetc.HarlemApp_only_rasmol_command_set)
    FileFormat = property(_molsetc.HarlemApp_FileFormat_get, _molsetc.HarlemApp_FileFormat_set)
    harlem_home_dir = property(_molsetc.HarlemApp_harlem_home_dir_get, _molsetc.HarlemApp_harlem_home_dir_set)
    res_db_dir = property(_molsetc.HarlemApp_res_db_dir_get, _molsetc.HarlemApp_res_db_dir_set)
    script_dir = property(_molsetc.HarlemApp_script_dir_get, _molsetc.HarlemApp_script_dir_set)
    basis_dir = property(_molsetc.HarlemApp_basis_dir_get, _molsetc.HarlemApp_basis_dir_set)
    word_editor = property(_molsetc.HarlemApp_word_editor_get, _molsetc.HarlemApp_word_editor_set)
    manual_main_page = property(_molsetc.HarlemApp_manual_main_page_get, _molsetc.HarlemApp_manual_main_page_set)
    cmd_line_help_main_page = property(_molsetc.HarlemApp_cmd_line_help_main_page_get, _molsetc.HarlemApp_cmd_line_help_main_page_set)
    mpi_driver = property(_molsetc.HarlemApp_mpi_driver_get, _molsetc.HarlemApp_mpi_driver_set)
    file_log = property(_molsetc.HarlemApp_file_log_get, _molsetc.HarlemApp_file_log_set)
    molset_vec = property(_molsetc.HarlemApp_molset_vec_get, _molsetc.HarlemApp_molset_vec_set)
    m_HarlemApp = property(_molsetc.HarlemApp_m_HarlemApp_get, _molsetc.HarlemApp_m_HarlemApp_set)

# Register HarlemApp in _molsetc:
_molsetc.HarlemApp_swigregister(HarlemApp)

def HarlemApp_RunExternalProgram(rmode: "RunMode", prog_name: "std::string const &", prog_args: "StrVec", prog_output: "StrVec", get_prog_output: "int"=0) -> "long":
    return _molsetc.HarlemApp_RunExternalProgram(rmode, prog_name, prog_args, prog_output, get_prog_output)

def HarlemApp_CheckProcIsActive(proc_id: "long") -> "int":
    return _molsetc.HarlemApp_CheckProcIsActive(proc_id)

def HarlemApp_KillProc(proc_id: "long") -> "int":
    return _molsetc.HarlemApp_KillProc(proc_id)

def HarlemApp_SwitchThread() -> "int":
    return _molsetc.HarlemApp_SwitchThread()

def HarlemApp_SleepThread(ms_delay: "int") -> "int":
    return _molsetc.HarlemApp_SleepThread(ms_delay)


def StartHarlemApp() -> "void":
    return _molsetc.StartHarlemApp()

def GetCurApp() -> "HarlemApp *":
    return _molsetc.GetCurApp()
class HaMPI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaMPI_swiginit(self, _molsetc.new_HaMPI())
    __swig_destroy__ = _molsetc.delete_HaMPI

    def Listen(self) -> "int":
        return _molsetc.HaMPI_Listen(self)

    def SendXmlMsgAllProc(self, msg: "char const *") -> "int":
        return _molsetc.HaMPI_SendXmlMsgAllProc(self, msg)

    def SendKillAppMsgAllProc(self) -> "int":
        return _molsetc.HaMPI_SendKillAppMsgAllProc(self)

    def ExecuteCommandProcArray(self, proc_array: "HaVec_int", cmd: "char const *") -> "void":
        return _molsetc.HaMPI_ExecuteCommandProcArray(self, proc_array, cmd)

    def ExecuteCommandAllProc(self, cmd: "char const *") -> "void":
        return _molsetc.HaMPI_ExecuteCommandAllProc(self, cmd)
    myrank = property(_molsetc.HaMPI_myrank_get, _molsetc.HaMPI_myrank_set)
    nprocs = property(_molsetc.HaMPI_nprocs_get, _molsetc.HaMPI_nprocs_set)
    world_group = property(_molsetc.HaMPI_world_group_get, _molsetc.HaMPI_world_group_set)
    BASIC_SIGNAL_DIM = _molsetc.HaMPI_BASIC_SIGNAL_DIM
    KILL_APP_SIGNAL = _molsetc.HaMPI_KILL_APP_SIGNAL
    XML_SIGNAL = _molsetc.HaMPI_XML_SIGNAL
    WX_EVENT_SIGNAL = _molsetc.HaMPI_WX_EVENT_SIGNAL
    basic_signal = property(_molsetc.HaMPI_basic_signal_get, _molsetc.HaMPI_basic_signal_set)
    msg_buffer = property(_molsetc.HaMPI_msg_buffer_get, _molsetc.HaMPI_msg_buffer_set)

    @staticmethod
    def BuildXMLwxCmdEventBasic(type: "int", id: "int", add_header: "bool"=True) -> "std::string":
        return _molsetc.HaMPI_BuildXMLwxCmdEventBasic(type, id, add_header)

# Register HaMPI in _molsetc:
_molsetc.HaMPI_swigregister(HaMPI)

def HaMPI_BuildXMLwxCmdEventBasic(type: "int", id: "int", add_header: "bool"=True) -> "std::string":
    return _molsetc.HaMPI_BuildXMLwxCmdEventBasic(type, id, add_header)

MAXRAD = _molsetc.MAXRAD
MAXTABLE = _molsetc.MAXTABLE
class Knot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    px = property(_molsetc.Knot_px_get, _molsetc.Knot_px_set)
    py = property(_molsetc.Knot_py_get, _molsetc.Knot_py_set)
    pz = property(_molsetc.Knot_pz_get, _molsetc.Knot_pz_set)
    tx = property(_molsetc.Knot_tx_get, _molsetc.Knot_tx_set)
    ty = property(_molsetc.Knot_ty_get, _molsetc.Knot_ty_set)
    tz = property(_molsetc.Knot_tz_get, _molsetc.Knot_tz_set)
    hnx = property(_molsetc.Knot_hnx_get, _molsetc.Knot_hnx_set)
    hny = property(_molsetc.Knot_hny_get, _molsetc.Knot_hny_set)
    hnz = property(_molsetc.Knot_hnz_get, _molsetc.Knot_hnz_set)
    vnx = property(_molsetc.Knot_vnx_get, _molsetc.Knot_vnx_set)
    vny = property(_molsetc.Knot_vny_get, _molsetc.Knot_vny_set)
    vnz = property(_molsetc.Knot_vnz_get, _molsetc.Knot_vnz_set)
    dx = property(_molsetc.Knot_dx_get, _molsetc.Knot_dx_set)
    dy = property(_molsetc.Knot_dy_get, _molsetc.Knot_dy_set)
    dz = property(_molsetc.Knot_dz_get, _molsetc.Knot_dz_set)
    wx = property(_molsetc.Knot_wx_get, _molsetc.Knot_wx_set)
    wy = property(_molsetc.Knot_wy_get, _molsetc.Knot_wy_set)
    wz = property(_molsetc.Knot_wz_get, _molsetc.Knot_wz_set)
    hinten = property(_molsetc.Knot_hinten_get, _molsetc.Knot_hinten_set)
    vinten = property(_molsetc.Knot_vinten_get, _molsetc.Knot_vinten_set)
    hsize = property(_molsetc.Knot_hsize_get, _molsetc.Knot_hsize_set)
    vsize = property(_molsetc.Knot_vsize_get, _molsetc.Knot_vsize_set)
    wide = property(_molsetc.Knot_wide_get, _molsetc.Knot_wide_set)

    def __init__(self):
        _molsetc.Knot_swiginit(self, _molsetc.new_Knot())
    __swig_destroy__ = _molsetc.delete_Knot

# Register Knot in _molsetc:
_molsetc.Knot_swigregister(Knot)

MAXVERT = _molsetc.MAXVERT
class Edge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dx = property(_molsetc.Edge_dx_get, _molsetc.Edge_dx_set)
    dz = property(_molsetc.Edge_dz_get, _molsetc.Edge_dz_set)
    dr = property(_molsetc.Edge_dr_get, _molsetc.Edge_dr_set)
    dg = property(_molsetc.Edge_dg_get, _molsetc.Edge_dg_set)
    db = property(_molsetc.Edge_db_get, _molsetc.Edge_db_set)
    x = property(_molsetc.Edge_x_get, _molsetc.Edge_x_set)
    z = property(_molsetc.Edge_z_get, _molsetc.Edge_z_set)
    r = property(_molsetc.Edge_r_get, _molsetc.Edge_r_set)
    g = property(_molsetc.Edge_g_get, _molsetc.Edge_g_set)
    b = property(_molsetc.Edge_b_get, _molsetc.Edge_b_set)

    def __init__(self):
        _molsetc.Edge_swiginit(self, _molsetc.new_Edge())
    __swig_destroy__ = _molsetc.delete_Edge

# Register Edge in _molsetc:
_molsetc.Edge_swigregister(Edge)

class Vert(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_molsetc.Vert_x_get, _molsetc.Vert_x_set)
    y = property(_molsetc.Vert_y_get, _molsetc.Vert_y_set)
    z = property(_molsetc.Vert_z_get, _molsetc.Vert_z_set)
    inten = property(_molsetc.Vert_inten_get, _molsetc.Vert_inten_set)

    def __init__(self):
        _molsetc.Vert_swiginit(self, _molsetc.new_Vert())
    __swig_destroy__ = _molsetc.delete_Vert

# Register Vert in _molsetc:
_molsetc.Vert_swigregister(Vert)

class Poly(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    v = property(_molsetc.Poly_v_get, _molsetc.Poly_v_set)
    count = property(_molsetc.Poly_count_get, _molsetc.Poly_count_set)

    def __init__(self):
        _molsetc.Poly_swiginit(self, _molsetc.new_Poly())
    __swig_destroy__ = _molsetc.delete_Poly

# Register Poly in _molsetc:
_molsetc.Poly_swigregister(Poly)

class ArcEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dx = property(_molsetc.ArcEntry_dx_get, _molsetc.ArcEntry_dx_set)
    dy = property(_molsetc.ArcEntry_dy_get, _molsetc.ArcEntry_dy_set)
    dz = property(_molsetc.ArcEntry_dz_get, _molsetc.ArcEntry_dz_set)
    inten = property(_molsetc.ArcEntry_inten_get, _molsetc.ArcEntry_inten_set)
    offset = property(_molsetc.ArcEntry_offset_get, _molsetc.ArcEntry_offset_set)

    def __init__(self):
        _molsetc.ArcEntry_swiginit(self, _molsetc.new_ArcEntry())
    __swig_destroy__ = _molsetc.delete_ArcEntry

# Register ArcEntry in _molsetc:
_molsetc.ArcEntry_swigregister(ArcEntry)

class ViewStruct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fbuf = property(_molsetc.ViewStruct_fbuf_get, _molsetc.ViewStruct_fbuf_set)
    dbuf = property(_molsetc.ViewStruct_dbuf_get, _molsetc.ViewStruct_dbuf_set)
    xmax = property(_molsetc.ViewStruct_xmax_get, _molsetc.ViewStruct_xmax_set)
    ymax = property(_molsetc.ViewStruct_ymax_get, _molsetc.ViewStruct_ymax_set)
    yskip = property(_molsetc.ViewStruct_yskip_get, _molsetc.ViewStruct_yskip_set)

    def __init__(self):
        _molsetc.ViewStruct_swiginit(self, _molsetc.new_ViewStruct())
    __swig_destroy__ = _molsetc.delete_ViewStruct

# Register ViewStruct in _molsetc:
_molsetc.ViewStruct_swigregister(ViewStruct)

class HaColor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.HaColor_swiginit(self, _molsetc.new_HaColor(*args))
    __swig_destroy__ = _molsetc.delete_HaColor

    def __eq__(self, ref: "HaColor") -> "bool":
        return _molsetc.HaColor___eq__(self, ref)

    def SetColor(self, *args) -> "int":
        return _molsetc.HaColor_SetColor(self, *args)

    @staticmethod
    def ColorNameExist(col_str: "std::string const &") -> "bool":
        return _molsetc.HaColor_ColorNameExist(col_str)

    @staticmethod
    def GetColorName(r: "int", g: "int", b: "int") -> "std::string":
        return _molsetc.HaColor_GetColorName(r, g, b)

    @staticmethod
    def GetColorVal(*args) -> "ColorVal":
        return _molsetc.HaColor_GetColorVal(*args)

    @staticmethod
    def RegisterColor(r: "int", g: "int", b: "int") -> "int":
        return _molsetc.HaColor_RegisterColor(r, g, b)

    @staticmethod
    def GetPureColorByCIdx(cidx: "int") -> "ColorVal":
        return _molsetc.HaColor_GetPureColorByCIdx(cidx)

    @staticmethod
    def GetPureRGBbyCIdx(cidx: "int", r: "int &", g: "int &", b: "int &") -> "void":
        return _molsetc.HaColor_GetPureRGBbyCIdx(cidx, r, g, b)

    @staticmethod
    def GetRGBFromColVal(cval: "ColorVal", r: "int &", g: "int &", b: "int &") -> "void":
        return _molsetc.HaColor_GetRGBFromColVal(cval, r, g, b)

    @staticmethod
    def GetNumColors() -> "int":
        return _molsetc.HaColor_GetNumColors()

    @staticmethod
    def RegisterColorName(col_name: "std::string const &", r: "int", g: "int", b: "int") -> "int":
        return _molsetc.HaColor_RegisterColorName(col_name, r, g, b)
    r = property(_molsetc.HaColor_r_get, _molsetc.HaColor_r_set)
    g = property(_molsetc.HaColor_g_get, _molsetc.HaColor_g_set)
    b = property(_molsetc.HaColor_b_get, _molsetc.HaColor_b_set)
    cval = property(_molsetc.HaColor_cval_get, _molsetc.HaColor_cval_set)
    cidx = property(_molsetc.HaColor_cidx_get, _molsetc.HaColor_cidx_set)
    cval_idx_map = property(_molsetc.HaColor_cval_idx_map_get, _molsetc.HaColor_cval_idx_map_set)
    col_name_map = property(_molsetc.HaColor_col_name_map_get, _molsetc.HaColor_col_name_map_set)
    name_col_map = property(_molsetc.HaColor_name_col_map_get, _molsetc.HaColor_name_col_map_set)
    used_colors = property(_molsetc.HaColor_used_colors_get, _molsetc.HaColor_used_colors_set)
    color_names_init_flag = property(_molsetc.HaColor_color_names_init_flag_get, _molsetc.HaColor_color_names_init_flag_set)

    @staticmethod
    def GetRGBbyCIdxFloat(cidx: "int", fcol: "float *") -> "void":
        return _molsetc.HaColor_GetRGBbyCIdxFloat(cidx, fcol)

# Register HaColor in _molsetc:
_molsetc.HaColor_swigregister(HaColor)
LutSize = cvar.LutSize
DefaultAmbient = cvar.DefaultAmbient
ColourDepth = cvar.ColourDepth
ColourMask = cvar.ColourMask
SlabReject = cvar.SlabReject
SlabHalf = cvar.SlabHalf
SlabHollow = cvar.SlabHollow
SlabFinal = cvar.SlabFinal
SlabClose = cvar.SlabClose
SlabSection = cvar.SlabSection
ColBits = cvar.ColBits

def HaColor_ColorNameExist(col_str: "std::string const &") -> "bool":
    return _molsetc.HaColor_ColorNameExist(col_str)

def HaColor_GetColorName(r: "int", g: "int", b: "int") -> "std::string":
    return _molsetc.HaColor_GetColorName(r, g, b)

def HaColor_GetColorVal(*args) -> "ColorVal":
    return _molsetc.HaColor_GetColorVal(*args)

def HaColor_RegisterColor(r: "int", g: "int", b: "int") -> "int":
    return _molsetc.HaColor_RegisterColor(r, g, b)

def HaColor_GetPureColorByCIdx(cidx: "int") -> "ColorVal":
    return _molsetc.HaColor_GetPureColorByCIdx(cidx)

def HaColor_GetPureRGBbyCIdx(cidx: "int", r: "int &", g: "int &", b: "int &") -> "void":
    return _molsetc.HaColor_GetPureRGBbyCIdx(cidx, r, g, b)

def HaColor_GetRGBFromColVal(cval: "ColorVal", r: "int &", g: "int &", b: "int &") -> "void":
    return _molsetc.HaColor_GetRGBFromColVal(cval, r, g, b)

def HaColor_GetNumColors() -> "int":
    return _molsetc.HaColor_GetNumColors()

def HaColor_RegisterColorName(col_name: "std::string const &", r: "int", g: "int", b: "int") -> "int":
    return _molsetc.HaColor_RegisterColorName(col_name, r, g, b)

def HaColor_GetRGBbyCIdxFloat(cidx: "int", fcol: "float *") -> "void":
    return _molsetc.HaColor_GetRGBbyCIdxFloat(cidx, fcol)

class HaColorMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaColorMap_swiginit(self, _molsetc.new_HaColorMap())
    __swig_destroy__ = _molsetc.delete_HaColorMap
    colors = property(_molsetc.HaColorMap_colors_get, _molsetc.HaColorMap_colors_set)

    def GetColorByIdx(self, idx: "int") -> "HaColor &":
        return _molsetc.HaColorMap_GetColorByIdx(self, idx)

    def GetNColors(self) -> "int":
        return _molsetc.HaColorMap_GetNColors(self)

    def AddColor(self, r: "int", g: "int", b: "int") -> "int":
        return _molsetc.HaColorMap_AddColor(self, r, g, b)

    def AddUniformRange(self, num_cols: "int", col1: "HaColor", col2: "HaColor") -> "int":
        return _molsetc.HaColorMap_AddUniformRange(self, num_cols, col1, col2)

    def GetIdxByProp(self, prop: "void *") -> "int":
        return _molsetc.HaColorMap_GetIdxByProp(self, prop)

# Register HaColorMap in _molsetc:
_molsetc.HaColorMap_swigregister(HaColorMap)

class StrColorMap(HaColorMap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.StrColorMap_swiginit(self, _molsetc.new_StrColorMap())
    __swig_destroy__ = _molsetc.delete_StrColorMap

    def GetColorForStr(self, str: "char const *") -> "HaColor *":
        return _molsetc.StrColorMap_GetColorForStr(self, str)

    def AddStrColorPair(self, str: "char const *", r: "int", g: "int", b: "int") -> "int":
        return _molsetc.StrColorMap_AddStrColorPair(self, str, r, g, b)
    str_idx_map = property(_molsetc.StrColorMap_str_idx_map_get, _molsetc.StrColorMap_str_idx_map_set)
    cval_idx_map = property(_molsetc.StrColorMap_cval_idx_map_get, _molsetc.StrColorMap_cval_idx_map_set)

# Register StrColorMap in _molsetc:
_molsetc.StrColorMap_swigregister(StrColorMap)

class IValColorMap(HaColorMap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.IValColorMap_swiginit(self, _molsetc.new_IValColorMap())
    __swig_destroy__ = _molsetc.delete_IValColorMap

    def GetColorForInt(self, ival: "int") -> "HaColor *":
        return _molsetc.IValColorMap_GetColorForInt(self, ival)

    def AddIntColorPair(self, ival: "int", r: "int", g: "int", b: "int") -> "int":
        return _molsetc.IValColorMap_AddIntColorPair(self, ival, r, g, b)
    int_idx_map = property(_molsetc.IValColorMap_int_idx_map_get, _molsetc.IValColorMap_int_idx_map_set)
    cval_idx_map = property(_molsetc.IValColorMap_cval_idx_map_get, _molsetc.IValColorMap_cval_idx_map_set)

# Register IValColorMap in _molsetc:
_molsetc.IValColorMap_swigregister(IValColorMap)

class DRangeColorMap(HaColorMap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.DRangeColorMap_swiginit(self, _molsetc.new_DRangeColorMap())
    __swig_destroy__ = _molsetc.delete_DRangeColorMap

    def GetColorForVal(self, val: "double") -> "HaColor *":
        return _molsetc.DRangeColorMap_GetColorForVal(self, val)
    min_val = property(_molsetc.DRangeColorMap_min_val_get, _molsetc.DRangeColorMap_min_val_set)
    max_val = property(_molsetc.DRangeColorMap_max_val_get, _molsetc.DRangeColorMap_max_val_set)

# Register DRangeColorMap in _molsetc:
_molsetc.DRangeColorMap_swigregister(DRangeColorMap)

class DValColorMap(HaColorMap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.DValColorMap_swiginit(self, _molsetc.new_DValColorMap())
    __swig_destroy__ = _molsetc.delete_DValColorMap

    def GetColorForVal(self, val: "double") -> "HaColor *":
        return _molsetc.DValColorMap_GetColorForVal(self, val)

    def SaveToTxtFile(self, fname: "std::string const &") -> "int":
        return _molsetc.DValColorMap_SaveToTxtFile(self, fname)

    def LoadFromTxtFile(self, fname: "std::string const &") -> "int":
        return _molsetc.DValColorMap_LoadFromTxtFile(self, fname)

    def Clear(self) -> "void":
        return _molsetc.DValColorMap_Clear(self)

    def IsValid(self) -> "bool":
        return _molsetc.DValColorMap_IsValid(self)

    def AddColorAndMinVal(self, r: "int", g: "int", b: "int", val_min: "double", n_interp_col: "int"=0) -> "int":
        return _molsetc.DValColorMap_AddColorAndMinVal(self, r, g, b, val_min, n_interp_col)
    min_values = property(_molsetc.DValColorMap_min_values_get, _molsetc.DValColorMap_min_values_set)

# Register DValColorMap in _molsetc:
_molsetc.DValColorMap_swigregister(DValColorMap)

class Canvas3D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.Canvas3D_swiginit(self, _molsetc.new_Canvas3D())
    __swig_destroy__ = _molsetc.delete_Canvas3D

    def resize(self, new_XRange: "int", new_YRange: "int") -> "void":
        return _molsetc.Canvas3D_resize(self, new_XRange, new_YRange)

    def AllocImage(self) -> "ColorVal *":
        return _molsetc.Canvas3D_AllocImage(self)

    def DestroyImage(self) -> "void":
        return _molsetc.Canvas3D_DestroyImage(self)

    def AllocDBuffer(self) -> "short *":
        return _molsetc.Canvas3D_AllocDBuffer(self)

    def DestroyDBuffer(self) -> "void":
        return _molsetc.Canvas3D_DestroyDBuffer(self)
    FBuffer = property(_molsetc.Canvas3D_FBuffer_get, _molsetc.Canvas3D_FBuffer_set)
    DBuffer = property(_molsetc.Canvas3D_DBuffer_get, _molsetc.Canvas3D_DBuffer_set)
    FBClear = property(_molsetc.Canvas3D_FBClear_get, _molsetc.Canvas3D_FBClear_set)
    DBClear = property(_molsetc.Canvas3D_DBClear_get, _molsetc.Canvas3D_DBClear_set)
    View = property(_molsetc.Canvas3D_View_get, _molsetc.Canvas3D_View_set)
    Lut = property(_molsetc.Canvas3D_Lut_get, _molsetc.Canvas3D_Lut_set)
    empty_lut_idx = property(_molsetc.Canvas3D_empty_lut_idx_get, _molsetc.Canvas3D_empty_lut_idx_set)
    m_FontSize = property(_molsetc.Canvas3D_m_FontSize_get, _molsetc.Canvas3D_m_FontSize_set)
    m_SplineCount = property(_molsetc.Canvas3D_m_SplineCount_get, _molsetc.Canvas3D_m_SplineCount_set)
    m_UseSlabPlane = property(_molsetc.Canvas3D_m_UseSlabPlane_get, _molsetc.Canvas3D_m_UseSlabPlane_set)
    m_SlabValue = property(_molsetc.Canvas3D_m_SlabValue_get, _molsetc.Canvas3D_m_SlabValue_set)
    m_SlabMode = property(_molsetc.Canvas3D_m_SlabMode_get, _molsetc.Canvas3D_m_SlabMode_set)
    m_SlabInten = property(_molsetc.Canvas3D_m_SlabInten_get, _molsetc.Canvas3D_m_SlabInten_set)
    m_SliceValue = property(_molsetc.Canvas3D_m_SliceValue_get, _molsetc.Canvas3D_m_SliceValue_set)
    m_ImageSize = property(_molsetc.Canvas3D_m_ImageSize_get, _molsetc.Canvas3D_m_ImageSize_set)
    m_ImageRadius = property(_molsetc.Canvas3D_m_ImageRadius_get, _molsetc.Canvas3D_m_ImageRadius_set)
    m_ZOffset = property(_molsetc.Canvas3D_m_ZOffset_get, _molsetc.Canvas3D_m_ZOffset_set)
    LookUp = property(_molsetc.Canvas3D_LookUp_get, _molsetc.Canvas3D_LookUp_set)
    Array = property(_molsetc.Canvas3D_Array_get, _molsetc.Canvas3D_Array_set)
    ColConstTable = property(_molsetc.Canvas3D_ColConstTable_get, _molsetc.Canvas3D_ColConstTable_set)
    ColConst = property(_molsetc.Canvas3D_ColConst_get, _molsetc.Canvas3D_ColConst_set)

    def XRange(self) -> "int":
        return _molsetc.Canvas3D_XRange(self)

    def YRange(self) -> "int":
        return _molsetc.Canvas3D_YRange(self)

    def HRange(self) -> "int":
        return _molsetc.Canvas3D_HRange(self)

    def WRange(self) -> "int":
        return _molsetc.Canvas3D_WRange(self)

    def Range(self) -> "int":
        return _molsetc.Canvas3D_Range(self)

    def PlotDeepPoint(self, x: "int", y: "int", z: "int", col: "int") -> "void":
        return _molsetc.Canvas3D_PlotDeepPoint(self, x, y, z, col)

    def ClipDeepPoint(self, x: "int", y: "int", z: "int", col: "int") -> "void":
        return _molsetc.Canvas3D_ClipDeepPoint(self, x, y, z, col)

    def DrawTwinLine(self, x1: "int", y1: "int", z1: "int", x2: "int", y2: "int", z2: "int", col1: "int", col2: "int") -> "void":
        return _molsetc.Canvas3D_DrawTwinLine(self, x1, y1, z1, x2, y2, z2, col1, col2)

    def ClipTwinLine(self, x1: "int", y1: "int", z1: "int", x2: "int", y2: "int", z2: "int", col1: "int", col2: "int") -> "void":
        return _molsetc.Canvas3D_ClipTwinLine(self, x1, y1, z1, x2, y2, z2, col1, col2)

    def DrawTwinVector(self, x1: "int", y1: "int", z1: "int", x2: "int", y2: "int", z2: "int", col1: "int", col2: "int") -> "void":
        return _molsetc.Canvas3D_DrawTwinVector(self, x1, y1, z1, x2, y2, z2, col1, col2)

    def ClipTwinVector(self, x1: "int", y1: "int", z1: "int", x2: "int", y2: "int", z2: "int", col1: "int", col2: "int") -> "void":
        return _molsetc.Canvas3D_ClipTwinVector(self, x1, y1, z1, x2, y2, z2, col1, col2)

    def ClipDashVector(self, x1: "int", y1: "int", z1: "int", x2: "int", y2: "int", z2: "int", col1: "int", col2: "int") -> "void":
        return _molsetc.Canvas3D_ClipDashVector(self, x1, y1, z1, x2, y2, z2, col1, col2)

    def DrawCylinder(self, x1: "int", y1: "int", z1: "int", x2: "int", y2: "int", z2: "int", c1: "int", c2: "int", rad: "int") -> "void":
        return _molsetc.Canvas3D_DrawCylinder(self, x1, y1, z1, x2, y2, z2, c1, c2, rad)

    def ClipCylinder(self, x1: "int", y1: "int", z1: "int", x2: "int", y2: "int", z2: "int", c1: "int", c2: "int", rad: "int") -> "void":
        return _molsetc.Canvas3D_ClipCylinder(self, x1, y1, z1, x2, y2, z2, c1, c2, rad)

    def DashRibbon(self, src: "Knot", dst: "Knot", col1: "int", col2: "int") -> "void":
        return _molsetc.Canvas3D_DashRibbon(self, src, dst, col1, col2)

    def StrandRibbon(self, src: "Knot", dst: "Knot", col1: "int", col2: "int") -> "void":
        return _molsetc.Canvas3D_StrandRibbon(self, src, dst, col1, col2)

    def SolidRibbon2(self, src: "Knot", dst: "Knot", col1: "int", col2: "int") -> "void":
        return _molsetc.Canvas3D_SolidRibbon2(self, src, dst, col1, col2)

    def SolidRibbon(self, src: "Knot", dst: "Knot", col: "int") -> "void":
        return _molsetc.Canvas3D_SolidRibbon(self, src, dst, col)

    def RectRibbon(self, src: "Knot", dst: "Knot", col: "int") -> "void":
        return _molsetc.Canvas3D_RectRibbon(self, src, dst, col)

    def DrawSphere(self, x: "int", y: "int", z: "int", rad: "int", col: "int") -> "void":
        return _molsetc.Canvas3D_DrawSphere(self, x, y, z, rad, col)

    def ClipSphere(self, x: "int", y: "int", z: "int", rad: "int", col: "int") -> "void":
        return _molsetc.Canvas3D_ClipSphere(self, x, y, z, rad, col)

    def SetFontSize(self, size: "int") -> "void":
        return _molsetc.Canvas3D_SetFontSize(self, size)

    def DisplayTextString(self, x: "int", y: "int", z: "int", label: "char const *", col: "int") -> "void":
        return _molsetc.Canvas3D_DisplayTextString(self, x, y, z, label, col)

    def ClipPolygon(self, p: "Poly", transp: "double"=0.0) -> "void":
        return _molsetc.Canvas3D_ClipPolygon(self, p, transp)

# Register Canvas3D in _molsetc:
_molsetc.Canvas3D_swigregister(Canvas3D)

class Monitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.Monitor_swiginit(self, _molsetc.new_Monitor())
    __swig_destroy__ = _molsetc.delete_Monitor
    src = property(_molsetc.Monitor_src_get, _molsetc.Monitor_src_set)
    dst = property(_molsetc.Monitor_dst_get, _molsetc.Monitor_dst_set)

    def __eq__(self, ref: "Monitor") -> "bool":
        return _molsetc.Monitor___eq__(self, ref)

    def __lt__(self, ref: "Monitor") -> "bool":
        return _molsetc.Monitor___lt__(self, ref)
    dist = property(_molsetc.Monitor_dist_get, _molsetc.Monitor_dist_set)
    col = property(_molsetc.Monitor_col_get, _molsetc.Monitor_col_set)

# Register Monitor in _molsetc:
_molsetc.Monitor_swigregister(Monitor)
LOAD_AMBER_RESTART_TIMER_ID = cvar.LOAD_AMBER_RESTART_TIMER_ID

class HaMolView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaMolView_swiginit(self, _molsetc.new_HaMolView())
    __swig_destroy__ = _molsetc.delete_HaMolView

    def GetMolSet(self) -> "MolSet *":
        return _molsetc.HaMolView_GetMolSet(self)
    debug_level = property(_molsetc.HaMolView_debug_level_get, _molsetc.HaMolView_debug_level_set)

    def ResetView(self) -> "void":
        return _molsetc.HaMolView_ResetView(self)
    UseDepthCue = property(_molsetc.HaMolView_UseDepthCue_get, _molsetc.HaMolView_UseDepthCue_set)
    UseStereo = property(_molsetc.HaMolView_UseStereo_get, _molsetc.HaMolView_UseStereo_set)
    UseClipping = property(_molsetc.HaMolView_UseClipping_get, _molsetc.HaMolView_UseClipping_set)
    SSBondMode = property(_molsetc.HaMolView_SSBondMode_get, _molsetc.HaMolView_SSBondMode_set)
    HBondMode = property(_molsetc.HaMolView_HBondMode_get, _molsetc.HaMolView_HBondMode_set)
    ZoneBoth = property(_molsetc.HaMolView_ZoneBoth_get, _molsetc.HaMolView_ZoneBoth_set)
    UseTransparent = property(_molsetc.HaMolView_UseTransparent_get, _molsetc.HaMolView_UseTransparent_set)
    UseOutLine = property(_molsetc.HaMolView_UseOutLine_get, _molsetc.HaMolView_UseOutLine_set)
    StereoAngle = property(_molsetc.HaMolView_StereoAngle_get, _molsetc.HaMolView_StereoAngle_set)
    DrawBoundBox = property(_molsetc.HaMolView_DrawBoundBox_get, _molsetc.HaMolView_DrawBoundBox_set)
    DrawAxes = property(_molsetc.HaMolView_DrawAxes_get, _molsetc.HaMolView_DrawAxes_set)
    DrawDoubleBonds = property(_molsetc.HaMolView_DrawDoubleBonds_get, _molsetc.HaMolView_DrawDoubleBonds_set)
    DrawUnitCell = property(_molsetc.HaMolView_DrawUnitCell_get, _molsetc.HaMolView_DrawUnitCell_set)
    CartoonHeight = property(_molsetc.HaMolView_CartoonHeight_get, _molsetc.HaMolView_CartoonHeight_set)
    SolventDots = property(_molsetc.HaMolView_SolventDots_get, _molsetc.HaMolView_SolventDots_set)
    ProbeRadius = property(_molsetc.HaMolView_ProbeRadius_get, _molsetc.HaMolView_ProbeRadius_set)
    DrawDots = property(_molsetc.HaMolView_DrawDots_get, _molsetc.HaMolView_DrawDots_set)
    DrawLabels = property(_molsetc.HaMolView_DrawLabels_get, _molsetc.HaMolView_DrawLabels_set)
    DrawMonitDistance = property(_molsetc.HaMolView_DrawMonitDistance_get, _molsetc.HaMolView_DrawMonitDistance_set)
    DrawBetaArrows = property(_molsetc.HaMolView_DrawBetaArrows_get, _molsetc.HaMolView_DrawBetaArrows_set)
    DrawObj3D = property(_molsetc.HaMolView_DrawObj3D_get, _molsetc.HaMolView_DrawObj3D_set)
    host_mol_set = property(_molsetc.HaMolView_host_mol_set_get, _molsetc.HaMolView_host_mol_set_set)
    HashTable = property(_molsetc.HaMolView_HashTable_get, _molsetc.HaMolView_HashTable_set)
    XOffset = property(_molsetc.HaMolView_XOffset_get, _molsetc.HaMolView_XOffset_set)
    YOffset = property(_molsetc.HaMolView_YOffset_get, _molsetc.HaMolView_YOffset_set)
    ideltx = property(_molsetc.HaMolView_ideltx_get, _molsetc.HaMolView_ideltx_set)
    idelty = property(_molsetc.HaMolView_idelty_get, _molsetc.HaMolView_idelty_set)
    CenX = property(_molsetc.HaMolView_CenX_get, _molsetc.HaMolView_CenX_set)
    CenY = property(_molsetc.HaMolView_CenY_get, _molsetc.HaMolView_CenY_set)
    CenZ = property(_molsetc.HaMolView_CenZ_get, _molsetc.HaMolView_CenZ_set)
    CurRX = property(_molsetc.HaMolView_CurRX_get, _molsetc.HaMolView_CurRX_set)
    CurRY = property(_molsetc.HaMolView_CurRY_get, _molsetc.HaMolView_CurRY_set)
    CurRZ = property(_molsetc.HaMolView_CurRZ_get, _molsetc.HaMolView_CurRZ_set)
    CurTX = property(_molsetc.HaMolView_CurTX_get, _molsetc.HaMolView_CurTX_set)
    CurTY = property(_molsetc.HaMolView_CurTY_get, _molsetc.HaMolView_CurTY_set)
    CurZoom = property(_molsetc.HaMolView_CurZoom_get, _molsetc.HaMolView_CurZoom_set)
    CurSlabValue = property(_molsetc.HaMolView_CurSlabValue_get, _molsetc.HaMolView_CurSlabValue_set)
    LastRX = property(_molsetc.HaMolView_LastRX_get, _molsetc.HaMolView_LastRX_set)
    LastRY = property(_molsetc.HaMolView_LastRY_get, _molsetc.HaMolView_LastRY_set)
    LastRZ = property(_molsetc.HaMolView_LastRZ_get, _molsetc.HaMolView_LastRZ_set)
    LastTX = property(_molsetc.HaMolView_LastTX_get, _molsetc.HaMolView_LastTX_set)
    LastTY = property(_molsetc.HaMolView_LastTY_get, _molsetc.HaMolView_LastTY_set)
    PointX = property(_molsetc.HaMolView_PointX_get, _molsetc.HaMolView_PointX_set)
    PointY = property(_molsetc.HaMolView_PointY_get, _molsetc.HaMolView_PointY_set)
    InitX = property(_molsetc.HaMolView_InitX_get, _molsetc.HaMolView_InitX_set)
    InitY = property(_molsetc.HaMolView_InitY_get, _molsetc.HaMolView_InitY_set)
    FakeSpecular = property(_molsetc.HaMolView_FakeSpecular_get, _molsetc.HaMolView_FakeSpecular_set)
    SpecPower = property(_molsetc.HaMolView_SpecPower_get, _molsetc.HaMolView_SpecPower_set)
    UseLabelCol = property(_molsetc.HaMolView_UseLabelCol_get, _molsetc.HaMolView_UseLabelCol_set)
    UseBackFade = property(_molsetc.HaMolView_UseBackFade_get, _molsetc.HaMolView_UseBackFade_set)
    Ambient = property(_molsetc.HaMolView_Ambient_get, _molsetc.HaMolView_Ambient_set)
    Rot = property(_molsetc.HaMolView_Rot_get, _molsetc.HaMolView_Rot_set)
    Orig = property(_molsetc.HaMolView_Orig_get, _molsetc.HaMolView_Orig_set)
    Zoom = property(_molsetc.HaMolView_Zoom_get, _molsetc.HaMolView_Zoom_set)
    Scale = property(_molsetc.HaMolView_Scale_get, _molsetc.HaMolView_Scale_set)
    DScale = property(_molsetc.HaMolView_DScale_get, _molsetc.HaMolView_DScale_set)
    UseScreenClip = property(_molsetc.HaMolView_UseScreenClip_get, _molsetc.HaMolView_UseScreenClip_set)
    m_screen_transform = property(_molsetc.HaMolView_m_screen_transform_get, _molsetc.HaMolView_m_screen_transform_set)
    ReDrawFlag = property(_molsetc.HaMolView_ReDrawFlag_get, _molsetc.HaMolView_ReDrawFlag_set)
    Hydrogens = property(_molsetc.HaMolView_Hydrogens_get, _molsetc.HaMolView_Hydrogens_set)
    HetaGroups = property(_molsetc.HaMolView_HetaGroups_get, _molsetc.HaMolView_HetaGroups_set)
    DrawAtoms = property(_molsetc.HaMolView_DrawAtoms_get, _molsetc.HaMolView_DrawAtoms_set)
    DrawBonds = property(_molsetc.HaMolView_DrawBonds_get, _molsetc.HaMolView_DrawBonds_set)
    DrawRibbon = property(_molsetc.HaMolView_DrawRibbon_get, _molsetc.HaMolView_DrawRibbon_set)
    DrawBestPath = property(_molsetc.HaMolView_DrawBestPath_get, _molsetc.HaMolView_DrawBestPath_set)
    DrawContourSurf = property(_molsetc.HaMolView_DrawContourSurf_get, _molsetc.HaMolView_DrawContourSurf_set)
    DrawSolidSurfaces = property(_molsetc.HaMolView_DrawSolidSurfaces_get, _molsetc.HaMolView_DrawSolidSurfaces_set)

    def ExecuteCommand(self, cmd_pr: "CmdParser") -> "int":
        return _molsetc.HaMolView_ExecuteCommand(self, cmd_pr)

    def ExecuteSetCommand(self, cmd_pr: "CmdParser") -> "int":
        return _molsetc.HaMolView_ExecuteSetCommand(self, cmd_pr)

    def ExecuteColourCommand(self, cmd_pr: "CmdParser") -> "int":
        return _molsetc.HaMolView_ExecuteColourCommand(self, cmd_pr)

    def ConnectObject(self, pObj: "Object3D") -> "void":
        return _molsetc.HaMolView_ConnectObject(self, pObj)

    def BroadcastCurrAtom(self) -> "int":
        return _molsetc.HaMolView_BroadcastCurrAtom(self)

    def FillCurrAtomRef(self, buf: "char *") -> "int":
        return _molsetc.HaMolView_FillCurrAtomRef(self, buf)

    def GetImageSize(self) -> "int":
        return _molsetc.HaMolView_GetImageSize(self)

    def GetImageRadius(self) -> "int":
        return _molsetc.HaMolView_GetImageRadius(self)

    def SetUseSlabPlane(self, new_UseSlabPlane: "int") -> "void":
        return _molsetc.HaMolView_SetUseSlabPlane(self, new_UseSlabPlane)

    def UseSlabPlane(self) -> "int":
        return _molsetc.HaMolView_UseSlabPlane(self)

    def SetSlabMode(self, new_SlabMode: "int") -> "void":
        return _molsetc.HaMolView_SetSlabMode(self, new_SlabMode)

    def SlabMode(self) -> "int":
        return _molsetc.HaMolView_SlabMode(self)

    def SetSlabValue(self, new_SlabValue: "int") -> "void":
        return _molsetc.HaMolView_SetSlabValue(self, new_SlabValue)

    def SlabValue(self) -> "int":
        return _molsetc.HaMolView_SlabValue(self)

    def SetSlabInten(self, new_SlabInten: "int") -> "void":
        return _molsetc.HaMolView_SetSlabInten(self, new_SlabInten)

    def SetSliceValue(self, new_SliceValue: "int") -> "void":
        return _molsetc.HaMolView_SetSliceValue(self, new_SliceValue)

    def SliceValue(self) -> "int":
        return _molsetc.HaMolView_SliceValue(self)

    def SetZOffset(self, new_ZOffset: "int") -> "void":
        return _molsetc.HaMolView_SetZOffset(self, new_ZOffset)

    def ZOffset(self) -> "int":
        return _molsetc.HaMolView_ZOffset(self)

    def ClampShiftVal(self, ival: "int", value: "double") -> "void":
        return _molsetc.HaMolView_ClampShiftVal(self, ival, value)

    def WrapShiftVal(self, iaxis: "int", value: "double") -> "void":
        return _molsetc.HaMolView_WrapShiftVal(self, iaxis, value)

    def UpdateThisView(self, lHint: "int"=0) -> "void":
        return _molsetc.HaMolView_UpdateThisView(self, lHint)

    def RefreshScreen(self) -> "void":
        return _molsetc.HaMolView_RefreshScreen(self)

    def CreateImage(self) -> "int":
        return _molsetc.HaMolView_CreateImage(self)

    def ClearImage(self) -> "void":
        return _molsetc.HaMolView_ClearImage(self)

    def ClearBuffers(self) -> "void":
        return _molsetc.HaMolView_ClearBuffers(self)

    def TransferImage(self) -> "void":
        return _molsetc.HaMolView_TransferImage(self)

    def PrintImage(self) -> "int":
        return _molsetc.HaMolView_PrintImage(self)

    def ClipboardImage(self) -> "int":
        return _molsetc.HaMolView_ClipboardImage(self)

    def ReSizeScreen(self) -> "void":
        return _molsetc.HaMolView_ReSizeScreen(self)

    def ReAllocBuffers(self) -> "void":
        return _molsetc.HaMolView_ReAllocBuffers(self)

    def BuildHashTable(self) -> "void":
        return _molsetc.HaMolView_BuildHashTable(self)

    def DrawFrame(self) -> "void":
        return _molsetc.HaMolView_DrawFrame(self)

    def ResetRenderer(self) -> "void":
        return _molsetc.HaMolView_ResetRenderer(self)

    def SetStereoMode(self, arg2: "int") -> "void":
        return _molsetc.HaMolView_SetStereoMode(self, arg2)

    def SetPickMode(self, arg2: "int") -> "void":
        return _molsetc.HaMolView_SetPickMode(self, arg2)

    def PickAtom(self, arg2: "int", arg3: "int", arg4: "int") -> "void":
        return _molsetc.HaMolView_PickAtom(self, arg2, arg3, arg4)

    def InitialTransform(self) -> "void":
        return _molsetc.HaMolView_InitialTransform(self)

    def PrepareTransform(self) -> "void":
        return _molsetc.HaMolView_PrepareTransform(self)

    def ApplyTransform(self) -> "void":
        return _molsetc.HaMolView_ApplyTransform(self)

    def ResetTransform(self) -> "void":
        return _molsetc.HaMolView_ResetTransform(self)

    def CalcRotCenter(self, sel_atoms: "int"=0) -> "void":
        return _molsetc.HaMolView_CalcRotCenter(self, sel_atoms)

    def CenterSelected(self) -> "void":
        return _molsetc.HaMolView_CenterSelected(self)

    def GetTransfCoord(self, x_abs: "double", y_abs: "double", z_abs: "double", x_tr: "double &", y_tr: "double &", z_tr: "double &") -> "void":
        return _molsetc.HaMolView_GetTransfCoord(self, x_abs, y_abs, z_abs, x_tr, y_tr, z_tr)

    def SetAtomScreenRadVal(self, rad: "double") -> "void":
        return _molsetc.HaMolView_SetAtomScreenRadVal(self, rad)

    def SetRadiusTemperature(self) -> "void":
        return _molsetc.HaMolView_SetRadiusTemperature(self)

    def SetAtomScreenRadVdW(self) -> "void":
        return _molsetc.HaMolView_SetAtomScreenRadVdW(self)

    def DefaultRepresentation(self) -> "void":
        return _molsetc.HaMolView_DefaultRepresentation(self)

    def DisableSpacefill(self) -> "void":
        return _molsetc.HaMolView_DisableSpacefill(self)

    def EnableWireframe(self, mask: "int", rad: "double") -> "void":
        return _molsetc.HaMolView_EnableWireframe(self, mask, rad)

    def DisableWireframe(self) -> "void":
        return _molsetc.HaMolView_DisableWireframe(self)

    def EnableBackbone(self, mask: "int", rad: "double") -> "void":
        return _molsetc.HaMolView_EnableBackbone(self, mask, rad)

    def DisableBackbone(self) -> "void":
        return _molsetc.HaMolView_DisableBackbone(self)

    def SetHBondStatus(self, enable: "int", rad: "double") -> "void":
        return _molsetc.HaMolView_SetHBondStatus(self, enable, rad)

    def SetSSBondStatus(self, enable: "int", rad: "double") -> "void":
        return _molsetc.HaMolView_SetSSBondStatus(self, enable, rad)

    def SetRibbonCartoons(self) -> "void":
        return _molsetc.HaMolView_SetRibbonCartoons(self)

    def SetRibbonStatus(self, enable: "int", flag: "int", width: "double") -> "void":
        return _molsetc.HaMolView_SetRibbonStatus(self, enable, flag, width)

    def SetTraceTemperature(self) -> "void":
        return _molsetc.HaMolView_SetTraceTemperature(self)

    @staticmethod
    def SetMouseMode(arg1: "int") -> "void":
        return _molsetc.HaMolView_SetMouseMode(arg1)
    MouseMode = property(_molsetc.HaMolView_MouseMode_get, _molsetc.HaMolView_MouseMode_set)
    UseHourGlass = property(_molsetc.HaMolView_UseHourGlass_get, _molsetc.HaMolView_UseHourGlass_set)
    min_color_map = property(_molsetc.HaMolView_min_color_map_get, _molsetc.HaMolView_min_color_map_set)
    rev_color_map = property(_molsetc.HaMolView_rev_color_map_get, _molsetc.HaMolView_rev_color_map_set)

    @staticmethod
    def RefreshColors() -> "void":
        return _molsetc.HaMolView_RefreshColors()

    def ComputeRevColourMap(self) -> "int":
        return _molsetc.HaMolView_ComputeRevColourMap(self)
    BackColor = property(_molsetc.HaMolView_BackColor_get, _molsetc.HaMolView_BackColor_set)
    BoxColor = property(_molsetc.HaMolView_BoxColor_get, _molsetc.HaMolView_BoxColor_set)
    LabelColor = property(_molsetc.HaMolView_LabelColor_get, _molsetc.HaMolView_LabelColor_set)

    def ColorAtomsByProp(self, str_prop: "std::string const &", p_col_map: "DValColorMap"=None) -> "int":
        return _molsetc.HaMolView_ColorAtomsByProp(self, str_prop, p_col_map)

    def ColourBackNone(self) -> "void":
        return _molsetc.HaMolView_ColourBackNone(self)

    def ColourBondNone(self) -> "void":
        return _molsetc.HaMolView_ColourBondNone(self)

    def ColourHBondType(self) -> "void":
        return _molsetc.HaMolView_ColourHBondType(self)

    def ColourHBondNone(self) -> "void":
        return _molsetc.HaMolView_ColourHBondNone(self)

    def ColourSSBondNone(self) -> "void":
        return _molsetc.HaMolView_ColourSSBondNone(self)

    def ColourMonitNone(self) -> "void":
        return _molsetc.HaMolView_ColourMonitNone(self)

    def ColourBackAttrib(self, r: "int", g: "int", b: "int") -> "void":
        return _molsetc.HaMolView_ColourBackAttrib(self, r, g, b)

    def ColourBondAttrib(self, r: "int", g: "int", b: "int") -> "void":
        return _molsetc.HaMolView_ColourBondAttrib(self, r, g, b)

    def ColourHBondAttrib(self, r: "int", g: "int", b: "int") -> "void":
        return _molsetc.HaMolView_ColourHBondAttrib(self, r, g, b)

    def ColourSSBondAttrib(self, r: "int", g: "int", b: "int") -> "void":
        return _molsetc.HaMolView_ColourSSBondAttrib(self, r, g, b)

    def ColourMonitAttrib(self, r: "int", g: "int", b: "int") -> "void":
        return _molsetc.HaMolView_ColourMonitAttrib(self, r, g, b)

    def ColourDotsAttrib(self, r: "int", g: "int", b: "int") -> "void":
        return _molsetc.HaMolView_ColourDotsAttrib(self, r, g, b)

    def ColourDotsPotential(self) -> "void":
        return _molsetc.HaMolView_ColourDotsPotential(self)

    def ColourRibbonNone(self, flag: "int") -> "void":
        return _molsetc.HaMolView_ColourRibbonNone(self, flag)

    def ColourRibbonAttrib(self, flag: "int", r: "int", g: "int", b: "int") -> "void":
        return _molsetc.HaMolView_ColourRibbonAttrib(self, flag, r, g, b)

    def ScaleColourAttrib(self, attr: "int") -> "void":
        return _molsetc.HaMolView_ScaleColourAttrib(self, attr)

    def MonoColourAttrib(self, r: "int", g: "int", b: "int") -> "void":
        return _molsetc.HaMolView_MonoColourAttrib(self, r, g, b)

    def CPKColourAttrib(self) -> "void":
        return _molsetc.HaMolView_CPKColourAttrib(self)

    @staticmethod
    def ColorAtomCPK(aptr: "HaAtom") -> "int":
        return _molsetc.HaMolView_ColorAtomCPK(aptr)

    def GroupsColourAttrib(self) -> "void":
        return _molsetc.HaMolView_GroupsColourAttrib(self)

    def ShapelyColourAttrib(self) -> "void":
        return _molsetc.HaMolView_ShapelyColourAttrib(self)

    def AminoColourAttrib(self) -> "void":
        return _molsetc.HaMolView_AminoColourAttrib(self)

    def StructColourAttrib(self) -> "void":
        return _molsetc.HaMolView_StructColourAttrib(self)

    def RigidClusterColourAttrib(self) -> "void":
        return _molsetc.HaMolView_RigidClusterColourAttrib(self)

    @staticmethod
    def IsCPKColour(aptr: "HaAtom") -> "int":
        return _molsetc.HaMolView_IsCPKColour(aptr)
    cpk_col_map = property(_molsetc.HaMolView_cpk_col_map_get, _molsetc.HaMolView_cpk_col_map_set)

    def FormatLabel(self, chain: "HaChain", group: "HaResidue", aptr: "HaAtom", label: "char const *", ptr: "char *") -> "void":
        return _molsetc.HaMolView_FormatLabel(self, chain, group, aptr, label, ptr)

    def DeleteLabels(self) -> "int":
        return _molsetc.HaMolView_DeleteLabels(self)

    def DefineLabels(self, label: "char const *") -> "void":
        return _molsetc.HaMolView_DefineLabels(self, label)

    def DefaultLabels(self, enable: "int") -> "void":
        return _molsetc.HaMolView_DefaultLabels(self, enable)

    def DisplayLabels(self) -> "void":
        return _molsetc.HaMolView_DisplayLabels(self)
    LabelOptFlag = property(_molsetc.HaMolView_LabelOptFlag_get, _molsetc.HaMolView_LabelOptFlag_set)
    MonitList = property(_molsetc.HaMolView_MonitList_get, _molsetc.HaMolView_MonitList_set)

    def DeleteMonitors(self) -> "void":
        return _molsetc.HaMolView_DeleteMonitors(self)

    def AddMonitors(self, src: "HaAtom", dst: "HaAtom") -> "void":
        return _molsetc.HaMolView_AddMonitors(self, src, dst)

    def CreateMonitor(self, src: "int", dst: "int") -> "void":
        return _molsetc.HaMolView_CreateMonitor(self, src, dst)

    def DisplayMonitors(self) -> "void":
        return _molsetc.HaMolView_DisplayMonitors(self)

    def DisplayETBestPath(self) -> "void":
        return _molsetc.HaMolView_DisplayETBestPath(self)

    def DisplayContourSurf(self) -> "void":
        return _molsetc.HaMolView_DisplayContourSurf(self)

    def AnimateEigenVector(self, evec: "HaVec_double", at_coll: "AtomContainer") -> "int":
        return _molsetc.HaMolView_AnimateEigenVector(self, evec, at_coll)

    def AnimateEigenVectorInternal(self, evec: "HaVec_double", at_coll: "AtomContainer") -> "int":
        return _molsetc.HaMolView_AnimateEigenVectorInternal(self, evec, at_coll)

    def StopAnimation(self) -> "void":
        return _molsetc.HaMolView_StopAnimation(self)
    anim_thread_running = property(_molsetc.HaMolView_anim_thread_running_get, _molsetc.HaMolView_anim_thread_running_set)
    to_stop_animation = property(_molsetc.HaMolView_to_stop_animation_get, _molsetc.HaMolView_to_stop_animation_set)

    def RestrictSelected(self) -> "void":
        return _molsetc.HaMolView_RestrictSelected(self)

    def TestDot(self, x: "double", y: "double", z: "double", solvent_access: "bool") -> "int":
        return _molsetc.HaMolView_TestDot(self, x, y, z, solvent_access)

    def InitElemDots(self) -> "void":
        return _molsetc.HaMolView_InitElemDots(self)

    def AddElemDots(self, elem: "int", density: "int") -> "void":
        return _molsetc.HaMolView_AddElemDots(self, elem, density)

    def FreeElemDots(self) -> "void":
        return _molsetc.HaMolView_FreeElemDots(self)

    def DeleteDotSurfaces(self) -> "void":
        return _molsetc.HaMolView_DeleteDotSurfaces(self)

    def CalculateDotSurface(self, density: "int") -> "void":
        return _molsetc.HaMolView_CalculateDotSurface(self, density)

    def DisplayDotSurfaces(self) -> "void":
        return _molsetc.HaMolView_DisplayDotSurfaces(self)

    def DisplayObj3D(self) -> "void":
        return _molsetc.HaMolView_DisplayObj3D(self)

    def DisplayRibbon(self, arg2: "HaChain") -> "void":
        return _molsetc.HaMolView_DisplayRibbon(self, arg2)

    def WriteImageFile(self, name: "char const *", type: "int") -> "void":
        return _molsetc.HaMolView_WriteImageFile(self, name, type)

    def WritePPMFile(self, name: "char const *", raw: "int") -> "int":
        return _molsetc.HaMolView_WritePPMFile(self, name, raw)

    def WriteGIFFile(self, name: "char const *") -> "int":
        return _molsetc.HaMolView_WriteGIFFile(self, name)

    def WriteBMPFile(self, name: "char const *") -> "int":
        return _molsetc.HaMolView_WriteBMPFile(self, name)

    def WritePNGFile(self, name: "char const *") -> "int":
        return _molsetc.HaMolView_WritePNGFile(self, name)

    def WriteJPEGFile(self, name: "char const *") -> "int":
        return _molsetc.HaMolView_WriteJPEGFile(self, name)

    def WriteTIFFFile(self, name: "char const *") -> "int":
        return _molsetc.HaMolView_WriteTIFFFile(self, name)

    def WritePCXFile(self, name: "char const *") -> "int":
        return _molsetc.HaMolView_WritePCXFile(self, name)

    def WritePICTFile(self, name: "char const *") -> "int":
        return _molsetc.HaMolView_WritePICTFile(self, name)

    def WriteIRISFile(self, name: "char const *") -> "int":
        return _molsetc.HaMolView_WriteIRISFile(self, name)

    def WriteVectPSFile(self, name: "char const *") -> "int":
        return _molsetc.HaMolView_WriteVectPSFile(self, name)

    def WritePOVRayFile(self, name: "char const *") -> "int":
        return _molsetc.HaMolView_WritePOVRayFile(self, name)

    def WriteVRMLFile(self, name: "char const *") -> "int":
        return _molsetc.HaMolView_WriteVRMLFile(self, name)

    def WriteScriptFile(self, name: "char const *") -> "int":
        return _molsetc.HaMolView_WriteScriptFile(self, name)

    def WriteMolScriptFile(self, name: "char const *") -> "int":
        return _molsetc.HaMolView_WriteMolScriptFile(self, name)

    def WriteVRMLDots(self) -> "void":
        return _molsetc.HaMolView_WriteVRMLDots(self)

    def WriteVRMLColour(self, indent: "int", shade: "int") -> "void":
        return _molsetc.HaMolView_WriteVRMLColour(self, indent, shade)

    def WriteVRMLTriple(self, x: "double", y: "double", z: "double") -> "void":
        return _molsetc.HaMolView_WriteVRMLTriple(self, x, y, z)

    def WriteVRMLAtoms(self) -> "void":
        return _molsetc.HaMolView_WriteVRMLAtoms(self)

    def WriteVRMLLine(self, src: "int", dst: "int", shade: "int", flag: "int *") -> "void":
        return _molsetc.HaMolView_WriteVRMLLine(self, src, dst, shade, flag)

    def WriteVRMLWireframe(self) -> "void":
        return _molsetc.HaMolView_WriteVRMLWireframe(self)

    def SetWXImage(self, wx_image: "wxImage &") -> "int":
        return _molsetc.HaMolView_SetWXImage(self, wx_image)
    pCanv = property(_molsetc.HaMolView_pCanv_get, _molsetc.HaMolView_pCanv_set)

    def DisplaySpaceFill(self) -> "void":
        return _molsetc.HaMolView_DisplaySpaceFill(self)

    def DisplayWireframe(self) -> "void":
        return _molsetc.HaMolView_DisplayWireframe(self)

    def DisplayCylinder(self, x1: "int", y1: "int", z1: "int", x2: "int", y2: "int", z2: "int", c1: "int", c2: "int", rad: "int") -> "void":
        return _molsetc.HaMolView_DisplayCylinder(self, x1, y1, z1, x2, y2, z2, c1, c2, rad)

    def DisplayDoubleBonds(self) -> "void":
        return _molsetc.HaMolView_DisplayDoubleBonds(self)

    def DisplayBackbone(self) -> "void":
        return _molsetc.HaMolView_DisplayBackbone(self)

    def DisplayHBonds(self) -> "void":
        return _molsetc.HaMolView_DisplayHBonds(self)

    def DisplaySSBonds(self) -> "void":
        return _molsetc.HaMolView_DisplaySSBonds(self)

    def DisplayBoxes(self) -> "void":
        return _molsetc.HaMolView_DisplayBoxes(self)

    def DisplayOnScreenInfo(self) -> "void":
        return _molsetc.HaMolView_DisplayOnScreenInfo(self)

    def DisplayPickedAtoms(self) -> "void":
        return _molsetc.HaMolView_DisplayPickedAtoms(self)

    def RenderFrame(self) -> "void":
        return _molsetc.HaMolView_RenderFrame(self)

    def TestAtomProximity(self, ptr: "HaAtom", xpos: "int", ypos: "int") -> "void":
        return _molsetc.HaMolView_TestAtomProximity(self, ptr, xpos, ypos)

    def IdentifyAtom(self, xpos: "int", ypos: "int") -> "void":
        return _molsetc.HaMolView_IdentifyAtom(self, xpos, ypos)

    def InitializeTables(self) -> "void":
        return _molsetc.HaMolView_InitializeTables(self)

    def InitializeRenderer(self) -> "void":
        return _molsetc.HaMolView_InitializeRenderer(self)

# Register HaMolView in _molsetc:
_molsetc.HaMolView_swigregister(HaMolView)
ResidueAttr = cvar.ResidueAttr
ChainAttr = cvar.ChainAttr
TempAttr = cvar.TempAttr
ChargeAttr = cvar.ChargeAttr
RibColInside = cvar.RibColInside
RibColOutside = cvar.RibColOutside
RibColBoth = cvar.RibColBoth
DrawKnotFlag = cvar.DrawKnotFlag
WideKnotFlag = cvar.WideKnotFlag

def HaMolView_SetMouseMode(arg1: "int") -> "void":
    return _molsetc.HaMolView_SetMouseMode(arg1)

def HaMolView_RefreshColors() -> "void":
    return _molsetc.HaMolView_RefreshColors()

def HaMolView_ColorAtomCPK(aptr: "HaAtom") -> "int":
    return _molsetc.HaMolView_ColorAtomCPK(aptr)

def HaMolView_IsCPKColour(aptr: "HaAtom") -> "int":
    return _molsetc.HaMolView_IsCPKColour(aptr)


def isqrt(arg1: "unsigned int") -> "unsigned int":
    return _molsetc.isqrt(arg1)
MAXVARS = _molsetc.MAXVARS
MAXTIMES = _molsetc.MAXTIMES
class HaField3D(HaObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fvec: "float *"=None, new_Nx: "int"=0, new_Ny: "int"=0, new_Nz: "int"=0, deligate_control: "bool"=False):
        _molsetc.HaField3D_swiginit(self, _molsetc.new_HaField3D(fvec, new_Nx, new_Ny, new_Nz, deligate_control))
    __swig_destroy__ = _molsetc.delete_HaField3D

    def clear(self) -> "void":
        return _molsetc.HaField3D_clear(self)

    def FillZeros(self) -> "void":
        return _molsetc.HaField3D_FillZeros(self)

    def FillValues(self, val: "float") -> "void":
        return _molsetc.HaField3D_FillValues(self, val)

    def MultiplyByValues(self, val: "float") -> "void":
        return _molsetc.HaField3D_MultiplyByValues(self, val)

    def SaveGZ(self, fname: "char const *", Columns: "int"=2) -> "int":
        return _molsetc.HaField3D_SaveGZ(self, fname, Columns)

    def LoadGZ(self, fname: "char const *") -> "int":
        return _molsetc.HaField3D_LoadGZ(self, fname)

    def SaveToFile(self, fname: "char const *", binary: "int"=1) -> "int":
        return _molsetc.HaField3D_SaveToFile(self, fname, binary)

    def RestoreFromFile(self, fname: "char const *", binary: "int"=1) -> "int":
        return _molsetc.HaField3D_RestoreFromFile(self, fname, binary)

    def copy_from(self, ref_field: "HaField3D") -> "void":
        return _molsetc.HaField3D_copy_from(self, ref_field)

    def SetDimensions(self, new_Nx: "int", new_Ny: "int", new_Nz: "int") -> "bool":
        return _molsetc.HaField3D_SetDimensions(self, new_Nx, new_Ny, new_Nz)

    def GetNx(self) -> "int":
        return _molsetc.HaField3D_GetNx(self)

    def GetNy(self) -> "int":
        return _molsetc.HaField3D_GetNy(self)

    def GetNz(self) -> "int":
        return _molsetc.HaField3D_GetNz(self)

    def GetXmin(self) -> "double":
        return _molsetc.HaField3D_GetXmin(self)

    def GetYmin(self) -> "double":
        return _molsetc.HaField3D_GetYmin(self)

    def GetZmin(self) -> "double":
        return _molsetc.HaField3D_GetZmin(self)

    def GetXmax(self) -> "double":
        return _molsetc.HaField3D_GetXmax(self)

    def GetYmax(self) -> "double":
        return _molsetc.HaField3D_GetYmax(self)

    def GetZmax(self) -> "double":
        return _molsetc.HaField3D_GetZmax(self)

    def GetXstep(self) -> "double":
        return _molsetc.HaField3D_GetXstep(self)

    def GetYstep(self) -> "double":
        return _molsetc.HaField3D_GetYstep(self)

    def GetZstep(self) -> "double":
        return _molsetc.HaField3D_GetZstep(self)

    def GetMinMaxValue(self, ValueMin: "float *", ValueMax: "float *") -> "void":
        return _molsetc.HaField3D_GetMinMaxValue(self, ValueMin, ValueMax)

    def SetGridCornersCoord(self, xmin_new: "double", ymin_new: "double", zmin_new: "double", xmax_new: "double", ymax_new: "double", zmax_new: "double") -> "bool":
        return _molsetc.HaField3D_SetGridCornersCoord(self, xmin_new, ymin_new, zmin_new, xmax_new, ymax_new, zmax_new)

    def ShiftGridCorners(self, xsht: "double", ysht: "double", zsht: "double") -> "bool":
        return _molsetc.HaField3D_ShiftGridCorners(self, xsht, ysht, zsht)

    def SetCenterAsZero(self, scale: "float") -> "bool":
        return _molsetc.HaField3D_SetCenterAsZero(self, scale)

    def GetLinIdx(self, ix: "int", iy: "int", iz: "int") -> "int":
        return _molsetc.HaField3D_GetLinIdx(self, ix, iy, iz)

    def GetFieldPtr(self) -> "float *":
        return _molsetc.HaField3D_GetFieldPtr(self)

    def GetXYZ(self, x: "float &", y: "float &", z: "float &", ix: "int const", iy: "int const", iz: "int const") -> "bool":
        return _molsetc.HaField3D_GetXYZ(self, x, y, z, ix, iy, iz)

    def GetGridPtCrd(self, ix: "int", iy: "int", iz: "int") -> "Vec3D":
        return _molsetc.HaField3D_GetGridPtCrd(self, ix, iy, iz)

    def GetValPtr(self, ix: "int", iy: "int", iz: "int") -> "float *":
        return _molsetc.HaField3D_GetValPtr(self, ix, iy, iz)

    def GetValue(self, ix: "int", iy: "int", iz: "int") -> "float":
        return _molsetc.HaField3D_GetValue(self, ix, iy, iz)

    def SetValue(self, ix: "int", iy: "int", iz: "int", val: "float") -> "void":
        return _molsetc.HaField3D_SetValue(self, ix, iy, iz, val)

    def GetClosestGridPoint(self, x: "double", y: "double", z: "double", ix: "int &", iy: "int &", iz: "int &") -> "int":
        return _molsetc.HaField3D_GetClosestGridPoint(self, x, y, z, ix, iy, iz)

    def CalcLinInter(self, V0: "double", V1: "double", x: "double") -> "double":
        return _molsetc.HaField3D_CalcLinInter(self, V0, V1, x)

    def GetInterpolValAtPoint(self, x: "double", y: "double", z: "double") -> "double":
        return _molsetc.HaField3D_GetInterpolValAtPoint(self, x, y, z)

    def grid_to_xyz_float(self, numverts: "int const", vr: "float const *", vc: "float const *", vl: "float const *", xyz_coord: "float *") -> "bool":
        return _molsetc.HaField3D_grid_to_xyz_float(self, numverts, vr, vc, vl, xyz_coord)

    def CompareHaField3D(self, CompareWith: "HaField3D", Prec: "float") -> "float":
        return _molsetc.HaField3D_CompareHaField3D(self, CompareWith, Prec)

# Register HaField3D in _molsetc:
_molsetc.HaField3D_swigregister(HaField3D)
PickNone = cvar.PickNone
PickIdent = cvar.PickIdent
PickDist = cvar.PickDist
PickAngle = cvar.PickAngle
PickTorsn = cvar.PickTorsn
PickLabel = cvar.PickLabel
PickMonit = cvar.PickMonit
PickCentr = cvar.PickCentr
PickMolConnect = cvar.PickMolConnect
DefaultWide = cvar.DefaultWide
DefaultHigh = cvar.DefaultHigh
RFRotateX = cvar.RFRotateX
RFRotateY = cvar.RFRotateY
RFRotateZ = cvar.RFRotateZ
RFZoom = cvar.RFZoom
RFTransX = cvar.RFTransX
RFTransY = cvar.RFTransY
RFTransZ = cvar.RFTransZ
RFSlab = cvar.RFSlab
RFReSize = cvar.RFReSize
RFColour = cvar.RFColour
RFRefresh = cvar.RFRefresh
RFPoint1 = cvar.RFPoint1
RFPoint2 = cvar.RFPoint2
RFTrans = cvar.RFTrans
RFRotate = cvar.RFRotate
RFApply = cvar.RFApply
RFDials = cvar.RFDials
RFMagnify = cvar.RFMagnify
RFInitial = cvar.RFInitial
RFPoint = cvar.RFPoint
MMRasMol = cvar.MMRasMol
MMInsight = cvar.MMInsight
MMQuanta = cvar.MMQuanta
ViewLeft = cvar.ViewLeft
ViewRight = cvar.ViewRight
MAX_ISO_VERTS = cvar.MAX_ISO_VERTS
VERTEX_SCALE = cvar.VERTEX_SCALE

class HaNonLocField3D_2(HaField3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaNonLocField3D_2_swiginit(self, _molsetc.new_HaNonLocField3D_2())
    __swig_destroy__ = _molsetc.delete_HaNonLocField3D_2

    def SetDepth(self, new_depth: "int") -> "bool":
        return _molsetc.HaNonLocField3D_2_SetDepth(self, new_depth)

    def GetDepth(self) -> "int":
        return _molsetc.HaNonLocField3D_2_GetDepth(self)

    def clear(self) -> "void":
        return _molsetc.HaNonLocField3D_2_clear(self)

    def SetDimensions(self, new_Nx: "int", new_Ny: "int", new_Nz: "int") -> "bool":
        return _molsetc.HaNonLocField3D_2_SetDimensions(self, new_Nx, new_Ny, new_Nz)

    def GetValue_nloc(self, ix: "int", iy: "int", iz: "int", ir_shift: "int", ic_shift: "int", il_shift: "int") -> "float":
        return _molsetc.HaNonLocField3D_2_GetValue_nloc(self, ix, iy, iz, ir_shift, ic_shift, il_shift)

# Register HaNonLocField3D_2 in _molsetc:
_molsetc.HaNonLocField3D_2_swigregister(HaNonLocField3D_2)

class ValAtPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.ValAtPoint_swiginit(self, _molsetc.new_ValAtPoint(*args))
    __swig_destroy__ = _molsetc.delete_ValAtPoint
    ix = property(_molsetc.ValAtPoint_ix_get, _molsetc.ValAtPoint_ix_set)
    iy = property(_molsetc.ValAtPoint_iy_get, _molsetc.ValAtPoint_iy_set)
    iz = property(_molsetc.ValAtPoint_iz_get, _molsetc.ValAtPoint_iz_set)
    val = property(_molsetc.ValAtPoint_val_get, _molsetc.ValAtPoint_val_set)

# Register ValAtPoint in _molsetc:
_molsetc.ValAtPoint_swigregister(ValAtPoint)

class HaNonLocField3D(HaField3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaNonLocField3D_swiginit(self, _molsetc.new_HaNonLocField3D())
    __swig_destroy__ = _molsetc.delete_HaNonLocField3D
    fvals = property(_molsetc.HaNonLocField3D_fvals_get, _molsetc.HaNonLocField3D_fvals_set)

    def SaveField(self, fname: "std::string const &") -> "int":
        return _molsetc.HaNonLocField3D_SaveField(self, fname)

# Register HaNonLocField3D in _molsetc:
_molsetc.HaNonLocField3D_swigregister(HaNonLocField3D)

class HaSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaSurface_swiginit(self, _molsetc.new_HaSurface())
    __swig_destroy__ = _molsetc.delete_HaSurface

    def clear(self) -> "void":
        return _molsetc.HaSurface_clear(self)

    def GetSurfVolume(self) -> "double":
        return _molsetc.HaSurface_GetSurfVolume(self)
    valid = property(_molsetc.HaSurface_valid_get, _molsetc.HaSurface_valid_set)
    isolevel = property(_molsetc.HaSurface_isolevel_get, _molsetc.HaSurface_isolevel_set)

    def calc_isosurf(self, field: "HaField3D", iso_level: "float") -> "bool":
        return _molsetc.HaSurface_calc_isosurf(self, field, iso_level)

    @staticmethod
    def main_march(ptGRID: "float *", NC: "int", NR: "int", NL: "int", LOWLEV: "int", GLEV: "float", ARX: "float", ARY: "float", ARZ: "float", NVERTS: "int", VX: "float *", VY: "float *", VZ: "float *", NX: "float *", NY: "float *", NZ: "float *", NPTS: "int", VPTS: "int *", IVERT: "int *", IPTS: "int *", IPOLY: "int *", ITRI: "int *") -> "void":
        return _molsetc.HaSurface_main_march(ptGRID, NC, NR, NL, LOWLEV, GLEV, ARX, ARY, ARZ, NVERTS, VX, VY, VZ, NX, NY, NZ, NPTS, VPTS, IVERT, IPTS, IPOLY, ITRI)
    VDW_SURF = _molsetc.HaSurface_VDW_SURF
    SACCESS_SURF = _molsetc.HaSurface_SACCESS_SURF
    SEXCL_SURF = _molsetc.HaSurface_SEXCL_SURF

    @staticmethod
    def CalcMolSurf(sptr: "HaSurface", surf_type: "int", solv_rad: "float", at_coll: "AtomContainer") -> "int":
        return _molsetc.HaSurface_CalcMolSurf(sptr, surf_type, solv_rad, at_coll)
    gepol_prm = property(_molsetc.HaSurface_gepol_prm_get, _molsetc.HaSurface_gepol_prm_set)
    verts = property(_molsetc.HaSurface_verts_get, _molsetc.HaSurface_verts_set)
    norms = property(_molsetc.HaSurface_norms_get, _molsetc.HaSurface_norms_set)
    tr_indx = property(_molsetc.HaSurface_tr_indx_get, _molsetc.HaSurface_tr_indx_set)

    def GetNumTr(self) -> "int":
        return _molsetc.HaSurface_GetNumTr(self)

    def GetNumVerts(self) -> "int":
        return _molsetc.HaSurface_GetNumVerts(self)

    def SetNumVerts(self, new_num_verts: "int const") -> "int":
        return _molsetc.HaSurface_SetNumVerts(self, new_num_verts)
    sph = property(_molsetc.HaSurface_sph_get, _molsetc.HaSurface_sph_set)
    srad = property(_molsetc.HaSurface_srad_get, _molsetc.HaSurface_srad_set)
    flag_sph = property(_molsetc.HaSurface_flag_sph_get, _molsetc.HaSurface_flag_sph_set)
    tess = property(_molsetc.HaSurface_tess_get, _molsetc.HaSurface_tess_set)
    tsurf = property(_molsetc.HaSurface_tsurf_get, _molsetc.HaSurface_tsurf_set)
    itsph = property(_molsetc.HaSurface_itsph_get, _molsetc.HaSurface_itsph_set)
    itsph_r = property(_molsetc.HaSurface_itsph_r_get, _molsetc.HaSurface_itsph_r_set)

    def Print_info(self, sout: "ostream", level: "int const") -> "bool":
        return _molsetc.HaSurface_Print_info(self, sout, level)
    surface_alpha = property(_molsetc.HaSurface_surface_alpha_get, _molsetc.HaSurface_surface_alpha_set)
    volume_alpha = property(_molsetc.HaSurface_volume_alpha_get, _molsetc.HaSurface_volume_alpha_set)
    d_volume_alpha = property(_molsetc.HaSurface_d_volume_alpha_get, _molsetc.HaSurface_d_volume_alpha_set)
    d_surface_alpha = property(_molsetc.HaSurface_d_surface_alpha_get, _molsetc.HaSurface_d_surface_alpha_set)
    surface_alpha_total = property(_molsetc.HaSurface_surface_alpha_total_get, _molsetc.HaSurface_surface_alpha_total_set)

    def CalcMolSurfAlpha(self, calc_d: "int", solv_rad: "double", cnt_crd_alpha: "HaMat_double", cnt_rad_alpha: "HaVec_double") -> "int":
        return _molsetc.HaSurface_CalcMolSurfAlpha(self, calc_d, solv_rad, cnt_crd_alpha, cnt_rad_alpha)

# Register HaSurface in _molsetc:
_molsetc.HaSurface_swigregister(HaSurface)

def HaSurface_main_march(ptGRID: "float *", NC: "int", NR: "int", NL: "int", LOWLEV: "int", GLEV: "float", ARX: "float", ARY: "float", ARZ: "float", NVERTS: "int", VX: "float *", VY: "float *", VZ: "float *", NX: "float *", NY: "float *", NZ: "float *", NPTS: "int", VPTS: "int *", IVERT: "int *", IPTS: "int *", IPOLY: "int *", ITRI: "int *") -> "void":
    return _molsetc.HaSurface_main_march(ptGRID, NC, NR, NL, LOWLEV, GLEV, ARX, ARY, ARZ, NVERTS, VX, VY, VZ, NX, NY, NZ, NPTS, VPTS, IVERT, IPTS, IPOLY, ITRI)

def HaSurface_CalcMolSurf(sptr: "HaSurface", surf_type: "int", solv_rad: "float", at_coll: "AtomContainer") -> "int":
    return _molsetc.HaSurface_CalcMolSurf(sptr, surf_type, solv_rad, at_coll)


def gsurf_(ksurf: "int *", rmin: "freal *", ofac: "freal *", rd: "freal *", ndiv: "int *", ass1: "logical *", natom: "int *", ghost: "logical *", np: "int *", surf_volume: "double *") -> "void":
    return _molsetc.gsurf_(ksurf, rmin, ofac, rd, ndiv, ass1, natom, ghost, np, surf_volume)
class csfe_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    xe = property(_molsetc.csfe_type_xe_get, _molsetc.csfe_type_xe_set)
    ye = property(_molsetc.csfe_type_ye_get, _molsetc.csfe_type_ye_set)
    ze = property(_molsetc.csfe_type_ze_get, _molsetc.csfe_type_ze_set)
    re = property(_molsetc.csfe_type_re_get, _molsetc.csfe_type_re_set)
    iuse = property(_molsetc.csfe_type_iuse_get, _molsetc.csfe_type_iuse_set)

    def __init__(self):
        _molsetc.csfe_type_swiginit(self, _molsetc.new_csfe_type())
    __swig_destroy__ = _molsetc.delete_csfe_type

# Register csfe_type in _molsetc:
_molsetc.csfe_type_swigregister(csfe_type)
MC_SIZE = cvar.MC_SIZE
MV_SIZE = cvar.MV_SIZE

class penta_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    jvt1 = property(_molsetc.penta_type_jvt1_get, _molsetc.penta_type_jvt1_set)
    jvt2 = property(_molsetc.penta_type_jvt2_get, _molsetc.penta_type_jvt2_set)

    def __init__(self):
        _molsetc.penta_type_swiginit(self, _molsetc.new_penta_type())
    __swig_destroy__ = _molsetc.delete_penta_type

# Register penta_type in _molsetc:
_molsetc.penta_type_swigregister(penta_type)

class pun_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ito = property(_molsetc.pun_type_ito_get, _molsetc.pun_type_ito_set)
    iso = property(_molsetc.pun_type_iso_get, _molsetc.pun_type_iso_set)
    isa = property(_molsetc.pun_type_isa_get, _molsetc.pun_type_isa_set)
    xp = property(_molsetc.pun_type_xp_get, _molsetc.pun_type_xp_set)
    yp = property(_molsetc.pun_type_yp_get, _molsetc.pun_type_yp_set)
    zp = property(_molsetc.pun_type_zp_get, _molsetc.pun_type_zp_set)
    ap = property(_molsetc.pun_type_ap_get, _molsetc.pun_type_ap_set)

    def __init__(self):
        _molsetc.pun_type_swiginit(self, _molsetc.new_pun_type())
    __swig_destroy__ = _molsetc.delete_pun_type

# Register pun_type in _molsetc:
_molsetc.pun_type_swigregister(pun_type)

class poli_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cv = property(_molsetc.poli_type_cv_get, _molsetc.poli_type_cv_set)
    xc1 = property(_molsetc.poli_type_xc1_get, _molsetc.poli_type_xc1_set)
    yc1 = property(_molsetc.poli_type_yc1_get, _molsetc.poli_type_yc1_set)
    zc1 = property(_molsetc.poli_type_zc1_get, _molsetc.poli_type_zc1_set)

    def __init__(self):
        _molsetc.poli_type_swiginit(self, _molsetc.new_poli_type())
    __swig_destroy__ = _molsetc.delete_poli_type

# Register poli_type in _molsetc:
_molsetc.poli_type_swigregister(poli_type)

class HaDisplayedSurface(HaSurface, Object3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaDisplayedSurface_swiginit(self, _molsetc.new_HaDisplayedSurface())
    __swig_destroy__ = _molsetc.delete_HaDisplayedSurface

    def clear(self) -> "void":
        return _molsetc.HaDisplayedSurface_clear(self)

    def RotateObj(self, rot_mat: "HaMat_double", cnt: "Vec3D") -> "int":
        return _molsetc.HaDisplayedSurface_RotateObj(self, rot_mat, cnt)

    def Translate(self, tr_vec: "Vec3D") -> "int":
        return _molsetc.HaDisplayedSurface_Translate(self, tr_vec)

    def SetTransparency(self, transp_new: "double") -> "int":
        return _molsetc.HaDisplayedSurface_SetTransparency(self, transp_new)

    def ColourUniform(self, r: "int", g: "int", b: "int") -> "bool":
        return _molsetc.HaDisplayedSurface_ColourUniform(self, r, g, b)

    def SetNumVerts(self, new_num_verts: "int const") -> "int":
        return _molsetc.HaDisplayedSurface_SetNumVerts(self, new_num_verts)
    colors = property(_molsetc.HaDisplayedSurface_colors_get, _molsetc.HaDisplayedSurface_colors_set)

# Register HaDisplayedSurface in _molsetc:
_molsetc.HaDisplayedSurface_swigregister(HaDisplayedSurface)

class HaDot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.HaDot_swiginit(self, _molsetc.new_HaDot(*args))
    __swig_destroy__ = _molsetc.delete_HaDot
    col = property(_molsetc.HaDot_col_get, _molsetc.HaDot_col_set)

    def GetX(self) -> "double":
        return _molsetc.HaDot_GetX(self)

    def GetY(self) -> "double":
        return _molsetc.HaDot_GetY(self)

    def GetZ(self) -> "double":
        return _molsetc.HaDot_GetZ(self)

    def GetX_Ang(self) -> "double":
        return _molsetc.HaDot_GetX_Ang(self)

    def GetY_Ang(self) -> "double":
        return _molsetc.HaDot_GetY_Ang(self)

    def GetZ_Ang(self) -> "double":
        return _molsetc.HaDot_GetZ_Ang(self)

    def SetX(self, new_x: "double const") -> "void":
        return _molsetc.HaDot_SetX(self, new_x)

    def SetY(self, new_y: "double const") -> "void":
        return _molsetc.HaDot_SetY(self, new_y)

    def SetZ(self, new_z: "double const") -> "void":
        return _molsetc.HaDot_SetZ(self, new_z)

    def SetX_Ang(self, new_x: "double const") -> "void":
        return _molsetc.HaDot_SetX_Ang(self, new_x)

    def SetY_Ang(self, new_y: "double const") -> "void":
        return _molsetc.HaDot_SetY_Ang(self, new_y)

    def SetZ_Ang(self, new_z: "double const") -> "void":
        return _molsetc.HaDot_SetZ_Ang(self, new_z)

# Register HaDot in _molsetc:
_molsetc.HaDot_swigregister(HaDot)

class DotStruct(Object3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.DotStruct_swiginit(self, _molsetc.new_DotStruct())
    __swig_destroy__ = _molsetc.delete_DotStruct
    dots = property(_molsetc.DotStruct_dots_get, _molsetc.DotStruct_dots_set)

    def GetCount(self) -> "int":
        return _molsetc.DotStruct_GetCount(self)

    def AddDot(self, x: "double", y: "double", z: "double", col: "int") -> "void":
        return _molsetc.DotStruct_AddDot(self, x, y, z, col)

    def GetObjName(self) -> "char const *":
        return _molsetc.DotStruct_GetObjName(self)

    def RotateObj(self, rot_mat: "HaMat_double", cnt: "Vec3D") -> "int":
        return _molsetc.DotStruct_RotateObj(self, rot_mat, cnt)

    def Translate(self, tr_vec: "Vec3D") -> "int":
        return _molsetc.DotStruct_Translate(self, tr_vec)

# Register DotStruct in _molsetc:
_molsetc.DotStruct_swigregister(DotStruct)

class HaBasisSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNBfunc(self) -> "int":
        return _molsetc.HaBasisSet_GetNBfunc(self)

    def GetClassName(self) -> "std::string":
        return _molsetc.HaBasisSet_GetClassName(self)

    def GetLabel(self, idx: "int") -> "std::string":
        return _molsetc.HaBasisSet_GetLabel(self, idx)

    def GetHostPt(self, *args) -> "Vec3D const *":
        return _molsetc.HaBasisSet_GetHostPt(self, *args)

    def TransferBetweenAtoms(self, pt_corr_map: "PtrPtrMap") -> "int":
        return _molsetc.HaBasisSet_TransferBetweenAtoms(self, pt_corr_map)

    @staticmethod
    def CalcOvlpMat(pbas1: "HaBasisSet", pbas2: "HaBasisSet", ovlp_mat: "HaMat_double") -> "int":
        return _molsetc.HaBasisSet_CalcOvlpMat(pbas1, pbas2, ovlp_mat)

    @staticmethod
    def GetID(pbas: "HaBasisSet") -> "std::string":
        return _molsetc.HaBasisSet_GetID(pbas)

    @staticmethod
    def RemoveCachedMatForBasis(pbas: "HaBasisSet") -> "int":
        return _molsetc.HaBasisSet_RemoveCachedMatForBasis(pbas)

    @staticmethod
    def ClearMatCache() -> "int":
        return _molsetc.HaBasisSet_ClearMatCache()

    @staticmethod
    def GetCachedOvlpMat(pbas1: "HaBasisSet", pbas2: "HaBasisSet") -> "HaMat_double *":
        return _molsetc.HaBasisSet_GetCachedOvlpMat(pbas1, pbas2)

    @staticmethod
    def SaveInCacheOverlapMap(pbas1: "HaBasisSet", pbas2: "HaBasisSet", smat: "HaMat_double") -> "int":
        return _molsetc.HaBasisSet_SaveInCacheOverlapMap(pbas1, pbas2, smat)
    __swig_destroy__ = _molsetc.delete_HaBasisSet

# Register HaBasisSet in _molsetc:
_molsetc.HaBasisSet_swigregister(HaBasisSet)

def HaBasisSet_CalcOvlpMat(pbas1: "HaBasisSet", pbas2: "HaBasisSet", ovlp_mat: "HaMat_double") -> "int":
    return _molsetc.HaBasisSet_CalcOvlpMat(pbas1, pbas2, ovlp_mat)

def HaBasisSet_GetID(pbas: "HaBasisSet") -> "std::string":
    return _molsetc.HaBasisSet_GetID(pbas)

def HaBasisSet_RemoveCachedMatForBasis(pbas: "HaBasisSet") -> "int":
    return _molsetc.HaBasisSet_RemoveCachedMatForBasis(pbas)

def HaBasisSet_ClearMatCache() -> "int":
    return _molsetc.HaBasisSet_ClearMatCache()

def HaBasisSet_GetCachedOvlpMat(pbas1: "HaBasisSet", pbas2: "HaBasisSet") -> "HaMat_double *":
    return _molsetc.HaBasisSet_GetCachedOvlpMat(pbas1, pbas2)

def HaBasisSet_SaveInCacheOverlapMap(pbas1: "HaBasisSet", pbas2: "HaBasisSet", smat: "HaMat_double") -> "int":
    return _molsetc.HaBasisSet_SaveInCacheOverlapMap(pbas1, pbas2, smat)

class ArrayOrb3D(HaBasisSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ExpandInBas(self, coef: "HaMat_double", bset: "HaBasisSet") -> "int":
        return _molsetc.ArrayOrb3D_ExpandInBas(self, coef, bset)

    def GetTransfMat(self, *args) -> "HaMat_double":
        return _molsetc.ArrayOrb3D_GetTransfMat(self, *args)

    def AddXml(self, *args) -> "TiXmlElement *":
        return _molsetc.ArrayOrb3D_AddXml(self, *args)

    def SaveXML(self, file_out: "FILE *", option: "int"=0) -> "int":
        return _molsetc.ArrayOrb3D_SaveXML(self, file_out, option)

    def LoadXmlFile(self, *args) -> "int":
        return _molsetc.ArrayOrb3D_LoadXmlFile(self, *args)

    def LoadXml(self, xml_element: "TiXmlElement", option: "int"=0) -> "int":
        return _molsetc.ArrayOrb3D_LoadXml(self, xml_element, option)

    @staticmethod
    def CreateObjectWithType(type: "char const *") -> "ArrayOrb3D *":
        return _molsetc.ArrayOrb3D_CreateObjectWithType(type)
    __swig_destroy__ = _molsetc.delete_ArrayOrb3D

# Register ArrayOrb3D in _molsetc:
_molsetc.ArrayOrb3D_swigregister(ArrayOrb3D)

def ArrayOrb3D_CreateObjectWithType(type: "char const *") -> "ArrayOrb3D *":
    return _molsetc.ArrayOrb3D_CreateObjectWithType(type)

class GauShell(ArrayOrb3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.GauShell_swiginit(self, _molsetc.new_GauShell(*args))
    __swig_destroy__ = _molsetc.delete_GauShell

    def GetL(self) -> "int":
        return _molsetc.GauShell_GetL(self)

    def GetShellSymbol(self) -> "char const *":
        return _molsetc.GauShell_GetShellSymbol(self)

    def GetShellFunSymbol(self, ifun: "int") -> "char const *":
        return _molsetc.GauShell_GetShellFunSymbol(self, ifun)

    def GetLabel(self, idx: "int") -> "std::string":
        return _molsetc.GauShell_GetLabel(self, idx)

    def GetHostPt(self, *args) -> "Vec3D const *":
        return _molsetc.GauShell_GetHostPt(self, *args)

    def GetClassName(self) -> "std::string":
        return _molsetc.GauShell_GetClassName(self)

    def GetNBfunc(self) -> "int":
        return _molsetc.GauShell_GetNBfunc(self)

    def GetTransfMat(self, trans_mat: "HaMat_double", rot_mat: "HaMat_double") -> "int":
        return _molsetc.GauShell_GetTransfMat(self, trans_mat, rot_mat)

    def TransferBetweenAtoms(self, pt_corr_map: "PtrPtrMap") -> "int":
        return _molsetc.GauShell_TransferBetweenAtoms(self, pt_corr_map)

    def AddXml(self, *args) -> "TiXmlElement *":
        return _molsetc.GauShell_AddXml(self, *args)

    def LoadXml(self, gau_shell_element: "TiXmlElement", option: "int"=0) -> "int":
        return _molsetc.GauShell_LoadXml(self, gau_shell_element, option)

    def GetNBfuncCart(self) -> "int":
        return _molsetc.GauShell_GetNBfuncCart(self)

    def EvalLinCombInPoint(self, x: "double", y: "double", z: "double", cf: "double const *") -> "double":
        return _molsetc.GauShell_EvalLinCombInPoint(self, x, y, z, cf)

    def GetExtent(self, i: "int", tol: "double") -> "double":
        return _molsetc.GauShell_GetExtent(self, i, tol)

    def GetNumGauss(self) -> "int":
        return _molsetc.GauShell_GetNumGauss(self)

    def SetNumGauss(self, NGauss: "int const") -> "bool":
        return _molsetc.GauShell_SetNumGauss(self, NGauss)

    def SetCoef(self, *args) -> "bool":
        return _molsetc.GauShell_SetCoef(self, *args)

    def GetExp(self, ig: "int") -> "double":
        return _molsetc.GauShell_GetExp(self, ig)

    def GetCoef(self, *args) -> "double":
        return _molsetc.GauShell_GetCoef(self, *args)

    def SaveGaussianInp(self, os: "ostream") -> "void":
        return _molsetc.GauShell_SaveGaussianInp(self, os)

    def __eq__(self, rhs: "GauShell") -> "bool":
        return _molsetc.GauShell___eq__(self, rhs)

    def __lt__(self, rhs: "GauShell") -> "bool":
        return _molsetc.GauShell___lt__(self, rhs)

    def Normalize(self) -> "int":
        return _molsetc.GauShell_Normalize(self)

# Register GauShell in _molsetc:
_molsetc.GauShell_swigregister(GauShell)

class GauAtomBasis(ArrayOrb3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.GauAtomBasis_swiginit(self, _molsetc.new_GauAtomBasis(*args))
    __swig_destroy__ = _molsetc.delete_GauAtomBasis

    def SetDefaultParams(self) -> "void":
        return _molsetc.GauAtomBasis_SetDefaultParams(self)

    def copy_from(self, ref: "GauAtomBasis") -> "GauAtomBasis &":
        return _molsetc.GauAtomBasis_copy_from(self, ref)

    def SetForAtom(self, BasName: "char const *", aptr: "HaAtom") -> "int":
        return _molsetc.GauAtomBasis_SetForAtom(self, BasName, aptr)

    def GetBasName(self) -> "char const *":
        return _molsetc.GauAtomBasis_GetBasName(self)

    def SetBasName(self, name: "std::string const &") -> "bool":
        return _molsetc.GauAtomBasis_SetBasName(self, name)

    def SetAtHost(self, new_host_atom: "HaAtom") -> "bool":
        return _molsetc.GauAtomBasis_SetAtHost(self, new_host_atom)

    def GetAtHost(self, *args) -> "HaAtom const *":
        return _molsetc.GauAtomBasis_GetAtHost(self, *args)

    def GetLabel(self, idx: "int") -> "std::string":
        return _molsetc.GauAtomBasis_GetLabel(self, idx)

    def GetHostPt(self, *args) -> "Vec3D const *":
        return _molsetc.GauAtomBasis_GetHostPt(self, *args)

    def TransferBetweenAtoms(self, pt_corr_map: "PtrPtrMap") -> "int":
        return _molsetc.GauAtomBasis_TransferBetweenAtoms(self, pt_corr_map)

    def AddXml(self, *args) -> "TiXmlElement *":
        return _molsetc.GauAtomBasis_AddXml(self, *args)

    def LoadXml(self, gau_shell_element: "TiXmlElement", option: "int"=0) -> "int":
        return _molsetc.GauAtomBasis_LoadXml(self, gau_shell_element, option)

    def SetFromGaussianInp(self, _is: "istream") -> "bool":
        return _molsetc.GauAtomBasis_SetFromGaussianInp(self, _is)

    def SaveGaussianInp(self, p_stream_out: "ostream") -> "void":
        return _molsetc.GauAtomBasis_SaveGaussianInp(self, p_stream_out)

    def GetAtomType(self) -> "std::string":
        return _molsetc.GauAtomBasis_GetAtomType(self)

    def SetAtomType(self, atype: "std::string const &") -> "bool":
        return _molsetc.GauAtomBasis_SetAtomType(self, atype)

    def GetNBfunc(self) -> "int":
        return _molsetc.GauAtomBasis_GetNBfunc(self)

    def GetNBfuncCart(self) -> "int":
        return _molsetc.GauAtomBasis_GetNBfuncCart(self)

    def GetClassName(self) -> "std::string":
        return _molsetc.GauAtomBasis_GetClassName(self)

    def AddShell(self, shl: "GauShell") -> "bool":
        return _molsetc.GauAtomBasis_AddShell(self, shl)

    def Clear(self) -> "void":
        return _molsetc.GauAtomBasis_Clear(self)

    def ClearCoef(self) -> "void":
        return _molsetc.GauAtomBasis_ClearCoef(self)

    def SetPseudoPotName(self, new_pot_name: "std::string const &") -> "void":
        return _molsetc.GauAtomBasis_SetPseudoPotName(self, new_pot_name)

    def SetPseudoPotFromName(self) -> "bool":
        return _molsetc.GauAtomBasis_SetPseudoPotFromName(self)

    def SetPseudoPotPtr(self, new_ppot: "HaPseudoPot") -> "void":
        return _molsetc.GauAtomBasis_SetPseudoPotPtr(self, new_ppot)

    def GetPseudoPot(self) -> "HaPseudoPot const *":
        return _molsetc.GauAtomBasis_GetPseudoPot(self)

    def IsSetPseudoPot(self) -> "bool":
        return _molsetc.GauAtomBasis_IsSetPseudoPot(self)

    def GetNumElectr(self) -> "int":
        return _molsetc.GauAtomBasis_GetNumElectr(self)

    def __eq__(self, rhs: "GauAtomBasis") -> "bool":
        return _molsetc.GauAtomBasis___eq__(self, rhs)

    def __lt__(self, rhs: "GauAtomBasis") -> "bool":
        return _molsetc.GauAtomBasis___lt__(self, rhs)

    def Print_info(self, sout: "ostream", level: "int const") -> "bool":
        return _molsetc.GauAtomBasis_Print_info(self, sout, level)
    Shells = property(_molsetc.GauAtomBasis_Shells_get, _molsetc.GauAtomBasis_Shells_set)

# Register GauAtomBasis in _molsetc:
_molsetc.GauAtomBasis_swigregister(GauAtomBasis)

class GauBasisSet(ArrayOrb3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.GauBasisSet_swiginit(self, _molsetc.new_GauBasisSet())
    __swig_destroy__ = _molsetc.delete_GauBasisSet

    def Clear(self) -> "void":
        return _molsetc.GauBasisSet_Clear(self)

    def GetName(self) -> "std::string":
        return _molsetc.GauBasisSet_GetName(self)

    def IsGeneric(self) -> "bool":
        return _molsetc.GauBasisSet_IsGeneric(self)

    def SetGeneric(self) -> "void":
        return _molsetc.GauBasisSet_SetGeneric(self)

    def LoadToGaussianBas(self, gaub: "b_type &") -> "int":
        return _molsetc.GauBasisSet_LoadToGaussianBas(self, gaub)

    def LoadToGaussianBCommon(self) -> "int":
        return _molsetc.GauBasisSet_LoadToGaussianBCommon(self)

    def LoadToGaussianB2Common(self) -> "int":
        return _molsetc.GauBasisSet_LoadToGaussianB2Common(self)

    def CreateIPackBas(self) -> "InternalBasis *":
        return _molsetc.GauBasisSet_CreateIPackBas(self)

    def GetNBfunc(self) -> "int":
        return _molsetc.GauBasisSet_GetNBfunc(self)

    def GetClassName(self) -> "std::string":
        return _molsetc.GauBasisSet_GetClassName(self)

    def GetNBfuncCart(self) -> "int":
        return _molsetc.GauBasisSet_GetNBfuncCart(self)
    pure_fun_flag = property(_molsetc.GauBasisSet_pure_fun_flag_get, _molsetc.GauBasisSet_pure_fun_flag_set)

    def GetLabel(self, idx: "int") -> "std::string":
        return _molsetc.GauBasisSet_GetLabel(self, idx)

    def GetHostPt(self, *args) -> "Vec3D const *":
        return _molsetc.GauBasisSet_GetHostPt(self, *args)

    def GetTransfMat(self, transf_mat: "HaMat_double", rot_mat: "HaMat_double") -> "int":
        return _molsetc.GauBasisSet_GetTransfMat(self, transf_mat, rot_mat)

    def TransferBetweenAtoms(self, pt_corr_map: "PtrPtrMap") -> "int":
        return _molsetc.GauBasisSet_TransferBetweenAtoms(self, pt_corr_map)

    def AddXml(self, *args) -> "TiXmlElement *":
        return _molsetc.GauBasisSet_AddXml(self, *args)

    def LoadXml(self, xml_element: "TiXmlElement", option: "int"=0) -> "int":
        return _molsetc.GauBasisSet_LoadXml(self, xml_element, option)

    def InitForMolSet(self, bname: "char const *", pmset: "MolSet") -> "int":
        return _molsetc.GauBasisSet_InitForMolSet(self, bname, pmset)

    def InitForAtoms(self, bname: "char const *", at_coll: "AtomContainer") -> "int":
        return _molsetc.GauBasisSet_InitForAtoms(self, bname, at_coll)

    def AddBasisToAtom(self, bas_name: "char const *", aptr: "HaAtom") -> "GauAtomBasis *":
        return _molsetc.GauBasisSet_AddBasisToAtom(self, bas_name, aptr)

    def GetAtBasByIdx(self, i: "int") -> "GauAtomBasis &":
        return _molsetc.GauBasisSet_GetAtBasByIdx(self, i)

    def GetNumAtBas(self) -> "int":
        return _molsetc.GauBasisSet_GetNumAtBas(self)

    @staticmethod
    def CalcOvlpMat(pbas1: "GauBasisSet", pbas2: "GauBasisSet", ovlp_mat: "HaMat_double") -> "int":
        return _molsetc.GauBasisSet_CalcOvlpMat(pbas1, pbas2, ovlp_mat)

    def GetNumCnt(self) -> "int":
        return _molsetc.GauBasisSet_GetNumCnt(self)

    def GetCntCoord(self, coord: "HaMat_double") -> "int":
        return _molsetc.GauBasisSet_GetCntCoord(self, coord)

    def GetCntCoordArr(self, crd_arr: "Vec3DValArray") -> "int":
        return _molsetc.GauBasisSet_GetCntCoordArr(self, crd_arr)

    def GetNumElectr(self) -> "int":
        return _molsetc.GauBasisSet_GetNumElectr(self)

    def GetAtBasIdxForOrb(self, i: "int") -> "int":
        return _molsetc.GauBasisSet_GetAtBasIdxForOrb(self, i)

    def RecompFstBasVec(self) -> "int":
        return _molsetc.GauBasisSet_RecompFstBasVec(self)

    def MatchBasisSet(self, basis_frag: "GauBasisSet", frag_bas_fun_map: "IntIntMap", bas_pert_vec: "HaVec_double"=None) -> "int":
        return _molsetc.GauBasisSet_MatchBasisSet(self, basis_frag, frag_bas_fun_map, bas_pert_vec)
    at_bas_vec = property(_molsetc.GauBasisSet_at_bas_vec_get, _molsetc.GauBasisSet_at_bas_vec_set)
    atom_bas_idx = property(_molsetc.GauBasisSet_atom_bas_idx_get, _molsetc.GauBasisSet_atom_bas_idx_set)
    fst_bas_fun_idx = property(_molsetc.GauBasisSet_fst_bas_fun_idx_get, _molsetc.GauBasisSet_fst_bas_fun_idx_set)
    bf_lbls = property(_molsetc.GauBasisSet_bf_lbls_get, _molsetc.GauBasisSet_bf_lbls_set)

# Register GauBasisSet in _molsetc:
_molsetc.GauBasisSet_swigregister(GauBasisSet)

def GauBasisSet_CalcOvlpMat(pbas1: "GauBasisSet", pbas2: "GauBasisSet", ovlp_mat: "HaMat_double") -> "int":
    return _molsetc.GauBasisSet_CalcOvlpMat(pbas1, pbas2, ovlp_mat)

class LinCombOrb3D(ArrayOrb3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.LinCombOrb3D_swiginit(self, _molsetc.new_LinCombOrb3D(*args))
    __swig_destroy__ = _molsetc.delete_LinCombOrb3D

    def SetStdParams(self) -> "void":
        return _molsetc.LinCombOrb3D_SetStdParams(self)

    def GetClassName(self) -> "std::string":
        return _molsetc.LinCombOrb3D_GetClassName(self)

    def IsEmpty(self) -> "bool":
        return _molsetc.LinCombOrb3D_IsEmpty(self)

    def Clear(self) -> "void":
        return _molsetc.LinCombOrb3D_Clear(self)

    def GetOrbIdxByID(self, id: "char const *") -> "int":
        return _molsetc.LinCombOrb3D_GetOrbIdxByID(self, id)

    def GetLabel(self, idx: "int") -> "std::string":
        return _molsetc.LinCombOrb3D_GetLabel(self, idx)

    def GetHostPt(self, *args) -> "Vec3D const *":
        return _molsetc.LinCombOrb3D_GetHostPt(self, *args)

    def TransferBetweenAtoms(self, pt_corr_map: "PtrPtrMap") -> "int":
        return _molsetc.LinCombOrb3D_TransferBetweenAtoms(self, pt_corr_map)

    def AddXml(self, *args) -> "TiXmlElement *":
        return _molsetc.LinCombOrb3D_AddXml(self, *args)

    def LoadXml(self, xml_element: "TiXmlElement", option: "int"=0) -> "int":
        return _molsetc.LinCombOrb3D_LoadXml(self, xml_element, option)

    def CreateEmptyOrbs(self, n_orb: "int", new_bas: "ArrayOrb3D") -> "int":
        return _molsetc.LinCombOrb3D_CreateEmptyOrbs(self, n_orb, new_bas)

    def AddOrbs(self, orbs: "LinCombOrb3D") -> "int":
        return _molsetc.LinCombOrb3D_AddOrbs(self, orbs)

    def SetOrbLabel(self, idx: "int", orb_lbl: "std::string const &") -> "void":
        return _molsetc.LinCombOrb3D_SetOrbLabel(self, idx, orb_lbl)

    def ProjectToBasis(self, coef_new: "HaMat_double", basis_new: "ArrayOrb3D") -> "int":
        return _molsetc.LinCombOrb3D_ProjectToBasis(self, coef_new, basis_new)

    def GetNOrbs(self) -> "int":
        return _molsetc.LinCombOrb3D_GetNOrbs(self)

    def GetNBfunc(self) -> "int":
        return _molsetc.LinCombOrb3D_GetNBfunc(self)

    def TrCoefRot(self, rot_mat: "HaMat_double") -> "int":
        return _molsetc.LinCombOrb3D_TrCoefRot(self, rot_mat)
    internal_basis = property(_molsetc.LinCombOrb3D_internal_basis_get, _molsetc.LinCombOrb3D_internal_basis_set)
    coef = property(_molsetc.LinCombOrb3D_coef_get, _molsetc.LinCombOrb3D_coef_set)
    bas = property(_molsetc.LinCombOrb3D_bas_get, _molsetc.LinCombOrb3D_bas_set)
    ids = property(_molsetc.LinCombOrb3D_ids_get, _molsetc.LinCombOrb3D_ids_set)
    at_ptr = property(_molsetc.LinCombOrb3D_at_ptr_get, _molsetc.LinCombOrb3D_at_ptr_set)

    @staticmethod
    def CalcOvlpMat(pbas1: "LinCombOrb3D", pbas2: "LinCombOrb3D", ovlp_mat: "HaMat_double") -> "int":
        return _molsetc.LinCombOrb3D_CalcOvlpMat(pbas1, pbas2, ovlp_mat)

    @staticmethod
    def Eval1eOp(pbas1: "LinCombOrb3D", pbas2: "LinCombOrb3D", bop_mat: "HaMat_double", op_mat: "HaMat_double") -> "int":
        return _molsetc.LinCombOrb3D_Eval1eOp(pbas1, pbas2, bop_mat, op_mat)

# Register LinCombOrb3D in _molsetc:
_molsetc.LinCombOrb3D_swigregister(LinCombOrb3D)

def LinCombOrb3D_CalcOvlpMat(pbas1: "LinCombOrb3D", pbas2: "LinCombOrb3D", ovlp_mat: "HaMat_double") -> "int":
    return _molsetc.LinCombOrb3D_CalcOvlpMat(pbas1, pbas2, ovlp_mat)

def LinCombOrb3D_Eval1eOp(pbas1: "LinCombOrb3D", pbas2: "LinCombOrb3D", bop_mat: "HaMat_double", op_mat: "HaMat_double") -> "int":
    return _molsetc.LinCombOrb3D_Eval1eOp(pbas1, pbas2, bop_mat, op_mat)

class HaOperR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaOperR_swiginit(self, _molsetc.new_HaOperR())
    __swig_destroy__ = _molsetc.delete_HaOperR

    def FillMat(self, pbset: "HaBasisSet", rmats: "HaMat_doubleArr &") -> "int":
        return _molsetc.HaOperR_FillMat(self, pbset, rmats)

    def EvalGauBasisSet(self, pbset: "GauBasisSet", rmats: "HaMat_doubleArr &") -> "int":
        return _molsetc.HaOperR_EvalGauBasisSet(self, pbset, rmats)

# Register HaOperR in _molsetc:
_molsetc.HaOperR_swigregister(HaOperR)

class HaOperRDelt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ptr_qc_mod_new: "HaQCMod"):
        _molsetc.HaOperRDelt_swiginit(self, _molsetc.new_HaOperRDelt(ptr_qc_mod_new))
    __swig_destroy__ = _molsetc.delete_HaOperRDelt

    def FillMat(self, pbset: "HaBasisSet", rmats: "HaMat_doubleArr &") -> "int":
        return _molsetc.HaOperRDelt_FillMat(self, pbset, rmats)

    def EvalGauBasisSet(self, pbset: "GauBasisSet", rmats: "HaMat_doubleArr &") -> "int":
        return _molsetc.HaOperRDelt_EvalGauBasisSet(self, pbset, rmats)

    def RecalcFromHr(self) -> "bool":
        return _molsetc.HaOperRDelt_RecalcFromHr(self)

    def RecalcFromHr2(self) -> "bool":
        return _molsetc.HaOperRDelt_RecalcFromHr2(self)

    def RecalcLondon(self, pbset: "GauBasisSet") -> "bool":
        return _molsetc.HaOperRDelt_RecalcLondon(self, pbset)

    def LondonDaltonCalc(self) -> "bool":
        return _molsetc.HaOperRDelt_LondonDaltonCalc(self)

    def SetLondonAO(self) -> "void":
        return _molsetc.HaOperRDelt_SetLondonAO(self)
    ptr_qc_mod = property(_molsetc.HaOperRDelt_ptr_qc_mod_get, _molsetc.HaOperRDelt_ptr_qc_mod_set)
    data = property(_molsetc.HaOperRDelt_data_get, _molsetc.HaOperRDelt_data_set)
    i_lond = property(_molsetc.HaOperRDelt_i_lond_get, _molsetc.HaOperRDelt_i_lond_set)

# Register HaOperRDelt in _molsetc:
_molsetc.HaOperRDelt_swigregister(HaOperRDelt)

class HaOperGrad(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaOperGrad_swiginit(self, _molsetc.new_HaOperGrad())
    __swig_destroy__ = _molsetc.delete_HaOperGrad

    def FillMat(self, pbset: "HaBasisSet", rmats: "HaMat_doubleArr &") -> "int":
        return _molsetc.HaOperGrad_FillMat(self, pbset, rmats)

    def EvalGauBasisSet(self, pbset: "GauBasisSet", fmats: "HaMat_doubleArr &") -> "int":
        return _molsetc.HaOperGrad_EvalGauBasisSet(self, pbset, fmats)

# Register HaOperGrad in _molsetc:
_molsetc.HaOperGrad_swigregister(HaOperGrad)

class HaOperKinEner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaOperKinEner_swiginit(self, _molsetc.new_HaOperKinEner())
    __swig_destroy__ = _molsetc.delete_HaOperKinEner

    def EvalGauBasisSet(self, pbset: "GauBasisSet", fmat: "HaMat_double") -> "int":
        return _molsetc.HaOperKinEner_EvalGauBasisSet(self, pbset, fmat)

# Register HaOperKinEner in _molsetc:
_molsetc.HaOperKinEner_swigregister(HaOperKinEner)

class PseudoTerm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.PseudoTerm_swiginit(self, _molsetc.new_PseudoTerm(*args))
    __swig_destroy__ = _molsetc.delete_PseudoTerm
    npower = property(_molsetc.PseudoTerm_npower_get, _molsetc.PseudoTerm_npower_set)
    expon = property(_molsetc.PseudoTerm_expon_get, _molsetc.PseudoTerm_expon_set)
    coef = property(_molsetc.PseudoTerm_coef_get, _molsetc.PseudoTerm_coef_set)

# Register PseudoTerm in _molsetc:
_molsetc.PseudoTerm_swigregister(PseudoTerm)

class PseudoBlock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.PseudoBlock_swiginit(self, _molsetc.new_PseudoBlock())
    __swig_destroy__ = _molsetc.delete_PseudoBlock
    description = property(_molsetc.PseudoBlock_description_get, _molsetc.PseudoBlock_description_set)
    terms = property(_molsetc.PseudoBlock_terms_get, _molsetc.PseudoBlock_terms_set)

# Register PseudoBlock in _molsetc:
_molsetc.PseudoBlock_swigregister(PseudoBlock)

class HaPseudoPot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaPseudoPot_swiginit(self, _molsetc.new_HaPseudoPot())
    __swig_destroy__ = _molsetc.delete_HaPseudoPot

    def SaveGaussInp(self, os: "ostream") -> "bool":
        return _molsetc.HaPseudoPot_SaveGaussInp(self, os)

    def GetNCoreEl(self) -> "int":
        return _molsetc.HaPseudoPot_GetNCoreEl(self)

# Register HaPseudoPot in _molsetc:
_molsetc.HaPseudoPot_swigregister(HaPseudoPot)

class HaPseudoPotRef(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.HaPseudoPotRef_swiginit(self, _molsetc.new_HaPseudoPotRef(*args))
    __swig_destroy__ = _molsetc.delete_HaPseudoPotRef

    def __eq__(self, rhs: "HaPseudoPotRef") -> "bool":
        return _molsetc.HaPseudoPotRef___eq__(self, rhs)

    def __lt__(self, rhs: "HaPseudoPotRef") -> "bool":
        return _molsetc.HaPseudoPotRef___lt__(self, rhs)

# Register HaPseudoPotRef in _molsetc:
_molsetc.HaPseudoPotRef_swigregister(HaPseudoPotRef)

class HaPseudoPotDB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaPseudoPotDB_swiginit(self, _molsetc.new_HaPseudoPotDB())
    __swig_destroy__ = _molsetc.delete_HaPseudoPotDB

    def Extract(self, pot_name: "std::string const &", at_label: "std::string const &") -> "HaPseudoPot *":
        return _molsetc.HaPseudoPotDB_Extract(self, pot_name, at_label)

    def Init(self) -> "bool":
        return _molsetc.HaPseudoPotDB_Init(self)

# Register HaPseudoPotDB in _molsetc:
_molsetc.HaPseudoPotDB_swigregister(HaPseudoPotDB)

class RunOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.RunOptions_swiginit(self, _molsetc.new_RunOptions(*args))
    __swig_destroy__ = _molsetc.delete_RunOptions

    def SetStdOptions(self) -> "void":
        return _molsetc.RunOptions_SetStdOptions(self)

    def Copy(self, ref: "HashMap") -> "void":
        return _molsetc.RunOptions_Copy(self, ref)

    def clone(self) -> "harlem::HashMap *":
        return _molsetc.RunOptions_clone(self)

    def SetRunSync(self, set_flag: "bool"=True) -> "void":
        return _molsetc.RunOptions_SetRunSync(self, set_flag)

    def ToRunSync(self) -> "bool":
        return _molsetc.RunOptions_ToRunSync(self)

    def SetSaveInpFile(self, set_flag: "bool"=True) -> "void":
        return _molsetc.RunOptions_SetSaveInpFile(self, set_flag)

    def ToSaveInpFile(self) -> "bool":
        return _molsetc.RunOptions_ToSaveInpFile(self)

    def SetLoadOutput(self, set_flag: "bool"=True) -> "void":
        return _molsetc.RunOptions_SetLoadOutput(self, set_flag)

    def ToLoadOutput(self) -> "bool":
        return _molsetc.RunOptions_ToLoadOutput(self)

# Register RunOptions in _molsetc:
_molsetc.RunOptions_swigregister(RunOptions)
COMP_MOD_ELECTROST = cvar.COMP_MOD_ELECTROST
COMP_MOD_ET_COUPL = cvar.COMP_MOD_ET_COUPL
COMP_MOD_QCHEM = cvar.COMP_MOD_QCHEM
COMP_MOD_GAUSSIAN = cvar.COMP_MOD_GAUSSIAN
COMP_MOD_DALTON = cvar.COMP_MOD_DALTON
COMP_MOD_INTERMOL = cvar.COMP_MOD_INTERMOL
COMP_MOD_MOLMECH = cvar.COMP_MOD_MOLMECH
COMP_MOD_SCATTER = cvar.COMP_MOD_SCATTER
COMP_MOD_STM = cvar.COMP_MOD_STM
COMP_MOD_NUCL_ACID = cvar.COMP_MOD_NUCL_ACID
COMP_MOD_ZINDO = cvar.COMP_MOD_ZINDO
COMP_MOD_PROTON_REDOX = cvar.COMP_MOD_PROTON_REDOX
COMP_MOD_EMPIRICAL = cvar.COMP_MOD_EMPIRICAL
COMP_MOD_PNP = cvar.COMP_MOD_PNP
COMP_MOD_APBS = cvar.COMP_MOD_APBS
COMP_MOD_EL = cvar.COMP_MOD_EL
COMP_MOD_PKA_CALC = cvar.COMP_MOD_PKA_CALC
COMP_MOD_MEMBRANE = cvar.COMP_MOD_MEMBRANE
COMP_MOD_FLEX = cvar.COMP_MOD_FLEX
COMP_MOD_CLUSTER_ANAL = cvar.COMP_MOD_CLUSTER_ANAL

class HaCompMod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_mtype: "int const", new_phost_mset: "MolSet"=None):
        _molsetc.HaCompMod_swiginit(self, _molsetc.new_HaCompMod(new_mtype, new_phost_mset))
    __swig_destroy__ = _molsetc.delete_HaCompMod

    @staticmethod
    def CreateCompMod(mtype: "int const", new_phost_mset: "MolSet"=None) -> "HaCompMod *":
        return _molsetc.HaCompMod_CreateCompMod(mtype, new_phost_mset)

    def SetMolHost(self, new_phost_mset: "MolSet") -> "bool":
        return _molsetc.HaCompMod_SetMolHost(self, new_phost_mset)

    def GetMolSet(self, *args) -> "MolSet const *":
        return _molsetc.HaCompMod_GetMolSet(self, *args)

    def GetType(self) -> "int":
        return _molsetc.HaCompMod_GetType(self)

    def SetDebugLevel(self, new_debug_level: "int") -> "void":
        return _molsetc.HaCompMod_SetDebugLevel(self, new_debug_level)

    def SaveXMLToStream(self, os: "ostream", popt: "SaveOptions"=None) -> "int":
        return _molsetc.HaCompMod_SaveXMLToStream(self, os, popt)

    def OnDelAtoms(self, del_atoms: "AtomContainer") -> "int":
        return _molsetc.HaCompMod_OnDelAtoms(self, del_atoms)
    debug_level = property(_molsetc.HaCompMod_debug_level_get, _molsetc.HaCompMod_debug_level_set)

# Register HaCompMod in _molsetc:
_molsetc.HaCompMod_swigregister(HaCompMod)

def HaCompMod_CreateCompMod(mtype: "int const", new_phost_mset: "MolSet"=None) -> "HaCompMod *":
    return _molsetc.HaCompMod_CreateCompMod(mtype, new_phost_mset)

class QCIntEngineType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_QCIntEngineType
    INT_ENGINE_GAUSS = _molsetc.QCIntEngineType_INT_ENGINE_GAUSS
    INT_ENGINE_IPACK = _molsetc.QCIntEngineType_INT_ENGINE_IPACK

    def __eq__(self, val: "QCIntEngineType::Value const &") -> "bool":
        return _molsetc.QCIntEngineType___eq__(self, val)

    def __ne__(self, val: "QCIntEngineType::Value const &") -> "bool":
        return _molsetc.QCIntEngineType___ne__(self, val)

    def GetLabelsMap(self) -> "IntStrMap &":
        return _molsetc.QCIntEngineType_GetLabelsMap(self)

    def value(self) -> "int &":
        return _molsetc.QCIntEngineType_value(self)

    def label(self) -> "char const *":
        return _molsetc.QCIntEngineType_label(self)

    def SetWithValue(self, val: "int") -> "int":
        return _molsetc.QCIntEngineType_SetWithValue(self, val)

    def SetWithLabel(self, label: "char const *") -> "int":
        return _molsetc.QCIntEngineType_SetWithLabel(self, label)

    def __init__(self, *args):
        _molsetc.QCIntEngineType_swiginit(self, _molsetc.new_QCIntEngineType(*args))

# Register QCIntEngineType in _molsetc:
_molsetc.QCIntEngineType_swigregister(QCIntEngineType)

CNDO_2 = _molsetc.CNDO_2
INDO_2 = _molsetc.INDO_2
ZINDO_1 = _molsetc.ZINDO_1
ZINDO_S = _molsetc.ZINDO_S
HUCKEL = _molsetc.HUCKEL
SCRF_NO = _molsetc.SCRF_NO
SCRF_PCM = _molsetc.SCRF_PCM
HARTREE_FOCK = _molsetc.HARTREE_FOCK
NDO = _molsetc.NDO
EXTENDED_HUCKEL = _molsetc.EXTENDED_HUCKEL
MP2 = _molsetc.MP2
DFT_B3LYP = _molsetc.DFT_B3LYP
CCSD_T = _molsetc.CCSD_T
class HaQCMod(HaCompMod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset: "MolSet"):
        _molsetc.HaQCMod_swiginit(self, _molsetc.new_HaQCMod(new_phost_mset))
    __swig_destroy__ = _molsetc.delete_HaQCMod

    def SetStdParams(self) -> "void":
        return _molsetc.HaQCMod_SetStdParams(self)

    def Print_info(self, sout: "ostream", level: "int const") -> "bool":
        return _molsetc.HaQCMod_Print_info(self, sout, level)

    def SaveXMLToStream(self, os: "ostream", popt: "SaveOptions"=None) -> "int":
        return _molsetc.HaQCMod_SaveXMLToStream(self, os, popt)

    def GetNumCnt(self) -> "int":
        return _molsetc.HaQCMod_GetNumCnt(self)

    def GetCntCharges(self, charges: "HaVec_double") -> "bool":
        return _molsetc.HaQCMod_GetCntCharges(self, charges)

    def SetCharge(self, charge: "int") -> "void":
        return _molsetc.HaQCMod_SetCharge(self, charge)

    def SetMult(self, mult: "int") -> "void":
        return _molsetc.HaQCMod_SetMult(self, mult)

    def GetCharge(self) -> "int":
        return _molsetc.HaQCMod_GetCharge(self)

    def GetMult(self) -> "int":
        return _molsetc.HaQCMod_GetMult(self)

    def SetField(self, el_x: "double", el_y: "double", el_z: "double") -> "void":
        return _molsetc.HaQCMod_SetField(self, el_x, el_y, el_z)

    def SetFieldAU(self, el_x: "double", el_y: "double", el_z: "double") -> "void":
        return _molsetc.HaQCMod_SetFieldAU(self, el_x, el_y, el_z)

    def GetNelectr(self) -> "int":
        return _molsetc.HaQCMod_GetNelectr(self)

    def GetNumAlphaEl(self, active_bas: "int"=0) -> "int":
        return _molsetc.HaQCMod_GetNumAlphaEl(self, active_bas)

    def GetNumBetaEl(self, active_bas: "int"=0) -> "int":
        return _molsetc.HaQCMod_GetNumBetaEl(self, active_bas)

    def GetNumOccMO(self) -> "int":
        return _molsetc.HaQCMod_GetNumOccMO(self)

    def GetNumVacMO(self) -> "int":
        return _molsetc.HaQCMod_GetNumVacMO(self)

    def GetNumMO(self) -> "int":
        return _molsetc.HaQCMod_GetNumMO(self)

    def SetWaveFunType(self, str_wf_type: "char const *") -> "bool":
        return _molsetc.HaQCMod_SetWaveFunType(self, str_wf_type)

    def InitBasis(self, *args) -> "bool":
        return _molsetc.HaQCMod_InitBasis(self, *args)

    def FBasFunPos(self, ref_aptr: "HaAtom") -> "int":
        return _molsetc.HaQCMod_FBasFunPos(self, ref_aptr)

    def GetAtomOfAO(self, idx_AO: "int const") -> "HaAtom const *":
        return _molsetc.HaQCMod_GetAtomOfAO(self, idx_AO)

    def GetNBfunc(self) -> "int":
        return _molsetc.HaQCMod_GetNBfunc(self)

    def GetBasName(self) -> "std::string":
        return _molsetc.HaQCMod_GetBasName(self)

    def UsePseudoPot(self) -> "bool":
        return _molsetc.HaQCMod_UsePseudoPot(self)

    def InitLocOrb(self, setid: "char const *") -> "bool":
        return _molsetc.HaQCMod_InitLocOrb(self, setid)

    def GetNActiveOrb(self) -> "int":
        return _molsetc.HaQCMod_GetNActiveOrb(self)

    def IsLocOrbFullBasis(self) -> "bool":
        return _molsetc.HaQCMod_IsLocOrbFullBasis(self)

    def GetLocOrbIdxOfGrp(self, gid: "std::string const &", ilgr: "HaVec_int") -> "int":
        return _molsetc.HaQCMod_GetLocOrbIdxOfGrp(self, gid, ilgr)

    def ExtractLocOrbSubMat(self, gid1: "std::string const &", gid2: "std::string const &", ActOrbMat: "HaMat_double", ActOrbSubMat: "HaMat_double") -> "bool":
        return _molsetc.HaQCMod_ExtractLocOrbSubMat(self, gid1, gid2, ActOrbMat, ActOrbSubMat)

    def InsertLocOrbSubMat(self, gid1: "std::string const &", gid2: "std::string const &", ActOrbMat: "HaMat_double", ActOrbSubMat: "HaMat_double") -> "bool":
        return _molsetc.HaQCMod_InsertLocOrbSubMat(self, gid1, gid2, ActOrbMat, ActOrbSubMat)

    def GetLocOrbSetID(self) -> "char const *":
        return _molsetc.HaQCMod_GetLocOrbSetID(self)

    @staticmethod
    def EvalLinCombOnGrid(orb_coef: "HaVec_double", bas_set: "ArrayOrb3D", mo_grid: "HaField3D") -> "bool":
        return _molsetc.HaQCMod_EvalLinCombOnGrid(orb_coef, bas_set, mo_grid)

    def CreateOrbContour(self, orb_coef: "HaVec_double", bas_set: "ArrayOrb3D", mo_isolvl: "double const"=0.1, ngrid: "int const"=11) -> "VecPtr":
        return _molsetc.HaQCMod_CreateOrbContour(self, orb_coef, bas_set, mo_isolvl, ngrid)

    def CreateMOcontour(self, imo: "int const", mo_isolvl: "double const"=0.1, ngrid: "int const"=11) -> "bool":
        return _molsetc.HaQCMod_CreateMOcontour(self, imo, mo_isolvl, ngrid)
    m_grid_size = property(_molsetc.HaQCMod_m_grid_size_get, _molsetc.HaQCMod_m_grid_size_set)

    def BuildFockMatFromMOs(self, fock_matrix: "HaMat_double", cut_ene: "double"=-100000.0) -> "bool":
        return _molsetc.HaQCMod_BuildFockMatFromMOs(self, fock_matrix, cut_ene)

    @staticmethod
    def GetQCIntEngine() -> "QCIntEngineType":
        return _molsetc.HaQCMod_GetQCIntEngine()

    @staticmethod
    def SetQCIntEngine(int_engine_new: "QCIntEngineType") -> "void":
        return _molsetc.HaQCMod_SetQCIntEngine(int_engine_new)
    int_engine = property(_molsetc.HaQCMod_int_engine_get, _molsetc.HaQCMod_int_engine_set)

    def InitBasOvlp(self) -> "bool":
        return _molsetc.HaQCMod_InitBasOvlp(self)

    def Init1eDens(self, gfile: "GauFile &") -> "bool":
        return _molsetc.HaQCMod_Init1eDens(self, gfile)

    def InitMOs(self, gfile: "GauFile &") -> "bool":
        return _molsetc.HaQCMod_InitMOs(self, gfile)

    @staticmethod
    def LoadGauCom(gbas: "GauBasisSet") -> "int":
        return _molsetc.HaQCMod_LoadGauCom(gbas)

    def LoadDataFromFChk(self, fname: "char const *") -> "bool":
        return _molsetc.HaQCMod_LoadDataFromFChk(self, fname)
    load_mo_flag = property(_molsetc.HaQCMod_load_mo_flag_get, _molsetc.HaQCMod_load_mo_flag_set)

    def ProjMatToActBas(self, fmat: "HaMat_double", fmat_lb: "HaMat_double") -> "int":
        return _molsetc.HaQCMod_ProjMatToActBas(self, fmat, fmat_lb)

    def CalcEPfromMO(self, gm: "HaMat_double", ene: "double") -> "int":
        return _molsetc.HaQCMod_CalcEPfromMO(self, gm, ene)

    def GetOvlpMat(self) -> "HaMat_double &":
        return _molsetc.HaQCMod_GetOvlpMat(self)
    max_scf_iter = property(_molsetc.HaQCMod_max_scf_iter_get, _molsetc.HaQCMod_max_scf_iter_set)
    max_it_avg = property(_molsetc.HaQCMod_max_it_avg_get, _molsetc.HaQCMod_max_it_avg_set)
    max_it_noavg = property(_molsetc.HaQCMod_max_it_noavg_get, _molsetc.HaQCMod_max_it_noavg_set)
    iuhf = property(_molsetc.HaQCMod_iuhf_get, _molsetc.HaQCMod_iuhf_set)
    conv_dm = property(_molsetc.HaQCMod_conv_dm_get, _molsetc.HaQCMod_conv_dm_set)
    temp0_fermi = property(_molsetc.HaQCMod_temp0_fermi_get, _molsetc.HaQCMod_temp0_fermi_set)
    iter_temp = property(_molsetc.HaQCMod_iter_temp_get, _molsetc.HaQCMod_iter_temp_set)
    guess_only = property(_molsetc.HaQCMod_guess_only_get, _molsetc.HaQCMod_guess_only_set)
    set_guess_from_mos = property(_molsetc.HaQCMod_set_guess_from_mos_get, _molsetc.HaQCMod_set_guess_from_mos_set)

    @staticmethod
    def InitIPack() -> "int":
        return _molsetc.HaQCMod_InitIPack()
    max_gauss_mem = property(_molsetc.HaQCMod_max_gauss_mem_get, _molsetc.HaQCMod_max_gauss_mem_set)

    @staticmethod
    def set_max_gauss_mem(new_max_mem: "int") -> "void":
        return _molsetc.HaQCMod_set_max_gauss_mem(new_max_mem)

    def Run(self, popt: "RunOptions"=None) -> "int":
        return _molsetc.HaQCMod_Run(self, popt)

    def StopCalc(self) -> "int":
        return _molsetc.HaQCMod_StopCalc(self)

    def PrepGauss(self) -> "int":
        return _molsetc.HaQCMod_PrepGauss(self)

    def RunCNDO(self) -> "int":
        return _molsetc.HaQCMod_RunCNDO(self)

    def RunCNDOThread(self) -> "int":
        return _molsetc.HaQCMod_RunCNDOThread(self)

    def RunExtHuckel(self) -> "int":
        return _molsetc.HaQCMod_RunExtHuckel(self)
    stop_calc_flag = property(_molsetc.HaQCMod_stop_calc_flag_get, _molsetc.HaQCMod_stop_calc_flag_set)

    def SetSinglePtCalc(self) -> "void":
        return _molsetc.HaQCMod_SetSinglePtCalc(self)

    def SetEneMinCalc(self) -> "void":
        return _molsetc.HaQCMod_SetEneMinCalc(self)

    def SetTransStateCalc(self) -> "void":
        return _molsetc.HaQCMod_SetTransStateCalc(self)

    def IsSinglePtCalc(self) -> "bool":
        return _molsetc.HaQCMod_IsSinglePtCalc(self)

    def IsEneMinCalc(self) -> "bool":
        return _molsetc.HaQCMod_IsEneMinCalc(self)

    def IsTransStateCalc(self) -> "bool":
        return _molsetc.HaQCMod_IsTransStateCalc(self)

    def CalcEnergy(self) -> "int":
        return _molsetc.HaQCMod_CalcEnergy(self)

    def RunMinEne(self) -> "int":
        return _molsetc.HaQCMod_RunMinEne(self)

    def IsGenBasisSet(self) -> "bool":
        return _molsetc.HaQCMod_IsGenBasisSet(self)

    def SetBasisSetGen(self) -> "void":
        return _molsetc.HaQCMod_SetBasisSetGen(self)

    def IsUsingSymmetry(self) -> "bool":
        return _molsetc.HaQCMod_IsUsingSymmetry(self)

    def SetUseSymmetry(self, use_symmetry_par: "int") -> "void":
        return _molsetc.HaQCMod_SetUseSymmetry(self, use_symmetry_par)

    def SetHF(self) -> "void":
        return _molsetc.HaQCMod_SetHF(self)

    def SetMP2(self) -> "void":
        return _molsetc.HaQCMod_SetMP2(self)

    def SetDFT(self) -> "void":
        return _molsetc.HaQCMod_SetDFT(self)

    def SetB3LYP(self) -> "void":
        return _molsetc.HaQCMod_SetB3LYP(self)

    def SetCCSD_T(self) -> "void":
        return _molsetc.HaQCMod_SetCCSD_T(self)

    def IsHF(self) -> "bool":
        return _molsetc.HaQCMod_IsHF(self)

    def IsDFT(self) -> "bool":
        return _molsetc.HaQCMod_IsDFT(self)

    def IsB3LYP(self) -> "bool":
        return _molsetc.HaQCMod_IsB3LYP(self)

    def IsMP2(self) -> "bool":
        return _molsetc.HaQCMod_IsMP2(self)

    def IsCCSD_T(self) -> "bool":
        return _molsetc.HaQCMod_IsCCSD_T(self)

    def SetCalcPolar(self, set_par: "bool"=True) -> "void":
        return _molsetc.HaQCMod_SetCalcPolar(self, set_par)

    def ToCalcPolar(self) -> "bool":
        return _molsetc.HaQCMod_ToCalcPolar(self)

    def IsUsingSCRF(self) -> "bool":
        return _molsetc.HaQCMod_IsUsingSCRF(self)

    def SetSCRF(self) -> "void":
        return _molsetc.HaQCMod_SetSCRF(self)

    def SetSCRFMethod(self, set_method_par: "int") -> "void":
        return _molsetc.HaQCMod_SetSCRFMethod(self, set_method_par)
    scrf_method = property(_molsetc.HaQCMod_scrf_method_get, _molsetc.HaQCMod_scrf_method_set)

    def SetExtCharge(self, *args) -> "int":
        return _molsetc.HaQCMod_SetExtCharge(self, *args)

    def SetExtChCrdOffset(self, crd_offset: "double") -> "void":
        return _molsetc.HaQCMod_SetExtChCrdOffset(self, crd_offset)
    wave_fun_type = property(_molsetc.HaQCMod_wave_fun_type_get, _molsetc.HaQCMod_wave_fun_type_set)
    ndo_method = property(_molsetc.HaQCMod_ndo_method_get, _molsetc.HaQCMod_ndo_method_set)

    def GetZMat(self) -> "ZMatCrd *":
        return _molsetc.HaQCMod_GetZMat(self)

    def SetPrefix(self, prefix: "std::string const &") -> "void":
        return _molsetc.HaQCMod_SetPrefix(self, prefix)

    def GetPrefix(self) -> "std::string":
        return _molsetc.HaQCMod_GetPrefix(self)

    def InitHuckParsStd(self) -> "int":
        return _molsetc.HaQCMod_InitHuckParsStd(self)

    def InitHuckParsVela(self) -> "int":
        return _molsetc.HaQCMod_InitHuckParsVela(self)

    def InitHuckHam(self, hmat: "HaMat_double", ss: "HaMat_double", bas: "ArrayOrb3D") -> "int":
        return _molsetc.HaQCMod_InitHuckHam(self, hmat, ss, bas)

    def GetNDOValEl(self, elem: "int", ns_val: "double &", np_val: "double &", nd_val: "double &", nf_val: "double &") -> "double":
        return _molsetc.HaQCMod_GetNDOValEl(self, elem, ns_val, np_val, nd_val, nf_val)

    def FormFockNDO(self, natoms: "int", ian: "int *", ifst_bf_at: "int const *", ilst_bf_at: "int const *", da: "double *", db: "double *", fm: "double *", gss: "double const *", gsd: "double const *", gdd: "double const *", at_coul_int: "std::vector< HaVec_double > &") -> "int":
        return _molsetc.HaQCMod_FormFockNDO(self, natoms, ian, ifst_bf_at, ilst_bf_at, da, db, fm, gss, gsd, gdd, at_coul_int)

    def CalcNucRepEne(self, natoms: "int", ian: "HaVec_int", c: "HaMat_double", core_ch: "HaVec_double", gss: "double const *") -> "double":
        return _molsetc.HaQCMod_CalcNucRepEne(self, natoms, ian, c, core_ch, gss)
    AtBasis = property(_molsetc.HaQCMod_AtBasis_get, _molsetc.HaQCMod_AtBasis_set)
    ActBas = property(_molsetc.HaQCMod_ActBas_get, _molsetc.HaQCMod_ActBas_set)
    allocated_act_basis = property(_molsetc.HaQCMod_allocated_act_basis_get, _molsetc.HaQCMod_allocated_act_basis_set)
    m_bas_name = property(_molsetc.HaQCMod_m_bas_name_get, _molsetc.HaQCMod_m_bas_name_set)
    m_loc_orb_set_id = property(_molsetc.HaQCMod_m_loc_orb_set_id_get, _molsetc.HaQCMod_m_loc_orb_set_id_set)
    charge = property(_molsetc.HaQCMod_charge_get, _molsetc.HaQCMod_charge_set)
    mult = property(_molsetc.HaQCMod_mult_get, _molsetc.HaQCMod_mult_set)

    def GetDipole(self) -> "Vec3D":
        return _molsetc.HaQCMod_GetDipole(self)

    def GetTotDipole(self) -> "Vec3D":
        return _molsetc.HaQCMod_GetTotDipole(self)

    def GetQpole(self) -> "HaVec_double":
        return _molsetc.HaQCMod_GetQpole(self)

    def GetTotQpole(self) -> "HaVec_double":
        return _molsetc.HaQCMod_GetTotQpole(self)

    def GetPolarTensor(self) -> "HaVec_double":
        return _molsetc.HaQCMod_GetPolarTensor(self)
    p_ndo_pars_db = property(_molsetc.HaQCMod_p_ndo_pars_db_get, _molsetc.HaQCMod_p_ndo_pars_db_set)

    def SetEne(self, ene: "double") -> "void":
        return _molsetc.HaQCMod_SetEne(self, ene)

    def SetHFEne(self, ene_hf: "double") -> "void":
        return _molsetc.HaQCMod_SetHFEne(self, ene_hf)

    def SetDFTEne(self, ene_dft: "double") -> "void":
        return _molsetc.HaQCMod_SetDFTEne(self, ene_dft)

    def GetEne(self) -> "double":
        return _molsetc.HaQCMod_GetEne(self)

    def GetHFEne(self) -> "double":
        return _molsetc.HaQCMod_GetHFEne(self)

    def GetDFTEne(self) -> "double":
        return _molsetc.HaQCMod_GetDFTEne(self)
    ovlp_mat = property(_molsetc.HaQCMod_ovlp_mat_get, _molsetc.HaQCMod_ovlp_mat_set)
    huck_ham = property(_molsetc.HaQCMod_huck_ham_get, _molsetc.HaQCMod_huck_ham_set)
    MO_coef = property(_molsetc.HaQCMod_MO_coef_get, _molsetc.HaQCMod_MO_coef_set)
    MOene = property(_molsetc.HaQCMod_MOene_get, _molsetc.HaQCMod_MOene_set)

# Register HaQCMod in _molsetc:
_molsetc.HaQCMod_swigregister(HaQCMod)
INT_ENGINE_GAUSS = cvar.INT_ENGINE_GAUSS
INT_ENGINE_IPACK = cvar.INT_ENGINE_IPACK

def HaQCMod_EvalLinCombOnGrid(orb_coef: "HaVec_double", bas_set: "ArrayOrb3D", mo_grid: "HaField3D") -> "bool":
    return _molsetc.HaQCMod_EvalLinCombOnGrid(orb_coef, bas_set, mo_grid)

def HaQCMod_GetQCIntEngine() -> "QCIntEngineType":
    return _molsetc.HaQCMod_GetQCIntEngine()

def HaQCMod_SetQCIntEngine(int_engine_new: "QCIntEngineType") -> "void":
    return _molsetc.HaQCMod_SetQCIntEngine(int_engine_new)

def HaQCMod_LoadGauCom(gbas: "GauBasisSet") -> "int":
    return _molsetc.HaQCMod_LoadGauCom(gbas)

def HaQCMod_InitIPack() -> "int":
    return _molsetc.HaQCMod_InitIPack()

def HaQCMod_set_max_gauss_mem(new_max_mem: "int") -> "void":
    return _molsetc.HaQCMod_set_max_gauss_mem(new_max_mem)


def cbincf_(bin_cf: "double *", fact: "double *") -> "void":
    return _molsetc.cbincf_(bin_cf, fact)

def ssz_(nn1: "int *", nn2: "int *", ll1: "int *", ll2: "int *", m: "int *", amu: "double *", bmu: "double *", fact: "double *", bincf: "double *", lg: "int *") -> "double":
    return _molsetc.ssz_(nn1, nn2, ll1, ll2, m, amu, bmu, fact, bincf, lg)

def gint1_(exp1: "double *", exp2: "double *", n1: "int *", n2: "int *", r: "double *", fact: "double *", bincf: "double *") -> "double":
    return _molsetc.gint1_(exp1, exp2, n1, n2, r, fact, bincf)
class ETEdge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.ETEdge_swiginit(self, _molsetc.new_ETEdge(*args))
    __swig_destroy__ = _molsetc.delete_ETEdge

    def __eq__(self, rhs: "ETEdge") -> "bool":
        return _molsetc.ETEdge___eq__(self, rhs)

    def __lt__(self, rhs: "ETEdge") -> "bool":
        return _molsetc.ETEdge___lt__(self, rhs)
    coupling = property(_molsetc.ETEdge_coupling_get, _molsetc.ETEdge_coupling_set)
    inode1 = property(_molsetc.ETEdge_inode1_get, _molsetc.ETEdge_inode1_set)
    inode2 = property(_molsetc.ETEdge_inode2_get, _molsetc.ETEdge_inode2_set)

# Register ETEdge in _molsetc:
_molsetc.ETEdge_swigregister(ETEdge)

class ETPath(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.ETPath_swiginit(self, _molsetc.new_ETPath())
    __swig_destroy__ = _molsetc.delete_ETPath

    def clear(self) -> "bool":
        return _molsetc.ETPath_clear(self)

    def empty(self) -> "bool":
        return _molsetc.ETPath_empty(self)
    coupling = property(_molsetc.ETPath_coupling_get, _molsetc.ETPath_coupling_set)
    trace = property(_molsetc.ETPath_trace_get, _molsetc.ETPath_trace_set)

# Register ETPath in _molsetc:
_molsetc.ETPath_swigregister(ETPath)

class PathStep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.PathStep_swiginit(self, _molsetc.new_PathStep(*args))
    __swig_destroy__ = _molsetc.delete_PathStep

    def __lt__(self, rhs: "PathStep") -> "bool":
        return _molsetc.PathStep___lt__(self, rhs)
    coupling = property(_molsetc.PathStep_coupling_get, _molsetc.PathStep_coupling_set)
    destination = property(_molsetc.PathStep_destination_get, _molsetc.PathStep_destination_set)
    source = property(_molsetc.PathStep_source_get, _molsetc.PathStep_source_set)

# Register PathStep in _molsetc:
_molsetc.PathStep_swigregister(PathStep)

REDOX_ORB_DONOR = _molsetc.REDOX_ORB_DONOR
REDOX_ORB_ACCEPTOR = _molsetc.REDOX_ORB_ACCEPTOR
class ETCouplMod(HaCompMod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset: "MolSet"=None):
        _molsetc.ETCouplMod_swiginit(self, _molsetc.new_ETCouplMod(new_phost_mset))
    __swig_destroy__ = _molsetc.delete_ETCouplMod

    def GetQCMod(self) -> "HaQCMod *":
        return _molsetc.ETCouplMod_GetQCMod(self)

    def SetDebugLevel(self, new_debug_level: "int") -> "void":
        return _molsetc.ETCouplMod_SetDebugLevel(self, new_debug_level)

    def OnDelAtoms(self, del_atoms: "AtomContainer") -> "int":
        return _molsetc.ETCouplMod_OnDelAtoms(self, del_atoms)

    def Clear(self) -> "bool":
        return _molsetc.ETCouplMod_Clear(self)
    pathways_calc_type = property(_molsetc.ETCouplMod_pathways_calc_type_get, _molsetc.ETCouplMod_pathways_calc_type_set)

    def path_coupl_calc(self) -> "bool":
        return _molsetc.ETCouplMod_path_coupl_calc(self)

    def select_important(self, thresh: "double") -> "bool":
        return _molsetc.ETCouplMod_select_important(self, thresh)

    def calc_intermol_path_coupl(self) -> "bool":
        return _molsetc.ETCouplMod_calc_intermol_path_coupl(self)

    def InitiatePathwaysGraph(self) -> "bool":
        return _molsetc.ETCouplMod_InitiatePathwaysGraph(self)

    def CalcAtomContactCoupling(self, aptr1: "HaAtom", aptr2: "HaAtom") -> "double":
        return _molsetc.ETCouplMod_CalcAtomContactCoupling(self, aptr1, aptr2)

    def ClearPathwaysGraph(self) -> "void":
        return _molsetc.ETCouplMod_ClearPathwaysGraph(self)

    def ColorMolSurfETCoupl(self) -> "int":
        return _molsetc.ETCouplMod_ColorMolSurfETCoupl(self)
    nodes = property(_molsetc.ETCouplMod_nodes_get, _molsetc.ETCouplMod_nodes_set)
    edges = property(_molsetc.ETCouplMod_edges_get, _molsetc.ETCouplMod_edges_set)
    pathways_graph_init_flag = property(_molsetc.ETCouplMod_pathways_graph_init_flag_get, _molsetc.ETCouplMod_pathways_graph_init_flag_set)
    m_hbond_paths_flag = property(_molsetc.ETCouplMod_m_hbond_paths_flag_get, _molsetc.ETCouplMod_m_hbond_paths_flag_set)
    best_path = property(_molsetc.ETCouplMod_best_path_get, _molsetc.ETCouplMod_best_path_set)
    coupl_map = property(_molsetc.ETCouplMod_coupl_map_get, _molsetc.ETCouplMod_coupl_map_set)
    pw_nb_decay = property(_molsetc.ETCouplMod_pw_nb_decay_get, _molsetc.ETCouplMod_pw_nb_decay_set)
    pw_nb_min_dist = property(_molsetc.ETCouplMod_pw_nb_min_dist_get, _molsetc.ETCouplMod_pw_nb_min_dist_set)
    pw_hb_decay = property(_molsetc.ETCouplMod_pw_hb_decay_get, _molsetc.ETCouplMod_pw_hb_decay_set)
    pw_hb_min_dist = property(_molsetc.ETCouplMod_pw_hb_min_dist_get, _molsetc.ETCouplMod_pw_hb_min_dist_set)
    pw_ln_cov_decay = property(_molsetc.ETCouplMod_pw_ln_cov_decay_get, _molsetc.ETCouplMod_pw_ln_cov_decay_set)
    best_path_coupl = property(_molsetc.ETCouplMod_best_path_coupl_get, _molsetc.ETCouplMod_best_path_coupl_set)
    log_calc_result = property(_molsetc.ETCouplMod_log_calc_result_get, _molsetc.ETCouplMod_log_calc_result_set)
    pw_nb_decay_intermol = property(_molsetc.ETCouplMod_pw_nb_decay_intermol_get, _molsetc.ETCouplMod_pw_nb_decay_intermol_set)
    nb_dist_limit = property(_molsetc.ETCouplMod_nb_dist_limit_get, _molsetc.ETCouplMod_nb_dist_limit_set)
    rebuild_mol_coupl_map = property(_molsetc.ETCouplMod_rebuild_mol_coupl_map_get, _molsetc.ETCouplMod_rebuild_mol_coupl_map_set)
    mol1_coupl_map = property(_molsetc.ETCouplMod_mol1_coupl_map_get, _molsetc.ETCouplMod_mol1_coupl_map_set)
    mol2_coupl_map = property(_molsetc.ETCouplMod_mol2_coupl_map_get, _molsetc.ETCouplMod_mol2_coupl_map_set)

    def calc_edge_dist(self) -> "double":
        return _molsetc.ETCouplMod_calc_edge_dist(self)

    def DuttonModelCalc(self) -> "bool":
        return _molsetc.ETCouplMod_DuttonModelCalc(self)
    rho = property(_molsetc.ETCouplMod_rho_get, _molsetc.ETCouplMod_rho_set)
    beta = property(_molsetc.ETCouplMod_beta_get, _molsetc.ETCouplMod_beta_set)
    dim_less_coupling = property(_molsetc.ETCouplMod_dim_less_coupling_get, _molsetc.ETCouplMod_dim_less_coupling_set)
    max_rate = property(_molsetc.ETCouplMod_max_rate_get, _molsetc.ETCouplMod_max_rate_set)

    def CalcGFDonAccOrb(self) -> "bool":
        return _molsetc.ETCouplMod_CalcGFDonAccOrb(self)

    def CalcGFDonAccOrbHeff(self) -> "bool":
        return _molsetc.ETCouplMod_CalcGFDonAccOrbHeff(self)

    def PrintOvlpElem(self) -> "int":
        return _molsetc.ETCouplMod_PrintOvlpElem(self)

    def PrintHeffElem(self) -> "int":
        return _molsetc.ETCouplMod_PrintHeffElem(self)

    def SetDAdipoleMat(self) -> "bool":
        return _molsetc.ETCouplMod_SetDAdipoleMat(self)

    def GetDAfield(self) -> "double":
        return _molsetc.ETCouplMod_GetDAfield(self)

    def SetDAfield(self, field: "double") -> "bool":
        return _molsetc.ETCouplMod_SetDAfield(self, field)

    def SetTunEne(self, tun_ene_new: "double") -> "void":
        return _molsetc.ETCouplMod_SetTunEne(self, tun_ene_new)

    def GetTunEne(self) -> "double":
        return _molsetc.ETCouplMod_GetTunEne(self)

    def CalcHDAEneSplit(self) -> "bool":
        return _molsetc.ETCouplMod_CalcHDAEneSplit(self)

    def AddRedoxOrbFromEigVec(self, mo_idx: "HaVec_int") -> "int":
        return _molsetc.ETCouplMod_AddRedoxOrbFromEigVec(self, mo_idx)

    def GetRedoxOrbsFromFrag(self, pfrag: "MolSet") -> "int":
        return _molsetc.ETCouplMod_GetRedoxOrbsFromFrag(self, pfrag)

    def FindRedoxOrbsOvlpEigVecs(self, lbl_idx_map: "StrIntMap", ovlp_val_map: "StrDoubleMap", redox_orb_type: "REDOX_ORB_TYPE"=REDOX_ORB_DONOR) -> "bool":
        return _molsetc.ETCouplMod_FindRedoxOrbsOvlpEigVecs(self, lbl_idx_map, ovlp_val_map, redox_orb_type)

    def FindRedoxOrbSpaceOvlpEigVecs(self, lbl_idx_map: "StrIntMap", ovlp_val_map: "StrDoubleMap", eigv_space_max_ovlp_val: "HaVec_double", redox_orb_type: "REDOX_ORB_TYPE"=REDOX_ORB_DONOR) -> "bool":
        return _molsetc.ETCouplMod_FindRedoxOrbSpaceOvlpEigVecs(self, lbl_idx_map, ovlp_val_map, eigv_space_max_ovlp_val, redox_orb_type)

    def FindDonAccEigVecs(self, idx_don: "int", idx_acc: "int") -> "HaVec_int":
        return _molsetc.ETCouplMod_FindDonAccEigVecs(self, idx_don, idx_acc)

    def RotateRedoxOrb(self, rot_mat: "HaMat_double") -> "bool":
        return _molsetc.ETCouplMod_RotateRedoxOrb(self, rot_mat)

    def CreateEigVecContour(self, idx: "int", flvl: "double", grid_size: "int") -> "bool":
        return _molsetc.ETCouplMod_CreateEigVecContour(self, idx, flvl, grid_size)

    def PrintEigVecCoef(self, idx: "int") -> "bool":
        return _molsetc.ETCouplMod_PrintEigVecCoef(self, idx)

    def ScanEigEneField(self, first_eig_val: "int", last_eig_val: "int", ifield_val: "double", ffield_val: "double", step_val: "double") -> "bool":
        return _molsetc.ETCouplMod_ScanEigEneField(self, first_eig_val, last_eig_val, ifield_val, ffield_val, step_val)

    def CalcHDAfromGF(self) -> "bool":
        return _molsetc.ETCouplMod_CalcHDAfromGF(self)

    def CalcHDAPert(self, hda_coupl: "double &") -> "bool":
        return _molsetc.ETCouplMod_CalcHDAPert(self, hda_coupl)

    def CopyEigVecsFromMO(self) -> "int":
        return _molsetc.ETCouplMod_CopyEigVecsFromMO(self)

    def RecalcHeff(self) -> "bool":
        return _molsetc.ETCouplMod_RecalcHeff(self)

    def DiagHeff(self) -> "bool":
        return _molsetc.ETCouplMod_DiagHeff(self)

    def ZeroLongInter(self, cutoff: "double") -> "int":
        return _molsetc.ETCouplMod_ZeroLongInter(self, cutoff)

    def SaveHeffXml(self, file_out: "FILE *") -> "int":
        return _molsetc.ETCouplMod_SaveHeffXml(self, file_out)

    def LoadFragmHeffXml(self, file_inp: "FILE *") -> "int":
        return _molsetc.ETCouplMod_LoadFragmHeffXml(self, file_inp)

    def GetActBasOvlpMat(self) -> "HaMat_double &":
        return _molsetc.ETCouplMod_GetActBasOvlpMat(self)
    ham_trunc_type = property(_molsetc.ETCouplMod_ham_trunc_type_get, _molsetc.ETCouplMod_ham_trunc_type_set)
    heff_mat = property(_molsetc.ETCouplMod_heff_mat_get, _molsetc.ETCouplMod_heff_mat_set)
    ssl = property(_molsetc.ETCouplMod_ssl_get, _molsetc.ETCouplMod_ssl_set)
    eigv = property(_molsetc.ETCouplMod_eigv_get, _molsetc.ETCouplMod_eigv_set)
    enel = property(_molsetc.ETCouplMod_enel_get, _molsetc.ETCouplMod_enel_set)
    heff_pert_mat = property(_molsetc.ETCouplMod_heff_pert_mat_get, _molsetc.ETCouplMod_heff_pert_mat_set)
    use_pert_mat = property(_molsetc.ETCouplMod_use_pert_mat_get, _molsetc.ETCouplMod_use_pert_mat_set)
    donor_orbs = property(_molsetc.ETCouplMod_donor_orbs_get, _molsetc.ETCouplMod_donor_orbs_set)
    acc_orbs = property(_molsetc.ETCouplMod_acc_orbs_get, _molsetc.ETCouplMod_acc_orbs_set)
    ieig_don = property(_molsetc.ETCouplMod_ieig_don_get, _molsetc.ETCouplMod_ieig_don_set)
    ieig_acc = property(_molsetc.ETCouplMod_ieig_acc_get, _molsetc.ETCouplMod_ieig_acc_set)
    don_acc_gf = property(_molsetc.ETCouplMod_don_acc_gf_get, _molsetc.ETCouplMod_don_acc_gf_set)
    el_field_min = property(_molsetc.ETCouplMod_el_field_min_get, _molsetc.ETCouplMod_el_field_min_set)
    da_coupl_val = property(_molsetc.ETCouplMod_da_coupl_val_get, _molsetc.ETCouplMod_da_coupl_val_set)
    extern_field = property(_molsetc.ETCouplMod_extern_field_get, _molsetc.ETCouplMod_extern_field_set)
    DA_dipole = property(_molsetc.ETCouplMod_DA_dipole_get, _molsetc.ETCouplMod_DA_dipole_set)
    DA_field = property(_molsetc.ETCouplMod_DA_field_get, _molsetc.ETCouplMod_DA_field_set)
    set_dab_huck_inter = property(_molsetc.ETCouplMod_set_dab_huck_inter_get, _molsetc.ETCouplMod_set_dab_huck_inter_set)
    tun_ene = property(_molsetc.ETCouplMod_tun_ene_get, _molsetc.ETCouplMod_tun_ene_set)
    ptr_qc_mod = property(_molsetc.ETCouplMod_ptr_qc_mod_get, _molsetc.ETCouplMod_ptr_qc_mod_set)

    def PutSubMatToDB(self) -> "bool":
        return _molsetc.ETCouplMod_PutSubMatToDB(self)

    def GetSubMatFromDB(self) -> "bool":
        return _molsetc.ETCouplMod_GetSubMatFromDB(self)

    def PrintProtectMat(self) -> "bool":
        return _molsetc.ETCouplMod_PrintProtectMat(self)
    protect_mat = property(_molsetc.ETCouplMod_protect_mat_get, _molsetc.ETCouplMod_protect_mat_set)
    db_file_name = property(_molsetc.ETCouplMod_db_file_name_get, _molsetc.ETCouplMod_db_file_name_set)

# Register ETCouplMod in _molsetc:
_molsetc.ETCouplMod_swigregister(ETCouplMod)
BEST_PATH = cvar.BEST_PATH
COUPL_MAP = cvar.COUPL_MAP
HAM_S_DIP_TR = cvar.HAM_S_DIP_TR
HAM_TR = cvar.HAM_TR

HLM_F3D_BIN = _molsetc.HLM_F3D_BIN
HLM_F3D_FORM = _molsetc.HLM_F3D_FORM
ELPOT_DELPHI_BIN = _molsetc.ELPOT_DELPHI_BIN
class ElectrostMod(HaCompMod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.ElectrostMod_swiginit(self, _molsetc.new_ElectrostMod(*args))
    __swig_destroy__ = _molsetc.delete_ElectrostMod

    def clear(self) -> "void":
        return _molsetc.ElectrostMod_clear(self)

    def SetStdParam(self) -> "bool":
        return _molsetc.ElectrostMod_SetStdParam(self)

    def SaveParamFile(self) -> "bool":
        return _molsetc.ElectrostMod_SaveParamFile(self)

    def SaveChargeFile(self) -> "bool":
        return _molsetc.ElectrostMod_SaveChargeFile(self)

    def SaveRadiusFile(self) -> "bool":
        return _molsetc.ElectrostMod_SaveRadiusFile(self)

    def SaveCoordFile(self) -> "bool":
        return _molsetc.ElectrostMod_SaveCoordFile(self)

    def RunDelphi(self, rmode: "RunMode") -> "bool":
        return _molsetc.ElectrostMod_RunDelphi(self, rmode)

    def run(self, rmode: "RunMode"=RUN_FOREGROUND) -> "bool":
        return _molsetc.ElectrostMod_run(self, rmode)

    def CalcETReorgEne(self) -> "double":
        return _molsetc.ElectrostMod_CalcETReorgEne(self)

    def CalcAltStatePK(self, alt_res_st: "AltChemState", active_atoms: "AtomGroup"=None) -> "bool":
        return _molsetc.ElectrostMod_CalcAltStatePK(self, alt_res_st, active_atoms)

    def CalcRedoxPotShft(self) -> "bool":
        return _molsetc.ElectrostMod_CalcRedoxPotShft(self)

    def CalcAvgPotOn(self, ptlist: "PointContainer") -> "double":
        return _molsetc.ElectrostMod_CalcAvgPotOn(self, ptlist)

    def ReadTotEne(self, *args) -> "bool":
        return _molsetc.ElectrostMod_ReadTotEne(self, *args)

    def LoadElPotFromFile(self, format: "int"=HLM_F3D_BIN) -> "int":
        return _molsetc.ElectrostMod_LoadElPotFromFile(self, format)

    def BuildPotIsoSurface(self) -> "bool":
        return _molsetc.ElectrostMod_BuildPotIsoSurface(self)

    def CalcIndCharge(self) -> "bool":
        return _molsetc.ElectrostMod_CalcIndCharge(self)

    def PlotIndCharge(self) -> "bool":
        return _molsetc.ElectrostMod_PlotIndCharge(self)

    def FillChargeMap(self) -> "bool":
        return _molsetc.ElectrostMod_FillChargeMap(self)

    def BuildPotVdwDots(self) -> "bool":
        return _molsetc.ElectrostMod_BuildPotVdwDots(self)

    def ColorMolSurfElPot(self) -> "bool":
        return _molsetc.ElectrostMod_ColorMolSurfElPot(self)

    def ColorDotStruct(self, dotstruct: "DotStruct") -> "bool":
        return _molsetc.ElectrostMod_ColorDotStruct(self, dotstruct)

    def AddBoundaryAtoms(self) -> "bool":
        return _molsetc.ElectrostMod_AddBoundaryAtoms(self)
    min_coord = property(_molsetc.ElectrostMod_min_coord_get, _molsetc.ElectrostMod_min_coord_set)
    max_coord = property(_molsetc.ElectrostMod_max_coord_get, _molsetc.ElectrostMod_max_coord_set)

    def SetBoundaryAtoms(self, xmin: "double const", ymin: "double const", zmin: "double const", xmax: "double const", ymax: "double const", zmax: "double const") -> "bool":
        return _molsetc.ElectrostMod_SetBoundaryAtoms(self, xmin, ymin, zmin, xmax, ymax, zmax)

    def ClearBoundaryAtoms(self) -> "bool":
        return _molsetc.ElectrostMod_ClearBoundaryAtoms(self)
    param_file_title = property(_molsetc.ElectrostMod_param_file_title_get, _molsetc.ElectrostMod_param_file_title_set)
    nx = property(_molsetc.ElectrostMod_nx_get, _molsetc.ElectrostMod_nx_set)
    ny = property(_molsetc.ElectrostMod_ny_get, _molsetc.ElectrostMod_ny_set)
    nz = property(_molsetc.ElectrostMod_nz_get, _molsetc.ElectrostMod_nz_set)
    perfil = property(_molsetc.ElectrostMod_perfil_get, _molsetc.ElectrostMod_perfil_set)
    offset = property(_molsetc.ElectrostMod_offset_get, _molsetc.ElectrostMod_offset_set)
    epsi = property(_molsetc.ElectrostMod_epsi_get, _molsetc.ElectrostMod_epsi_set)
    epsout = property(_molsetc.ElectrostMod_epsout_get, _molsetc.ElectrostMod_epsout_set)
    rionst = property(_molsetc.ElectrostMod_rionst_get, _molsetc.ElectrostMod_rionst_set)
    exrad = property(_molsetc.ElectrostMod_exrad_get, _molsetc.ElectrostMod_exrad_set)
    radprb = property(_molsetc.ElectrostMod_radprb_get, _molsetc.ElectrostMod_radprb_set)
    boundary = property(_molsetc.ElectrostMod_boundary_get, _molsetc.ElectrostMod_boundary_set)
    iper = property(_molsetc.ElectrostMod_iper_get, _molsetc.ElectrostMod_iper_set)
    nlit = property(_molsetc.ElectrostMod_nlit_get, _molsetc.ElectrostMod_nlit_set)
    nnit = property(_molsetc.ElectrostMod_nnit_get, _molsetc.ElectrostMod_nnit_set)
    iconc = property(_molsetc.ElectrostMod_iconc_get, _molsetc.ElectrostMod_iconc_set)
    ibios = property(_molsetc.ElectrostMod_ibios_get, _molsetc.ElectrostMod_ibios_set)
    isite = property(_molsetc.ElectrostMod_isite_get, _molsetc.ElectrostMod_isite_set)
    iatout = property(_molsetc.ElectrostMod_iatout_get, _molsetc.ElectrostMod_iatout_set)
    toplbl = property(_molsetc.ElectrostMod_toplbl_get, _molsetc.ElectrostMod_toplbl_set)
    isph = property(_molsetc.ElectrostMod_isph_get, _molsetc.ElectrostMod_isph_set)
    ipdbwrt = property(_molsetc.ElectrostMod_ipdbwrt_get, _molsetc.ElectrostMod_ipdbwrt_set)
    ifrcwrt = property(_molsetc.ElectrostMod_ifrcwrt_get, _molsetc.ElectrostMod_ifrcwrt_set)
    enc = property(_molsetc.ElectrostMod_enc_get, _molsetc.ElectrostMod_enc_set)
    igraph = property(_molsetc.ElectrostMod_igraph_get, _molsetc.ElectrostMod_igraph_set)
    ipotent = property(_molsetc.ElectrostMod_ipotent_get, _molsetc.ElectrostMod_ipotent_set)
    icon1 = property(_molsetc.ElectrostMod_icon1_get, _molsetc.ElectrostMod_icon1_set)
    icon2 = property(_molsetc.ElectrostMod_icon2_get, _molsetc.ElectrostMod_icon2_set)
    imem = property(_molsetc.ElectrostMod_imem_get, _molsetc.ElectrostMod_imem_set)
    phiwrt = property(_molsetc.ElectrostMod_phiwrt_get, _molsetc.ElectrostMod_phiwrt_set)
    ihs = property(_molsetc.ElectrostMod_ihs_get, _molsetc.ElectrostMod_ihs_set)
    isen = property(_molsetc.ElectrostMod_isen_get, _molsetc.ElectrostMod_isen_set)
    ish = property(_molsetc.ElectrostMod_ish_get, _molsetc.ElectrostMod_ish_set)
    elpot_low_val = property(_molsetc.ElectrostMod_elpot_low_val_get, _molsetc.ElectrostMod_elpot_low_val_set)
    elpot_high_val = property(_molsetc.ElectrostMod_elpot_high_val_get, _molsetc.ElectrostMod_elpot_high_val_set)
    param_file_name = property(_molsetc.ElectrostMod_param_file_name_get, _molsetc.ElectrostMod_param_file_name_set)
    charge_file_name = property(_molsetc.ElectrostMod_charge_file_name_get, _molsetc.ElectrostMod_charge_file_name_set)
    radius_file_name = property(_molsetc.ElectrostMod_radius_file_name_get, _molsetc.ElectrostMod_radius_file_name_set)
    coord_file_name = property(_molsetc.ElectrostMod_coord_file_name_get, _molsetc.ElectrostMod_coord_file_name_set)
    log_file_name = property(_molsetc.ElectrostMod_log_file_name_get, _molsetc.ElectrostMod_log_file_name_set)
    elfield_fname = property(_molsetc.ElectrostMod_elfield_fname_get, _molsetc.ElectrostMod_elfield_fname_set)
    pot_isolevel = property(_molsetc.ElectrostMod_pot_isolevel_get, _molsetc.ElectrostMod_pot_isolevel_set)
    dots_number = property(_molsetc.ElectrostMod_dots_number_get, _molsetc.ElectrostMod_dots_number_set)
    tot_ene = property(_molsetc.ElectrostMod_tot_ene_get, _molsetc.ElectrostMod_tot_ene_set)
    el_pot_map = property(_molsetc.ElectrostMod_el_pot_map_get, _molsetc.ElectrostMod_el_pot_map_set)
    Surfaces = property(_molsetc.ElectrostMod_Surfaces_get, _molsetc.ElectrostMod_Surfaces_set)
    fill_charge_mode = property(_molsetc.ElectrostMod_fill_charge_mode_get, _molsetc.ElectrostMod_fill_charge_mode_set)
    charge_map = property(_molsetc.ElectrostMod_charge_map_get, _molsetc.ElectrostMod_charge_map_set)
    ind_charge_map = property(_molsetc.ElectrostMod_ind_charge_map_get, _molsetc.ElectrostMod_ind_charge_map_set)
    ConcMap0 = property(_molsetc.ElectrostMod_ConcMap0_get, _molsetc.ElectrostMod_ConcMap0_set)
    ConcMap1 = property(_molsetc.ElectrostMod_ConcMap1_get, _molsetc.ElectrostMod_ConcMap1_set)
    rdx_shft_mode = property(_molsetc.ElectrostMod_rdx_shft_mode_get, _molsetc.ElectrostMod_rdx_shft_mode_set)
    rdx_shift = property(_molsetc.ElectrostMod_rdx_shift_get, _molsetc.ElectrostMod_rdx_shift_set)
    ddG = property(_molsetc.ElectrostMod_ddG_get, _molsetc.ElectrostMod_ddG_set)
    delta_pK = property(_molsetc.ElectrostMod_delta_pK_get, _molsetc.ElectrostMod_delta_pK_set)
    axx_ene = property(_molsetc.ElectrostMod_axx_ene_get, _molsetc.ElectrostMod_axx_ene_set)
    ActiveElectrMod = property(_molsetc.ElectrostMod_ActiveElectrMod_get, _molsetc.ElectrostMod_ActiveElectrMod_set)

# Register ElectrostMod in _molsetc:
_molsetc.ElectrostMod_swigregister(ElectrostMod)
RDX_SHFT_VS_VAC = cvar.RDX_SHFT_VS_VAC
RDX_SHFT_VS_SOLV = cvar.RDX_SHFT_VS_SOLV
FILL_CHARGE_PROD_REV_DIST = cvar.FILL_CHARGE_PROD_REV_DIST
FILL_CHARGE_SUM_REV_DIST = cvar.FILL_CHARGE_SUM_REV_DIST


def openpm_(pnx_f: "int *", pny_f: "int *", pnz_f: "int *", pxmin_f: "freal *", pxmax_f: "freal *", pymin_f: "freal *", ymax_f: "freal *", zmin_f: "freal *", zmax_f: "freal *", fname: "char *", fnmlen: "int") -> "void":
    return _molsetc.openpm_(pnx_f, pny_f, pnz_f, pxmin_f, pxmax_f, pymin_f, ymax_f, zmin_f, zmax_f, fname, fnmlen)

def loadpm_(pnx_f: "int *", pny_f: "int *", pnz_f: "int *", fmap: "freal *") -> "void":
    return _molsetc.loadpm_(pnx_f, pny_f, pnz_f, fmap)
class HaAtomParmEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cName: "char const *", _dbl0: "double", _dbl1: "double"):
        _molsetc.HaAtomParmEntry_swiginit(self, _molsetc.new_HaAtomParmEntry(cName, _dbl0, _dbl1))
    __swig_destroy__ = _molsetc.delete_HaAtomParmEntry

    def SetValues(self, _dbl0: "double", _dbl1: "double") -> "void":
        return _molsetc.HaAtomParmEntry_SetValues(self, _dbl0, _dbl1)
    dbl0 = property(_molsetc.HaAtomParmEntry_dbl0_get, _molsetc.HaAtomParmEntry_dbl0_set)
    dbl1 = property(_molsetc.HaAtomParmEntry_dbl1_get, _molsetc.HaAtomParmEntry_dbl1_set)
    Name = property(_molsetc.HaAtomParmEntry_Name_get, _molsetc.HaAtomParmEntry_Name_set)

# Register HaAtomParmEntry in _molsetc:
_molsetc.HaAtomParmEntry_swigregister(HaAtomParmEntry)

class HaResParmEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cName: "char const *", cMod: "char const *"):
        _molsetc.HaResParmEntry_swiginit(self, _molsetc.new_HaResParmEntry(cName, cMod))
    __swig_destroy__ = _molsetc.delete_HaResParmEntry

    def SetAtom(self, cName: "char const *", _dbl0: "double", _dbl1: "double") -> "HaAtomParmEntry *":
        return _molsetc.HaResParmEntry_SetAtom(self, cName, _dbl0, _dbl1)

    def GetAtom(self, cName: "char const *") -> "HaAtomParmEntry *":
        return _molsetc.HaResParmEntry_GetAtom(self, cName)

    def GetAtomListNum(self, cName: "char const *") -> "int":
        return _molsetc.HaResParmEntry_GetAtomListNum(self, cName)

    def DelAtom(self, cName: "char const *") -> "void":
        return _molsetc.HaResParmEntry_DelAtom(self, cName)

    def CopyAtomsFromRes(self, CpRes: "HaResParmEntry") -> "void":
        return _molsetc.HaResParmEntry_CopyAtomsFromRes(self, CpRes)

    def PrintInfo(self) -> "void":
        return _molsetc.HaResParmEntry_PrintInfo(self)

    def PrintSumDbl0(self) -> "void":
        return _molsetc.HaResParmEntry_PrintSumDbl0(self)
    Atms = property(_molsetc.HaResParmEntry_Atms_get, _molsetc.HaResParmEntry_Atms_set)
    Name = property(_molsetc.HaResParmEntry_Name_get, _molsetc.HaResParmEntry_Name_set)
    Mod = property(_molsetc.HaResParmEntry_Mod_get, _molsetc.HaResParmEntry_Mod_set)

# Register HaResParmEntry in _molsetc:
_molsetc.HaResParmEntry_swigregister(HaResParmEntry)

class HaAtomsParmFF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cName: "char const *", cRef: "char const *", cNotes: "char const *"):
        _molsetc.HaAtomsParmFF_swiginit(self, _molsetc.new_HaAtomsParmFF(cName, cRef, cNotes))
    __swig_destroy__ = _molsetc.delete_HaAtomsParmFF

    def NewRes(self, cName: "char const *", cMod: "char const *") -> "HaResParmEntry *":
        return _molsetc.HaAtomsParmFF_NewRes(self, cName, cMod)

    def SetRes(self, cName: "char const *", cMod: "char const *") -> "HaResParmEntry *":
        return _molsetc.HaAtomsParmFF_SetRes(self, cName, cMod)

    def GetRes(self, cName: "char const *", cMod: "char const *") -> "HaResParmEntry *":
        return _molsetc.HaAtomsParmFF_GetRes(self, cName, cMod)

    def CopyRes(self, cName: "char const *", cMod: "char const *", cNameFrom: "char const *", cModFrom: "char const *") -> "HaResParmEntry *":
        return _molsetc.HaAtomsParmFF_CopyRes(self, cName, cMod, cNameFrom, cModFrom)

    def PrintFFInfo(self) -> "void":
        return _molsetc.HaAtomsParmFF_PrintFFInfo(self)

    def PrintSumDbl0(self) -> "void":
        return _molsetc.HaAtomsParmFF_PrintSumDbl0(self)

    def PrintEntries(self) -> "void":
        return _molsetc.HaAtomsParmFF_PrintEntries(self)
    Ress = property(_molsetc.HaAtomsParmFF_Ress_get, _molsetc.HaAtomsParmFF_Ress_set)
    Name = property(_molsetc.HaAtomsParmFF_Name_get, _molsetc.HaAtomsParmFF_Name_set)
    Ref = property(_molsetc.HaAtomsParmFF_Ref_get, _molsetc.HaAtomsParmFF_Ref_set)
    Notes = property(_molsetc.HaAtomsParmFF_Notes_get, _molsetc.HaAtomsParmFF_Notes_set)

# Register HaAtomsParmFF in _molsetc:
_molsetc.HaAtomsParmFF_swigregister(HaAtomsParmFF)

class HaAtomsParmDB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cName: "char const *"):
        _molsetc.HaAtomsParmDB_swiginit(self, _molsetc.new_HaAtomsParmDB(cName))
    __swig_destroy__ = _molsetc.delete_HaAtomsParmDB

    def NewFF(self, cName: "char const *", cRef: "char const *", cNotes: "char const *") -> "HaAtomsParmFF *":
        return _molsetc.HaAtomsParmDB_NewFF(self, cName, cRef, cNotes)

    def GetFF(self, cName: "char const *") -> "HaAtomsParmFF *":
        return _molsetc.HaAtomsParmDB_GetFF(self, cName)

    def NumFF(self) -> "int":
        return _molsetc.HaAtomsParmDB_NumFF(self)

    def GetFFbyNum(self, i: "int") -> "HaAtomsParmFF *":
        return _molsetc.HaAtomsParmDB_GetFFbyNum(self, i)

    def SetAtomsParam(self, pmset: "MolSet", FFName: "char const *") -> "void":
        return _molsetc.HaAtomsParmDB_SetAtomsParam(self, pmset, FFName)

    def CompareAtomNamesInFFs(self, cName: "char const *", cNameRef: "char const *") -> "void":
        return _molsetc.HaAtomsParmDB_CompareAtomNamesInFFs(self, cName, cNameRef)

    def PrintSideToSideFFs(self, cName: "char const *", cNameRef: "char const *") -> "void":
        return _molsetc.HaAtomsParmDB_PrintSideToSideFFs(self, cName, cNameRef)

    def PrintFFsInfo(self) -> "void":
        return _molsetc.HaAtomsParmDB_PrintFFsInfo(self)
    FFs = property(_molsetc.HaAtomsParmDB_FFs_get, _molsetc.HaAtomsParmDB_FFs_set)
    Name = property(_molsetc.HaAtomsParmDB_Name_get, _molsetc.HaAtomsParmDB_Name_set)

# Register HaAtomsParmDB in _molsetc:
_molsetc.HaAtomsParmDB_swigregister(HaAtomsParmDB)


def GetQRDB() -> "HaAtomsParmDB *":
    return _molsetc.GetQRDB()

def DeleteQRDB() -> "void":
    return _molsetc.DeleteQRDB()
class pKaCalcMod(HaCompMod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset: "MolSet"=None):
        _molsetc.pKaCalcMod_swiginit(self, _molsetc.new_pKaCalcMod(new_phost_mset))
    __swig_destroy__ = _molsetc.delete_pKaCalcMod

    def PrintResWithAltProtState(self) -> "int":
        return _molsetc.pKaCalcMod_PrintResWithAltProtState(self)

    def PrintResults(self) -> "int":
        return _molsetc.pKaCalcMod_PrintResults(self)

    def PrintPopulation(self) -> "int":
        return _molsetc.pKaCalcMod_PrintPopulation(self)

    def PrintPop4Homooligamer(self, PrintOnlyIfAltPopMoreThenSmth: "bool"=False, Smth: "float"=0.1) -> "int":
        return _molsetc.pKaCalcMod_PrintPop4Homooligamer(self, PrintOnlyIfAltPopMoreThenSmth, Smth)

    def CalcpKaUsingElectrostMod(self) -> "int":
        return _molsetc.pKaCalcMod_CalcpKaUsingElectrostMod(self)

    def CalcpKaUsingElMod(self) -> "int":
        return _molsetc.pKaCalcMod_CalcpKaUsingElMod(self)

    def RunCalcUsingElectrostMod(self) -> "int":
        return _molsetc.pKaCalcMod_RunCalcUsingElectrostMod(self)

    def RunCalcUsingElMod(self) -> "int":
        return _molsetc.pKaCalcMod_RunCalcUsingElMod(self)

    def MakeAltStList(self) -> "int":
        return _molsetc.pKaCalcMod_MakeAltStList(self)

    def ReadCalculatedEnergies(self, filename: "char const *") -> "int":
        return _molsetc.pKaCalcMod_ReadCalculatedEnergies(self, filename)

    def CalcIntrpKa(self) -> "int":
        return _molsetc.pKaCalcMod_CalcIntrpKa(self)

    def CalcpKaWithInteraction(self) -> "int":
        return _molsetc.pKaCalcMod_CalcpKaWithInteraction(self)

    def WritepKaCalcModToFile(self, filename: "char const *") -> "int":
        return _molsetc.pKaCalcMod_WritepKaCalcModToFile(self, filename)

    def ReadpKaCalcModFromFile(self, filename: "char const *") -> "int":
        return _molsetc.pKaCalcMod_ReadpKaCalcModFromFile(self, filename)

    def WritepKaCalcModToXmlElement(self, RootElt: "TiXmlElement") -> "int":
        return _molsetc.pKaCalcMod_WritepKaCalcModToXmlElement(self, RootElt)

    def ReadpKaCalcModFromXmlElement(self, RootElt: "TiXmlElement") -> "int":
        return _molsetc.pKaCalcMod_ReadpKaCalcModFromXmlElement(self, RootElt)

    def SetAltSt4ResInHomoolgmr(self, ResNum: "int") -> "int":
        return _molsetc.pKaCalcMod_SetAltSt4ResInHomoolgmr(self, ResNum)
    NumberOfAltStates = property(_molsetc.pKaCalcMod_NumberOfAltStates_get, _molsetc.pKaCalcMod_NumberOfAltStates_set)
    E1 = property(_molsetc.pKaCalcMod_E1_get, _molsetc.pKaCalcMod_E1_set)
    E2 = property(_molsetc.pKaCalcMod_E2_get, _molsetc.pKaCalcMod_E2_set)
    E3 = property(_molsetc.pKaCalcMod_E3_get, _molsetc.pKaCalcMod_E3_set)
    E4 = property(_molsetc.pKaCalcMod_E4_get, _molsetc.pKaCalcMod_E4_set)
    ddG = property(_molsetc.pKaCalcMod_ddG_get, _molsetc.pKaCalcMod_ddG_set)
    pKa = property(_molsetc.pKaCalcMod_pKa_get, _molsetc.pKaCalcMod_pKa_set)
    pKaFromPop = property(_molsetc.pKaCalcMod_pKaFromPop_get, _molsetc.pKaCalcMod_pKaFromPop_set)
    pKaIntr = property(_molsetc.pKaCalcMod_pKaIntr_get, _molsetc.pKaCalcMod_pKaIntr_set)
    pKaStd = property(_molsetc.pKaCalcMod_pKaStd_get, _molsetc.pKaCalcMod_pKaStd_set)
    dpKa = property(_molsetc.pKaCalcMod_dpKa_get, _molsetc.pKaCalcMod_dpKa_set)
    inter_mat = property(_molsetc.pKaCalcMod_inter_mat_get, _molsetc.pKaCalcMod_inter_mat_set)
    E1done = property(_molsetc.pKaCalcMod_E1done_get, _molsetc.pKaCalcMod_E1done_set)
    E2done = property(_molsetc.pKaCalcMod_E2done_get, _molsetc.pKaCalcMod_E2done_set)
    E3done = property(_molsetc.pKaCalcMod_E3done_get, _molsetc.pKaCalcMod_E3done_set)
    E4done = property(_molsetc.pKaCalcMod_E4done_get, _molsetc.pKaCalcMod_E4done_set)
    inter_mat_done = property(_molsetc.pKaCalcMod_inter_mat_done_get, _molsetc.pKaCalcMod_inter_mat_done_set)
    Pop = property(_molsetc.pKaCalcMod_Pop_get, _molsetc.pKaCalcMod_Pop_set)
    pHmin = property(_molsetc.pKaCalcMod_pHmin_get, _molsetc.pKaCalcMod_pHmin_set)
    pHmax = property(_molsetc.pKaCalcMod_pHmax_get, _molsetc.pKaCalcMod_pHmax_set)
    pHstep = property(_molsetc.pKaCalcMod_pHstep_get, _molsetc.pKaCalcMod_pHstep_set)
    pKaCalcMethod = property(_molsetc.pKaCalcMod_pKaCalcMethod_get, _molsetc.pKaCalcMod_pKaCalcMethod_set)
    SCF_MULTI_SITE_CALC = _molsetc.pKaCalcMod_SCF_MULTI_SITE_CALC
    MC_MULTI_SITE_CALC = _molsetc.pKaCalcMod_MC_MULTI_SITE_CALC
    pKaCalcMethodStr = property(_molsetc.pKaCalcMod_pKaCalcMethodStr_get, _molsetc.pKaCalcMod_pKaCalcMethodStr_set)
    MC_PKA_CALC_N_mc_cyc = property(_molsetc.pKaCalcMod_MC_PKA_CALC_N_mc_cyc_get, _molsetc.pKaCalcMod_MC_PKA_CALC_N_mc_cyc_set)
    SCF_PKA_CALC_max_iter = property(_molsetc.pKaCalcMod_SCF_PKA_CALC_max_iter_get, _molsetc.pKaCalcMod_SCF_PKA_CALC_max_iter_set)
    SCF_PKA_CALC_pop_err_max = property(_molsetc.pKaCalcMod_SCF_PKA_CALC_pop_err_max_get, _molsetc.pKaCalcMod_SCF_PKA_CALC_pop_err_max_set)
    SaveIntermediatePotNNI = property(_molsetc.pKaCalcMod_SaveIntermediatePotNNI_get, _molsetc.pKaCalcMod_SaveIntermediatePotNNI_set)
    SaveIntermediateResults = property(_molsetc.pKaCalcMod_SaveIntermediateResults_get, _molsetc.pKaCalcMod_SaveIntermediateResults_set)

# Register pKaCalcMod in _molsetc:
_molsetc.pKaCalcMod_swigregister(pKaCalcMod)

class PNPMod(HaCompMod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset: "MolSet"=None):
        _molsetc.PNPMod_swiginit(self, _molsetc.new_PNPMod(new_phost_mset))
    __swig_destroy__ = _molsetc.delete_PNPMod

    def SetNIonsTypes(self, m_NIonsTypes: "int") -> "int":
        return _molsetc.PNPMod_SetNIonsTypes(self, m_NIonsTypes)

    def SetIonName(self, ion: "int", name: "char const *") -> "int":
        return _molsetc.PNPMod_SetIonName(self, ion, name)

    def GetIonName(self, ion: "int") -> "char const *":
        return _molsetc.PNPMod_GetIonName(self, ion)

    def PrintLJAB(self) -> "int":
        return _molsetc.PNPMod_PrintLJAB(self)

    def SavePABFile(self, filename: "char const *") -> "int":
        return _molsetc.PNPMod_SavePABFile(self, filename)

    def ReadAMBERFF(self, filename: "char const *") -> "int":
        return _molsetc.PNPMod_ReadAMBERFF(self, filename)

    def ReadAMBER94FF(self) -> "int":
        return _molsetc.PNPMod_ReadAMBER94FF(self)

    def GetAtomTypeNumber(self, atomname: "std::string") -> "int":
        return _molsetc.PNPMod_GetAtomTypeNumber(self, atomname)

    def GetHalfSigma(self, atomname: "std::string") -> "double":
        return _molsetc.PNPMod_GetHalfSigma(self, atomname)

    def GetFourEpsilon(self, atomname: "std::string") -> "double":
        return _molsetc.PNPMod_GetFourEpsilon(self, atomname)

    def SavePREFile(self, filename: "char const *") -> "int":
        return _molsetc.PNPMod_SavePREFile(self, filename)

    def SavePREFreeFile(self, filename: "char const *") -> "int":
        return _molsetc.PNPMod_SavePREFreeFile(self, filename)

    def SetLJABfromAMBERFF(self) -> "int":
        return _molsetc.PNPMod_SetLJABfromAMBERFF(self)
    AtomTypesDB = property(_molsetc.PNPMod_AtomTypesDB_get, _molsetc.PNPMod_AtomTypesDB_set)
    HalfSigmaDB = property(_molsetc.PNPMod_HalfSigmaDB_get, _molsetc.PNPMod_HalfSigmaDB_set)
    FourEpsilonDB = property(_molsetc.PNPMod_FourEpsilonDB_get, _molsetc.PNPMod_FourEpsilonDB_set)

    def SetLJABfromOPLS(self) -> "int":
        return _molsetc.PNPMod_SetLJABfromOPLS(self)

    def ReadOPLSFF(self) -> "int":
        return _molsetc.PNPMod_ReadOPLSFF(self)

    def PrintOPLSLJSigmaEpsilon(self) -> "int":
        return _molsetc.PNPMod_PrintOPLSLJSigmaEpsilon(self)

    def PrintOPLSLJAB(self) -> "int":
        return _molsetc.PNPMod_PrintOPLSLJAB(self)

    def SaveIER(self, filename: "char const *", OnlyHeavyAtoms: "bool"=True) -> "int":
        return _molsetc.PNPMod_SaveIER(self, filename, OnlyHeavyAtoms)

    def ReadIER(self, filename: "char const *", AddToDB: "bool") -> "int":
        return _molsetc.PNPMod_ReadIER(self, filename, AddToDB)

    def GetIER(self, aptr: "HaAtom", rK: "double *", rCl: "double *", OnlyHeavyAtoms: "bool") -> "int":
        return _molsetc.PNPMod_GetIER(self, aptr, rK, rCl, OnlyHeavyAtoms)

    def GetResNumAtIERDB(self, ResName: "std::string *") -> "int":
        return _molsetc.PNPMod_GetResNumAtIERDB(self, ResName)

    def GetAtmNumOfResAtIERDB(self, myres: "int", AtmName: "std::string *") -> "int":
        return _molsetc.PNPMod_GetAtmNumOfResAtIERDB(self, myres, AtmName)
    IERResNames = property(_molsetc.PNPMod_IERResNames_get, _molsetc.PNPMod_IERResNames_set)
    IERAtomName = property(_molsetc.PNPMod_IERAtomName_get, _molsetc.PNPMod_IERAtomName_set)
    IERRadiusK = property(_molsetc.PNPMod_IERRadiusK_get, _molsetc.PNPMod_IERRadiusK_set)
    IERRadiusCl = property(_molsetc.PNPMod_IERRadiusCl_get, _molsetc.PNPMod_IERRadiusCl_set)

    def SavePAN(self, filename: "char const *", OnlyHeavyAtoms: "bool"=True) -> "int":
        return _molsetc.PNPMod_SavePAN(self, filename, OnlyHeavyAtoms)

    def AssignPAN(self, OnlyHeavyAtoms: "bool"=True) -> "int":
        return _molsetc.PNPMod_AssignPAN(self, OnlyHeavyAtoms)

    def ReadPANDB(self, filename: "char const *", AddToDB: "bool") -> "int":
        return _molsetc.PNPMod_ReadPANDB(self, filename, AddToDB)

    def GetSR_AN(self, aptr: "HaAtom", AK: "double *", NK: "double *", ACl: "double *", NCl: "double *", OnlyHeavyAtoms: "bool") -> "int":
        return _molsetc.PNPMod_GetSR_AN(self, aptr, AK, NK, ACl, NCl, OnlyHeavyAtoms)

    def GetResNumAtSR_AN_DB(self, ResName: "std::string *") -> "int":
        return _molsetc.PNPMod_GetResNumAtSR_AN_DB(self, ResName)

    def GetAtmNumOfResAtSR_AN_DB(self, myres: "int", AtmName: "std::string *") -> "int":
        return _molsetc.PNPMod_GetAtmNumOfResAtSR_AN_DB(self, myres, AtmName)
    SR_AN_ResNames = property(_molsetc.PNPMod_SR_AN_ResNames_get, _molsetc.PNPMod_SR_AN_ResNames_set)
    SR_AN_AtomName = property(_molsetc.PNPMod_SR_AN_AtomName_get, _molsetc.PNPMod_SR_AN_AtomName_set)
    SR_A_K = property(_molsetc.PNPMod_SR_A_K_get, _molsetc.PNPMod_SR_A_K_set)
    SR_A_Cl = property(_molsetc.PNPMod_SR_A_Cl_get, _molsetc.PNPMod_SR_A_Cl_set)
    SR_N_K = property(_molsetc.PNPMod_SR_N_K_get, _molsetc.PNPMod_SR_N_K_set)
    SR_N_Cl = property(_molsetc.PNPMod_SR_N_Cl_get, _molsetc.PNPMod_SR_N_Cl_set)
    mSR_A_K = property(_molsetc.PNPMod_mSR_A_K_get, _molsetc.PNPMod_mSR_A_K_set)
    mSR_A_Cl = property(_molsetc.PNPMod_mSR_A_Cl_get, _molsetc.PNPMod_mSR_A_Cl_set)
    mSR_N_K = property(_molsetc.PNPMod_mSR_N_K_get, _molsetc.PNPMod_mSR_N_K_set)
    mSR_N_Cl = property(_molsetc.PNPMod_mSR_N_Cl_get, _molsetc.PNPMod_mSR_N_Cl_set)
    m_ContWorld = property(_molsetc.PNPMod_m_ContWorld_get, _molsetc.PNPMod_m_ContWorld_set)

    def RunPNPSFromString(self, string: "char const *") -> "int":
        return _molsetc.PNPMod_RunPNPSFromString(self, string)

# Register PNPMod in _molsetc:
_molsetc.PNPMod_swigregister(PNPMod)

class APBSMod(HaCompMod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset: "MolSet"=None):
        _molsetc.APBSMod_swiginit(self, _molsetc.new_APBSMod(new_phost_mset))
    __swig_destroy__ = _molsetc.delete_APBSMod
    E = property(_molsetc.APBSMod_E_get, _molsetc.APBSMod_E_set)
    nx = property(_molsetc.APBSMod_nx_get, _molsetc.APBSMod_nx_set)
    ny = property(_molsetc.APBSMod_ny_get, _molsetc.APBSMod_ny_set)
    nz = property(_molsetc.APBSMod_nz_get, _molsetc.APBSMod_nz_set)
    GridScale = property(_molsetc.APBSMod_GridScale_get, _molsetc.APBSMod_GridScale_set)
    epsi = property(_molsetc.APBSMod_epsi_get, _molsetc.APBSMod_epsi_set)
    epsout = property(_molsetc.APBSMod_epsout_get, _molsetc.APBSMod_epsout_set)
    rionst = property(_molsetc.APBSMod_rionst_get, _molsetc.APBSMod_rionst_set)
    exrad = property(_molsetc.APBSMod_exrad_get, _molsetc.APBSMod_exrad_set)
    radprb = property(_molsetc.APBSMod_radprb_get, _molsetc.APBSMod_radprb_set)
    boundary = property(_molsetc.APBSMod_boundary_get, _molsetc.APBSMod_boundary_set)
    iper = property(_molsetc.APBSMod_iper_get, _molsetc.APBSMod_iper_set)
    nlit = property(_molsetc.APBSMod_nlit_get, _molsetc.APBSMod_nlit_set)
    nnit = property(_molsetc.APBSMod_nnit_get, _molsetc.APBSMod_nnit_set)
    chgm = property(_molsetc.APBSMod_chgm_get, _molsetc.APBSMod_chgm_set)
    bcfl = property(_molsetc.APBSMod_bcfl_get, _molsetc.APBSMod_bcfl_set)
    PBEType = property(_molsetc.APBSMod_PBEType_get, _molsetc.APBSMod_PBEType_set)
    d = property(_molsetc.APBSMod_d_get, _molsetc.APBSMod_d_set)
    nlev = property(_molsetc.APBSMod_nlev_get, _molsetc.APBSMod_nlev_set)

    def Run(self) -> "int":
        return _molsetc.APBSMod_Run(self)

# Register APBSMod in _molsetc:
_molsetc.APBSMod_swigregister(APBSMod)

class HaGaussMod(HaCompMod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset: "MolSet"):
        _molsetc.HaGaussMod_swiginit(self, _molsetc.new_HaGaussMod(new_phost_mset))
    __swig_destroy__ = _molsetc.delete_HaGaussMod

    def SetStdFileNames(self) -> "void":
        return _molsetc.HaGaussMod_SetStdFileNames(self)

    def SetStdJobFlags(self) -> "void":
        return _molsetc.HaGaussMod_SetStdJobFlags(self)

    def SaveInpFile(self) -> "bool":
        return _molsetc.HaGaussMod_SaveInpFile(self)

    def LoadOutput(self) -> "int":
        return _molsetc.HaGaussMod_LoadOutput(self)

    def LoadOutFile(self, out_fname: "std::string const &") -> "int":
        return _molsetc.HaGaussMod_LoadOutFile(self, out_fname)

    def LoadOutFromStream(self, _is: "istream") -> "int":
        return _molsetc.HaGaussMod_LoadOutFromStream(self, _is)

    def LoadOutSummary(self, summary_str: "std::string") -> "int":
        return _molsetc.HaGaussMod_LoadOutSummary(self, summary_str)

    def Run(self, popt: "RunOptions"=None) -> "int":
        return _molsetc.HaGaussMod_Run(self, popt)

    def RunFormChk(self, fname_chk: "char const *", fname_fchk: "char const *") -> "int":
        return _molsetc.HaGaussMod_RunFormChk(self, fname_chk, fname_fchk)

    @staticmethod
    def PrintCurBcommon() -> "void":
        return _molsetc.HaGaussMod_PrintCurBcommon()
    gaussian_version = property(_molsetc.HaGaussMod_gaussian_version_get, _molsetc.HaGaussMod_gaussian_version_set)
    gaussian_exe = property(_molsetc.HaGaussMod_gaussian_exe_get, _molsetc.HaGaussMod_gaussian_exe_set)

    def SetFilePrefix(self, prefix: "char const *") -> "int":
        return _molsetc.HaGaussMod_SetFilePrefix(self, prefix)

    def GetFilePrefix(self) -> "std::string":
        return _molsetc.HaGaussMod_GetFilePrefix(self)

    def GetInpFileName(self) -> "std::string":
        return _molsetc.HaGaussMod_GetInpFileName(self)

    def GetCHKFileName(self) -> "std::string":
        return _molsetc.HaGaussMod_GetCHKFileName(self)

    def GetFCHKFileName(self) -> "std::string":
        return _molsetc.HaGaussMod_GetFCHKFileName(self)

    def GetRWFFileName(self) -> "std::string":
        return _molsetc.HaGaussMod_GetRWFFileName(self)

    def GetOutFileName(self) -> "std::string":
        return _molsetc.HaGaussMod_GetOutFileName(self)

    def SetAddKWStr(self, add_kw_str: "std::string const &") -> "void":
        return _molsetc.HaGaussMod_SetAddKWStr(self, add_kw_str)

    def SetNumSharedMemCores(self, n_sh_cores_new: "int") -> "void":
        return _molsetc.HaGaussMod_SetNumSharedMemCores(self, n_sh_cores_new)

    def SetNumProc(self, n_proc_new: "int") -> "void":
        return _molsetc.HaGaussMod_SetNumProc(self, n_proc_new)

    def SetMaxMem(self, max_mem: "int") -> "void":
        return _molsetc.HaGaussMod_SetMaxMem(self, max_mem)

    def GetNumSharedMemCores(self) -> "int":
        return _molsetc.HaGaussMod_GetNumSharedMemCores(self)

    def GetNumProc(self) -> "int":
        return _molsetc.HaGaussMod_GetNumProc(self)

    def GetMaxMem(self) -> "int":
        return _molsetc.HaGaussMod_GetMaxMem(self)

    def SetLoadNonOptGeom(self, set_par: "bool"=True) -> "void":
        return _molsetc.HaGaussMod_SetLoadNonOptGeom(self, set_par)

    def SetLoadGeomZMatOrient(self, set_par: "bool"=True) -> "void":
        return _molsetc.HaGaussMod_SetLoadGeomZMatOrient(self, set_par)

    def SetLoadGeomStdOrient(self, set_par: "bool"=True) -> "void":
        return _molsetc.HaGaussMod_SetLoadGeomStdOrient(self, set_par)

    def SetReadInitGeomChkFile(self, set_par: "bool"=True) -> "void":
        return _molsetc.HaGaussMod_SetReadInitGeomChkFile(self, set_par)

    def SetReadHFGuessChkFile(self, set_par: "bool"=True) -> "void":
        return _molsetc.HaGaussMod_SetReadHFGuessChkFile(self, set_par)

    def SetNoStdOrient(self, set_par: "bool"=True) -> "void":
        return _molsetc.HaGaussMod_SetNoStdOrient(self, set_par)

    def SetSaveBasisSetGen(self, set_par: "bool"=True) -> "void":
        return _molsetc.HaGaussMod_SetSaveBasisSetGen(self, set_par)

# Register HaGaussMod in _molsetc:
_molsetc.HaGaussMod_swigregister(HaGaussMod)

def HaGaussMod_PrintCurBcommon() -> "void":
    return _molsetc.HaGaussMod_PrintCurBcommon()

class HaZindoMod(HaCompMod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset: "MolSet"):
        _molsetc.HaZindoMod_swiginit(self, _molsetc.new_HaZindoMod(new_phost_mset))
    __swig_destroy__ = _molsetc.delete_HaZindoMod

    def SaveParamFile(self, fname: "char const *") -> "int":
        return _molsetc.HaZindoMod_SaveParamFile(self, fname)

# Register HaZindoMod in _molsetc:
_molsetc.HaZindoMod_swigregister(HaZindoMod)

class Coord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetClassName(self) -> "std::string":
        return _molsetc.Coord_GetClassName(self)

    def clone(self) -> "harlem::Coord *":
        return _molsetc.Coord_clone(self)

    def AsVecDouble(self) -> "HaVec_double":
        return _molsetc.Coord_AsVecDouble(self)

    def SetFrom(self, pcrd: "Coord") -> "int":
        return _molsetc.Coord_SetFrom(self, pcrd)

    def SetFromVecDouble(self, dbl_vec: "HaVec_double") -> "int":
        return _molsetc.Coord_SetFromVecDouble(self, dbl_vec)

    def LoadFromStream(self, _is: "istream", popt: "HashMap"=None) -> "int":
        return _molsetc.Coord_LoadFromStream(self, _is, popt)

    def SaveToStream(self, os: "ostream", popt: "HashMap"=None) -> "int":
        return _molsetc.Coord_SaveToStream(self, os, popt)
    __swig_destroy__ = _molsetc.delete_Coord

# Register Coord in _molsetc:
_molsetc.Coord_swigregister(Coord)

class LoadCrdOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.LoadCrdOptions_swiginit(self, _molsetc.new_LoadCrdOptions(*args))
    __swig_destroy__ = _molsetc.delete_LoadCrdOptions

    def SetStdOptions(self) -> "void":
        return _molsetc.LoadCrdOptions_SetStdOptions(self)

    def Copy(self, ref: "HashMap") -> "void":
        return _molsetc.LoadCrdOptions_Copy(self, ref)

    def clone(self) -> "harlem::HashMap *":
        return _molsetc.LoadCrdOptions_clone(self)

    def SetLoadNotFrozenCrd(self, set_par: "bool") -> "void":
        return _molsetc.LoadCrdOptions_SetLoadNotFrozenCrd(self, set_par)

    def ToLoadNotFrozenCrd(self) -> "bool":
        return _molsetc.LoadCrdOptions_ToLoadNotFrozenCrd(self)

    def SetLoadAllCrd(self, set_par: "bool") -> "void":
        return _molsetc.LoadCrdOptions_SetLoadAllCrd(self, set_par)

    def ToLoadAllCrd(self) -> "bool":
        return _molsetc.LoadCrdOptions_ToLoadAllCrd(self)

# Register LoadCrdOptions in _molsetc:
_molsetc.LoadCrdOptions_swigregister(LoadCrdOptions)

class SaveCrdOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.SaveCrdOptions_swiginit(self, _molsetc.new_SaveCrdOptions(*args))
    __swig_destroy__ = _molsetc.delete_SaveCrdOptions

    def SetStdOptions(self) -> "void":
        return _molsetc.SaveCrdOptions_SetStdOptions(self)

    def Copy(self, ref: "HashMap") -> "void":
        return _molsetc.SaveCrdOptions_Copy(self, ref)

    def clone(self) -> "harlem::HashMap *":
        return _molsetc.SaveCrdOptions_clone(self)

    def SetSaveNotFrozenCrd(self, set_par: "bool") -> "void":
        return _molsetc.SaveCrdOptions_SetSaveNotFrozenCrd(self, set_par)

    def ToSaveNotFrozenCrd(self) -> "bool":
        return _molsetc.SaveCrdOptions_ToSaveNotFrozenCrd(self)

    def SetSaveAllCrd(self, set_par: "bool") -> "void":
        return _molsetc.SaveCrdOptions_SetSaveAllCrd(self, set_par)

    def ToSaveAllCrd(self) -> "bool":
        return _molsetc.SaveCrdOptions_ToSaveAllCrd(self)

# Register SaveCrdOptions in _molsetc:
_molsetc.SaveCrdOptions_swigregister(SaveCrdOptions)

class CrdAssignRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_CrdAssignRule

    def GetPriority(self) -> "int":
        return _molsetc.CrdAssignRule_GetPriority(self)

    def SetPriority(self, priority_new: "int") -> "void":
        return _molsetc.CrdAssignRule_SetPriority(self, priority_new)

    def SaveXMLToStream(self, os: "ostream", popt: "HashMap"=None) -> "int":
        return _molsetc.CrdAssignRule_SaveXMLToStream(self, os, popt)

    def SetManagedAtomCrd(self) -> "int":
        return _molsetc.CrdAssignRule_SetManagedAtomCrd(self)

# Register CrdAssignRule in _molsetc:
_molsetc.CrdAssignRule_swigregister(CrdAssignRule)

class SingleAtomCrdRule(CrdAssignRule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_SingleAtomCrdRule

    def GetManagedAtom(self) -> "HaAtom *":
        return _molsetc.SingleAtomCrdRule_GetManagedAtom(self)

    def SetManagedAtom(self, aptr: "HaAtom") -> "int":
        return _molsetc.SingleAtomCrdRule_SetManagedAtom(self, aptr)

    def SaveXMLToStream(self, os: "ostream", popt: "HashMap"=None) -> "int":
        return _molsetc.SingleAtomCrdRule_SaveXMLToStream(self, os, popt)

    def ReplaceRefPt(self, p_ref_old: "Vec3D", p_ref_new: "Vec3D") -> "int":
        return _molsetc.SingleAtomCrdRule_ReplaceRefPt(self, p_ref_old, p_ref_new)

# Register SingleAtomCrdRule in _molsetc:
_molsetc.SingleAtomCrdRule_swigregister(SingleAtomCrdRule)

class FixedCrdRule(SingleAtomCrdRule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p_mng_atom_par: "HaAtom"):
        _molsetc.FixedCrdRule_swiginit(self, _molsetc.new_FixedCrdRule(p_mng_atom_par))
    __swig_destroy__ = _molsetc.delete_FixedCrdRule

    def SetManagedAtomCrd(self) -> "int":
        return _molsetc.FixedCrdRule_SetManagedAtomCrd(self)

    def SaveXMLToStream(self, os: "ostream", popt: "HashMap"=None) -> "int":
        return _molsetc.FixedCrdRule_SaveXMLToStream(self, os, popt)

    def ReplaceRefPt(self, p_ref_old: "Vec3D", p_ref_new: "Vec3D") -> "int":
        return _molsetc.FixedCrdRule_ReplaceRefPt(self, p_ref_old, p_ref_new)

    def SetCrd(self, crd: "Vec3D") -> "void":
        return _molsetc.FixedCrdRule_SetCrd(self, crd)

    def SetParFromCurPos(self) -> "void":
        return _molsetc.FixedCrdRule_SetParFromCurPos(self)

    def SetX(self, val: "double") -> "void":
        return _molsetc.FixedCrdRule_SetX(self, val)

    def SetY(self, val: "double") -> "void":
        return _molsetc.FixedCrdRule_SetY(self, val)

    def SetZ(self, val: "double") -> "void":
        return _molsetc.FixedCrdRule_SetZ(self, val)

    def GetX(self) -> "double":
        return _molsetc.FixedCrdRule_GetX(self)

    def GetY(self) -> "double":
        return _molsetc.FixedCrdRule_GetY(self)

    def GetZ(self) -> "double":
        return _molsetc.FixedCrdRule_GetZ(self)

# Register FixedCrdRule in _molsetc:
_molsetc.FixedCrdRule_swigregister(FixedCrdRule)

class SameAtomCrdRule(SingleAtomCrdRule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p_mng_atom: "HaAtom", p_ref_atom: "HaAtom"):
        _molsetc.SameAtomCrdRule_swiginit(self, _molsetc.new_SameAtomCrdRule(p_mng_atom, p_ref_atom))
    __swig_destroy__ = _molsetc.delete_SameAtomCrdRule

    def SetManagedAtomCrd(self) -> "int":
        return _molsetc.SameAtomCrdRule_SetManagedAtomCrd(self)

    def SetX(self, val: "double") -> "void":
        return _molsetc.SameAtomCrdRule_SetX(self, val)

    def SetY(self, val: "double") -> "void":
        return _molsetc.SameAtomCrdRule_SetY(self, val)

    def SetZ(self, val: "double") -> "void":
        return _molsetc.SameAtomCrdRule_SetZ(self, val)

    def SaveXMLToStream(self, os: "ostream", popt: "HashMap"=None) -> "int":
        return _molsetc.SameAtomCrdRule_SaveXMLToStream(self, os, popt)

    def GetRefAtom(self) -> "HaAtom *":
        return _molsetc.SameAtomCrdRule_GetRefAtom(self)

    def ReplaceRefPt(self, p_ref_old: "Vec3D", p_ref_new: "Vec3D") -> "int":
        return _molsetc.SameAtomCrdRule_ReplaceRefPt(self, p_ref_old, p_ref_new)

# Register SameAtomCrdRule in _molsetc:
_molsetc.SameAtomCrdRule_swigregister(SameAtomCrdRule)

class Pt2CrdRule(SingleAtomCrdRule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p_mng_atom: "HaAtom", p_ref_1: "HaAtom", p_ref_2: "HaAtom"):
        _molsetc.Pt2CrdRule_swiginit(self, _molsetc.new_Pt2CrdRule(p_mng_atom, p_ref_1, p_ref_2))
    __swig_destroy__ = _molsetc.delete_Pt2CrdRule

    def SetManagedAtomCrd(self) -> "int":
        return _molsetc.Pt2CrdRule_SetManagedAtomCrd(self)

    def GetRefAtom1(self) -> "HaAtom *":
        return _molsetc.Pt2CrdRule_GetRefAtom1(self)

    def GetRefAtom2(self) -> "HaAtom *":
        return _molsetc.Pt2CrdRule_GetRefAtom2(self)

    def ReplaceRefPt(self, p_ref_old: "Vec3D", p_ref_new: "Vec3D") -> "int":
        return _molsetc.Pt2CrdRule_ReplaceRefPt(self, p_ref_old, p_ref_new)

    def SetBondLen(self, bond_len_new: "double") -> "void":
        return _molsetc.Pt2CrdRule_SetBondLen(self, bond_len_new)

    def SaveXMLToStream(self, os: "ostream", popt: "HashMap"=None) -> "int":
        return _molsetc.Pt2CrdRule_SaveXMLToStream(self, os, popt)

# Register Pt2CrdRule in _molsetc:
_molsetc.Pt2CrdRule_swigregister(Pt2CrdRule)

class Pt3CrdRule(SingleAtomCrdRule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p_mng_atom: "HaAtom", p_ref_1: "Vec3D", p_ref_2: "Vec3D", p_ref_3: "Vec3D"):
        _molsetc.Pt3CrdRule_swiginit(self, _molsetc.new_Pt3CrdRule(p_mng_atom, p_ref_1, p_ref_2, p_ref_3))
    __swig_destroy__ = _molsetc.delete_Pt3CrdRule

    def SetManagedAtomCrd(self) -> "int":
        return _molsetc.Pt3CrdRule_SetManagedAtomCrd(self)

    def SetParFromPtPos(self, pt_mng: "Vec3D", pt_ref_1: "Vec3D", pt_ref_2: "Vec3D", pt_ref_3: "Vec3D") -> "int":
        return _molsetc.Pt3CrdRule_SetParFromPtPos(self, pt_mng, pt_ref_1, pt_ref_2, pt_ref_3)

    def SetParFromCurPos(self) -> "int":
        return _molsetc.Pt3CrdRule_SetParFromCurPos(self)

    def SetBondLen(self, bond_len: "double") -> "int":
        return _molsetc.Pt3CrdRule_SetBondLen(self, bond_len)

    def SetValAng(self, val_ang: "double") -> "int":
        return _molsetc.Pt3CrdRule_SetValAng(self, val_ang)

    def SetDihAng(self, dih_ang: "double") -> "int":
        return _molsetc.Pt3CrdRule_SetDihAng(self, dih_ang)

    def GetBondLen(self) -> "double":
        return _molsetc.Pt3CrdRule_GetBondLen(self)

    def GetValAng(self) -> "double":
        return _molsetc.Pt3CrdRule_GetValAng(self)

    def GetDihAng(self) -> "double":
        return _molsetc.Pt3CrdRule_GetDihAng(self)

    def GetRefPt1(self) -> "Vec3D *":
        return _molsetc.Pt3CrdRule_GetRefPt1(self)

    def GetRefPt2(self) -> "Vec3D *":
        return _molsetc.Pt3CrdRule_GetRefPt2(self)

    def GetRefPt3(self) -> "Vec3D *":
        return _molsetc.Pt3CrdRule_GetRefPt3(self)

    def ReplaceRefPt(self, p_ref_old: "Vec3D", p_ref_new: "Vec3D") -> "int":
        return _molsetc.Pt3CrdRule_ReplaceRefPt(self, p_ref_old, p_ref_new)

    def SaveXMLToStream(self, os: "ostream", popt: "HashMap"=None) -> "int":
        return _molsetc.Pt3CrdRule_SaveXMLToStream(self, os, popt)

# Register Pt3CrdRule in _molsetc:
_molsetc.Pt3CrdRule_swigregister(Pt3CrdRule)

class DihedralAngleCoord(Coord):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_aptr1: "HaAtom", new_aptr2: "HaAtom", new_aptr3: "HaAtom", aptr4: "HaAtom"):
        _molsetc.DihedralAngleCoord_swiginit(self, _molsetc.new_DihedralAngleCoord(new_aptr1, new_aptr2, new_aptr3, aptr4))
    __swig_destroy__ = _molsetc.delete_DihedralAngleCoord

    def GetClassName(self) -> "std::string":
        return _molsetc.DihedralAngleCoord_GetClassName(self)

    def clone(self) -> "harlem::Coord *":
        return _molsetc.DihedralAngleCoord_clone(self)

    def AsVecDouble(self) -> "HaVec_double":
        return _molsetc.DihedralAngleCoord_AsVecDouble(self)

    def SetFrom(self, pcrd: "Coord") -> "int":
        return _molsetc.DihedralAngleCoord_SetFrom(self, pcrd)

    def SetFromVecDouble(self, dbl_vec: "HaVec_double") -> "int":
        return _molsetc.DihedralAngleCoord_SetFromVecDouble(self, dbl_vec)

    def LoadFromStream(self, _is: "istream", popt: "HashMap"=None) -> "int":
        return _molsetc.DihedralAngleCoord_LoadFromStream(self, _is, popt)

    def SaveToStream(self, os: "ostream", popt: "HashMap"=None) -> "int":
        return _molsetc.DihedralAngleCoord_SaveToStream(self, os, popt)
    aptr1 = property(_molsetc.DihedralAngleCoord_aptr1_get, _molsetc.DihedralAngleCoord_aptr1_set)
    aptr2 = property(_molsetc.DihedralAngleCoord_aptr2_get, _molsetc.DihedralAngleCoord_aptr2_set)
    aptr3 = property(_molsetc.DihedralAngleCoord_aptr3_get, _molsetc.DihedralAngleCoord_aptr3_set)
    aptr4 = property(_molsetc.DihedralAngleCoord_aptr4_get, _molsetc.DihedralAngleCoord_aptr4_set)

    def GetDihVal(self) -> "double":
        return _molsetc.DihedralAngleCoord_GetDihVal(self)

    def SetDihVal(self, new_dih_val: "double") -> "int":
        return _molsetc.DihedralAngleCoord_SetDihVal(self, new_dih_val)

    def FindMovingAtoms(self) -> "int":
        return _molsetc.DihedralAngleCoord_FindMovingAtoms(self)
    moving_atoms = property(_molsetc.DihedralAngleCoord_moving_atoms_get, _molsetc.DihedralAngleCoord_moving_atoms_set)

# Register DihedralAngleCoord in _molsetc:
_molsetc.DihedralAngleCoord_swigregister(DihedralAngleCoord)

UNDEF_ELEM_CRD = _molsetc.UNDEF_ELEM_CRD
X_ELEM_CRD = _molsetc.X_ELEM_CRD
Y_ELEM_CRD = _molsetc.Y_ELEM_CRD
Z_ELEM_CRD = _molsetc.Z_ELEM_CRD
LEN_ELEM_CRD = _molsetc.LEN_ELEM_CRD
ANG_ELEM_CRD = _molsetc.ANG_ELEM_CRD
DIH_ELEM_CRD = _molsetc.DIH_ELEM_CRD
class ElemCrd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.ElemCrd_swiginit(self, _molsetc.new_ElemCrd(*args))
    __swig_destroy__ = _molsetc.delete_ElemCrd

    def GetType(self) -> "ElemCrdType":
        return _molsetc.ElemCrd_GetType(self)

    def GetCrdRule(self) -> "CrdAssignRule *":
        return _molsetc.ElemCrd_GetCrdRule(self)

    def SetValue(self, val: "double") -> "void":
        return _molsetc.ElemCrd_SetValue(self, val)

    def GetValue(self) -> "double":
        return _molsetc.ElemCrd_GetValue(self)

    def SetDisplayValue(self, val: "double") -> "void":
        return _molsetc.ElemCrd_SetDisplayValue(self, val)

    def GetDisplayValue(self) -> "double":
        return _molsetc.ElemCrd_GetDisplayValue(self)

    def GetManagedAtom(self) -> "HaAtom *":
        return _molsetc.ElemCrd_GetManagedAtom(self)

    def GetCrdAssignRule(self) -> "CrdAssignRule *":
        return _molsetc.ElemCrd_GetCrdAssignRule(self)

    def SetTag(self, tag_new: "std::string const &") -> "void":
        return _molsetc.ElemCrd_SetTag(self, tag_new)

    def GetTag(self) -> "std::string":
        return _molsetc.ElemCrd_GetTag(self)

    def SetFrozen(self, set_flag: "bool"=True) -> "void":
        return _molsetc.ElemCrd_SetFrozen(self, set_flag)

    def IsFrozen(self) -> "bool":
        return _molsetc.ElemCrd_IsFrozen(self)

# Register ElemCrd in _molsetc:
_molsetc.ElemCrd_swigregister(ElemCrd)

class ZMatLoadOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.ZMatLoadOptions_swiginit(self, _molsetc.new_ZMatLoadOptions(*args))
    __swig_destroy__ = _molsetc.delete_ZMatLoadOptions

    def Copy(self, ref: "HashMap") -> "void":
        return _molsetc.ZMatLoadOptions_Copy(self, ref)

    def clone(self) -> "harlem::HashMap *":
        return _molsetc.ZMatLoadOptions_clone(self)

    def SetStdOptions(self) -> "void":
        return _molsetc.ZMatLoadOptions_SetStdOptions(self)

    def SetLoadAtID(self, set_flag: "bool"=True) -> "void":
        return _molsetc.ZMatLoadOptions_SetLoadAtID(self, set_flag)

    def ToLoadAtID(self) -> "bool":
        return _molsetc.ZMatLoadOptions_ToLoadAtID(self)

    def SetLoadAtElem(self, set_flag: "bool"=True) -> "void":
        return _molsetc.ZMatLoadOptions_SetLoadAtElem(self, set_flag)

    def ToLoadAtElem(self) -> "bool":
        return _molsetc.ZMatLoadOptions_ToLoadAtElem(self)

# Register ZMatLoadOptions in _molsetc:
_molsetc.ZMatLoadOptions_swigregister(ZMatLoadOptions)

class ZMatSaveOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.ZMatSaveOptions_swiginit(self, _molsetc.new_ZMatSaveOptions(*args))
    __swig_destroy__ = _molsetc.delete_ZMatSaveOptions

    def Copy(self, ref: "HashMap") -> "void":
        return _molsetc.ZMatSaveOptions_Copy(self, ref)

    def clone(self) -> "harlem::HashMap *":
        return _molsetc.ZMatSaveOptions_clone(self)

    def SetStdOptions(self) -> "void":
        return _molsetc.ZMatSaveOptions_SetStdOptions(self)

    def SetSaveAtSeqNum(self, set_flag: "bool"=True) -> "void":
        return _molsetc.ZMatSaveOptions_SetSaveAtSeqNum(self, set_flag)

    def ToSaveAtSeqNum(self) -> "bool":
        return _molsetc.ZMatSaveOptions_ToSaveAtSeqNum(self)

    def SetSaveAtElem(self, set_flag: "bool"=True) -> "void":
        return _molsetc.ZMatSaveOptions_SetSaveAtElem(self, set_flag)

    def ToSaveAtElem(self) -> "bool":
        return _molsetc.ZMatSaveOptions_ToSaveAtElem(self)

    def SetSaveAtSymbol(self, set_flag: "bool"=True) -> "void":
        return _molsetc.ZMatSaveOptions_SetSaveAtSymbol(self, set_flag)

    def ToSaveAtSymbol(self) -> "bool":
        return _molsetc.ZMatSaveOptions_ToSaveAtSymbol(self)

    def SetSaveTags(self, set_flag: "bool"=True) -> "void":
        return _molsetc.ZMatSaveOptions_SetSaveTags(self, set_flag)

    def ToSaveTags(self) -> "bool":
        return _molsetc.ZMatSaveOptions_ToSaveTags(self)

# Register ZMatSaveOptions in _molsetc:
_molsetc.ZMatSaveOptions_swigregister(ZMatSaveOptions)

class ZMatCrd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pmset_new: "MolSet"):
        _molsetc.ZMatCrd_swiginit(self, _molsetc.new_ZMatCrd(pmset_new))
    __swig_destroy__ = _molsetc.delete_ZMatCrd

    def Clear(self) -> "void":
        return _molsetc.ZMatCrd_Clear(self)

    def IsEmpty(self) -> "bool":
        return _molsetc.ZMatCrd_IsEmpty(self)

    def InitStdZMat(self) -> "void":
        return _molsetc.ZMatCrd_InitStdZMat(self)

    def InitAllXYZ(self) -> "void":
        return _molsetc.ZMatCrd_InitAllXYZ(self)

    def OnDelAtoms(self, del_atoms: "AtomContainer") -> "int":
        return _molsetc.ZMatCrd_OnDelAtoms(self, del_atoms)

    def LoadFromString(self, str: "std::string const &", popt: "HashMap"=None) -> "int":
        return _molsetc.ZMatCrd_LoadFromString(self, str, popt)

    def LoadFromStream(self, _is: "istream", popt: "HashMap"=None) -> "int":
        return _molsetc.ZMatCrd_LoadFromStream(self, _is, popt)

    def SetAtomCrd(self) -> "int":
        return _molsetc.ZMatCrd_SetAtomCrd(self)

    def GetCrdSnapshot(self, crd_arr: "HaVec_double") -> "int":
        return _molsetc.ZMatCrd_GetCrdSnapshot(self, crd_arr)

    def SetFromAtomCrd(self) -> "int":
        return _molsetc.ZMatCrd_SetFromAtomCrd(self)

    def SetFromCrdSnapshot(self, crd_arr: "HaVec_double") -> "int":
        return _molsetc.ZMatCrd_SetFromCrdSnapshot(self, crd_arr)

    def GetElemCrdVal(self, elem_crd_val_arr: "HaVec_double", unfrozen: "bool"=True) -> "int":
        return _molsetc.ZMatCrd_GetElemCrdVal(self, elem_crd_val_arr, unfrozen)

    def SetFromElemCrdVal(self, elem_crd_val_arr: "HaVec_double", unfrozen: "bool"=True) -> "int":
        return _molsetc.ZMatCrd_SetFromElemCrdVal(self, elem_crd_val_arr, unfrozen)

    def TransDerivToIntCrd(self, deriv_cart_crd: "HaVec_double", deriv_int_crd: "HaVec_double", unfrozen: "bool"=True) -> "int":
        return _molsetc.ZMatCrd_TransDerivToIntCrd(self, deriv_cart_crd, deriv_int_crd, unfrozen)

    def SaveToStream(self, os: "ostream", popt: "HashMap"=None) -> "int":
        return _molsetc.ZMatCrd_SaveToStream(self, os, popt)

    def SaveToString(self, popt: "HashMap"=None) -> "std::string":
        return _molsetc.ZMatCrd_SaveToString(self, popt)

    def SaveXMLToStream(self, os: "ostream", popt: "HashMap"=None) -> "int":
        return _molsetc.ZMatCrd_SaveXMLToStream(self, os, popt)

    def LoadXMLNode(self, node_zmat: "rapidxml::xml_node< > *", popt: "HashMap"=None) -> "int":
        return _molsetc.ZMatCrd_LoadXMLNode(self, node_zmat, popt)

    def GetNZ(self) -> "int":
        return _molsetc.ZMatCrd_GetNZ(self)

    def GetNCrd(self) -> "int":
        return _molsetc.ZMatCrd_GetNCrd(self)

    def GetNCrdUnFrozen(self) -> "int":
        return _molsetc.ZMatCrd_GetNCrdUnFrozen(self)

    def FreezeCrdAll(self) -> "void":
        return _molsetc.ZMatCrd_FreezeCrdAll(self)

    def UnFreezeCrdAll(self) -> "void":
        return _molsetc.ZMatCrd_UnFreezeCrdAll(self)

    def CalcBGMatr(self) -> "int":
        return _molsetc.ZMatCrd_CalcBGMatr(self)

    def SetXYZCrd(self, iat: "int", x: "double", y: "double", z: "double") -> "bool":
        return _molsetc.ZMatCrd_SetXYZCrd(self, iat, x, y, z)

    def SetCrdDesc(self, *args) -> "void":
        return _molsetc.ZMatCrd_SetCrdDesc(self, *args)

    def GetRCrdForAtom(self, aptr: "HaAtom") -> "ElemCrd *":
        return _molsetc.ZMatCrd_GetRCrdForAtom(self, aptr)

    def GetAngCrdForAtom(self, aptr: "HaAtom") -> "ElemCrd *":
        return _molsetc.ZMatCrd_GetAngCrdForAtom(self, aptr)

    def GetDihCrdForAtom(self, aptr: "HaAtom") -> "ElemCrd *":
        return _molsetc.ZMatCrd_GetDihCrdForAtom(self, aptr)

    def GetCrdByTag(self, tag: "std::string const &") -> "ElemCrd *":
        return _molsetc.ZMatCrd_GetCrdByTag(self, tag)

    def GetCrdByIdx(self, idx: "int") -> "ElemCrd *":
        return _molsetc.ZMatCrd_GetCrdByIdx(self, idx)

    def SetTagRCrd(self, aptr: "HaAtom", tag: "std::string const &") -> "void":
        return _molsetc.ZMatCrd_SetTagRCrd(self, aptr, tag)

    def SetTagAngCrd(self, aptr: "HaAtom", tag: "std::string const &") -> "void":
        return _molsetc.ZMatCrd_SetTagAngCrd(self, aptr, tag)

    def SetTagDihCrd(self, aptr: "HaAtom", tag: "std::string const &") -> "void":
        return _molsetc.ZMatCrd_SetTagDihCrd(self, aptr, tag)

    def SetRVal(self, *args) -> "void":
        return _molsetc.ZMatCrd_SetRVal(self, *args)

    def SetAngVal(self, *args) -> "void":
        return _molsetc.ZMatCrd_SetAngVal(self, *args)

    def SetDihVal(self, *args) -> "void":
        return _molsetc.ZMatCrd_SetDihVal(self, *args)

    def AddDummyAtom(self, *args) -> "HaAtom *":
        return _molsetc.ZMatCrd_AddDummyAtom(self, *args)

# Register ZMatCrd in _molsetc:
_molsetc.ZMatCrd_swigregister(ZMatCrd)

class RigidBodyCoord(Coord):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.RigidBodyCoord_swiginit(self, _molsetc.new_RigidBodyCoord(*args))
    __swig_destroy__ = _molsetc.delete_RigidBodyCoord

    def GetClassName(self) -> "std::string":
        return _molsetc.RigidBodyCoord_GetClassName(self)

    def clone(self) -> "harlem::Coord *":
        return _molsetc.RigidBodyCoord_clone(self)

    def SetFrom(self, pcrd: "Coord") -> "int":
        return _molsetc.RigidBodyCoord_SetFrom(self, pcrd)

    def AsVecDouble(self) -> "HaVec_double":
        return _molsetc.RigidBodyCoord_AsVecDouble(self)

    def SetFromVecDouble(self, dbl_vec: "HaVec_double") -> "int":
        return _molsetc.RigidBodyCoord_SetFromVecDouble(self, dbl_vec)

    def GetNumCrd(self) -> "int":
        return _molsetc.RigidBodyCoord_GetNumCrd(self)

    def FreezeCrd(self, idx: "int") -> "void":
        return _molsetc.RigidBodyCoord_FreezeCrd(self, idx)

    def IsCrdFrozen(self, idx: "int") -> "int":
        return _molsetc.RigidBodyCoord_IsCrdFrozen(self, idx)

    def LoadFromStream(self, _is: "istream", popt: "HashMap"=None) -> "int":
        return _molsetc.RigidBodyCoord_LoadFromStream(self, _is, popt)

    def SaveToStream(self, os: "ostream", popt: "HashMap"=None) -> "int":
        return _molsetc.RigidBodyCoord_SaveToStream(self, os, popt)

    def SetFromCurrAtomCrd(self, *args) -> "int":
        return _molsetc.RigidBodyCoord_SetFromCurrAtomCrd(self, *args)

    def SetNumObj(self, n_obj_new: "int") -> "void":
        return _molsetc.RigidBodyCoord_SetNumObj(self, n_obj_new)

    def GetNumObj(self) -> "int":
        return _molsetc.RigidBodyCoord_GetNumObj(self)

    def GetPhi(self, iobj: "int") -> "double":
        return _molsetc.RigidBodyCoord_GetPhi(self, iobj)

    def GetCosTheta(self, iobj: "int") -> "double":
        return _molsetc.RigidBodyCoord_GetCosTheta(self, iobj)

    def GetPsi(self, iobj: "int") -> "double":
        return _molsetc.RigidBodyCoord_GetPsi(self, iobj)

    def GetTransX(self, iobj: "int") -> "double":
        return _molsetc.RigidBodyCoord_GetTransX(self, iobj)

    def GetTransY(self, iobj: "int") -> "double":
        return _molsetc.RigidBodyCoord_GetTransY(self, iobj)

    def GetTransZ(self, iobj: "int") -> "double":
        return _molsetc.RigidBodyCoord_GetTransZ(self, iobj)

    def SetPhi(self, iobj: "int", phi_new: "double") -> "void":
        return _molsetc.RigidBodyCoord_SetPhi(self, iobj, phi_new)

    def SetCosTheta(self, iobj: "int", cos_theta_new: "double") -> "void":
        return _molsetc.RigidBodyCoord_SetCosTheta(self, iobj, cos_theta_new)

    def SetPsi(self, iobj: "int", psi_new: "double") -> "void":
        return _molsetc.RigidBodyCoord_SetPsi(self, iobj, psi_new)

    def SetTransX(self, iobj: "int", x_new: "double") -> "void":
        return _molsetc.RigidBodyCoord_SetTransX(self, iobj, x_new)

    def SetTransY(self, iobj: "int", y_new: "double") -> "void":
        return _molsetc.RigidBodyCoord_SetTransY(self, iobj, y_new)

    def SetTransZ(self, iobj: "int", z_new: "double") -> "void":
        return _molsetc.RigidBodyCoord_SetTransZ(self, iobj, z_new)

    def FreezeObject(self, iobj: "int") -> "void":
        return _molsetc.RigidBodyCoord_FreezeObject(self, iobj)

    def IsObjectFrozen(self, iobj: "int") -> "int":
        return _molsetc.RigidBodyCoord_IsObjectFrozen(self, iobj)

# Register RigidBodyCoord in _molsetc:
_molsetc.RigidBodyCoord_swigregister(RigidBodyCoord)

class RigidBodyCoordDiscretized(RigidBodyCoord):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.RigidBodyCoordDiscretized_swiginit(self, _molsetc.new_RigidBodyCoordDiscretized(*args))
    __swig_destroy__ = _molsetc.delete_RigidBodyCoordDiscretized

    def clone(self) -> "harlem::Coord *":
        return _molsetc.RigidBodyCoordDiscretized_clone(self)

    def SetFrom(self, pcrd: "Coord") -> "int":
        return _molsetc.RigidBodyCoordDiscretized_SetFrom(self, pcrd)

    def GetClassName(self) -> "std::string":
        return _molsetc.RigidBodyCoordDiscretized_GetClassName(self)

    def SetNumObj(self, n_obj_new: "int") -> "void":
        return _molsetc.RigidBodyCoordDiscretized_SetNumObj(self, n_obj_new)

    def ConvertDiscrCrdToFloat(self) -> "void":
        return _molsetc.RigidBodyCoordDiscretized_ConvertDiscrCrdToFloat(self)

    def ConvertFloatCrdToDiscr(self) -> "void":
        return _molsetc.RigidBodyCoordDiscretized_ConvertFloatCrdToDiscr(self)

    def SetStandardLimits(self) -> "void":
        return _molsetc.RigidBodyCoordDiscretized_SetStandardLimits(self)

    def SetDiscrNumForCrd(self, idx: "int", npt: "int") -> "int":
        return _molsetc.RigidBodyCoordDiscretized_SetDiscrNumForCrd(self, idx, npt)

    def SetLimits(self, idx: "int", amin: "double", amax: "double") -> "int":
        return _molsetc.RigidBodyCoordDiscretized_SetLimits(self, idx, amin, amax)
    crd_v_int = property(_molsetc.RigidBodyCoordDiscretized_crd_v_int_get, _molsetc.RigidBodyCoordDiscretized_crd_v_int_set)
    dim_crd = property(_molsetc.RigidBodyCoordDiscretized_dim_crd_get, _molsetc.RigidBodyCoordDiscretized_dim_crd_set)

# Register RigidBodyCoordDiscretized in _molsetc:
_molsetc.RigidBodyCoordDiscretized_swigregister(RigidBodyCoordDiscretized)

class TrajPointInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.TrajPointInfo_swiginit(self, _molsetc.new_TrajPointInfo())
    __swig_destroy__ = _molsetc.delete_TrajPointInfo

    def Clear(self) -> "void":
        return _molsetc.TrajPointInfo_Clear(self)
    do_skip = property(_molsetc.TrajPointInfo_do_skip_get, _molsetc.TrajPointInfo_do_skip_set)
    ipt = property(_molsetc.TrajPointInfo_ipt_get, _molsetc.TrajPointInfo_ipt_set)
    pcrd = property(_molsetc.TrajPointInfo_pcrd_get, _molsetc.TrajPointInfo_pcrd_set)
    is_accepted = property(_molsetc.TrajPointInfo_is_accepted_get, _molsetc.TrajPointInfo_is_accepted_set)
    pcrd_rejected = property(_molsetc.TrajPointInfo_pcrd_rejected_get, _molsetc.TrajPointInfo_pcrd_rejected_set)
    tot_energy = property(_molsetc.TrajPointInfo_tot_energy_get, _molsetc.TrajPointInfo_tot_energy_set)
    energy_rejected = property(_molsetc.TrajPointInfo_energy_rejected_get, _molsetc.TrajPointInfo_energy_rejected_set)

# Register TrajPointInfo in _molsetc:
_molsetc.TrajPointInfo_swigregister(TrajPointInfo)

class TrajAnalAgent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetClassName(self) -> "std::string":
        return _molsetc.TrajAnalAgent_GetClassName(self)

    def IsActive(self) -> "int":
        return _molsetc.TrajAnalAgent_IsActive(self)

    def SetActive(self, active_flag: "int") -> "void":
        return _molsetc.TrajAnalAgent_SetActive(self, active_flag)

    def Init(self, ppt_info: "TrajPointInfo"=None) -> "int":
        return _molsetc.TrajAnalAgent_Init(self, ppt_info)

    def AnalyzePt(self, ppt_info: "TrajPointInfo"=None) -> "int":
        return _molsetc.TrajAnalAgent_AnalyzePt(self, ppt_info)

    def Finalize(self) -> "int":
        return _molsetc.TrajAnalAgent_Finalize(self)
    __swig_destroy__ = _molsetc.delete_TrajAnalAgent

# Register TrajAnalAgent in _molsetc:
_molsetc.TrajAnalAgent_swigregister(TrajAnalAgent)

class TrajIOAgent(TrajAnalAgent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_TrajIOAgent

    def GetClassName(self) -> "std::string":
        return _molsetc.TrajIOAgent_GetClassName(self)

    def IsActive(self) -> "int":
        return _molsetc.TrajIOAgent_IsActive(self)

    def SetActive(self, active_flag: "int") -> "void":
        return _molsetc.TrajIOAgent_SetActive(self, active_flag)

    def Init(self, ppt_info: "TrajPointInfo") -> "int":
        return _molsetc.TrajIOAgent_Init(self, ppt_info)

    def AnalyzePt(self, ppt_info: "TrajPointInfo") -> "int":
        return _molsetc.TrajIOAgent_AnalyzePt(self, ppt_info)

    def Finalize(self) -> "int":
        return _molsetc.TrajIOAgent_Finalize(self)
    traj_io_mode = property(_molsetc.TrajIOAgent_traj_io_mode_get, _molsetc.TrajIOAgent_traj_io_mode_set)
    output_rejected_points = property(_molsetc.TrajIOAgent_output_rejected_points_get, _molsetc.TrajIOAgent_output_rejected_points_set)
    traj_file_name = property(_molsetc.TrajIOAgent_traj_file_name_get, _molsetc.TrajIOAgent_traj_file_name_set)
    traj_all_pts_file_name = property(_molsetc.TrajIOAgent_traj_all_pts_file_name_get, _molsetc.TrajIOAgent_traj_all_pts_file_name_set)
    traj_ene_file_name = property(_molsetc.TrajIOAgent_traj_ene_file_name_get, _molsetc.TrajIOAgent_traj_ene_file_name_set)
    save_image_seq_gif = property(_molsetc.TrajIOAgent_save_image_seq_gif_get, _molsetc.TrajIOAgent_save_image_seq_gif_set)
    save_image_seq_pict = property(_molsetc.TrajIOAgent_save_image_seq_pict_get, _molsetc.TrajIOAgent_save_image_seq_pict_set)
    npt = property(_molsetc.TrajIOAgent_npt_get, _molsetc.TrajIOAgent_npt_set)
    average_ene = property(_molsetc.TrajIOAgent_average_ene_get, _molsetc.TrajIOAgent_average_ene_set)

    def SetReadCoord(self, set_on: "int"=1) -> "void":
        return _molsetc.TrajIOAgent_SetReadCoord(self, set_on)

    def SetWriteCoord(self, set_on: "int"=1) -> "void":
        return _molsetc.TrajIOAgent_SetWriteCoord(self, set_on)

    def SetReadEnergy(self, set_on: "int"=1) -> "void":
        return _molsetc.TrajIOAgent_SetReadEnergy(self, set_on)

    def SetWriteEnergy(self, set_on: "int"=1) -> "void":
        return _molsetc.TrajIOAgent_SetWriteEnergy(self, set_on)

    def IsReadCoord(self) -> "int":
        return _molsetc.TrajIOAgent_IsReadCoord(self)

    def IsWriteCoord(self) -> "int":
        return _molsetc.TrajIOAgent_IsWriteCoord(self)

    def IsReadEnergy(self) -> "int":
        return _molsetc.TrajIOAgent_IsReadEnergy(self)

    def IsWriteEnergy(self) -> "int":
        return _molsetc.TrajIOAgent_IsWriteEnergy(self)
    ENERGY_WRITE = _molsetc.TrajIOAgent_ENERGY_WRITE
    ENERGY_READ = _molsetc.TrajIOAgent_ENERGY_READ
    COORD_WRITE = _molsetc.TrajIOAgent_COORD_WRITE
    COORD_READ = _molsetc.TrajIOAgent_COORD_READ
    p_sim = property(_molsetc.TrajIOAgent_p_sim_get, _molsetc.TrajIOAgent_p_sim_set)

# Register TrajIOAgent in _molsetc:
_molsetc.TrajIOAgent_swigregister(TrajIOAgent)

class TraceMolAgent(TrajAnalAgent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_TraceMolAgent

    def GetClassName(self) -> "std::string":
        return _molsetc.TraceMolAgent_GetClassName(self)

    def IsActive(self) -> "int":
        return _molsetc.TraceMolAgent_IsActive(self)

    def SetActive(self, active_flag: "int") -> "void":
        return _molsetc.TraceMolAgent_SetActive(self, active_flag)

    def Init(self, ppt_info: "TrajPointInfo") -> "int":
        return _molsetc.TraceMolAgent_Init(self, ppt_info)

    def AnalyzePt(self, ppt_info: "TrajPointInfo") -> "int":
        return _molsetc.TraceMolAgent_AnalyzePt(self, ppt_info)

    def Finalize(self) -> "int":
        return _molsetc.TraceMolAgent_Finalize(self)
    pmset = property(_molsetc.TraceMolAgent_pmset_get, _molsetc.TraceMolAgent_pmset_set)
    traced_atoms = property(_molsetc.TraceMolAgent_traced_atoms_get, _molsetc.TraceMolAgent_traced_atoms_set)
    trace_mol = property(_molsetc.TraceMolAgent_trace_mol_get, _molsetc.TraceMolAgent_trace_mol_set)
    trace_res = property(_molsetc.TraceMolAgent_trace_res_get, _molsetc.TraceMolAgent_trace_res_set)
    trace_chain = property(_molsetc.TraceMolAgent_trace_chain_get, _molsetc.TraceMolAgent_trace_chain_set)
    itr_res = property(_molsetc.TraceMolAgent_itr_res_get, _molsetc.TraceMolAgent_itr_res_set)

# Register TraceMolAgent in _molsetc:
_molsetc.TraceMolAgent_swigregister(TraceMolAgent)

class UpdateMolViewNotifyAgent(TrajAnalAgent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_UpdateMolViewNotifyAgent

    def GetClassName(self) -> "std::string":
        return _molsetc.UpdateMolViewNotifyAgent_GetClassName(self)

    def IsActive(self) -> "int":
        return _molsetc.UpdateMolViewNotifyAgent_IsActive(self)

    def SetActive(self, active_flag: "int") -> "void":
        return _molsetc.UpdateMolViewNotifyAgent_SetActive(self, active_flag)

    def Init(self, ppt_info: "TrajPointInfo") -> "int":
        return _molsetc.UpdateMolViewNotifyAgent_Init(self, ppt_info)

    def AnalyzePt(self, ppt_info: "TrajPointInfo") -> "int":
        return _molsetc.UpdateMolViewNotifyAgent_AnalyzePt(self, ppt_info)

    def Finalize(self) -> "int":
        return _molsetc.UpdateMolViewNotifyAgent_Finalize(self)
    pmset = property(_molsetc.UpdateMolViewNotifyAgent_pmset_get, _molsetc.UpdateMolViewNotifyAgent_pmset_set)
    is_moved = property(_molsetc.UpdateMolViewNotifyAgent_is_moved_get, _molsetc.UpdateMolViewNotifyAgent_is_moved_set)
    update_interval = property(_molsetc.UpdateMolViewNotifyAgent_update_interval_get, _molsetc.UpdateMolViewNotifyAgent_update_interval_set)
    next_update_time = property(_molsetc.UpdateMolViewNotifyAgent_next_update_time_get, _molsetc.UpdateMolViewNotifyAgent_next_update_time_set)

# Register UpdateMolViewNotifyAgent in _molsetc:
_molsetc.UpdateMolViewNotifyAgent_swigregister(UpdateMolViewNotifyAgent)

class HaEnergyFunc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ComputeEnergy(self, pcrd: "Coord") -> "double":
        return _molsetc.HaEnergyFunc_ComputeEnergy(self, pcrd)
    __swig_destroy__ = _molsetc.delete_HaEnergyFunc

# Register HaEnergyFunc in _molsetc:
_molsetc.HaEnergyFunc_swigregister(HaEnergyFunc)

class MCSimulator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_MCSimulator
    num_mc_steps = property(_molsetc.MCSimulator_num_mc_steps_get, _molsetc.MCSimulator_num_mc_steps_set)
    stop_calc_flag = property(_molsetc.MCSimulator_stop_calc_flag_get, _molsetc.MCSimulator_stop_calc_flag_set)
    p_crd = property(_molsetc.MCSimulator_p_crd_get, _molsetc.MCSimulator_p_crd_set)
    delay_time = property(_molsetc.MCSimulator_delay_time_get, _molsetc.MCSimulator_delay_time_set)
    npt_begin = property(_molsetc.MCSimulator_npt_begin_get, _molsetc.MCSimulator_npt_begin_set)
    npt_step = property(_molsetc.MCSimulator_npt_step_get, _molsetc.MCSimulator_npt_step_set)
    npt_end = property(_molsetc.MCSimulator_npt_end_get, _molsetc.MCSimulator_npt_end_set)
    dont_calc_ene_flag = property(_molsetc.MCSimulator_dont_calc_ene_flag_get, _molsetc.MCSimulator_dont_calc_ene_flag_set)

    def SetEnergyFunc(self, p_ene_func_new: "HaEnergyFunc") -> "int":
        return _molsetc.MCSimulator_SetEnergyFunc(self, p_ene_func_new)

    def InitEnergyFunc(self) -> "int":
        return _molsetc.MCSimulator_InitEnergyFunc(self)

    def ComputeEnergy(self, pcrd: "Coord") -> "double":
        return _molsetc.MCSimulator_ComputeEnergy(self, pcrd)

    def SetInitPoint(self, pcrd_new: "Coord"=None) -> "int":
        return _molsetc.MCSimulator_SetInitPoint(self, pcrd_new)

    def SetTemperature(self, temp_new: "double") -> "void":
        return _molsetc.MCSimulator_SetTemperature(self, temp_new)

    def GetTemperature(self) -> "double":
        return _molsetc.MCSimulator_GetTemperature(self)

    def RunMC(self) -> "int":
        return _molsetc.MCSimulator_RunMC(self)

    def RunMCThread(self) -> "int":
        return _molsetc.MCSimulator_RunMCThread(self)

    def PauseMC(self) -> "int":
        return _molsetc.MCSimulator_PauseMC(self)

    def ResumeMC(self) -> "int":
        return _molsetc.MCSimulator_ResumeMC(self)

    def StopMC(self) -> "int":
        return _molsetc.MCSimulator_StopMC(self)

    def IncrementCrd(self, pcrd: "Coord") -> "int":
        return _molsetc.MCSimulator_IncrementCrd(self, pcrd)

    def SetCoord(self, pcrd: "Coord") -> "int":
        return _molsetc.MCSimulator_SetCoord(self, pcrd)

    def InitTrajAnalysis(self, ppt_info: "TrajPointInfo") -> "int":
        return _molsetc.MCSimulator_InitTrajAnalysis(self, ppt_info)

    def ComputePropTrajPoint(self, ppt_info: "TrajPointInfo") -> "int":
        return _molsetc.MCSimulator_ComputePropTrajPoint(self, ppt_info)

    def FinalizeTrajAnalysis(self) -> "int":
        return _molsetc.MCSimulator_FinalizeTrajAnalysis(self)

    def AnalyzeTrajectory(self) -> "int":
        return _molsetc.MCSimulator_AnalyzeTrajectory(self)
    agents = property(_molsetc.MCSimulator_agents_get, _molsetc.MCSimulator_agents_set)

    def GetTrajectoryIOAgent(self) -> "TrajIOAgent *":
        return _molsetc.MCSimulator_GetTrajectoryIOAgent(self)

    def DeleteTrajAnalAgent(self, p_ag: "TrajAnalAgent") -> "int":
        return _molsetc.MCSimulator_DeleteTrajAnalAgent(self, p_ag)

    def GetTrajectoryTraceAgent(self, create_agent: "int"=0) -> "TraceMolAgent *":
        return _molsetc.MCSimulator_GetTrajectoryTraceAgent(self, create_agent)

    def GetMolViewNotifyAgent(self, create_agent: "int"=0) -> "UpdateMolViewNotifyAgent *":
        return _molsetc.MCSimulator_GetMolViewNotifyAgent(self, create_agent)
    p_ene_func = property(_molsetc.MCSimulator_p_ene_func_get, _molsetc.MCSimulator_p_ene_func_set)

    def GetMolSet(self) -> "MolSet *":
        return _molsetc.MCSimulator_GetMolSet(self)
    pmset = property(_molsetc.MCSimulator_pmset_get, _molsetc.MCSimulator_pmset_set)

# Register MCSimulator in _molsetc:
_molsetc.MCSimulator_swigregister(MCSimulator)

class HaInterMolMod(HaCompMod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset: "MolSet"):
        _molsetc.HaInterMolMod_swiginit(self, _molsetc.new_HaInterMolMod(new_phost_mset))
    __swig_destroy__ = _molsetc.delete_HaInterMolMod

    def SetStdParams(self) -> "void":
        return _molsetc.HaInterMolMod_SetStdParams(self)

    def Initialize(self) -> "int":
        return _molsetc.HaInterMolMod_Initialize(self)

    def ClearInternalStruct(self) -> "int":
        return _molsetc.HaInterMolMod_ClearInternalStruct(self)

    def SetInteractGroupsFromMolecules(self) -> "int":
        return _molsetc.HaInterMolMod_SetInteractGroupsFromMolecules(self)

    def ClearInteractGroups(self) -> "int":
        return _molsetc.HaInterMolMod_ClearInteractGroups(self)

    def AddInteractGroup(self, p_atgrp: "AtomContainer") -> "int":
        return _molsetc.HaInterMolMod_AddInteractGroup(self, p_atgrp)
    module_to_init_flag = property(_molsetc.HaInterMolMod_module_to_init_flag_get, _molsetc.HaInterMolMod_module_to_init_flag_set)

    def SetCoord(self, pcrd: "Coord") -> "int":
        return _molsetc.HaInterMolMod_SetCoord(self, pcrd)

    def SetRigidBodyCoord(self, pcrd: "RigidBodyCoord") -> "int":
        return _molsetc.HaInterMolMod_SetRigidBodyCoord(self, pcrd)

    def CalculateMMEnergy(self) -> "double":
        return _molsetc.HaInterMolMod_CalculateMMEnergy(self)

    def CalcElStaticInter(self) -> "double":
        return _molsetc.HaInterMolMod_CalcElStaticInter(self)

    def CalcContElectrEne(self, inter_groups: "std::vector< AtomContainer * >") -> "double":
        return _molsetc.HaInterMolMod_CalcContElectrEne(self, inter_groups)

    def CalcEffInterEne(self) -> "bool":
        return _molsetc.HaInterMolMod_CalcEffInterEne(self)

    def Hessian(self, energy_type: "int", pMol: "VecPtr") -> "HaMat_double":
        return _molsetc.HaInterMolMod_Hessian(self, energy_type, pMol)

    def Jacobian(self, energy_type: "int", pMol: "VecPtr") -> "HaVec_double":
        return _molsetc.HaInterMolMod_Jacobian(self, energy_type, pMol)

    def NormalModes(self, energy_type: "int", ptmol: "VecPtr") -> "int":
        return _molsetc.HaInterMolMod_NormalModes(self, energy_type, ptmol)
    to_build_nb_contact_list = property(_molsetc.HaInterMolMod_to_build_nb_contact_list_get, _molsetc.HaInterMolMod_to_build_nb_contact_list_set)
    to_build_intermol_excl_atom_list = property(_molsetc.HaInterMolMod_to_build_intermol_excl_atom_list_get, _molsetc.HaInterMolMod_to_build_intermol_excl_atom_list_set)
    cur_intermol_ene = property(_molsetc.HaInterMolMod_cur_intermol_ene_get, _molsetc.HaInterMolMod_cur_intermol_ene_set)
    electr_inter_ene = property(_molsetc.HaInterMolMod_electr_inter_ene_get, _molsetc.HaInterMolMod_electr_inter_ene_set)
    vdw_inter_ene = property(_molsetc.HaInterMolMod_vdw_inter_ene_get, _molsetc.HaInterMolMod_vdw_inter_ene_set)
    add_eff_ene = property(_molsetc.HaInterMolMod_add_eff_ene_get, _molsetc.HaInterMolMod_add_eff_ene_set)

    def InitMolecularFields(self) -> "int":
        return _molsetc.HaInterMolMod_InitMolecularFields(self)

    def CalcChargesInFieldEne(self) -> "double":
        return _molsetc.HaInterMolMod_CalcChargesInFieldEne(self)

    def SetElectrModel(self, new_elecr_model_idx: "int") -> "void":
        return _molsetc.HaInterMolMod_SetElectrModel(self, new_elecr_model_idx)
    compute_pk = property(_molsetc.HaInterMolMod_compute_pk_get, _molsetc.HaInterMolMod_compute_pk_set)
    electr_model = property(_molsetc.HaInterMolMod_electr_model_get, _molsetc.HaInterMolMod_electr_model_set)
    calc_et_rate = property(_molsetc.HaInterMolMod_calc_et_rate_get, _molsetc.HaInterMolMod_calc_et_rate_set)
    empirical_flag = property(_molsetc.HaInterMolMod_empirical_flag_get, _molsetc.HaInterMolMod_empirical_flag_set)
    p_mc_sim = property(_molsetc.HaInterMolMod_p_mc_sim_get, _molsetc.HaInterMolMod_p_mc_sim_set)
    p_ene_minimizer = property(_molsetc.HaInterMolMod_p_ene_minimizer_get, _molsetc.HaInterMolMod_p_ene_minimizer_set)
    p_rex_sim = property(_molsetc.HaInterMolMod_p_rex_sim_get, _molsetc.HaInterMolMod_p_rex_sim_set)
    p_prot_rdx_mod = property(_molsetc.HaInterMolMod_p_prot_rdx_mod_get, _molsetc.HaInterMolMod_p_prot_rdx_mod_set)
    interact_groups = property(_molsetc.HaInterMolMod_interact_groups_get, _molsetc.HaInterMolMod_interact_groups_set)
    el_pot_field = property(_molsetc.HaInterMolMod_el_pot_field_get, _molsetc.HaInterMolMod_el_pot_field_set)
    vdw_pot_field = property(_molsetc.HaInterMolMod_vdw_pot_field_get, _molsetc.HaInterMolMod_vdw_pot_field_set)
    normalmode_vec = property(_molsetc.HaInterMolMod_normalmode_vec_get, _molsetc.HaInterMolMod_normalmode_vec_set)
    normalmode_val = property(_molsetc.HaInterMolMod_normalmode_val_get, _molsetc.HaInterMolMod_normalmode_val_set)

# Register HaInterMolMod in _molsetc:
_molsetc.HaInterMolMod_swigregister(HaInterMolMod)
NO_ELECTR = cvar.NO_ELECTR
CONTINUUM_ELECTR = cvar.CONTINUUM_ELECTR
COULOMB_ELECTR = cvar.COULOMB_ELECTR
CHARGES_IN_FIELD_ELECTR = cvar.CHARGES_IN_FIELD_ELECTR

class InterMolMCSimulator(MCSimulator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p_im_mod_new: "HaInterMolMod"):
        _molsetc.InterMolMCSimulator_swiginit(self, _molsetc.new_InterMolMCSimulator(p_im_mod_new))
    __swig_destroy__ = _molsetc.delete_InterMolMCSimulator

    def SetStdParams(self) -> "void":
        return _molsetc.InterMolMCSimulator_SetStdParams(self)
    freeze_first_mol = property(_molsetc.InterMolMCSimulator_freeze_first_mol_get, _molsetc.InterMolMCSimulator_freeze_first_mol_set)
    ang_ratio = property(_molsetc.InterMolMCSimulator_ang_ratio_get, _molsetc.InterMolMCSimulator_ang_ratio_set)
    tr_ratio = property(_molsetc.InterMolMCSimulator_tr_ratio_get, _molsetc.InterMolMCSimulator_tr_ratio_set)
    equil_conf_vol_vdw = property(_molsetc.InterMolMCSimulator_equil_conf_vol_vdw_get, _molsetc.InterMolMCSimulator_equil_conf_vol_vdw_set)
    amber_flag = property(_molsetc.InterMolMCSimulator_amber_flag_get, _molsetc.InterMolMCSimulator_amber_flag_set)
    rex_flag = property(_molsetc.InterMolMCSimulator_rex_flag_get, _molsetc.InterMolMCSimulator_rex_flag_set)
    xy_mc_flag = property(_molsetc.InterMolMCSimulator_xy_mc_flag_get, _molsetc.InterMolMCSimulator_xy_mc_flag_set)
    mc_steps_betw_loc_min = property(_molsetc.InterMolMCSimulator_mc_steps_betw_loc_min_get, _molsetc.InterMolMCSimulator_mc_steps_betw_loc_min_set)
    x_orig = property(_molsetc.InterMolMCSimulator_x_orig_get, _molsetc.InterMolMCSimulator_x_orig_set)
    y_orig = property(_molsetc.InterMolMCSimulator_y_orig_get, _molsetc.InterMolMCSimulator_y_orig_set)
    z_orig = property(_molsetc.InterMolMCSimulator_z_orig_get, _molsetc.InterMolMCSimulator_z_orig_set)

    def GetInterMolMod(self) -> "HaInterMolMod *":
        return _molsetc.InterMolMCSimulator_GetInterMolMod(self)

    def InitEnergyFunc(self) -> "int":
        return _molsetc.InterMolMCSimulator_InitEnergyFunc(self)

    def ComputeEnergy(self, pcrd: "Coord") -> "double":
        return _molsetc.InterMolMCSimulator_ComputeEnergy(self, pcrd)

    def SetInitPoint(self, pcrd_new: "Coord"=None) -> "int":
        return _molsetc.InterMolMCSimulator_SetInitPoint(self, pcrd_new)

    def IncrementCrd(self, pcrd: "Coord") -> "int":
        return _molsetc.InterMolMCSimulator_IncrementCrd(self, pcrd)

    def SetCoord(self, pcrd: "Coord") -> "int":
        return _molsetc.InterMolMCSimulator_SetCoord(self, pcrd)

    def RunMCEmpirical(self) -> "int":
        return _molsetc.InterMolMCSimulator_RunMCEmpirical(self)

    def RunMCQuantSampling(self) -> "int":
        return _molsetc.InterMolMCSimulator_RunMCQuantSampling(self)

    def RunMCEmpiricalXY(self) -> "int":
        return _molsetc.InterMolMCSimulator_RunMCEmpiricalXY(self)

    def RunMCEmpiricalNMA(self) -> "int":
        return _molsetc.InterMolMCSimulator_RunMCEmpiricalNMA(self)

    def RunQuasiREM(self) -> "int":
        return _molsetc.InterMolMCSimulator_RunQuasiREM(self)

    def SetDiscretizedMoves(self) -> "int":
        return _molsetc.InterMolMCSimulator_SetDiscretizedMoves(self)

    def IsDiscretizedMoves(self) -> "int":
        return _molsetc.InterMolMCSimulator_IsDiscretizedMoves(self)

# Register InterMolMCSimulator in _molsetc:
_molsetc.InterMolMCSimulator_swigregister(InterMolMCSimulator)

class InterMolEnergyMinimizer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p_inter_mol_new: "HaInterMolMod"):
        _molsetc.InterMolEnergyMinimizer_swiginit(self, _molsetc.new_InterMolEnergyMinimizer(p_inter_mol_new))
    __swig_destroy__ = _molsetc.delete_InterMolEnergyMinimizer

    def SetStdParams(self) -> "void":
        return _molsetc.InterMolEnergyMinimizer_SetStdParams(self)

    def MinimizeEnergy(self, energy_type: "int", ptmol: "VecPtr") -> "int":
        return _molsetc.InterMolEnergyMinimizer_MinimizeEnergy(self, energy_type, ptmol)

    def LineSearch(self, energy_type: "int", ptmol: "VecPtr", g: "HaVec_double", p: "HaVec_double", f: "double *", stpmax: "double") -> "int":
        return _molsetc.InterMolEnergyMinimizer_LineSearch(self, energy_type, ptmol, g, p, f, stpmax)

    def SteepestDescentMinimizer(self, nsteps: "int") -> "int":
        return _molsetc.InterMolEnergyMinimizer_SteepestDescentMinimizer(self, nsteps)

    def GoldenSectionSearch(self, xold: "HaVec_double", force_array: "Vec3DValArray", torque_array: "Vec3DValArray", tol: "double &") -> "double":
        return _molsetc.InterMolEnergyMinimizer_GoldenSectionSearch(self, xold, force_array, torque_array, tol)

    def StepAlongGradient(self, xold: "HaVec_double", alpha: "double", force_array: "Vec3DValArray", torque_array: "Vec3DValArray") -> "int":
        return _molsetc.InterMolEnergyMinimizer_StepAlongGradient(self, xold, alpha, force_array, torque_array)

# Register InterMolEnergyMinimizer in _molsetc:
_molsetc.InterMolEnergyMinimizer_swigregister(InterMolEnergyMinimizer)

class InterMolRepExchSimulator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p_inter_mol_new: "HaInterMolMod"):
        _molsetc.InterMolRepExchSimulator_swiginit(self, _molsetc.new_InterMolRepExchSimulator(p_inter_mol_new))
    __swig_destroy__ = _molsetc.delete_InterMolRepExchSimulator

    def SetStdParams(self) -> "void":
        return _molsetc.InterMolRepExchSimulator_SetStdParams(self)
    nreplicas = property(_molsetc.InterMolRepExchSimulator_nreplicas_get, _molsetc.InterMolRepExchSimulator_nreplicas_set)
    rem_steps = property(_molsetc.InterMolRepExchSimulator_rem_steps_get, _molsetc.InterMolRepExchSimulator_rem_steps_set)
    temperature_max = property(_molsetc.InterMolRepExchSimulator_temperature_max_get, _molsetc.InterMolRepExchSimulator_temperature_max_set)
    vary_temperature_flag = property(_molsetc.InterMolRepExchSimulator_vary_temperature_flag_get, _molsetc.InterMolRepExchSimulator_vary_temperature_flag_set)
    ireplica = property(_molsetc.InterMolRepExchSimulator_ireplica_get, _molsetc.InterMolRepExchSimulator_ireplica_set)
    position_mat = property(_molsetc.InterMolRepExchSimulator_position_mat_get, _molsetc.InterMolRepExchSimulator_position_mat_set)
    energy_arr = property(_molsetc.InterMolRepExchSimulator_energy_arr_get, _molsetc.InterMolRepExchSimulator_energy_arr_set)
    exchange_arr = property(_molsetc.InterMolRepExchSimulator_exchange_arr_get, _molsetc.InterMolRepExchSimulator_exchange_arr_set)
    MC_traj_file_replica_basename = property(_molsetc.InterMolRepExchSimulator_MC_traj_file_replica_basename_get, _molsetc.InterMolRepExchSimulator_MC_traj_file_replica_basename_set)
    MC_energy_file_replica_basename = property(_molsetc.InterMolRepExchSimulator_MC_energy_file_replica_basename_get, _molsetc.InterMolRepExchSimulator_MC_energy_file_replica_basename_set)
    MC_rst_file_basename = property(_molsetc.InterMolRepExchSimulator_MC_rst_file_basename_get, _molsetc.InterMolRepExchSimulator_MC_rst_file_basename_set)
    n_playback_replica = property(_molsetc.InterMolRepExchSimulator_n_playback_replica_get, _molsetc.InterMolRepExchSimulator_n_playback_replica_set)
    p_acc_ratio = property(_molsetc.InterMolRepExchSimulator_p_acc_ratio_get, _molsetc.InterMolRepExchSimulator_p_acc_ratio_set)

# Register InterMolRepExchSimulator in _molsetc:
_molsetc.InterMolRepExchSimulator_swigregister(InterMolRepExchSimulator)

class HaEmpiricalMod(HaCompMod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset: "MolSet"):
        _molsetc.HaEmpiricalMod_swiginit(self, _molsetc.new_HaEmpiricalMod(new_phost_mset))
    __swig_destroy__ = _molsetc.delete_HaEmpiricalMod

    def SetStdParams(self) -> "int":
        return _molsetc.HaEmpiricalMod_SetStdParams(self)

    def Initialize(self) -> "int":
        return _molsetc.HaEmpiricalMod_Initialize(self)

    def ScoreEnergy(self) -> "double":
        return _molsetc.HaEmpiricalMod_ScoreEnergy(self)

    def GeometryScoreEnergy(self) -> "double":
        return _molsetc.HaEmpiricalMod_GeometryScoreEnergy(self)

    def PenaltyConstraints(self) -> "double":
        return _molsetc.HaEmpiricalMod_PenaltyConstraints(self)

    def PenaltyPackDistance(self) -> "double":
        return _molsetc.HaEmpiricalMod_PenaltyPackDistance(self)

    def PenaltyPackAngle(self) -> "double":
        return _molsetc.HaEmpiricalMod_PenaltyPackAngle(self)

    def CalcPackAngleForceTorque(self, torque_array: "Vec3DValArray") -> "int":
        return _molsetc.HaEmpiricalMod_CalcPackAngleForceTorque(self, torque_array)

    def PenaltyContact(self) -> "double":
        return _molsetc.HaEmpiricalMod_PenaltyContact(self)

    def PenaltyBured(self) -> "double":
        return _molsetc.HaEmpiricalMod_PenaltyBured(self)

    def PenaltyPairwise(self) -> "double":
        return _molsetc.HaEmpiricalMod_PenaltyPairwise(self)

    def PenaltyVDW(self) -> "double":
        return _molsetc.HaEmpiricalMod_PenaltyVDW(self)

    def PenaltyVDW_Bured(self) -> "double":
        return _molsetc.HaEmpiricalMod_PenaltyVDW_Bured(self)

    def PenaltyDensity(self) -> "double":
        return _molsetc.HaEmpiricalMod_PenaltyDensity(self)

    def PenaltySymmetry(self) -> "double":
        return _molsetc.HaEmpiricalMod_PenaltySymmetry(self)

    def PenaltySolventAccessible(self) -> "double":
        return _molsetc.HaEmpiricalMod_PenaltySolventAccessible(self)

    def PenaltyHelicePack(self) -> "double":
        return _molsetc.HaEmpiricalMod_PenaltyHelicePack(self)

    def LoadEmpConstrains(self) -> "int":
        return _molsetc.HaEmpiricalMod_LoadEmpConstrains(self)

    def LoadSolventAccessibleAtoms(self) -> "int":
        return _molsetc.HaEmpiricalMod_LoadSolventAccessibleAtoms(self)

    def EstablishChains(self) -> "int":
        return _molsetc.HaEmpiricalMod_EstablishChains(self)

    def SoftSqrWellPotential(self, current_value: "double &", average: "double &", stdev: "double &", weight: "double &") -> "double":
        return _molsetc.HaEmpiricalMod_SoftSqrWellPotential(self, current_value, average, stdev, weight)

    def SqrPotential(self, current_value: "double &", average: "double &", stdev: "double &", weight: "double &") -> "double":
        return _molsetc.HaEmpiricalMod_SqrPotential(self, current_value, average, stdev, weight)

    def CenterOfMass(self) -> "Vec3DValArray":
        return _molsetc.HaEmpiricalMod_CenterOfMass(self)

    def FindAxes(self) -> "Vec3DValArray":
        return _molsetc.HaEmpiricalMod_FindAxes(self)

    def LoadEmpParam(self) -> "int":
        return _molsetc.HaEmpiricalMod_LoadEmpParam(self)

    def CbettaSetUp(self) -> "int":
        return _molsetc.HaEmpiricalMod_CbettaSetUp(self)

    def FindCentralAxis(self) -> "Vec3D":
        return _molsetc.HaEmpiricalMod_FindCentralAxis(self)

    def Neighborhood(self) -> "int":
        return _molsetc.HaEmpiricalMod_Neighborhood(self)

    def CheckNeighbor(self, i: "int", j: "int") -> "double":
        return _molsetc.HaEmpiricalMod_CheckNeighbor(self, i, j)

    def ResidueTypeList(self) -> "void":
        return _molsetc.HaEmpiricalMod_ResidueTypeList(self)

    def LineSegments(self) -> "int":
        return _molsetc.HaEmpiricalMod_LineSegments(self)

    def HarmonicEnergy(self) -> "double":
        return _molsetc.HaEmpiricalMod_HarmonicEnergy(self)

    def ToyEnergy(self) -> "double":
        return _molsetc.HaEmpiricalMod_ToyEnergy(self)

    def MinEnergy(self) -> "double":
        return _molsetc.HaEmpiricalMod_MinEnergy(self)

    def PenaltyCentralAttract(self) -> "double":
        return _molsetc.HaEmpiricalMod_PenaltyCentralAttract(self)

    def CalcForceCentralAttract(self, force_cntl_array: "Vec3DValArray") -> "int":
        return _molsetc.HaEmpiricalMod_CalcForceCentralAttract(self, force_cntl_array)

    def CalculateCoarseGrainedBackbone(self) -> "void":
        return _molsetc.HaEmpiricalMod_CalculateCoarseGrainedBackbone(self)

    def CalcRepulForceTorque(self, force_array: "Vec3DValArray", torque_array: "Vec3DValArray") -> "int":
        return _molsetc.HaEmpiricalMod_CalcRepulForceTorque(self, force_array, torque_array)

    def PenaltyRepulsion(self) -> "double":
        return _molsetc.HaEmpiricalMod_PenaltyRepulsion(self)

    def GetRepulEnergy(self, aptr1: "HaAtom", aptr2: "HaAtom") -> "double":
        return _molsetc.HaEmpiricalMod_GetRepulEnergy(self, aptr1, aptr2)

    def GetRepulDerivative(self, aptr1: "HaAtom", aptr2: "HaAtom") -> "double":
        return _molsetc.HaEmpiricalMod_GetRepulDerivative(self, aptr1, aptr2)

    def GetMaxDimension(self) -> "int":
        return _molsetc.HaEmpiricalMod_GetMaxDimension(self)

    def GetGeomCenter(self) -> "int":
        return _molsetc.HaEmpiricalMod_GetGeomCenter(self)

    def GetGeomCenterToy(self) -> "int":
        return _molsetc.HaEmpiricalMod_GetGeomCenterToy(self)

    def QuantSampling(self) -> "int":
        return _molsetc.HaEmpiricalMod_QuantSampling(self)

    def LJ_ene(self) -> "double":
        return _molsetc.HaEmpiricalMod_LJ_ene(self)

    def LJState_ene(self) -> "double":
        return _molsetc.HaEmpiricalMod_LJState_ene(self)

    def LennardJonesEnergy(self) -> "double":
        return _molsetc.HaEmpiricalMod_LennardJonesEnergy(self)

    def BuriedEnergy(self) -> "double":
        return _molsetc.HaEmpiricalMod_BuriedEnergy(self)

    def InitCylinders(self) -> "int":
        return _molsetc.HaEmpiricalMod_InitCylinders(self)

    def LJ_eneCylinder(self) -> "double":
        return _molsetc.HaEmpiricalMod_LJ_eneCylinder(self)

    def BuriedEnergyCyl(self) -> "double":
        return _molsetc.HaEmpiricalMod_BuriedEnergyCyl(self)

    def PenaltyRepulsionCyl(self) -> "double":
        return _molsetc.HaEmpiricalMod_PenaltyRepulsionCyl(self)

    def Segments_Dist_3D(self, p1: "double [3]", p2: "double [3]", p3: "double [3]", p4: "double [3]") -> "double":
        return _molsetc.HaEmpiricalMod_Segments_Dist_3D(self, p1, p2, p3, p4)

    def Segment_Point_Near_3D(self, p1: "double [3]", p2: "double [3]", p: "double [3]", pn: "double [3]", dist: "double *", t: "double *") -> "void":
        return _molsetc.HaEmpiricalMod_Segment_Point_Near_3D(self, p1, p2, p, pn, dist, t)

    def Segment_Point_Dist_3D(self, p1: "double [3]", p2: "double [3]", p: "double [3]") -> "double":
        return _molsetc.HaEmpiricalMod_Segment_Point_Dist_3D(self, p1, p2, p)

    def Dvec_Eq(self, n: "int", a1: "double []", a2: "double []") -> "bool":
        return _molsetc.HaEmpiricalMod_Dvec_Eq(self, n, a1, a2)

    def Dvec_Copy(self, n: "int", a1: "double []", a2: "double []") -> "void":
        return _molsetc.HaEmpiricalMod_Dvec_Copy(self, n, a1, a2)

    def D_Max(self, x: "double", y: "double") -> "double":
        return _molsetc.HaEmpiricalMod_D_Max(self, x, y)

    def D_Min(self, x: "double", y: "double") -> "double":
        return _molsetc.HaEmpiricalMod_D_Min(self, x, y)

    def Minquad(self, x1: "double", y1: "double", x2: "double", y2: "double", x3: "double", y3: "double", xmin: "double *", ymin: "double *") -> "bool":
        return _molsetc.HaEmpiricalMod_Minquad(self, x1, y1, x2, y2, x3, y3, xmin, ymin)

    def Parabola_Ex(self, x1: "double", y1: "double", x2: "double", y2: "double", x3: "double", y3: "double", x: "double *", y: "double *") -> "int":
        return _molsetc.HaEmpiricalMod_Parabola_Ex(self, x1, y1, x2, y2, x3, y3, x, y)
    module_to_init_flag = property(_molsetc.HaEmpiricalMod_module_to_init_flag_get, _molsetc.HaEmpiricalMod_module_to_init_flag_set)
    sigma_constr = property(_molsetc.HaEmpiricalMod_sigma_constr_get, _molsetc.HaEmpiricalMod_sigma_constr_set)
    pack_dist_com = property(_molsetc.HaEmpiricalMod_pack_dist_com_get, _molsetc.HaEmpiricalMod_pack_dist_com_set)
    pack_dist_axis = property(_molsetc.HaEmpiricalMod_pack_dist_axis_get, _molsetc.HaEmpiricalMod_pack_dist_axis_set)
    sigma_pack_dist_com = property(_molsetc.HaEmpiricalMod_sigma_pack_dist_com_get, _molsetc.HaEmpiricalMod_sigma_pack_dist_com_set)
    sigma_pack_dist_axis = property(_molsetc.HaEmpiricalMod_sigma_pack_dist_axis_get, _molsetc.HaEmpiricalMod_sigma_pack_dist_axis_set)
    pack_angle = property(_molsetc.HaEmpiricalMod_pack_angle_get, _molsetc.HaEmpiricalMod_pack_angle_set)
    sigma_pack_angle = property(_molsetc.HaEmpiricalMod_sigma_pack_angle_get, _molsetc.HaEmpiricalMod_sigma_pack_angle_set)
    weight_constraints = property(_molsetc.HaEmpiricalMod_weight_constraints_get, _molsetc.HaEmpiricalMod_weight_constraints_set)
    weight_pack_distance = property(_molsetc.HaEmpiricalMod_weight_pack_distance_get, _molsetc.HaEmpiricalMod_weight_pack_distance_set)
    weight_pack_angle = property(_molsetc.HaEmpiricalMod_weight_pack_angle_get, _molsetc.HaEmpiricalMod_weight_pack_angle_set)
    dist_contct_com = property(_molsetc.HaEmpiricalMod_dist_contct_com_get, _molsetc.HaEmpiricalMod_dist_contct_com_set)
    sigma_dist_contct_com = property(_molsetc.HaEmpiricalMod_sigma_dist_contct_com_get, _molsetc.HaEmpiricalMod_sigma_dist_contct_com_set)
    num_contact_com = property(_molsetc.HaEmpiricalMod_num_contact_com_get, _molsetc.HaEmpiricalMod_num_contact_com_set)
    weight_num_contact = property(_molsetc.HaEmpiricalMod_weight_num_contact_get, _molsetc.HaEmpiricalMod_weight_num_contact_set)
    weight_vdw = property(_molsetc.HaEmpiricalMod_weight_vdw_get, _molsetc.HaEmpiricalMod_weight_vdw_set)
    weight_bured = property(_molsetc.HaEmpiricalMod_weight_bured_get, _molsetc.HaEmpiricalMod_weight_bured_set)
    pack_dens = property(_molsetc.HaEmpiricalMod_pack_dens_get, _molsetc.HaEmpiricalMod_pack_dens_set)
    sigma_pack_dens = property(_molsetc.HaEmpiricalMod_sigma_pack_dens_get, _molsetc.HaEmpiricalMod_sigma_pack_dens_set)
    weight_pack_dens = property(_molsetc.HaEmpiricalMod_weight_pack_dens_get, _molsetc.HaEmpiricalMod_weight_pack_dens_set)
    sigma_sym = property(_molsetc.HaEmpiricalMod_sigma_sym_get, _molsetc.HaEmpiricalMod_sigma_sym_set)
    weight_sym = property(_molsetc.HaEmpiricalMod_weight_sym_get, _molsetc.HaEmpiricalMod_weight_sym_set)
    face_up_bound = property(_molsetc.HaEmpiricalMod_face_up_bound_get, _molsetc.HaEmpiricalMod_face_up_bound_set)
    weight_sa = property(_molsetc.HaEmpiricalMod_weight_sa_get, _molsetc.HaEmpiricalMod_weight_sa_set)
    dist_neighborhood = property(_molsetc.HaEmpiricalMod_dist_neighborhood_get, _molsetc.HaEmpiricalMod_dist_neighborhood_set)
    lenght_factor = property(_molsetc.HaEmpiricalMod_lenght_factor_get, _molsetc.HaEmpiricalMod_lenght_factor_set)
    chain_arr = property(_molsetc.HaEmpiricalMod_chain_arr_get, _molsetc.HaEmpiricalMod_chain_arr_set)
    nchain = property(_molsetc.HaEmpiricalMod_nchain_get, _molsetc.HaEmpiricalMod_nchain_set)
    state_old = property(_molsetc.HaEmpiricalMod_state_old_get, _molsetc.HaEmpiricalMod_state_old_set)
    state_new = property(_molsetc.HaEmpiricalMod_state_new_get, _molsetc.HaEmpiricalMod_state_new_set)
    exch12 = property(_molsetc.HaEmpiricalMod_exch12_get, _molsetc.HaEmpiricalMod_exch12_set)
    curr_state = property(_molsetc.HaEmpiricalMod_curr_state_get, _molsetc.HaEmpiricalMod_curr_state_set)

# Register HaEmpiricalMod in _molsetc:
_molsetc.HaEmpiricalMod_swigregister(HaEmpiricalMod)

class HaMolMembraneMod(HaCompMod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset: "MolSet"=None):
        _molsetc.HaMolMembraneMod_swiginit(self, _molsetc.new_HaMolMembraneMod(new_phost_mset))
    __swig_destroy__ = _molsetc.delete_HaMolMembraneMod

    def SetStdParams(self) -> "int":
        return _molsetc.HaMolMembraneMod_SetStdParams(self)
    module_to_init_flag = property(_molsetc.HaMolMembraneMod_module_to_init_flag_get, _molsetc.HaMolMembraneMod_module_to_init_flag_set)
    module_to_init_HaMolMechMod = property(_molsetc.HaMolMembraneMod_module_to_init_HaMolMechMod_get, _molsetc.HaMolMembraneMod_module_to_init_HaMolMechMod_set)
    nonbond_DFIRE_cutoff_dist = property(_molsetc.HaMolMembraneMod_nonbond_DFIRE_cutoff_dist_get, _molsetc.HaMolMembraneMod_nonbond_DFIRE_cutoff_dist_set)
    pairwiseDfire_flag = property(_molsetc.HaMolMembraneMod_pairwiseDfire_flag_get, _molsetc.HaMolMembraneMod_pairwiseDfire_flag_set)
    pairwiseDfire_core = property(_molsetc.HaMolMembraneMod_pairwiseDfire_core_get, _molsetc.HaMolMembraneMod_pairwiseDfire_core_set)
    pairwiseDfire_sa = property(_molsetc.HaMolMembraneMod_pairwiseDfire_sa_get, _molsetc.HaMolMembraneMod_pairwiseDfire_sa_set)
    build_nb_coarsegrained_contact_list = property(_molsetc.HaMolMembraneMod_build_nb_coarsegrained_contact_list_get, _molsetc.HaMolMembraneMod_build_nb_coarsegrained_contact_list_set)
    display_results_flag = property(_molsetc.HaMolMembraneMod_display_results_flag_get, _molsetc.HaMolMembraneMod_display_results_flag_set)

    def SetCoarseGrainedDFireCoreParams(self) -> "int":
        return _molsetc.HaMolMembraneMod_SetCoarseGrainedDFireCoreParams(self)

    def Initialize(self) -> "int":
        return _molsetc.HaMolMembraneMod_Initialize(self)
    AtomsCentroids = property(_molsetc.HaMolMembraneMod_AtomsCentroids_get, _molsetc.HaMolMembraneMod_AtomsCentroids_set)
    Residues = property(_molsetc.HaMolMembraneMod_Residues_get, _molsetc.HaMolMembraneMod_Residues_set)
    LipidInterfaceAtoms = property(_molsetc.HaMolMembraneMod_LipidInterfaceAtoms_get, _molsetc.HaMolMembraneMod_LipidInterfaceAtoms_set)
    CentreAtoms = property(_molsetc.HaMolMembraneMod_CentreAtoms_get, _molsetc.HaMolMembraneMod_CentreAtoms_set)

    def ClearMembraneModel(self) -> "int":
        return _molsetc.HaMolMembraneMod_ClearMembraneModel(self)

    def BuildNonBondSCContactList(self) -> "bool":
        return _molsetc.HaMolMembraneMod_BuildNonBondSCContactList(self)
    nonbond_SC_contact_list = property(_molsetc.HaMolMembraneMod_nonbond_SC_contact_list_get, _molsetc.HaMolMembraneMod_nonbond_SC_contact_list_set)

    def BuildNonBondCAContactList(self) -> "bool":
        return _molsetc.HaMolMembraneMod_BuildNonBondCAContactList(self)
    nonbond_CA_contact_list = property(_molsetc.HaMolMembraneMod_nonbond_CA_contact_list_get, _molsetc.HaMolMembraneMod_nonbond_CA_contact_list_set)

    def BuildClashAtomList(self) -> "bool":
        return _molsetc.HaMolMembraneMod_BuildClashAtomList(self)
    nonbond_atom_clash_list = property(_molsetc.HaMolMembraneMod_nonbond_atom_clash_list_get, _molsetc.HaMolMembraneMod_nonbond_atom_clash_list_set)

    def LoadDFireCoreParams(self) -> "int":
        return _molsetc.HaMolMembraneMod_LoadDFireCoreParams(self)
    la_value = property(_molsetc.HaMolMembraneMod_la_value_get, _molsetc.HaMolMembraneMod_la_value_set)
    la_weight_value = property(_molsetc.HaMolMembraneMod_la_weight_value_get, _molsetc.HaMolMembraneMod_la_weight_value_set)
    sc_vdwradius = property(_molsetc.HaMolMembraneMod_sc_vdwradius_get, _molsetc.HaMolMembraneMod_sc_vdwradius_set)
    pairwise_energy_vec = property(_molsetc.HaMolMembraneMod_pairwise_energy_vec_get, _molsetc.HaMolMembraneMod_pairwise_energy_vec_set)
    pairwise_energy_vec_sa = property(_molsetc.HaMolMembraneMod_pairwise_energy_vec_sa_get, _molsetc.HaMolMembraneMod_pairwise_energy_vec_sa_set)

    def ScoreEnergy(self) -> "int":
        return _molsetc.HaMolMembraneMod_ScoreEnergy(self)
    pairwise_ene_cg = property(_molsetc.HaMolMembraneMod_pairwise_ene_cg_get, _molsetc.HaMolMembraneMod_pairwise_ene_cg_set)
    vdw_at_repul = property(_molsetc.HaMolMembraneMod_vdw_at_repul_get, _molsetc.HaMolMembraneMod_vdw_at_repul_set)
    vdw_ene_repul = property(_molsetc.HaMolMembraneMod_vdw_ene_repul_get, _molsetc.HaMolMembraneMod_vdw_ene_repul_set)
    lipid_polar_ene = property(_molsetc.HaMolMembraneMod_lipid_polar_ene_get, _molsetc.HaMolMembraneMod_lipid_polar_ene_set)
    constraint_ene_mol = property(_molsetc.HaMolMembraneMod_constraint_ene_mol_get, _molsetc.HaMolMembraneMod_constraint_ene_mol_set)
    constraint_ene = property(_molsetc.HaMolMembraneMod_constraint_ene_get, _molsetc.HaMolMembraneMod_constraint_ene_set)
    MAX_radius = property(_molsetc.HaMolMembraneMod_MAX_radius_get, _molsetc.HaMolMembraneMod_MAX_radius_set)
    tot_energy = property(_molsetc.HaMolMembraneMod_tot_energy_get, _molsetc.HaMolMembraneMod_tot_energy_set)

    def CalcVdwRep(self, pt1: "HaAtom", pt2: "HaAtom", vdw_at_ene: "double &") -> "bool":
        return _molsetc.HaMolMembraneMod_CalcVdwRep(self, pt1, pt2, vdw_at_ene)

    def PairwiseEnergy(self, pt1: "HaAtom", pt2: "HaAtom") -> "double":
        return _molsetc.HaMolMembraneMod_PairwiseEnergy(self, pt1, pt2)
    vdw_x4_flag = property(_molsetc.HaMolMembraneMod_vdw_x4_flag_get, _molsetc.HaMolMembraneMod_vdw_x4_flag_set)
    vdw_x12_flag = property(_molsetc.HaMolMembraneMod_vdw_x12_flag_get, _molsetc.HaMolMembraneMod_vdw_x12_flag_set)
    vdw_x4_f_flag = property(_molsetc.HaMolMembraneMod_vdw_x4_f_flag_get, _molsetc.HaMolMembraneMod_vdw_x4_f_flag_set)
    vdw_HardSphere = property(_molsetc.HaMolMembraneMod_vdw_HardSphere_get, _molsetc.HaMolMembraneMod_vdw_HardSphere_set)

    def LoopClosure(self) -> "int":
        return _molsetc.HaMolMembraneMod_LoopClosure(self)

    def EntropySCM(self) -> "int":
        return _molsetc.HaMolMembraneMod_EntropySCM(self)

    def OPEP(self) -> "int":
        return _molsetc.HaMolMembraneMod_OPEP(self)

    def SetCoarseGrainedOPEPParams(self) -> "int":
        return _molsetc.HaMolMembraneMod_SetCoarseGrainedOPEPParams(self)

    def SoftSqrWellPotentiala(self, a: "double &", b: "double &", c: "double &", d: "double &") -> "double":
        return _molsetc.HaMolMembraneMod_SoftSqrWellPotentiala(self, a, b, c, d)

    def CbettaSetUp(self) -> "int":
        return _molsetc.HaMolMembraneMod_CbettaSetUp(self)

    def LineSegments(self) -> "int":
        return _molsetc.HaMolMembraneMod_LineSegments(self)

    def FindAxes(self) -> "Vec3DValArray":
        return _molsetc.HaMolMembraneMod_FindAxes(self)
    angle_stat = property(_molsetc.HaMolMembraneMod_angle_stat_get, _molsetc.HaMolMembraneMod_angle_stat_set)
    stdev = property(_molsetc.HaMolMembraneMod_stdev_get, _molsetc.HaMolMembraneMod_stdev_set)
    angle_pack = property(_molsetc.HaMolMembraneMod_angle_pack_get, _molsetc.HaMolMembraneMod_angle_pack_set)
    axis_arr = property(_molsetc.HaMolMembraneMod_axis_arr_get, _molsetc.HaMolMembraneMod_axis_arr_set)
    segment_vec = property(_molsetc.HaMolMembraneMod_segment_vec_get, _molsetc.HaMolMembraneMod_segment_vec_set)
    atm_sc_array = property(_molsetc.HaMolMembraneMod_atm_sc_array_get, _molsetc.HaMolMembraneMod_atm_sc_array_set)
    atm_ca_array = property(_molsetc.HaMolMembraneMod_atm_ca_array_get, _molsetc.HaMolMembraneMod_atm_ca_array_set)
    residue_unres_arr = property(_molsetc.HaMolMembraneMod_residue_unres_arr_get, _molsetc.HaMolMembraneMod_residue_unres_arr_set)
    anglevar = property(_molsetc.HaMolMembraneMod_anglevar_get, _molsetc.HaMolMembraneMod_anglevar_set)

# Register HaMolMembraneMod in _molsetc:
_molsetc.HaMolMembraneMod_swigregister(HaMolMembraneMod)


def unhash(id: "harlem::HashID const &") -> "std::string":
    return _molsetc.unhash(id)

def hash(name: "std::string const &") -> "harlem::HashID":
    return _molsetc.hash(name)
class HashMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.HashMap_swiginit(self, _molsetc.new_HashMap(*args))
    __swig_destroy__ = _molsetc.delete_HashMap

    def Copy(self, ref: "HashMap") -> "void":
        return _molsetc.HashMap_Copy(self, ref)

    def clone(self) -> "harlem::HashMap *":
        return _molsetc.HashMap_clone(self)
    empty_map = property(_molsetc.HashMap_empty_map_get, _molsetc.HashMap_empty_map_set)

    def set_i(self, *args) -> "void":
        return _molsetc.HashMap_set_i(self, *args)

    def set_d(self, *args) -> "void":
        return _molsetc.HashMap_set_d(self, *args)

    def set_s(self, *args) -> "void":
        return _molsetc.HashMap_set_s(self, *args)

    def set_a(self, *args) -> "void":
        return _molsetc.HashMap_set_a(self, *args)

    def get_i(self, *args) -> "int":
        return _molsetc.HashMap_get_i(self, *args)

    def get_d(self, *args) -> "double":
        return _molsetc.HashMap_get_d(self, *args)

    def get_s(self, *args) -> "std::string":
        return _molsetc.HashMap_get_s(self, *args)

    def get_a(self, *args) -> "boost::any":
        return _molsetc.HashMap_get_a(self, *args)

    def has_i(self, *args) -> "bool":
        return _molsetc.HashMap_has_i(self, *args)

    def has_d(self, *args) -> "bool":
        return _molsetc.HashMap_has_d(self, *args)

    def has_s(self, *args) -> "bool":
        return _molsetc.HashMap_has_s(self, *args)

    def has_a(self, *args) -> "bool":
        return _molsetc.HashMap_has_a(self, *args)

# Register HashMap in _molsetc:
_molsetc.HashMap_swigregister(HashMap)

class SaveOptions(HashMap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.SaveOptions_swiginit(self, _molsetc.new_SaveOptions(*args))
    __swig_destroy__ = _molsetc.delete_SaveOptions

    def Copy(self, ref: "HashMap") -> "void":
        return _molsetc.SaveOptions_Copy(self, ref)

    def clone(self) -> "harlem::HashMap *":
        return _molsetc.SaveOptions_clone(self)

    def ToSaveHeader(self) -> "bool":
        return _molsetc.SaveOptions_ToSaveHeader(self)

    def SetSaveHeader(self, set_par: "bool"=True) -> "void":
        return _molsetc.SaveOptions_SetSaveHeader(self, set_par)

    def ToSaveFooter(self) -> "bool":
        return _molsetc.SaveOptions_ToSaveFooter(self)

    def SetSaveFooter(self, set_par: "bool"=True) -> "void":
        return _molsetc.SaveOptions_SetSaveFooter(self, set_par)

# Register SaveOptions in _molsetc:
_molsetc.SaveOptions_swigregister(SaveOptions)

class HaEnum(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def value(self) -> "int &":
        return _molsetc.HaEnum_value(self)

    def label(self) -> "char const *":
        return _molsetc.HaEnum_label(self)

    def SetWithValue(self, value: "int") -> "int":
        return _molsetc.HaEnum_SetWithValue(self, value)

    def SetWithLabel(self, label: "char const *") -> "int":
        return _molsetc.HaEnum_SetWithLabel(self, label)

    def Bcast(self, comm: "MPI_Comm &", root: "int"=0) -> "int":
        return _molsetc.HaEnum_Bcast(self, comm, root)

    def all_values(self) -> "std::vector< int,std::allocator< int > >":
        return _molsetc.HaEnum_all_values(self)

    def GetAllLabels(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _molsetc.HaEnum_GetAllLabels(self)

    def GetActiveLabels(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _molsetc.HaEnum_GetActiveLabels(self)
    __swig_destroy__ = _molsetc.delete_HaEnum

# Register HaEnum in _molsetc:
_molsetc.HaEnum_swigregister(HaEnum)

class HaEnum1(HaEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def all_values(self) -> "std::vector< int,std::allocator< int > >":
        return _molsetc.HaEnum1_all_values(self)

    def GetAllLabels(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _molsetc.HaEnum1_GetAllLabels(self)
    __swig_destroy__ = _molsetc.delete_HaEnum1

# Register HaEnum1 in _molsetc:
_molsetc.HaEnum1_swigregister(HaEnum1)

class AtomFFParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.AtomFFParam_swiginit(self, _molsetc.new_AtomFFParam(*args))
    __swig_destroy__ = _molsetc.delete_AtomFFParam

    def Clear(self) -> "void":
        return _molsetc.AtomFFParam_Clear(self)

    def LoadXml(self, xml_element: "TiXmlElement", option: "int"=0) -> "int":
        return _molsetc.AtomFFParam_LoadXml(self, xml_element, option)

    def HasDipole(self) -> "int":
        return _molsetc.AtomFFParam_HasDipole(self)

    def HasQPole(self) -> "int":
        return _molsetc.AtomFFParam_HasQPole(self)

    def HasPolar(self) -> "int":
        return _molsetc.AtomFFParam_HasPolar(self)

    def HasHPolar(self) -> "bool":
        return _molsetc.AtomFFParam_HasHPolar(self)

    def HasFrameAtomNames(self) -> "int":
        return _molsetc.AtomFFParam_HasFrameAtomNames(self)

    def IsFrameSet(self) -> "int":
        return _molsetc.AtomFFParam_IsFrameSet(self)

    def AlterPolarizability(self) -> "bool":
        return _molsetc.AtomFFParam_AlterPolarizability(self)

    def IsPolarPositionDep(self) -> "bool":
        return _molsetc.AtomFFParam_IsPolarPositionDep(self)

    def HasScreenPolar(self) -> "bool":
        return _molsetc.AtomFFParam_HasScreenPolar(self)

    def GetCharge(self) -> "double":
        return _molsetc.AtomFFParam_GetCharge(self)

    def GetDipole(self) -> "HaVec_double":
        return _molsetc.AtomFFParam_GetDipole(self)

    def GetQPole(self) -> "HaVec_double":
        return _molsetc.AtomFFParam_GetQPole(self)

    def IsChiralFrame(self) -> "int":
        return _molsetc.AtomFFParam_IsChiralFrame(self)

    def IsBisectFrame(self) -> "int":
        return _molsetc.AtomFFParam_IsBisectFrame(self)

    def SetFrameFromAtomNames(self) -> "int":
        return _molsetc.AtomFFParam_SetFrameFromAtomNames(self)
    charge = property(_molsetc.AtomFFParam_charge_get, _molsetc.AtomFFParam_charge_set)
    dipole = property(_molsetc.AtomFFParam_dipole_get, _molsetc.AtomFFParam_dipole_set)
    qpole = property(_molsetc.AtomFFParam_qpole_get, _molsetc.AtomFFParam_qpole_set)
    polar = property(_molsetc.AtomFFParam_polar_get, _molsetc.AtomFFParam_polar_set)
    hpolar = property(_molsetc.AtomFFParam_hpolar_get, _molsetc.AtomFFParam_hpolar_set)
    damp_polar_strength = property(_molsetc.AtomFFParam_damp_polar_strength_get, _molsetc.AtomFFParam_damp_polar_strength_set)
    damp_polar_sensitivity = property(_molsetc.AtomFFParam_damp_polar_sensitivity_get, _molsetc.AtomFFParam_damp_polar_sensitivity_set)
    damp_polar_rad = property(_molsetc.AtomFFParam_damp_polar_rad_get, _molsetc.AtomFFParam_damp_polar_rad_set)
    screen_polar = property(_molsetc.AtomFFParam_screen_polar_get, _molsetc.AtomFFParam_screen_polar_set)
    at_name = property(_molsetc.AtomFFParam_at_name_get, _molsetc.AtomFFParam_at_name_set)
    ff_symbol = property(_molsetc.AtomFFParam_ff_symbol_get, _molsetc.AtomFFParam_ff_symbol_set)
    ff_polar_symbol = property(_molsetc.AtomFFParam_ff_polar_symbol_get, _molsetc.AtomFFParam_ff_polar_symbol_set)
    frame_atom_names = property(_molsetc.AtomFFParam_frame_atom_names_get, _molsetc.AtomFFParam_frame_atom_names_set)
    frame_atoms = property(_molsetc.AtomFFParam_frame_atoms_get, _molsetc.AtomFFParam_frame_atoms_set)
    bisect_flag = property(_molsetc.AtomFFParam_bisect_flag_get, _molsetc.AtomFFParam_bisect_flag_set)
    aptr_ref = property(_molsetc.AtomFFParam_aptr_ref_get, _molsetc.AtomFFParam_aptr_ref_set)

# Register AtomFFParam in _molsetc:
_molsetc.AtomFFParam_swigregister(AtomFFParam)

class ResFFTemplate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p_res_templ_new: "HaResidue"):
        _molsetc.ResFFTemplate_swiginit(self, _molsetc.new_ResFFTemplate(p_res_templ_new))
    __swig_destroy__ = _molsetc.delete_ResFFTemplate

    def Clear(self) -> "void":
        return _molsetc.ResFFTemplate_Clear(self)

    def LoadXml(self, xml_element: "TiXmlElement", option: "int"=0) -> "int":
        return _molsetc.ResFFTemplate_LoadXml(self, xml_element, option)

    def GetAtomFFParam(self, at_name: "std::string const &") -> "AtomFFParam *":
        return _molsetc.ResFFTemplate_GetAtomFFParam(self, at_name)

    def SetAtomFFParam(self, at_name: "std::string const &", p_at_ff_param: "AtomFFParam") -> "int":
        return _molsetc.ResFFTemplate_SetAtomFFParam(self, at_name, p_at_ff_param)

    def SetResFFVersion(self, res_ff_version_new: "std::string const &") -> "int":
        return _molsetc.ResFFTemplate_SetResFFVersion(self, res_ff_version_new)

    def GetFullName(self) -> "std::string":
        return _molsetc.ResFFTemplate_GetFullName(self)

    def GetResTemplate(self) -> "HaResidue *":
        return _molsetc.ResFFTemplate_GetResTemplate(self)
    atom_params = property(_molsetc.ResFFTemplate_atom_params_get, _molsetc.ResFFTemplate_atom_params_set)
    bonds = property(_molsetc.ResFFTemplate_bonds_get, _molsetc.ResFFTemplate_bonds_set)
    angles = property(_molsetc.ResFFTemplate_angles_get, _molsetc.ResFFTemplate_angles_set)
    dihedrals = property(_molsetc.ResFFTemplate_dihedrals_get, _molsetc.ResFFTemplate_dihedrals_set)
    improper_dihedrals = property(_molsetc.ResFFTemplate_improper_dihedrals_get, _molsetc.ResFFTemplate_improper_dihedrals_set)

# Register ResFFTemplate in _molsetc:
_molsetc.ResFFTemplate_swigregister(ResFFTemplate)

class MMBond(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.MMBond_swiginit(self, _molsetc.new_MMBond(*args))
    __swig_destroy__ = _molsetc.delete_MMBond

    def __eq__(self, rhs: "MMBond") -> "bool":
        return _molsetc.MMBond___eq__(self, rhs)

    def __lt__(self, rhs: "MMBond") -> "bool":
        return _molsetc.MMBond___lt__(self, rhs)
    r0 = property(_molsetc.MMBond_r0_get, _molsetc.MMBond_r0_set)
    fc = property(_molsetc.MMBond_fc_get, _molsetc.MMBond_fc_set)
    set_type = property(_molsetc.MMBond_set_type_get, _molsetc.MMBond_set_type_set)
    pt1 = property(_molsetc.MMBond_pt1_get, _molsetc.MMBond_pt1_set)
    pt2 = property(_molsetc.MMBond_pt2_get, _molsetc.MMBond_pt2_set)

# Register MMBond in _molsetc:
_molsetc.MMBond_swigregister(MMBond)

class MMValAngle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.MMValAngle_swiginit(self, _molsetc.new_MMValAngle(*args))
    __swig_destroy__ = _molsetc.delete_MMValAngle
    pt1 = property(_molsetc.MMValAngle_pt1_get, _molsetc.MMValAngle_pt1_set)
    pt2 = property(_molsetc.MMValAngle_pt2_get, _molsetc.MMValAngle_pt2_set)
    pt3 = property(_molsetc.MMValAngle_pt3_get, _molsetc.MMValAngle_pt3_set)
    a0 = property(_molsetc.MMValAngle_a0_get, _molsetc.MMValAngle_a0_set)
    fc = property(_molsetc.MMValAngle_fc_get, _molsetc.MMValAngle_fc_set)
    set_type = property(_molsetc.MMValAngle_set_type_get, _molsetc.MMValAngle_set_type_set)

    def __eq__(self, rhs: "MMValAngle") -> "bool":
        return _molsetc.MMValAngle___eq__(self, rhs)

    def __lt__(self, rhs: "MMValAngle") -> "bool":
        return _molsetc.MMValAngle___lt__(self, rhs)

# Register MMValAngle in _molsetc:
_molsetc.MMValAngle_swigregister(MMValAngle)

class MMDihedral(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.MMDihedral_swiginit(self, _molsetc.new_MMDihedral(*args))
    __swig_destroy__ = _molsetc.delete_MMDihedral
    improper = property(_molsetc.MMDihedral_improper_get, _molsetc.MMDihedral_improper_set)
    calc_14 = property(_molsetc.MMDihedral_calc_14_get, _molsetc.MMDihedral_calc_14_set)
    pt1 = property(_molsetc.MMDihedral_pt1_get, _molsetc.MMDihedral_pt1_set)
    pt2 = property(_molsetc.MMDihedral_pt2_get, _molsetc.MMDihedral_pt2_set)
    pt3 = property(_molsetc.MMDihedral_pt3_get, _molsetc.MMDihedral_pt3_set)
    pt4 = property(_molsetc.MMDihedral_pt4_get, _molsetc.MMDihedral_pt4_set)
    set_type = property(_molsetc.MMDihedral_set_type_get, _molsetc.MMDihedral_set_type_set)

    def GetNTerms(self) -> "int":
        return _molsetc.MMDihedral_GetNTerms(self)

    def ClearParams(self) -> "void":
        return _molsetc.MMDihedral_ClearParams(self)
    pn = property(_molsetc.MMDihedral_pn_get, _molsetc.MMDihedral_pn_set)
    phase = property(_molsetc.MMDihedral_phase_get, _molsetc.MMDihedral_phase_set)
    pk = property(_molsetc.MMDihedral_pk_get, _molsetc.MMDihedral_pk_set)
    idivf = property(_molsetc.MMDihedral_idivf_get, _molsetc.MMDihedral_idivf_set)

    def AddTerm(self, pn_new: "double", phase_new: "double", pk_new: "double", idivf_new: "double"=1.0) -> "int":
        return _molsetc.MMDihedral_AddTerm(self, pn_new, phase_new, pk_new, idivf_new)

    def __eq__(self, rhs: "MMDihedral") -> "bool":
        return _molsetc.MMDihedral___eq__(self, rhs)

    def __lt__(self, rhs: "MMDihedral") -> "bool":
        return _molsetc.MMDihedral___lt__(self, rhs)

# Register MMDihedral in _molsetc:
_molsetc.MMDihedral_swigregister(MMDihedral)

class AtomContact(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.AtomContact_swiginit(self, _molsetc.new_AtomContact(*args))
    __swig_destroy__ = _molsetc.delete_AtomContact

    def __eq__(self, rhs: "AtomContact") -> "bool":
        return _molsetc.AtomContact___eq__(self, rhs)

    def __lt__(self, rhs: "AtomContact") -> "bool":
        return _molsetc.AtomContact___lt__(self, rhs)
    cf = property(_molsetc.AtomContact_cf_get, _molsetc.AtomContact_cf_set)
    cnt_type = property(_molsetc.AtomContact_cnt_type_get, _molsetc.AtomContact_cnt_type_set)

    def SetParamsEneR(self, ene_min: "double", rmin: "double") -> "int":
        return _molsetc.AtomContact_SetParamsEneR(self, ene_min, rmin)

    def GetRMin(self) -> "double":
        return _molsetc.AtomContact_GetRMin(self)

    def GetEneMin(self) -> "double":
        return _molsetc.AtomContact_GetEneMin(self)

    def GetHarmForceConst(self) -> "double":
        return _molsetc.AtomContact_GetHarmForceConst(self)

    def IsHarmonic(self) -> "bool":
        return _molsetc.AtomContact_IsHarmonic(self)
    set_type = property(_molsetc.AtomContact_set_type_get, _molsetc.AtomContact_set_type_set)
    pt1 = property(_molsetc.AtomContact_pt1_get, _molsetc.AtomContact_pt1_set)
    pt2 = property(_molsetc.AtomContact_pt2_get, _molsetc.AtomContact_pt2_set)

# Register AtomContact in _molsetc:
_molsetc.AtomContact_swigregister(AtomContact)

class vector_MMDihedral(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _molsetc.vector_MMDihedral_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _molsetc.vector_MMDihedral___nonzero__(self)

    def __bool__(self) -> "bool":
        return _molsetc.vector_MMDihedral___bool__(self)

    def __len__(self) -> "std::vector< MMDihedral >::size_type":
        return _molsetc.vector_MMDihedral___len__(self)

    def __getslice__(self, i: "std::vector< MMDihedral >::difference_type", j: "std::vector< MMDihedral >::difference_type") -> "std::vector< MMDihedral,std::allocator< MMDihedral > > *":
        return _molsetc.vector_MMDihedral___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _molsetc.vector_MMDihedral___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< MMDihedral >::difference_type", j: "std::vector< MMDihedral >::difference_type") -> "void":
        return _molsetc.vector_MMDihedral___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _molsetc.vector_MMDihedral___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< MMDihedral >::value_type const &":
        return _molsetc.vector_MMDihedral___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _molsetc.vector_MMDihedral___setitem__(self, *args)

    def pop(self) -> "std::vector< MMDihedral >::value_type":
        return _molsetc.vector_MMDihedral_pop(self)

    def append(self, x: "MMDihedral") -> "void":
        return _molsetc.vector_MMDihedral_append(self, x)

    def empty(self) -> "bool":
        return _molsetc.vector_MMDihedral_empty(self)

    def size(self) -> "std::vector< MMDihedral >::size_type":
        return _molsetc.vector_MMDihedral_size(self)

    def swap(self, v: "vector_MMDihedral") -> "void":
        return _molsetc.vector_MMDihedral_swap(self, v)

    def begin(self) -> "std::vector< MMDihedral >::iterator":
        return _molsetc.vector_MMDihedral_begin(self)

    def end(self) -> "std::vector< MMDihedral >::iterator":
        return _molsetc.vector_MMDihedral_end(self)

    def rbegin(self) -> "std::vector< MMDihedral >::reverse_iterator":
        return _molsetc.vector_MMDihedral_rbegin(self)

    def rend(self) -> "std::vector< MMDihedral >::reverse_iterator":
        return _molsetc.vector_MMDihedral_rend(self)

    def clear(self) -> "void":
        return _molsetc.vector_MMDihedral_clear(self)

    def get_allocator(self) -> "std::vector< MMDihedral >::allocator_type":
        return _molsetc.vector_MMDihedral_get_allocator(self)

    def pop_back(self) -> "void":
        return _molsetc.vector_MMDihedral_pop_back(self)

    def erase(self, *args) -> "std::vector< MMDihedral >::iterator":
        return _molsetc.vector_MMDihedral_erase(self, *args)

    def __init__(self, *args):
        _molsetc.vector_MMDihedral_swiginit(self, _molsetc.new_vector_MMDihedral(*args))

    def push_back(self, x: "MMDihedral") -> "void":
        return _molsetc.vector_MMDihedral_push_back(self, x)

    def front(self) -> "std::vector< MMDihedral >::value_type const &":
        return _molsetc.vector_MMDihedral_front(self)

    def back(self) -> "std::vector< MMDihedral >::value_type const &":
        return _molsetc.vector_MMDihedral_back(self)

    def assign(self, n: "std::vector< MMDihedral >::size_type", x: "MMDihedral") -> "void":
        return _molsetc.vector_MMDihedral_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _molsetc.vector_MMDihedral_resize(self, *args)

    def insert(self, *args) -> "void":
        return _molsetc.vector_MMDihedral_insert(self, *args)

    def reserve(self, n: "std::vector< MMDihedral >::size_type") -> "void":
        return _molsetc.vector_MMDihedral_reserve(self, n)

    def capacity(self) -> "std::vector< MMDihedral >::size_type":
        return _molsetc.vector_MMDihedral_capacity(self)
    __swig_destroy__ = _molsetc.delete_vector_MMDihedral

# Register vector_MMDihedral in _molsetc:
_molsetc.vector_MMDihedral_swigregister(vector_MMDihedral)

class vector_VdWContact(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _molsetc.vector_VdWContact_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _molsetc.vector_VdWContact___nonzero__(self)

    def __bool__(self) -> "bool":
        return _molsetc.vector_VdWContact___bool__(self)

    def __len__(self) -> "std::vector< AtomContact >::size_type":
        return _molsetc.vector_VdWContact___len__(self)

    def __getslice__(self, i: "std::vector< AtomContact >::difference_type", j: "std::vector< AtomContact >::difference_type") -> "std::vector< AtomContact,std::allocator< AtomContact > > *":
        return _molsetc.vector_VdWContact___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _molsetc.vector_VdWContact___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< AtomContact >::difference_type", j: "std::vector< AtomContact >::difference_type") -> "void":
        return _molsetc.vector_VdWContact___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _molsetc.vector_VdWContact___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< AtomContact >::value_type const &":
        return _molsetc.vector_VdWContact___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _molsetc.vector_VdWContact___setitem__(self, *args)

    def pop(self) -> "std::vector< AtomContact >::value_type":
        return _molsetc.vector_VdWContact_pop(self)

    def append(self, x: "AtomContact") -> "void":
        return _molsetc.vector_VdWContact_append(self, x)

    def empty(self) -> "bool":
        return _molsetc.vector_VdWContact_empty(self)

    def size(self) -> "std::vector< AtomContact >::size_type":
        return _molsetc.vector_VdWContact_size(self)

    def swap(self, v: "vector_VdWContact") -> "void":
        return _molsetc.vector_VdWContact_swap(self, v)

    def begin(self) -> "std::vector< AtomContact >::iterator":
        return _molsetc.vector_VdWContact_begin(self)

    def end(self) -> "std::vector< AtomContact >::iterator":
        return _molsetc.vector_VdWContact_end(self)

    def rbegin(self) -> "std::vector< AtomContact >::reverse_iterator":
        return _molsetc.vector_VdWContact_rbegin(self)

    def rend(self) -> "std::vector< AtomContact >::reverse_iterator":
        return _molsetc.vector_VdWContact_rend(self)

    def clear(self) -> "void":
        return _molsetc.vector_VdWContact_clear(self)

    def get_allocator(self) -> "std::vector< AtomContact >::allocator_type":
        return _molsetc.vector_VdWContact_get_allocator(self)

    def pop_back(self) -> "void":
        return _molsetc.vector_VdWContact_pop_back(self)

    def erase(self, *args) -> "std::vector< AtomContact >::iterator":
        return _molsetc.vector_VdWContact_erase(self, *args)

    def __init__(self, *args):
        _molsetc.vector_VdWContact_swiginit(self, _molsetc.new_vector_VdWContact(*args))

    def push_back(self, x: "AtomContact") -> "void":
        return _molsetc.vector_VdWContact_push_back(self, x)

    def front(self) -> "std::vector< AtomContact >::value_type const &":
        return _molsetc.vector_VdWContact_front(self)

    def back(self) -> "std::vector< AtomContact >::value_type const &":
        return _molsetc.vector_VdWContact_back(self)

    def assign(self, n: "std::vector< AtomContact >::size_type", x: "AtomContact") -> "void":
        return _molsetc.vector_VdWContact_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _molsetc.vector_VdWContact_resize(self, *args)

    def insert(self, *args) -> "void":
        return _molsetc.vector_VdWContact_insert(self, *args)

    def reserve(self, n: "std::vector< AtomContact >::size_type") -> "void":
        return _molsetc.vector_VdWContact_reserve(self, n)

    def capacity(self) -> "std::vector< AtomContact >::size_type":
        return _molsetc.vector_VdWContact_capacity(self)
    __swig_destroy__ = _molsetc.delete_vector_VdWContact

# Register vector_VdWContact in _molsetc:
_molsetc.vector_VdWContact_swigregister(vector_VdWContact)

class vector_MMBond(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _molsetc.vector_MMBond_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _molsetc.vector_MMBond___nonzero__(self)

    def __bool__(self) -> "bool":
        return _molsetc.vector_MMBond___bool__(self)

    def __len__(self) -> "std::vector< MMBond >::size_type":
        return _molsetc.vector_MMBond___len__(self)

    def __getslice__(self, i: "std::vector< MMBond >::difference_type", j: "std::vector< MMBond >::difference_type") -> "std::vector< MMBond,std::allocator< MMBond > > *":
        return _molsetc.vector_MMBond___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _molsetc.vector_MMBond___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< MMBond >::difference_type", j: "std::vector< MMBond >::difference_type") -> "void":
        return _molsetc.vector_MMBond___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _molsetc.vector_MMBond___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< MMBond >::value_type const &":
        return _molsetc.vector_MMBond___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _molsetc.vector_MMBond___setitem__(self, *args)

    def pop(self) -> "std::vector< MMBond >::value_type":
        return _molsetc.vector_MMBond_pop(self)

    def append(self, x: "MMBond") -> "void":
        return _molsetc.vector_MMBond_append(self, x)

    def empty(self) -> "bool":
        return _molsetc.vector_MMBond_empty(self)

    def size(self) -> "std::vector< MMBond >::size_type":
        return _molsetc.vector_MMBond_size(self)

    def swap(self, v: "vector_MMBond") -> "void":
        return _molsetc.vector_MMBond_swap(self, v)

    def begin(self) -> "std::vector< MMBond >::iterator":
        return _molsetc.vector_MMBond_begin(self)

    def end(self) -> "std::vector< MMBond >::iterator":
        return _molsetc.vector_MMBond_end(self)

    def rbegin(self) -> "std::vector< MMBond >::reverse_iterator":
        return _molsetc.vector_MMBond_rbegin(self)

    def rend(self) -> "std::vector< MMBond >::reverse_iterator":
        return _molsetc.vector_MMBond_rend(self)

    def clear(self) -> "void":
        return _molsetc.vector_MMBond_clear(self)

    def get_allocator(self) -> "std::vector< MMBond >::allocator_type":
        return _molsetc.vector_MMBond_get_allocator(self)

    def pop_back(self) -> "void":
        return _molsetc.vector_MMBond_pop_back(self)

    def erase(self, *args) -> "std::vector< MMBond >::iterator":
        return _molsetc.vector_MMBond_erase(self, *args)

    def __init__(self, *args):
        _molsetc.vector_MMBond_swiginit(self, _molsetc.new_vector_MMBond(*args))

    def push_back(self, x: "MMBond") -> "void":
        return _molsetc.vector_MMBond_push_back(self, x)

    def front(self) -> "std::vector< MMBond >::value_type const &":
        return _molsetc.vector_MMBond_front(self)

    def back(self) -> "std::vector< MMBond >::value_type const &":
        return _molsetc.vector_MMBond_back(self)

    def assign(self, n: "std::vector< MMBond >::size_type", x: "MMBond") -> "void":
        return _molsetc.vector_MMBond_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _molsetc.vector_MMBond_resize(self, *args)

    def insert(self, *args) -> "void":
        return _molsetc.vector_MMBond_insert(self, *args)

    def reserve(self, n: "std::vector< MMBond >::size_type") -> "void":
        return _molsetc.vector_MMBond_reserve(self, n)

    def capacity(self) -> "std::vector< MMBond >::size_type":
        return _molsetc.vector_MMBond_capacity(self)
    __swig_destroy__ = _molsetc.delete_vector_MMBond

# Register vector_MMBond in _molsetc:
_molsetc.vector_MMBond_swigregister(vector_MMBond)

class MolMechModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p_mm_mod_new: "HaMolMechMod"):
        _molsetc.MolMechModel_swiginit(self, _molsetc.new_MolMechModel(p_mm_mod_new))
    __swig_destroy__ = _molsetc.delete_MolMechModel

    def InitModel(self, *args) -> "int":
        return _molsetc.MolMechModel_InitModel(self, *args)

    def UpdateModel(self) -> "int":
        return _molsetc.MolMechModel_UpdateModel(self)

    def Clear(self) -> "int":
        return _molsetc.MolMechModel_Clear(self)

    def SetStdParams(self) -> "int":
        return _molsetc.MolMechModel_SetStdParams(self)

    def UpdateConstraints(self) -> "int":
        return _molsetc.MolMechModel_UpdateConstraints(self)

    def UpdateConstraints_2(self) -> "int":
        return _molsetc.MolMechModel_UpdateConstraints_2(self)

    def ClearMortModel(self) -> "int":
        return _molsetc.MolMechModel_ClearMortModel(self)

    def Bcast(self, comm: "MPI_Comm &") -> "void":
        return _molsetc.MolMechModel_Bcast(self, comm)

    def SaveXMLToStream(self, os: "ostream", popt: "SaveOptions"=None) -> "int":
        return _molsetc.MolMechModel_SaveXMLToStream(self, os, popt)

    def GetMolSet(self, *args) -> "MolSet const *":
        return _molsetc.MolMechModel_GetMolSet(self, *args)
    ff_type = property(_molsetc.MolMechModel_ff_type_get, _molsetc.MolMechModel_ff_type_set)
    to_init_mm_model = property(_molsetc.MolMechModel_to_init_mm_model_get, _molsetc.MolMechModel_to_init_mm_model_set)

    def IsAmoebaFF(self) -> "int":
        return _molsetc.MolMechModel_IsAmoebaFF(self)
    NOT_SET = _molsetc.MolMechModel_NOT_SET
    SET_DEFAULT = _molsetc.MolMechModel_SET_DEFAULT
    SET_FF_FIELD = _molsetc.MolMechModel_SET_FF_FIELD
    SET_RES_TEMPL = _molsetc.MolMechModel_SET_RES_TEMPL
    SET_SPEC = _molsetc.MolMechModel_SET_SPEC

    def GetNA(self) -> "int":
        return _molsetc.MolMechModel_GetNA(self)
    Atoms = property(_molsetc.MolMechModel_Atoms_get, _molsetc.MolMechModel_Atoms_set)
    MBonds = property(_molsetc.MolMechModel_MBonds_get, _molsetc.MolMechModel_MBonds_set)
    ValAngles = property(_molsetc.MolMechModel_ValAngles_get, _molsetc.MolMechModel_ValAngles_set)
    Dihedrals = property(_molsetc.MolMechModel_Dihedrals_get, _molsetc.MolMechModel_Dihedrals_set)
    ImprDihedrals = property(_molsetc.MolMechModel_ImprDihedrals_get, _molsetc.MolMechModel_ImprDihedrals_set)
    excluded_atom_list = property(_molsetc.MolMechModel_excluded_atom_list_get, _molsetc.MolMechModel_excluded_atom_list_set)
    nonbond_contact_list = property(_molsetc.MolMechModel_nonbond_contact_list_get, _molsetc.MolMechModel_nonbond_contact_list_set)

    def GetAtIdxMap(self, recalc: "int"=0) -> "AtomIntMap &":
        return _molsetc.MolMechModel_GetAtIdxMap(self, recalc)
    at_idx_map = property(_molsetc.MolMechModel_at_idx_map_get, _molsetc.MolMechModel_at_idx_map_set)

    def GetMMBond(self, pt1: "HaAtom", pt2: "HaAtom") -> "MMBond *":
        return _molsetc.MolMechModel_GetMMBond(self, pt1, pt2)

    def GetValAngle(self, pt1: "HaAtom", pt2: "HaAtom", pt3: "HaAtom") -> "MMValAngle *":
        return _molsetc.MolMechModel_GetValAngle(self, pt1, pt2, pt3)

    def GetDihedral(self, pt1: "HaAtom", pt2: "HaAtom", pt3: "HaAtom", pt4: "HaAtom") -> "MMDihedral *":
        return _molsetc.MolMechModel_GetDihedral(self, pt1, pt2, pt3, pt4)

    def GetImprDihedral(self, pt1: "HaAtom", pt2: "HaAtom", pt3: "HaAtom", pt4: "HaAtom") -> "MMDihedral *":
        return _molsetc.MolMechModel_GetImprDihedral(self, pt1, pt2, pt3, pt4)

    def SetMMBond(self, *args) -> "int":
        return _molsetc.MolMechModel_SetMMBond(self, *args)

    def SetValAngle(self, *args) -> "int":
        return _molsetc.MolMechModel_SetValAngle(self, *args)

    def AddImprDihedral(self, pt1: "HaAtom", pt2: "HaAtom", pt3: "HaAtom", pt4: "HaAtom") -> "MMDihedral *":
        return _molsetc.MolMechModel_AddImprDihedral(self, pt1, pt2, pt3, pt4)
    res_impr_dih_map = property(_molsetc.MolMechModel_res_impr_dih_map_get, _molsetc.MolMechModel_res_impr_dih_map_set)

    def SetUseMortLib(self, set_par: "int") -> "void":
        return _molsetc.MolMechModel_SetUseMortLib(self, set_par)
    build_nb_contact_list_flag = property(_molsetc.MolMechModel_build_nb_contact_list_flag_get, _molsetc.MolMechModel_build_nb_contact_list_flag_set)
    init_charges_flag = property(_molsetc.MolMechModel_init_charges_flag_get, _molsetc.MolMechModel_init_charges_flag_set)
    setup_params_from_mort_flag = property(_molsetc.MolMechModel_setup_params_from_mort_flag_get, _molsetc.MolMechModel_setup_params_from_mort_flag_set)

    def SetCoarseGrainedOPEPParams(self) -> "int":
        return _molsetc.MolMechModel_SetCoarseGrainedOPEPParams(self)

    def SetCoarseGrainedDNAParams(self) -> "int":
        return _molsetc.MolMechModel_SetCoarseGrainedDNAParams(self)

    def SetCoarseGrainedAAParams(self) -> "int":
        return _molsetc.MolMechModel_SetCoarseGrainedAAParams(self)

    def SetStdValParams(self) -> "int":
        return _molsetc.MolMechModel_SetStdValParams(self)

    def SetStdVdWParams(self) -> "int":
        return _molsetc.MolMechModel_SetStdVdWParams(self)

    def AddAtomsToExcludedAtomList(self, aptr1: "HaAtom", aptr2: "HaAtom", atoms_idx: "PtrIntMap") -> "int":
        return _molsetc.MolMechModel_AddAtomsToExcludedAtomList(self, aptr1, aptr2, atoms_idx)

    def BuildExcludedAtomList(self) -> "bool":
        return _molsetc.MolMechModel_BuildExcludedAtomList(self)

    def BuildNonBondContactList(self) -> "bool":
        return _molsetc.MolMechModel_BuildNonBondContactList(self)

    def BuildGrpGrpExcludedList(self, group1: "AtomContainer", group2: "AtomContainer") -> "int":
        return _molsetc.MolMechModel_BuildGrpGrpExcludedList(self, group1, group2)

    def BuildGrpGrpNonBondList(self, group1: "AtomContainer", group2: "AtomContainer") -> "int":
        return _molsetc.MolMechModel_BuildGrpGrpNonBondList(self, group1, group2)

    def GetResImprAngles(self, pres: "HaResidue", res_idih_list: "std::list< MMDihedral * > &") -> "int":
        return _molsetc.MolMechModel_GetResImprAngles(self, pres, res_idih_list)

    def Set14interDihFlags(self) -> "int":
        return _molsetc.MolMechModel_Set14interDihFlags(self)

    def SetBoundaryBox(self, offset: "double"=0.0) -> "int":
        return _molsetc.MolMechModel_SetBoundaryBox(self, offset)

    def CalcNonBondPt(self, pt1: "HaAtom", pt2: "HaAtom", vdw_at_ene: "double &", el_at_ene: "double &") -> "bool":
        return _molsetc.MolMechModel_CalcNonBondPt(self, pt1, pt2, vdw_at_ene, el_at_ene)

    def SetOmitInteractionsParam(self, omit_interactions_new: "OmitInteractionsParam") -> "void":
        return _molsetc.MolMechModel_SetOmitInteractionsParam(self, omit_interactions_new)

    def SetMMElectrMethod(self, electr_method_new: "MMElectrMethod") -> "void":
        return _molsetc.MolMechModel_SetMMElectrMethod(self, electr_method_new)

    def SetCalcDirectInter(self, set_par: "bool"=True) -> "void":
        return _molsetc.MolMechModel_SetCalcDirectInter(self, set_par)

    def SetCalcRecipSpaceInter(self, set_par: "bool"=True) -> "void":
        return _molsetc.MolMechModel_SetCalcRecipSpaceInter(self, set_par)

    def SetCalcSelfInter(self, set_par: "bool"=True) -> "void":
        return _molsetc.MolMechModel_SetCalcSelfInter(self, set_par)

    def SetCalcAdjustInter(self, set_par: "bool"=True) -> "void":
        return _molsetc.MolMechModel_SetCalcAdjustInter(self, set_par)

    def SetCalcVdWInter(self, set_par: "bool"=True) -> "void":
        return _molsetc.MolMechModel_SetCalcVdWInter(self, set_par)

    def SetCalcInducedInter(self, set_par: "bool"=True) -> "void":
        return _molsetc.MolMechModel_SetCalcInducedInter(self, set_par)

    def GetScale14Electr(self) -> "double":
        return _molsetc.MolMechModel_GetScale14Electr(self)

    def GetScale14VdW(self) -> "double":
        return _molsetc.MolMechModel_GetScale14VdW(self)

    def GetNBCutDist(self) -> "double":
        return _molsetc.MolMechModel_GetNBCutDist(self)

    def GetDielConst(self) -> "double":
        return _molsetc.MolMechModel_GetDielConst(self)

    def GetIonStrength(self) -> "double":
        return _molsetc.MolMechModel_GetIonStrength(self)

    def GetDipoleScfIterMax(self) -> "int":
        return _molsetc.MolMechModel_GetDipoleScfIterMax(self)

    def GetDipoleScfTol(self) -> "double":
        return _molsetc.MolMechModel_GetDipoleScfTol(self)

    def GetEEDsumCut(self) -> "double":
        return _molsetc.MolMechModel_GetEEDsumCut(self)

    def GetEEDampedCut(self) -> "double":
        return _molsetc.MolMechModel_GetEEDampedCut(self)

    def GetSorCoef(self) -> "double":
        return _molsetc.MolMechModel_GetSorCoef(self)

    def GetTholeExponCoef(self) -> "double":
        return _molsetc.MolMechModel_GetTholeExponCoef(self)

    def GetVdwTaper(self) -> "double":
        return _molsetc.MolMechModel_GetVdwTaper(self)

    def SetScale14Electr(self, scale_14_electr_new: "double") -> "void":
        return _molsetc.MolMechModel_SetScale14Electr(self, scale_14_electr_new)

    def SetScale14VdW(self, scale_14_vdw_new: "double") -> "void":
        return _molsetc.MolMechModel_SetScale14VdW(self, scale_14_vdw_new)

    def SetScale14Inter(self, scale_14: "double") -> "void":
        return _molsetc.MolMechModel_SetScale14Inter(self, scale_14)

    def SetNBCutDist(self, nb_cut_dist_new: "double") -> "void":
        return _molsetc.MolMechModel_SetNBCutDist(self, nb_cut_dist_new)

    def SetDielConst(self, diel_const_new: "double") -> "void":
        return _molsetc.MolMechModel_SetDielConst(self, diel_const_new)

    def SetIonStrength(self, ion_strength_new: "double") -> "void":
        return _molsetc.MolMechModel_SetIonStrength(self, ion_strength_new)

    def SetDipoleScfIterMax(self, dipole_scf_iter_max_new: "int") -> "void":
        return _molsetc.MolMechModel_SetDipoleScfIterMax(self, dipole_scf_iter_max_new)

    def SetDipoleScfTol(self, dipole_scf_tol_new: "double") -> "void":
        return _molsetc.MolMechModel_SetDipoleScfTol(self, dipole_scf_tol_new)

    def SetEEDsumCut(self, ee_dsum_cut_new: "double") -> "void":
        return _molsetc.MolMechModel_SetEEDsumCut(self, ee_dsum_cut_new)

    def SetEEDampedCut(self, ee_damped_cut_new: "double") -> "void":
        return _molsetc.MolMechModel_SetEEDampedCut(self, ee_damped_cut_new)

    def SetSorCoef(self, sor_coef_new: "double") -> "void":
        return _molsetc.MolMechModel_SetSorCoef(self, sor_coef_new)

    def SetTholeExponCoef(self, thole_expon_coeff_new: "double") -> "void":
        return _molsetc.MolMechModel_SetTholeExponCoef(self, thole_expon_coeff_new)

    def SetVdwTaper(self, vdw_taper_new: "double") -> "void":
        return _molsetc.MolMechModel_SetVdwTaper(self, vdw_taper_new)
    omit_interactions = property(_molsetc.MolMechModel_omit_interactions_get, _molsetc.MolMechModel_omit_interactions_set)
    electr_method = property(_molsetc.MolMechModel_electr_method_get, _molsetc.MolMechModel_electr_method_set)
    scale_14_electr = property(_molsetc.MolMechModel_scale_14_electr_get, _molsetc.MolMechModel_scale_14_electr_set)
    scale_14_vdw = property(_molsetc.MolMechModel_scale_14_vdw_get, _molsetc.MolMechModel_scale_14_vdw_set)
    nb_cut_dist = property(_molsetc.MolMechModel_nb_cut_dist_get, _molsetc.MolMechModel_nb_cut_dist_set)
    diel_const = property(_molsetc.MolMechModel_diel_const_get, _molsetc.MolMechModel_diel_const_set)
    ion_strength = property(_molsetc.MolMechModel_ion_strength_get, _molsetc.MolMechModel_ion_strength_set)
    nonb_list_flag = property(_molsetc.MolMechModel_nonb_list_flag_get, _molsetc.MolMechModel_nonb_list_flag_set)
    neutral_end_hydr_flag = property(_molsetc.MolMechModel_neutral_end_hydr_flag_get, _molsetc.MolMechModel_neutral_end_hydr_flag_set)
    CALC_VDW_NO = _molsetc.MolMechModel_CALC_VDW_NO
    CALC_VDW_NORMAL = _molsetc.MolMechModel_CALC_VDW_NORMAL
    CALC_VDW_NO_ATTRACT = _molsetc.MolMechModel_CALC_VDW_NO_ATTRACT
    calc_vdw_flag = property(_molsetc.MolMechModel_calc_vdw_flag_get, _molsetc.MolMechModel_calc_vdw_flag_set)
    calc_electr_flag = property(_molsetc.MolMechModel_calc_electr_flag_get, _molsetc.MolMechModel_calc_electr_flag_set)
    dipole_scf_iter_max = property(_molsetc.MolMechModel_dipole_scf_iter_max_get, _molsetc.MolMechModel_dipole_scf_iter_max_set)
    dipole_scf_tol = property(_molsetc.MolMechModel_dipole_scf_tol_get, _molsetc.MolMechModel_dipole_scf_tol_set)
    ee_dsum_cut = property(_molsetc.MolMechModel_ee_dsum_cut_get, _molsetc.MolMechModel_ee_dsum_cut_set)
    ee_damped_cut = property(_molsetc.MolMechModel_ee_damped_cut_get, _molsetc.MolMechModel_ee_damped_cut_set)
    sor_coefficient = property(_molsetc.MolMechModel_sor_coefficient_get, _molsetc.MolMechModel_sor_coefficient_set)
    thole_expon_coeff = property(_molsetc.MolMechModel_thole_expon_coeff_get, _molsetc.MolMechModel_thole_expon_coeff_set)
    vdw_taper = property(_molsetc.MolMechModel_vdw_taper_get, _molsetc.MolMechModel_vdw_taper_set)
    NO_SOFT_REPULSION = _molsetc.MolMechModel_NO_SOFT_REPULSION
    SOFT_REPULSION_NO_HBOND = _molsetc.MolMechModel_SOFT_REPULSION_NO_HBOND
    SOFT_REPULSION_ALL = _molsetc.MolMechModel_SOFT_REPULSION_ALL
    soft_repulsion = property(_molsetc.MolMechModel_soft_repulsion_get, _molsetc.MolMechModel_soft_repulsion_set)
    soft_repulsion_const = property(_molsetc.MolMechModel_soft_repulsion_const_get, _molsetc.MolMechModel_soft_repulsion_const_set)
    BONDI_GB_PARAM = _molsetc.MolMechModel_BONDI_GB_PARAM
    AMBER6_BONDI_GB_PARAM = _molsetc.MolMechModel_AMBER6_BONDI_GB_PARAM
    MOD_BONDI_GB_PARAM = _molsetc.MolMechModel_MOD_BONDI_GB_PARAM
    HUO_KOLLMAN_GB_PARAM = _molsetc.MolMechModel_HUO_KOLLMAN_GB_PARAM
    JAYARAM_GB_PARAM = _molsetc.MolMechModel_JAYARAM_GB_PARAM
    MOD_JAYARAM_GB_PARAM = _molsetc.MolMechModel_MOD_JAYARAM_GB_PARAM
    HN_MOD_BONDI_GB_PARAM = _molsetc.MolMechModel_HN_MOD_BONDI_GB_PARAM
    gb_param_type = property(_molsetc.MolMechModel_gb_param_type_get, _molsetc.MolMechModel_gb_param_type_set)

    @staticmethod
    def GetGBAtomRad(*args) -> "double":
        return _molsetc.MolMechModel_GetGBAtomRad(*args)

    @staticmethod
    def GetGBAtomScreening(*args) -> "double":
        return _molsetc.MolMechModel_GetGBAtomScreening(*args)

    def SetMovingAtoms(self, mov_atom_array_name: "std::string") -> "int":
        return _molsetc.MolMechModel_SetMovingAtoms(self, mov_atom_array_name)

    def SetMoveAll(self) -> "int":
        return _molsetc.MolMechModel_SetMoveAll(self)

    def GetMovingAtoms(self) -> "AtomGroup *":
        return _molsetc.MolMechModel_GetMovingAtoms(self)
    moving_atoms = property(_molsetc.MolMechModel_moving_atoms_get, _molsetc.MolMechModel_moving_atoms_set)

    def SetRestrainedAtoms(self, restr_atom_group_name: "char const *") -> "int":
        return _molsetc.MolMechModel_SetRestrainedAtoms(self, restr_atom_group_name)

    def GetRestrAtoms(self) -> "AtomGroup *":
        return _molsetc.MolMechModel_GetRestrAtoms(self)

    def SaveAtomRestrArbalestIndForm(self, restr_desc_fname: "std::string", restr_list_fname: "std::string") -> "int":
        return _molsetc.MolMechModel_SaveAtomRestrArbalestIndForm(self, restr_desc_fname, restr_list_fname)

    def SetRestrRefCrdFromXYZFile(self, ref_crd_file_name_new: "char const *") -> "int":
        return _molsetc.MolMechModel_SetRestrRefCrdFromXYZFile(self, ref_crd_file_name_new)

    def SetRestrRefCrdFromStr(self, crd_str: "std::string const &") -> "int":
        return _molsetc.MolMechModel_SetRestrRefCrdFromStr(self, crd_str)

    def SetAtomRestrForceConst(self, restr_const_new: "double") -> "int":
        return _molsetc.MolMechModel_SetAtomRestrForceConst(self, restr_const_new)

    def GetAtomRestrForceConst(self) -> "double":
        return _molsetc.MolMechModel_GetAtomRestrForceConst(self)
    RESTR_REFC_CURRENT_CRD = _molsetc.MolMechModel_RESTR_REFC_CURRENT_CRD
    RESTR_REFC_XYZ_CRD_FILE = _molsetc.MolMechModel_RESTR_REFC_XYZ_CRD_FILE
    RESTR_REFC_XYZ_CRD_STR = _molsetc.MolMechModel_RESTR_REFC_XYZ_CRD_STR
    restr_ref_crd_type = property(_molsetc.MolMechModel_restr_ref_crd_type_get, _molsetc.MolMechModel_restr_ref_crd_type_set)
    restrained_atoms = property(_molsetc.MolMechModel_restrained_atoms_get, _molsetc.MolMechModel_restrained_atoms_set)
    restr_ref_coords = property(_molsetc.MolMechModel_restr_ref_coords_get, _molsetc.MolMechModel_restr_ref_coords_set)

    def SetDistConstrFromFile(self, constr_file_name: "char const *") -> "int":
        return _molsetc.MolMechModel_SetDistConstrFromFile(self, constr_file_name)

    def GetNumHarmConstr(self) -> "int":
        return _molsetc.MolMechModel_GetNumHarmConstr(self)
    DistConstraints = property(_molsetc.MolMechModel_DistConstraints_get, _molsetc.MolMechModel_DistConstraints_set)

    def SetHBondConstraints(self, force_const: "double") -> "bool":
        return _molsetc.MolMechModel_SetHBondConstraints(self, force_const)

    def AddHarmConstraint(self, atom1: "HaAtom", atom2: "HaAtom", eq_dist: "double", force_const: "double") -> "int":
        return _molsetc.MolMechModel_AddHarmConstraint(self, atom1, atom2, eq_dist, force_const)

    def SetHarmConstraint(self, *args) -> "int":
        return _molsetc.MolMechModel_SetHarmConstraint(self, *args)

    def ClearConstraints(self) -> "bool":
        return _molsetc.MolMechModel_ClearConstraints(self)
    water_cap_flag = property(_molsetc.MolMechModel_water_cap_flag_get, _molsetc.MolMechModel_water_cap_flag_set)
    cap_atom_num = property(_molsetc.MolMechModel_cap_atom_num_get, _molsetc.MolMechModel_cap_atom_num_set)
    cap_fconst = property(_molsetc.MolMechModel_cap_fconst_get, _molsetc.MolMechModel_cap_fconst_set)

    def SetFFTGridsPerAng(self, fft_grids_per_ang: "double") -> "void":
        return _molsetc.MolMechModel_SetFFTGridsPerAng(self, fft_grids_per_ang)
    pmesh_ewald_flag = property(_molsetc.MolMechModel_pmesh_ewald_flag_get, _molsetc.MolMechModel_pmesh_ewald_flag_set)
    pme_grid_nx = property(_molsetc.MolMechModel_pme_grid_nx_get, _molsetc.MolMechModel_pme_grid_nx_set)
    pme_grid_ny = property(_molsetc.MolMechModel_pme_grid_ny_get, _molsetc.MolMechModel_pme_grid_ny_set)
    pme_grid_nz = property(_molsetc.MolMechModel_pme_grid_nz_get, _molsetc.MolMechModel_pme_grid_nz_set)
    pme_spline_order = property(_molsetc.MolMechModel_pme_spline_order_get, _molsetc.MolMechModel_pme_spline_order_set)
    pme_neutralize_system = property(_molsetc.MolMechModel_pme_neutralize_system_get, _molsetc.MolMechModel_pme_neutralize_system_set)
    pme_verbose = property(_molsetc.MolMechModel_pme_verbose_get, _molsetc.MolMechModel_pme_verbose_set)
    exact_ewald_flag = property(_molsetc.MolMechModel_exact_ewald_flag_get, _molsetc.MolMechModel_exact_ewald_flag_set)
    vdw_correction_flag = property(_molsetc.MolMechModel_vdw_correction_flag_get, _molsetc.MolMechModel_vdw_correction_flag_set)
    pme_dsum_tol = property(_molsetc.MolMechModel_pme_dsum_tol_get, _molsetc.MolMechModel_pme_dsum_tol_set)
    pme_ew_coeff = property(_molsetc.MolMechModel_pme_ew_coeff_get, _molsetc.MolMechModel_pme_ew_coeff_set)
    pme_eedtbdns = property(_molsetc.MolMechModel_pme_eedtbdns_get, _molsetc.MolMechModel_pme_eedtbdns_set)
    skin_nb = property(_molsetc.MolMechModel_skin_nb_get, _molsetc.MolMechModel_skin_nb_set)
    fft_grids_per_ang = property(_molsetc.MolMechModel_fft_grids_per_ang_get, _molsetc.MolMechModel_fft_grids_per_ang_set)
    subtract_avg_force_flag = property(_molsetc.MolMechModel_subtract_avg_force_flag_get, _molsetc.MolMechModel_subtract_avg_force_flag_set)

    def SetPMECoef(self, pme_ew_coeff_new: "double") -> "void":
        return _molsetc.MolMechModel_SetPMECoef(self, pme_ew_coeff_new)
    p_amber_model = property(_molsetc.MolMechModel_p_amber_model_get, _molsetc.MolMechModel_p_amber_model_set)
    p_mm_mod = property(_molsetc.MolMechModel_p_mm_mod_get, _molsetc.MolMechModel_p_mm_mod_set)
    pmset = property(_molsetc.MolMechModel_pmset_get, _molsetc.MolMechModel_pmset_set)
    p_mort_model = property(_molsetc.MolMechModel_p_mort_model_get, _molsetc.MolMechModel_p_mort_model_set)

    def UpdateDataFromFort(self) -> "int":
        return _molsetc.MolMechModel_UpdateDataFromFort(self)

    def GetIndDipolesFromFort(self) -> "int":
        return _molsetc.MolMechModel_GetIndDipolesFromFort(self)

    def GetMultipolesFromFort(self) -> "int":
        return _molsetc.MolMechModel_GetMultipolesFromFort(self)

    def PrintIndDipoles(self) -> "void":
        return _molsetc.MolMechModel_PrintIndDipoles(self)

    def PrintMultipoles(self) -> "void":
        return _molsetc.MolMechModel_PrintMultipoles(self)

    def PrintTotMultipoles(self, pt_orig: "Vec3D"=None) -> "void":
        return _molsetc.MolMechModel_PrintTotMultipoles(self, pt_orig)

    def GetTotIndDipole(self, pt_orig: "Vec3D"=None) -> "Vec3D":
        return _molsetc.MolMechModel_GetTotIndDipole(self, pt_orig)

    def GetTotIndDipole1(self, pt_orig: "Vec3D"=None) -> "Vec3D":
        return _molsetc.MolMechModel_GetTotIndDipole1(self, pt_orig)

    def GetTotIndDipole2(self, pt_orig: "Vec3D"=None) -> "Vec3D":
        return _molsetc.MolMechModel_GetTotIndDipole2(self, pt_orig)

    def GetTotDipole(self, pt_orig: "Vec3D"=None) -> "Vec3D":
        return _molsetc.MolMechModel_GetTotDipole(self, pt_orig)

    def GetTotQpole(self, pt_orig: "Vec3D"=None) -> "HaVec_double":
        return _molsetc.MolMechModel_GetTotQpole(self, pt_orig)
    ind_dip_p = property(_molsetc.MolMechModel_ind_dip_p_get, _molsetc.MolMechModel_ind_dip_p_set)
    ind_dip_d = property(_molsetc.MolMechModel_ind_dip_d_get, _molsetc.MolMechModel_ind_dip_d_set)
    global_multipole = property(_molsetc.MolMechModel_global_multipole_get, _molsetc.MolMechModel_global_multipole_set)

# Register MolMechModel in _molsetc:
_molsetc.MolMechModel_swigregister(MolMechModel)

def MolMechModel_GetGBAtomRad(*args) -> "double":
    return _molsetc.MolMechModel_GetGBAtomRad(*args)

def MolMechModel_GetGBAtomScreening(*args) -> "double":
    return _molsetc.MolMechModel_GetGBAtomScreening(*args)

class MMRunType(HaEnum1):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_MMRunType
    MD_RUN = _molsetc.MMRunType_MD_RUN
    MIN_RUN = _molsetc.MMRunType_MIN_RUN
    ENER_RUN = _molsetc.MMRunType_ENER_RUN

    def __eq__(self, val: "MMRunType::Value const &") -> "bool":
        return _molsetc.MMRunType___eq__(self, val)

    def __ne__(self, val: "MMRunType::Value const &") -> "bool":
        return _molsetc.MMRunType___ne__(self, val)

    def GetLabelsMap(self) -> "IntStrMap &":
        return _molsetc.MMRunType_GetLabelsMap(self)

    def value(self) -> "int &":
        return _molsetc.MMRunType_value(self)

    def label(self) -> "char const *":
        return _molsetc.MMRunType_label(self)

    def SetWithValue(self, val: "int") -> "int":
        return _molsetc.MMRunType_SetWithValue(self, val)

    def SetWithLabel(self, label: "char const *") -> "int":
        return _molsetc.MMRunType_SetWithLabel(self, label)

    def __init__(self, *args):
        _molsetc.MMRunType_swiginit(self, _molsetc.new_MMRunType(*args))

# Register MMRunType in _molsetc:
_molsetc.MMRunType_swigregister(MMRunType)

class TempCtrlMethod(HaEnum1):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_TempCtrlMethod
    CONST_ENE_MD = _molsetc.TempCtrlMethod_CONST_ENE_MD
    CONST_TEMP_BERENDSEN = _molsetc.TempCtrlMethod_CONST_TEMP_BERENDSEN
    CONST_TEMP_RANDOMIZED = _molsetc.TempCtrlMethod_CONST_TEMP_RANDOMIZED
    CONST_TEMP_LANGEVIN = _molsetc.TempCtrlMethod_CONST_TEMP_LANGEVIN

    def __eq__(self, val: "TempCtrlMethod::Value const &") -> "bool":
        return _molsetc.TempCtrlMethod___eq__(self, val)

    def __ne__(self, val: "TempCtrlMethod::Value const &") -> "bool":
        return _molsetc.TempCtrlMethod___ne__(self, val)

    def GetLabelsMap(self) -> "IntStrMap &":
        return _molsetc.TempCtrlMethod_GetLabelsMap(self)

    def value(self) -> "int &":
        return _molsetc.TempCtrlMethod_value(self)

    def label(self) -> "char const *":
        return _molsetc.TempCtrlMethod_label(self)

    def SetWithValue(self, val: "int") -> "int":
        return _molsetc.TempCtrlMethod_SetWithValue(self, val)

    def SetWithLabel(self, label: "char const *") -> "int":
        return _molsetc.TempCtrlMethod_SetWithLabel(self, label)

    def __init__(self, *args):
        _molsetc.TempCtrlMethod_swiginit(self, _molsetc.new_TempCtrlMethod(*args))

# Register TempCtrlMethod in _molsetc:
_molsetc.TempCtrlMethod_swigregister(TempCtrlMethod)
MD_RUN = cvar.MD_RUN
MIN_RUN = cvar.MIN_RUN
ENER_RUN = cvar.ENER_RUN

class EneMinMethod(HaEnum1):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_EneMinMethod
    CONJ_GRAD = _molsetc.EneMinMethod_CONJ_GRAD
    SD_AND_CG = _molsetc.EneMinMethod_SD_AND_CG
    STEEPEST_DESCENT = _molsetc.EneMinMethod_STEEPEST_DESCENT

    def __eq__(self, val: "EneMinMethod::Value const &") -> "bool":
        return _molsetc.EneMinMethod___eq__(self, val)

    def __ne__(self, val: "EneMinMethod::Value const &") -> "bool":
        return _molsetc.EneMinMethod___ne__(self, val)

    def GetLabelsMap(self) -> "IntStrMap &":
        return _molsetc.EneMinMethod_GetLabelsMap(self)

    def value(self) -> "int &":
        return _molsetc.EneMinMethod_value(self)

    def label(self) -> "char const *":
        return _molsetc.EneMinMethod_label(self)

    def SetWithValue(self, val: "int") -> "int":
        return _molsetc.EneMinMethod_SetWithValue(self, val)

    def SetWithLabel(self, label: "char const *") -> "int":
        return _molsetc.EneMinMethod_SetWithLabel(self, label)

    def __init__(self, *args):
        _molsetc.EneMinMethod_swiginit(self, _molsetc.new_EneMinMethod(*args))

# Register EneMinMethod in _molsetc:
_molsetc.EneMinMethod_swigregister(EneMinMethod)
CONST_ENE_MD = cvar.CONST_ENE_MD
CONST_TEMP_BERENDSEN = cvar.CONST_TEMP_BERENDSEN
CONST_TEMP_RANDOMIZED = cvar.CONST_TEMP_RANDOMIZED
CONST_TEMP_LANGEVIN = cvar.CONST_TEMP_LANGEVIN

class MMReadInitCrdType(HaEnum1):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_MMReadInitCrdType
    READ_X_FORM = _molsetc.MMReadInitCrdType_READ_X_FORM
    READ_X_BIN = _molsetc.MMReadInitCrdType_READ_X_BIN
    READ_XV_BIN = _molsetc.MMReadInitCrdType_READ_XV_BIN
    READ_XV_FORM = _molsetc.MMReadInitCrdType_READ_XV_FORM
    READ_XVBOX_BIN = _molsetc.MMReadInitCrdType_READ_XVBOX_BIN
    READ_XVBOX_FORM = _molsetc.MMReadInitCrdType_READ_XVBOX_FORM

    def __eq__(self, val: "MMReadInitCrdType::Value const &") -> "bool":
        return _molsetc.MMReadInitCrdType___eq__(self, val)

    def __ne__(self, val: "MMReadInitCrdType::Value const &") -> "bool":
        return _molsetc.MMReadInitCrdType___ne__(self, val)

    def GetLabelsMap(self) -> "IntStrMap &":
        return _molsetc.MMReadInitCrdType_GetLabelsMap(self)

    def value(self) -> "int &":
        return _molsetc.MMReadInitCrdType_value(self)

    def label(self) -> "char const *":
        return _molsetc.MMReadInitCrdType_label(self)

    def SetWithValue(self, val: "int") -> "int":
        return _molsetc.MMReadInitCrdType_SetWithValue(self, val)

    def SetWithLabel(self, label: "char const *") -> "int":
        return _molsetc.MMReadInitCrdType_SetWithLabel(self, label)

    def __init__(self, *args):
        _molsetc.MMReadInitCrdType_swiginit(self, _molsetc.new_MMReadInitCrdType(*args))

# Register MMReadInitCrdType in _molsetc:
_molsetc.MMReadInitCrdType_swigregister(MMReadInitCrdType)
CONJ_GRAD = cvar.CONJ_GRAD
SD_AND_CG = cvar.SD_AND_CG
STEEPEST_DESCENT = cvar.STEEPEST_DESCENT

class CrdFormatParam(HaEnum1):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_CrdFormatParam
    FORMATTED = _molsetc.CrdFormatParam_FORMATTED
    BINARY = _molsetc.CrdFormatParam_BINARY
    TRR = _molsetc.CrdFormatParam_TRR
    XTC = _molsetc.CrdFormatParam_XTC

    def __eq__(self, val: "CrdFormatParam::Value const &") -> "bool":
        return _molsetc.CrdFormatParam___eq__(self, val)

    def __ne__(self, val: "CrdFormatParam::Value const &") -> "bool":
        return _molsetc.CrdFormatParam___ne__(self, val)

    def GetLabelsMap(self) -> "IntStrMap &":
        return _molsetc.CrdFormatParam_GetLabelsMap(self)

    def value(self) -> "int &":
        return _molsetc.CrdFormatParam_value(self)

    def label(self) -> "char const *":
        return _molsetc.CrdFormatParam_label(self)

    def SetWithValue(self, val: "int") -> "int":
        return _molsetc.CrdFormatParam_SetWithValue(self, val)

    def SetWithLabel(self, label: "char const *") -> "int":
        return _molsetc.CrdFormatParam_SetWithLabel(self, label)

    def __init__(self, *args):
        _molsetc.CrdFormatParam_swiginit(self, _molsetc.new_CrdFormatParam(*args))

# Register CrdFormatParam in _molsetc:
_molsetc.CrdFormatParam_swigregister(CrdFormatParam)
READ_X_FORM = cvar.READ_X_FORM
READ_X_BIN = cvar.READ_X_BIN
READ_XV_BIN = cvar.READ_XV_BIN
READ_XV_FORM = cvar.READ_XV_FORM
READ_XVBOX_BIN = cvar.READ_XVBOX_BIN
READ_XVBOX_FORM = cvar.READ_XVBOX_FORM

class PerBoundaryCondType(HaEnum1):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_PerBoundaryCondType

    def SetMolMechMod(self, p_mm_mod: "HaMolMechMod") -> "void":
        return _molsetc.PerBoundaryCondType_SetMolMechMod(self, p_mm_mod)
    NO_PERIODICITY = _molsetc.PerBoundaryCondType_NO_PERIODICITY
    CONST_VOL = _molsetc.PerBoundaryCondType_CONST_VOL
    CONST_PRES = _molsetc.PerBoundaryCondType_CONST_PRES

    def __eq__(self, val: "PerBoundaryCondType::Value const &") -> "bool":
        return _molsetc.PerBoundaryCondType___eq__(self, val)

    def __ne__(self, val: "PerBoundaryCondType::Value const &") -> "bool":
        return _molsetc.PerBoundaryCondType___ne__(self, val)

    def GetLabelsMap(self) -> "IntStrMap &":
        return _molsetc.PerBoundaryCondType_GetLabelsMap(self)

    def value(self) -> "int &":
        return _molsetc.PerBoundaryCondType_value(self)

    def label(self) -> "char const *":
        return _molsetc.PerBoundaryCondType_label(self)

    def SetWithValue(self, val: "int") -> "int":
        return _molsetc.PerBoundaryCondType_SetWithValue(self, val)

    def SetWithLabel(self, label: "char const *") -> "int":
        return _molsetc.PerBoundaryCondType_SetWithLabel(self, label)

    def GetActiveLabels(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _molsetc.PerBoundaryCondType_GetActiveLabels(self)

    def SetCompatValue(self) -> "void":
        return _molsetc.PerBoundaryCondType_SetCompatValue(self)

    def __init__(self, *args):
        _molsetc.PerBoundaryCondType_swiginit(self, _molsetc.new_PerBoundaryCondType(*args))

# Register PerBoundaryCondType in _molsetc:
_molsetc.PerBoundaryCondType_swigregister(PerBoundaryCondType)

class PressureRegMethod(HaEnum1):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NO_CRD_SCALING = _molsetc.PressureRegMethod_NO_CRD_SCALING
    ISOTROP_CRD_SCALING = _molsetc.PressureRegMethod_ISOTROP_CRD_SCALING
    ANISOTROP_CRD_SCALING = _molsetc.PressureRegMethod_ANISOTROP_CRD_SCALING
    CRD_SCALING_XY_AND_Z = _molsetc.PressureRegMethod_CRD_SCALING_XY_AND_Z
    CRD_SCALING_ONLY_Z = _molsetc.PressureRegMethod_CRD_SCALING_ONLY_Z
    CRD_SCALING_XZ_AND_Y = _molsetc.PressureRegMethod_CRD_SCALING_XZ_AND_Y
    CRD_SCALING_YZ_AND_X = _molsetc.PressureRegMethod_CRD_SCALING_YZ_AND_X

    def __init__(self, *args):
        _molsetc.PressureRegMethod_swiginit(self, _molsetc.new_PressureRegMethod(*args))
    __swig_destroy__ = _molsetc.delete_PressureRegMethod

    def __eq__(self, val: "PressureRegMethod::Value const &") -> "bool":
        return _molsetc.PressureRegMethod___eq__(self, val)

    def __ne__(self, val: "PressureRegMethod::Value const &") -> "bool":
        return _molsetc.PressureRegMethod___ne__(self, val)

    def GetLabelsMap(self) -> "IntStrMap &":
        return _molsetc.PressureRegMethod_GetLabelsMap(self)

    def value(self) -> "int &":
        return _molsetc.PressureRegMethod_value(self)

    def label(self) -> "char const *":
        return _molsetc.PressureRegMethod_label(self)

    def SetWithValue(self, val: "int") -> "int":
        return _molsetc.PressureRegMethod_SetWithValue(self, val)

    def SetWithLabel(self, label: "char const *") -> "int":
        return _molsetc.PressureRegMethod_SetWithLabel(self, label)

# Register PressureRegMethod in _molsetc:
_molsetc.PressureRegMethod_swigregister(PressureRegMethod)
NO_PERIODICITY = cvar.NO_PERIODICITY
CONST_VOL = cvar.CONST_VOL
CONST_PRES = cvar.CONST_PRES

class MMElectrMethod(HaEnum1):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DIST_DEP_DIEL = _molsetc.MMElectrMethod_DIST_DEP_DIEL
    PME_METHOD = _molsetc.MMElectrMethod_PME_METHOD
    GEN_BORN = _molsetc.MMElectrMethod_GEN_BORN
    SCREENED_COULOMB = _molsetc.MMElectrMethod_SCREENED_COULOMB

    def __init__(self, *args):
        _molsetc.MMElectrMethod_swiginit(self, _molsetc.new_MMElectrMethod(*args))
    __swig_destroy__ = _molsetc.delete_MMElectrMethod

    def SetMMModel(self, p_mm_model: "MolMechModel") -> "void":
        return _molsetc.MMElectrMethod_SetMMModel(self, p_mm_model)

    def __eq__(self, val: "MMElectrMethod::Value const &") -> "bool":
        return _molsetc.MMElectrMethod___eq__(self, val)

    def __ne__(self, val: "MMElectrMethod::Value const &") -> "bool":
        return _molsetc.MMElectrMethod___ne__(self, val)

    def GetLabelsMap(self) -> "IntStrMap &":
        return _molsetc.MMElectrMethod_GetLabelsMap(self)

    def value(self) -> "int &":
        return _molsetc.MMElectrMethod_value(self)

    def label(self) -> "char const *":
        return _molsetc.MMElectrMethod_label(self)

    def SetWithValue(self, val: "int") -> "int":
        return _molsetc.MMElectrMethod_SetWithValue(self, val)

    def SetWithLabel(self, label: "char const *") -> "int":
        return _molsetc.MMElectrMethod_SetWithLabel(self, label)

    def GetActiveLabels(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _molsetc.MMElectrMethod_GetActiveLabels(self)

    def SetCompatValue(self) -> "void":
        return _molsetc.MMElectrMethod_SetCompatValue(self)

# Register MMElectrMethod in _molsetc:
_molsetc.MMElectrMethod_swigregister(MMElectrMethod)
NO_CRD_SCALING = cvar.NO_CRD_SCALING
ISOTROP_CRD_SCALING = cvar.ISOTROP_CRD_SCALING
ANISOTROP_CRD_SCALING = cvar.ANISOTROP_CRD_SCALING
CRD_SCALING_XY_AND_Z = cvar.CRD_SCALING_XY_AND_Z
CRD_SCALING_ONLY_Z = cvar.CRD_SCALING_ONLY_Z
CRD_SCALING_XZ_AND_Y = cvar.CRD_SCALING_XZ_AND_Y
CRD_SCALING_YZ_AND_X = cvar.CRD_SCALING_YZ_AND_X

class StartVelMethod(HaEnum1):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_StartVelMethod
    MAXWELL_START_VEL = _molsetc.StartVelMethod_MAXWELL_START_VEL
    READ_START_VEL = _molsetc.StartVelMethod_READ_START_VEL

    def __eq__(self, val: "StartVelMethod::Value const &") -> "bool":
        return _molsetc.StartVelMethod___eq__(self, val)

    def __ne__(self, val: "StartVelMethod::Value const &") -> "bool":
        return _molsetc.StartVelMethod___ne__(self, val)

    def GetLabelsMap(self) -> "IntStrMap &":
        return _molsetc.StartVelMethod_GetLabelsMap(self)

    def value(self) -> "int &":
        return _molsetc.StartVelMethod_value(self)

    def label(self) -> "char const *":
        return _molsetc.StartVelMethod_label(self)

    def SetWithValue(self, val: "int") -> "int":
        return _molsetc.StartVelMethod_SetWithValue(self, val)

    def SetWithLabel(self, label: "char const *") -> "int":
        return _molsetc.StartVelMethod_SetWithLabel(self, label)

    def __init__(self, *args):
        _molsetc.StartVelMethod_swiginit(self, _molsetc.new_StartVelMethod(*args))

# Register StartVelMethod in _molsetc:
_molsetc.StartVelMethod_swigregister(StartVelMethod)
DIST_DEP_DIEL = cvar.DIST_DEP_DIEL
PME_METHOD = cvar.PME_METHOD
GEN_BORN = cvar.GEN_BORN
SCREENED_COULOMB = cvar.SCREENED_COULOMB

class OmitInteractionsParam(HaEnum1):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_OmitInteractionsParam
    CALC_ALL_INTER = _molsetc.OmitInteractionsParam_CALC_ALL_INTER
    OMIT_BONDS_H = _molsetc.OmitInteractionsParam_OMIT_BONDS_H
    OMIT_BONDS = _molsetc.OmitInteractionsParam_OMIT_BONDS
    OMIT_BONDS_VANG_H = _molsetc.OmitInteractionsParam_OMIT_BONDS_VANG_H
    OMIT_BONDS_VANG = _molsetc.OmitInteractionsParam_OMIT_BONDS_VANG
    OMIT_BONDS_VANG_DIH_H = _molsetc.OmitInteractionsParam_OMIT_BONDS_VANG_DIH_H
    OMIT_BONDS_VANG_DIH = _molsetc.OmitInteractionsParam_OMIT_BONDS_VANG_DIH

    def __eq__(self, val: "OmitInteractionsParam::Value const &") -> "bool":
        return _molsetc.OmitInteractionsParam___eq__(self, val)

    def __ne__(self, val: "OmitInteractionsParam::Value const &") -> "bool":
        return _molsetc.OmitInteractionsParam___ne__(self, val)

    def GetLabelsMap(self) -> "IntStrMap &":
        return _molsetc.OmitInteractionsParam_GetLabelsMap(self)

    def value(self) -> "int &":
        return _molsetc.OmitInteractionsParam_value(self)

    def label(self) -> "char const *":
        return _molsetc.OmitInteractionsParam_label(self)

    def SetWithValue(self, val: "int") -> "int":
        return _molsetc.OmitInteractionsParam_SetWithValue(self, val)

    def SetWithLabel(self, label: "char const *") -> "int":
        return _molsetc.OmitInteractionsParam_SetWithLabel(self, label)

    def __init__(self, *args):
        _molsetc.OmitInteractionsParam_swiginit(self, _molsetc.new_OmitInteractionsParam(*args))

# Register OmitInteractionsParam in _molsetc:
_molsetc.OmitInteractionsParam_swigregister(OmitInteractionsParam)
MAXWELL_START_VEL = cvar.MAXWELL_START_VEL
READ_START_VEL = cvar.READ_START_VEL

class MMShakeParam(HaEnum1):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_MMShakeParam
    NO_SHAKE = _molsetc.MMShakeParam_NO_SHAKE
    H_ATOM_SHAKE = _molsetc.MMShakeParam_H_ATOM_SHAKE
    ALL_BOND_SHAKE = _molsetc.MMShakeParam_ALL_BOND_SHAKE

    def __eq__(self, val: "MMShakeParam::Value const &") -> "bool":
        return _molsetc.MMShakeParam___eq__(self, val)

    def __ne__(self, val: "MMShakeParam::Value const &") -> "bool":
        return _molsetc.MMShakeParam___ne__(self, val)

    def GetLabelsMap(self) -> "IntStrMap &":
        return _molsetc.MMShakeParam_GetLabelsMap(self)

    def value(self) -> "int &":
        return _molsetc.MMShakeParam_value(self)

    def label(self) -> "char const *":
        return _molsetc.MMShakeParam_label(self)

    def SetWithValue(self, val: "int") -> "int":
        return _molsetc.MMShakeParam_SetWithValue(self, val)

    def SetWithLabel(self, label: "char const *") -> "int":
        return _molsetc.MMShakeParam_SetWithLabel(self, label)

    def __init__(self, *args):
        _molsetc.MMShakeParam_swiginit(self, _molsetc.new_MMShakeParam(*args))

# Register MMShakeParam in _molsetc:
_molsetc.MMShakeParam_swigregister(MMShakeParam)
CALC_ALL_INTER = cvar.CALC_ALL_INTER
OMIT_BONDS_H = cvar.OMIT_BONDS_H
OMIT_BONDS = cvar.OMIT_BONDS
OMIT_BONDS_VANG_H = cvar.OMIT_BONDS_VANG_H
OMIT_BONDS_VANG_DIH_H = cvar.OMIT_BONDS_VANG_DIH_H
OMIT_BONDS_VANG_DIH = cvar.OMIT_BONDS_VANG_DIH

class MMExternalProg(HaEnum1):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_MMExternalProg
    SANDER_12 = _molsetc.MMExternalProg_SANDER_12
    PMEMD_12 = _molsetc.MMExternalProg_PMEMD_12
    PMEMD_18 = _molsetc.MMExternalProg_PMEMD_18
    TINKER_51 = _molsetc.MMExternalProg_TINKER_51
    GROMACS_51 = _molsetc.MMExternalProg_GROMACS_51

    def __eq__(self, val: "MMExternalProg::Value const &") -> "bool":
        return _molsetc.MMExternalProg___eq__(self, val)

    def __ne__(self, val: "MMExternalProg::Value const &") -> "bool":
        return _molsetc.MMExternalProg___ne__(self, val)

    def GetLabelsMap(self) -> "IntStrMap &":
        return _molsetc.MMExternalProg_GetLabelsMap(self)

    def value(self) -> "int &":
        return _molsetc.MMExternalProg_value(self)

    def label(self) -> "char const *":
        return _molsetc.MMExternalProg_label(self)

    def SetWithValue(self, val: "int") -> "int":
        return _molsetc.MMExternalProg_SetWithValue(self, val)

    def SetWithLabel(self, label: "char const *") -> "int":
        return _molsetc.MMExternalProg_SetWithLabel(self, label)

    def __init__(self, *args):
        _molsetc.MMExternalProg_swiginit(self, _molsetc.new_MMExternalProg(*args))

# Register MMExternalProg in _molsetc:
_molsetc.MMExternalProg_swigregister(MMExternalProg)
NO_SHAKE = cvar.NO_SHAKE
H_ATOM_SHAKE = cvar.H_ATOM_SHAKE
ALL_BOND_SHAKE = cvar.ALL_BOND_SHAKE

class ForceFieldType(HaEnum1):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_ForceFieldType
    AMBER_94 = _molsetc.ForceFieldType_AMBER_94
    AMBER_99_SB = _molsetc.ForceFieldType_AMBER_99_SB
    AMBER_99_BSC0 = _molsetc.ForceFieldType_AMBER_99_BSC0
    AMBER_03 = _molsetc.ForceFieldType_AMBER_03
    AMBER_10 = _molsetc.ForceFieldType_AMBER_10
    AMOEBA = _molsetc.ForceFieldType_AMOEBA
    ARROW_5_14_CT = _molsetc.ForceFieldType_ARROW_5_14_CT
    ARROW_2_0 = _molsetc.ForceFieldType_ARROW_2_0
    UNKNOWN_FF = _molsetc.ForceFieldType_UNKNOWN_FF

    def __eq__(self, val: "ForceFieldType::Value const &") -> "bool":
        return _molsetc.ForceFieldType___eq__(self, val)

    def __ne__(self, val: "ForceFieldType::Value const &") -> "bool":
        return _molsetc.ForceFieldType___ne__(self, val)

    def GetLabelsMap(self) -> "IntStrMap &":
        return _molsetc.ForceFieldType_GetLabelsMap(self)

    def value(self) -> "int &":
        return _molsetc.ForceFieldType_value(self)

    def label(self) -> "char const *":
        return _molsetc.ForceFieldType_label(self)

    def SetWithValue(self, val: "int") -> "int":
        return _molsetc.ForceFieldType_SetWithValue(self, val)

    def SetWithLabel(self, label: "char const *") -> "int":
        return _molsetc.ForceFieldType_SetWithLabel(self, label)

    def __init__(self, *args):
        _molsetc.ForceFieldType_swiginit(self, _molsetc.new_ForceFieldType(*args))

# Register ForceFieldType in _molsetc:
_molsetc.ForceFieldType_swigregister(ForceFieldType)
PMEMD_12 = cvar.PMEMD_12
SANDER_12 = cvar.SANDER_12
PMEMD_18 = cvar.PMEMD_18
TINKER_51 = cvar.TINKER_51
GROMACS_51 = cvar.GROMACS_51

class AtomContactType(HaEnum1):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_AtomContactType
    HARMONIC_CNT = _molsetc.AtomContactType_HARMONIC_CNT
    VDW_CNT_6_12 = _molsetc.AtomContactType_VDW_CNT_6_12
    VDW_CNT_10_12 = _molsetc.AtomContactType_VDW_CNT_10_12
    VDW_CNT_6_12_NO_REP = _molsetc.AtomContactType_VDW_CNT_6_12_NO_REP

    def __eq__(self, val: "AtomContactType::Value const &") -> "bool":
        return _molsetc.AtomContactType___eq__(self, val)

    def __ne__(self, val: "AtomContactType::Value const &") -> "bool":
        return _molsetc.AtomContactType___ne__(self, val)

    def GetLabelsMap(self) -> "IntStrMap &":
        return _molsetc.AtomContactType_GetLabelsMap(self)

    def value(self) -> "int &":
        return _molsetc.AtomContactType_value(self)

    def label(self) -> "char const *":
        return _molsetc.AtomContactType_label(self)

    def SetWithValue(self, val: "int") -> "int":
        return _molsetc.AtomContactType_SetWithValue(self, val)

    def SetWithLabel(self, label: "char const *") -> "int":
        return _molsetc.AtomContactType_SetWithLabel(self, label)

    def __init__(self, *args):
        _molsetc.AtomContactType_swiginit(self, _molsetc.new_AtomContactType(*args))

# Register AtomContactType in _molsetc:
_molsetc.AtomContactType_swigregister(AtomContactType)
AMBER_94 = cvar.AMBER_94
AMBER_99_SB = cvar.AMBER_99_SB
AMBER_99_BSC0 = cvar.AMBER_99_BSC0
AMBER_03 = cvar.AMBER_03
AMBER_10 = cvar.AMBER_10
AMOEBA = cvar.AMOEBA
ARROW_5_14_CT = cvar.ARROW_5_14_CT
ARROW_2_0 = cvar.ARROW_2_0
UNKNOWN_FF = cvar.UNKNOWN_FF

class MDTrajectory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_pmset: "MolSet"):
        _molsetc.MDTrajectory_swiginit(self, _molsetc.new_MDTrajectory(new_pmset))
    __swig_destroy__ = _molsetc.delete_MDTrajectory
    FormatUnk = _molsetc.MDTrajectory_FormatUnk
    AMBER_CRD = _molsetc.MDTrajectory_AMBER_CRD
    GMX_XTC = _molsetc.MDTrajectory_GMX_XTC
    format = property(_molsetc.MDTrajectory_format_get, _molsetc.MDTrajectory_format_set)

    def Open(self) -> "int":
        return _molsetc.MDTrajectory_Open(self)

    def Close(self) -> "int":
        return _molsetc.MDTrajectory_Close(self)

    def ReadNextFrame(self) -> "int":
        return _molsetc.MDTrajectory_ReadNextFrame(self)
    AMBER_CRD_withBoxSize = property(_molsetc.MDTrajectory_AMBER_CRD_withBoxSize_get, _molsetc.MDTrajectory_AMBER_CRD_withBoxSize_set)

    def RefreshAllViews(self) -> "int":
        return _molsetc.MDTrajectory_RefreshAllViews(self)
    CrdFileName = property(_molsetc.MDTrajectory_CrdFileName_get, _molsetc.MDTrajectory_CrdFileName_set)
    VelFileName = property(_molsetc.MDTrajectory_VelFileName_get, _molsetc.MDTrajectory_VelFileName_set)
    EneFileName = property(_molsetc.MDTrajectory_EneFileName_get, _molsetc.MDTrajectory_EneFileName_set)
    CrdFile = property(_molsetc.MDTrajectory_CrdFile_get, _molsetc.MDTrajectory_CrdFile_set)
    VelFile = property(_molsetc.MDTrajectory_VelFile_get, _molsetc.MDTrajectory_VelFile_set)
    EneFile = property(_molsetc.MDTrajectory_EneFile_get, _molsetc.MDTrajectory_EneFile_set)

# Register MDTrajectory in _molsetc:
_molsetc.MDTrajectory_swigregister(MDTrajectory)
VDW_CNT_6_12 = cvar.VDW_CNT_6_12
VDW_CNT_10_12 = cvar.VDW_CNT_10_12
HARMONIC_CNT = cvar.HARMONIC_CNT

class MDTrajAnalMod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p_mm_mod_new: "HaMolMechMod"):
        _molsetc.MDTrajAnalMod_swiginit(self, _molsetc.new_MDTrajAnalMod(p_mm_mod_new))
    __swig_destroy__ = _molsetc.delete_MDTrajAnalMod
    SCRIPT_CONTINUE = _molsetc.MDTrajAnalMod_SCRIPT_CONTINUE
    SCRIPT_START = _molsetc.MDTrajAnalMod_SCRIPT_START
    SCRIPT_STOP = _molsetc.MDTrajAnalMod_SCRIPT_STOP
    PBOX_DO_NOT_READ = _molsetc.MDTrajAnalMod_PBOX_DO_NOT_READ
    PBOX_READ = _molsetc.MDTrajAnalMod_PBOX_READ
    PBOX_READ_IF_SET = _molsetc.MDTrajAnalMod_PBOX_READ_IF_SET
    PBOX_DO_NOT_WRITE = _molsetc.MDTrajAnalMod_PBOX_DO_NOT_WRITE
    PBOX_WRITE = _molsetc.MDTrajAnalMod_PBOX_WRITE
    PBOX_WRITE_IF_SET = _molsetc.MDTrajAnalMod_PBOX_WRITE_IF_SET

    def AnalyzeTrajectory(self, sync: "int"=1) -> "int":
        return _molsetc.MDTrajAnalMod_AnalyzeTrajectory(self, sync)

    def AnalyzeTrajectoryInternal(self) -> "int":
        return _molsetc.MDTrajAnalMod_AnalyzeTrajectoryInternal(self)

    def OpenAmberTrajFilesToRead(self) -> "int":
        return _molsetc.MDTrajAnalMod_OpenAmberTrajFilesToRead(self)

    def CloseAmberTrajFiles(self) -> "int":
        return _molsetc.MDTrajAnalMod_CloseAmberTrajFiles(self)

    def BuildTrajIndex(self) -> "int":
        return _molsetc.MDTrajAnalMod_BuildTrajIndex(self)

    def ReadTrajPoint(self) -> "int":
        return _molsetc.MDTrajAnalMod_ReadTrajPoint(self)

    def LoadCurrPt(self) -> "int":
        return _molsetc.MDTrajAnalMod_LoadCurrPt(self)

    def ConvArbalestTrajToAmber(self, md_traj_arbalest: "std::string const &", md_traj_amber: "std::string const &") -> "int":
        return _molsetc.MDTrajAnalMod_ConvArbalestTrajToAmber(self, md_traj_arbalest, md_traj_amber)

    def ReduceAmberMDTraj(self, sh_traj_name: "char const *", p_sub_group: "PointContainer"=None) -> "int":
        return _molsetc.MDTrajAnalMod_ReduceAmberMDTraj(self, sh_traj_name, p_sub_group)

    def SetAmberMDCrdTraj(self, md_crd_fname: "std::string const &") -> "void":
        return _molsetc.MDTrajAnalMod_SetAmberMDCrdTraj(self, md_crd_fname)

    def SetAmberMDVelTraj(self, md_vel_fname: "std::string const &") -> "void":
        return _molsetc.MDTrajAnalMod_SetAmberMDVelTraj(self, md_vel_fname)

    def SetAmberMDEneTraj(self, md_ene_fname: "std::string const &") -> "void":
        return _molsetc.MDTrajAnalMod_SetAmberMDEneTraj(self, md_ene_fname)

    def SetAlignToFstPt(self, set_par: "bool"=True) -> "void":
        return _molsetc.MDTrajAnalMod_SetAlignToFstPt(self, set_par)

    def SetAlignToCurrentCrd(self, set_par: "bool"=True) -> "void":
        return _molsetc.MDTrajAnalMod_SetAlignToCurrentCrd(self, set_par)

    def SetReadPBox(self, set_par: "int"=1) -> "void":
        return _molsetc.MDTrajAnalMod_SetReadPBox(self, set_par)

    def SetWritePBox(self, set_par: "int"=1) -> "void":
        return _molsetc.MDTrajAnalMod_SetWritePBox(self, set_par)

    def SetWrapCrd(self, set_par: "int"=1) -> "void":
        return _molsetc.MDTrajAnalMod_SetWrapCrd(self, set_par)

    def SetPtBegin(self, npt_step: "int") -> "void":
        return _molsetc.MDTrajAnalMod_SetPtBegin(self, npt_step)

    def GetPtBegin(self) -> "int":
        return _molsetc.MDTrajAnalMod_GetPtBegin(self)

    def SetPtStep(self, npt_step: "int") -> "void":
        return _molsetc.MDTrajAnalMod_SetPtStep(self, npt_step)

    def GetPtStep(self) -> "int":
        return _molsetc.MDTrajAnalMod_GetPtStep(self)

    def SetPtEnd(self, npt_step: "int") -> "void":
        return _molsetc.MDTrajAnalMod_SetPtEnd(self, npt_step)

    def GetPtEnd(self) -> "int":
        return _molsetc.MDTrajAnalMod_GetPtEnd(self)

    def GetCurrPtIdx(self) -> "int":
        return _molsetc.MDTrajAnalMod_GetCurrPtIdx(self)
    delay_time = property(_molsetc.MDTrajAnalMod_delay_time_get, _molsetc.MDTrajAnalMod_delay_time_set)
    ipt_curr = property(_molsetc.MDTrajAnalMod_ipt_curr_get, _molsetc.MDTrajAnalMod_ipt_curr_set)
    traj_script = property(_molsetc.MDTrajAnalMod_traj_script_get, _molsetc.MDTrajAnalMod_traj_script_set)
    agents = property(_molsetc.MDTrajAnalMod_agents_get, _molsetc.MDTrajAnalMod_agents_set)
    py_agents = property(_molsetc.MDTrajAnalMod_py_agents_get, _molsetc.MDTrajAnalMod_py_agents_set)

    def AddAgent(self, p_agent: "TrajAnalAgent") -> "int":
        return _molsetc.MDTrajAnalMod_AddAgent(self, p_agent)

    def DeleteAgent(self, p_agent: "TrajAnalAgent") -> "int":
        return _molsetc.MDTrajAnalMod_DeleteAgent(self, p_agent)

    def AddPythonAgent(self, p_obj: "PyObject *") -> "int":
        return _molsetc.MDTrajAnalMod_AddPythonAgent(self, p_obj)

    def PrintAgents(self) -> "void":
        return _molsetc.MDTrajAnalMod_PrintAgents(self)

    def GetTrajAnalAgent(self, agent_class_name: "char const *", create_flag: "int") -> "TrajAnalAgent *":
        return _molsetc.MDTrajAnalMod_GetTrajAnalAgent(self, agent_class_name, create_flag)

    def GetRMSDAgent(self, create_flag: "int"=0) -> "RMSDAgent *":
        return _molsetc.MDTrajAnalMod_GetRMSDAgent(self, create_flag)

    def GetAtomCorrAgent(self, create_flag: "int"=0) -> "AtomCorrAgent *":
        return _molsetc.MDTrajAnalMod_GetAtomCorrAgent(self, create_flag)

    def GetMolMechMod(self) -> "HaMolMechMod *":
        return _molsetc.MDTrajAnalMod_GetMolMechMod(self)

# Register MDTrajAnalMod in _molsetc:
_molsetc.MDTrajAnalMod_swigregister(MDTrajAnalMod)

class MDTrajectoryIOAgent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p_mm_driver_new: "MMDriverAmber"):
        _molsetc.MDTrajectoryIOAgent_swiginit(self, _molsetc.new_MDTrajectoryIOAgent(p_mm_driver_new))
    __swig_destroy__ = _molsetc.delete_MDTrajectoryIOAgent

    def GetClassName(self) -> "std::string":
        return _molsetc.MDTrajectoryIOAgent_GetClassName(self)

    def Init(self) -> "int":
        return _molsetc.MDTrajectoryIOAgent_Init(self)

    def AnalyzePt(self, nstep: "int", si: "HaVec_double") -> "int":
        return _molsetc.MDTrajectoryIOAgent_AnalyzePt(self, nstep, si)

    def Finalize(self, nstep: "int") -> "int":
        return _molsetc.MDTrajectoryIOAgent_Finalize(self, nstep)
    p_mm_driver = property(_molsetc.MDTrajectoryIOAgent_p_mm_driver_get, _molsetc.MDTrajectoryIOAgent_p_mm_driver_set)
    p_amber_model = property(_molsetc.MDTrajectoryIOAgent_p_amber_model_get, _molsetc.MDTrajectoryIOAgent_p_amber_model_set)
    p_mm_mod = property(_molsetc.MDTrajectoryIOAgent_p_mm_mod_get, _molsetc.MDTrajectoryIOAgent_p_mm_mod_set)
    p_mm_model = property(_molsetc.MDTrajectoryIOAgent_p_mm_model_get, _molsetc.MDTrajectoryIOAgent_p_mm_model_set)
    sit = property(_molsetc.MDTrajectoryIOAgent_sit_get, _molsetc.MDTrajectoryIOAgent_sit_set)
    sit2 = property(_molsetc.MDTrajectoryIOAgent_sit2_get, _molsetc.MDTrajectoryIOAgent_sit2_set)
    sit_tmp = property(_molsetc.MDTrajectoryIOAgent_sit_tmp_get, _molsetc.MDTrajectoryIOAgent_sit_tmp_set)
    sit2_tmp = property(_molsetc.MDTrajectoryIOAgent_sit2_tmp_get, _molsetc.MDTrajectoryIOAgent_sit2_tmp_set)
    nvalid = property(_molsetc.MDTrajectoryIOAgent_nvalid_get, _molsetc.MDTrajectoryIOAgent_nvalid_set)
    n_saved_crd = property(_molsetc.MDTrajectoryIOAgent_n_saved_crd_get, _molsetc.MDTrajectoryIOAgent_n_saved_crd_set)

# Register MDTrajectoryIOAgent in _molsetc:
_molsetc.MDTrajectoryIOAgent_swigregister(MDTrajectoryIOAgent)
SCRIPT_CONTINUE = cvar.SCRIPT_CONTINUE
SCRIPT_START = cvar.SCRIPT_START
SCRIPT_STOP = cvar.SCRIPT_STOP

class RMSDAgent(TrajAnalAgent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.RMSDAgent_swiginit(self, _molsetc.new_RMSDAgent())
    __swig_destroy__ = _molsetc.delete_RMSDAgent

    def GetClassName(self) -> "std::string":
        return _molsetc.RMSDAgent_GetClassName(self)

    def IsActive(self) -> "int":
        return _molsetc.RMSDAgent_IsActive(self)

    def SetActive(self, active_flag: "int") -> "void":
        return _molsetc.RMSDAgent_SetActive(self, active_flag)

    def Init(self, ppt_info: "TrajPointInfo"=None) -> "int":
        return _molsetc.RMSDAgent_Init(self, ppt_info)

    def AnalyzePt(self, ppt_info: "TrajPointInfo"=None) -> "int":
        return _molsetc.RMSDAgent_AnalyzePt(self, ppt_info)

    def Finalize(self) -> "int":
        return _molsetc.RMSDAgent_Finalize(self)

    def SetAtomsFit(self, *args) -> "int":
        return _molsetc.RMSDAgent_SetAtomsFit(self, *args)

    def SetAtomsRMSD(self, *args) -> "int":
        return _molsetc.RMSDAgent_SetAtomsRMSD(self, *args)

    def SetRefCrdFit(self, *args) -> "int":
        return _molsetc.RMSDAgent_SetRefCrdFit(self, *args)

    def SetRefCrdFitFromXYZFile(self, ref_crd_file_name: "std::string const &") -> "int":
        return _molsetc.RMSDAgent_SetRefCrdFitFromXYZFile(self, ref_crd_file_name)

    def SetRefCrdFitFromAtomGroup(self, at_grp_id: "std::string const &", pmset_ref: "MolSet") -> "int":
        return _molsetc.RMSDAgent_SetRefCrdFitFromAtomGroup(self, at_grp_id, pmset_ref)

    def SetRefCrdRMSD(self, *args) -> "int":
        return _molsetc.RMSDAgent_SetRefCrdRMSD(self, *args)

    def SetRefCrdRMSDFromXYZFile(self, ref_crd_file_name: "std::string const &") -> "int":
        return _molsetc.RMSDAgent_SetRefCrdRMSDFromXYZFile(self, ref_crd_file_name)

    def SetRefCrdRMSDFromAtomGroup(self, at_grp_id: "std::string const &", pmset_ref: "MolSet") -> "int":
        return _molsetc.RMSDAgent_SetRefCrdRMSDFromAtomGroup(self, at_grp_id, pmset_ref)

    def SetMolSet(self, pmset: "MolSet") -> "int":
        return _molsetc.RMSDAgent_SetMolSet(self, pmset)
    fname_rmsd_out = property(_molsetc.RMSDAgent_fname_rmsd_out_get, _molsetc.RMSDAgent_fname_rmsd_out_set)
    fname_rmsd_atom_out = property(_molsetc.RMSDAgent_fname_rmsd_atom_out_get, _molsetc.RMSDAgent_fname_rmsd_atom_out_set)
    fname_rmsf_atom_out = property(_molsetc.RMSDAgent_fname_rmsf_atom_out_get, _molsetc.RMSDAgent_fname_rmsf_atom_out_set)
    avg_crd_file_name = property(_molsetc.RMSDAgent_avg_crd_file_name_get, _molsetc.RMSDAgent_avg_crd_file_name_set)
    REFC_CURRENT_CRD = _molsetc.RMSDAgent_REFC_CURRENT_CRD
    REFC_FIRST_PT = _molsetc.RMSDAgent_REFC_FIRST_PT
    REFC_XYZ_CRD_FILE = _molsetc.RMSDAgent_REFC_XYZ_CRD_FILE
    REFC_ATOM_ARRAY_ID = _molsetc.RMSDAgent_REFC_ATOM_ARRAY_ID
    REFC_SPECIAL = _molsetc.RMSDAgent_REFC_SPECIAL
    ref_crd_fit_type = property(_molsetc.RMSDAgent_ref_crd_fit_type_get, _molsetc.RMSDAgent_ref_crd_fit_type_set)
    ref_crd_rmsd_type = property(_molsetc.RMSDAgent_ref_crd_rmsd_type_get, _molsetc.RMSDAgent_ref_crd_rmsd_type_set)
    calc_rmsd_per_atom_flag = property(_molsetc.RMSDAgent_calc_rmsd_per_atom_flag_get, _molsetc.RMSDAgent_calc_rmsd_per_atom_flag_set)
    calc_rmsf_per_atom_flag = property(_molsetc.RMSDAgent_calc_rmsf_per_atom_flag_get, _molsetc.RMSDAgent_calc_rmsf_per_atom_flag_set)
    calc_avg_crd_flag = property(_molsetc.RMSDAgent_calc_avg_crd_flag_get, _molsetc.RMSDAgent_calc_avg_crd_flag_set)

# Register RMSDAgent in _molsetc:
_molsetc.RMSDAgent_swigregister(RMSDAgent)

class AtomCorrAgent(TrajAnalAgent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pmset: "MolSet"):
        _molsetc.AtomCorrAgent_swiginit(self, _molsetc.new_AtomCorrAgent(pmset))
    __swig_destroy__ = _molsetc.delete_AtomCorrAgent

    def GetClassName(self) -> "std::string":
        return _molsetc.AtomCorrAgent_GetClassName(self)

    def IsActive(self) -> "int":
        return _molsetc.AtomCorrAgent_IsActive(self)

    def SetActive(self, active_flag: "int") -> "void":
        return _molsetc.AtomCorrAgent_SetActive(self, active_flag)

    def Init(self, ppt_info: "TrajPointInfo"=None) -> "int":
        return _molsetc.AtomCorrAgent_Init(self, ppt_info)

    def AnalyzePt(self, ppt_info: "TrajPointInfo"=None) -> "int":
        return _molsetc.AtomCorrAgent_AnalyzePt(self, ppt_info)

    def Finalize(self) -> "int":
        return _molsetc.AtomCorrAgent_Finalize(self)

    def SetAtGroup1ByExpr(self, expr: "std::string const &") -> "int":
        return _molsetc.AtomCorrAgent_SetAtGroup1ByExpr(self, expr)

    def SetAtGroup2ByExpr(self, expr: "std::string const &") -> "int":
        return _molsetc.AtomCorrAgent_SetAtGroup2ByExpr(self, expr)

    def SetDistRange(self, rmin: "double", rmax: "double", nr: "int"=0) -> "void":
        return _molsetc.AtomCorrAgent_SetDistRange(self, rmin, rmax, nr)

    def GetRCut(self) -> "HaVec_double":
        return _molsetc.AtomCorrAgent_GetRCut(self)

    def GetGR(self) -> "HaVec_double":
        return _molsetc.AtomCorrAgent_GetGR(self)

    def GetNAvg(self) -> "HaVec_double":
        return _molsetc.AtomCorrAgent_GetNAvg(self)

    def GetDeltN2(self) -> "HaVec_double":
        return _molsetc.AtomCorrAgent_GetDeltN2(self)

# Register AtomCorrAgent in _molsetc:
_molsetc.AtomCorrAgent_swigregister(AtomCorrAgent)

class MMForceField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.MMForceField_swiginit(self, _molsetc.new_MMForceField())
    __swig_destroy__ = _molsetc.delete_MMForceField

    def Init(self) -> "int":
        return _molsetc.MMForceField_Init(self)

    def SetFFType(self, ff_type: "ForceFieldType") -> "int":
        return _molsetc.MMForceField_SetFFType(self, ff_type)

    def GetFFType(self) -> "ForceFieldType":
        return _molsetc.MMForceField_GetFFType(self)

    def Clear(self) -> "void":
        return _molsetc.MMForceField_Clear(self)

    def SetDefaultVdW(self) -> "void":
        return _molsetc.MMForceField_SetDefaultVdW(self)

    def SetDefaultParamFiles(self) -> "void":
        return _molsetc.MMForceField_SetDefaultParamFiles(self)
    symb_mass_map = property(_molsetc.MMForceField_symb_mass_map_get, _molsetc.MMForceField_symb_mass_map_set)
    symb_ppar_map = property(_molsetc.MMForceField_symb_ppar_map_get, _molsetc.MMForceField_symb_ppar_map_set)
    symb_hpar_map = property(_molsetc.MMForceField_symb_hpar_map_get, _molsetc.MMForceField_symb_hpar_map_set)
    bond_param_map = property(_molsetc.MMForceField_bond_param_map_get, _molsetc.MMForceField_bond_param_map_set)
    vang_param_map = property(_molsetc.MMForceField_vang_param_map_get, _molsetc.MMForceField_vang_param_map_set)
    dih_param_map = property(_molsetc.MMForceField_dih_param_map_get, _molsetc.MMForceField_dih_param_map_set)
    impdih_param_map = property(_molsetc.MMForceField_impdih_param_map_get, _molsetc.MMForceField_impdih_param_map_set)

    def FindAtomMassFromSymbol(self, ats: "std::string const &") -> "double":
        return _molsetc.MMForceField_FindAtomMassFromSymbol(self, ats)

    def FindPointParamFromSymbol(self, ats1: "char const *") -> "HaVec_double":
        return _molsetc.MMForceField_FindPointParamFromSymbol(self, ats1)

    def FindBondParamFromSymbol(self, ats1: "char const *", ats2: "char const *") -> "HaVec_double":
        return _molsetc.MMForceField_FindBondParamFromSymbol(self, ats1, ats2)

    def FindHBondParamFromSymbol(self, ats1: "char const *", ats2: "char const *") -> "HaVec_double":
        return _molsetc.MMForceField_FindHBondParamFromSymbol(self, ats1, ats2)

    def FindValAngleParamFromSymbol(self, ats1: "char const *", ats2: "char const *", ats3: "char const *") -> "HaVec_double":
        return _molsetc.MMForceField_FindValAngleParamFromSymbol(self, ats1, ats2, ats3)

    def FindDihedralParamFromSymbol(self, ats1: "char const *", ats2: "char const *", ats3: "char const *", ats4: "char const *", improper_flag: "bool"=False) -> "HaVec_double":
        return _molsetc.MMForceField_FindDihedralParamFromSymbol(self, ats1, ats2, ats3, ats4, improper_flag)

    def LoadAmberParamFile(self, ff_param_fname: "std::string const &") -> "int":
        return _molsetc.MMForceField_LoadAmberParamFile(self, ff_param_fname)

    def LoadTinkerParamFile(self, ff_param_fname: "std::string const &") -> "int":
        return _molsetc.MMForceField_LoadTinkerParamFile(self, ff_param_fname)

    def GetAmberParamFiles(self) -> "StrVec":
        return _molsetc.MMForceField_GetAmberParamFiles(self)
    ff_arr = property(_molsetc.MMForceField_ff_arr_get, _molsetc.MMForceField_ff_arr_set)

    @staticmethod
    def GetMMForceField(ff_type: "ForceFieldType", create: "int"=0) -> "MMForceField *":
        return _molsetc.MMForceField_GetMMForceField(ff_type, create)
    ff_type_default = property(_molsetc.MMForceField_ff_type_default_get, _molsetc.MMForceField_ff_type_default_set)

    @staticmethod
    def GetAmberResName(*args) -> "std::string":
        return _molsetc.MMForceField_GetAmberResName(*args)

    @staticmethod
    def GetAmberAtName(*args) -> "std::string":
        return _molsetc.MMForceField_GetAmberAtName(*args)

    @staticmethod
    def GetAtNameFromAmber(at_name_amber: "std::string const &", full_res_name: "std::string const &") -> "std::string":
        return _molsetc.MMForceField_GetAtNameFromAmber(at_name_amber, full_res_name)

    def IsMortFFInitiated(self) -> "int":
        return _molsetc.MMForceField_IsMortFFInitiated(self)

    def InitMortFF(self) -> "int":
        return _molsetc.MMForceField_InitMortFF(self)
    p_mort_ff = property(_molsetc.MMForceField_p_mort_ff_get, _molsetc.MMForceField_p_mort_ff_set)

    def SaveResFFTemplatesFromMort(self, fname: "char const *", pmset_res: "MolSet") -> "int":
        return _molsetc.MMForceField_SaveResFFTemplatesFromMort(self, fname, pmset_res)

    def LoadResFFTemplateXMLFile(self, fname: "char const *") -> "int":
        return _molsetc.MMForceField_LoadResFFTemplateXMLFile(self, fname)

    @staticmethod
    def switch_amoeba_type(mol: "mort::molecule_t &", poleff: "mort::molecule_t const &") -> "void":
        return _molsetc.MMForceField_switch_amoeba_type(mol, poleff)

    def GetResidueTemplate(self, full_res_name: "std::string const &") -> "ResFFTemplate *":
        return _molsetc.MMForceField_GetResidueTemplate(self, full_res_name)
    resff_files_add = property(_molsetc.MMForceField_resff_files_add_get, _molsetc.MMForceField_resff_files_add_set)
    tinker_param_files_add = property(_molsetc.MMForceField_tinker_param_files_add_get, _molsetc.MMForceField_tinker_param_files_add_set)
    amber_param_files_add = property(_molsetc.MMForceField_amber_param_files_add_get, _molsetc.MMForceField_amber_param_files_add_set)

# Register MMForceField in _molsetc:
_molsetc.MMForceField_swigregister(MMForceField)

def MMForceField_GetMMForceField(ff_type: "ForceFieldType", create: "int"=0) -> "MMForceField *":
    return _molsetc.MMForceField_GetMMForceField(ff_type, create)

def MMForceField_GetAmberResName(*args) -> "std::string":
    return _molsetc.MMForceField_GetAmberResName(*args)

def MMForceField_GetAmberAtName(*args) -> "std::string":
    return _molsetc.MMForceField_GetAmberAtName(*args)

def MMForceField_GetAtNameFromAmber(at_name_amber: "std::string const &", full_res_name: "std::string const &") -> "std::string":
    return _molsetc.MMForceField_GetAtNameFromAmber(at_name_amber, full_res_name)

def MMForceField_switch_amoeba_type(mol: "mort::molecule_t &", poleff: "mort::molecule_t const &") -> "void":
    return _molsetc.MMForceField_switch_amoeba_type(mol, poleff)

class MMDriverAmber(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p_mm_mod_new: "HaMolMechMod"):
        _molsetc.MMDriverAmber_swiginit(self, _molsetc.new_MMDriverAmber(p_mm_mod_new))
    __swig_destroy__ = _molsetc.delete_MMDriverAmber

    def GetClassName(self) -> "std::string":
        return _molsetc.MMDriverAmber_GetClassName(self)

    def CalcEnergy(self) -> "int":
        return _molsetc.MMDriverAmber_CalcEnergy(self)
    p_tm = property(_molsetc.MMDriverAmber_p_tm_get, _molsetc.MMDriverAmber_p_tm_set)
    p_amber_model = property(_molsetc.MMDriverAmber_p_amber_model_get, _molsetc.MMDriverAmber_p_amber_model_set)
    sander_exe_fname = property(_molsetc.MMDriverAmber_sander_exe_fname_get, _molsetc.MMDriverAmber_sander_exe_fname_set)
    amber_version = property(_molsetc.MMDriverAmber_amber_version_get, _molsetc.MMDriverAmber_amber_version_set)
    min_md_cpp_flag = property(_molsetc.MMDriverAmber_min_md_cpp_flag_get, _molsetc.MMDriverAmber_min_md_cpp_flag_set)
    driver_mpi_comm = property(_molsetc.MMDriverAmber_driver_mpi_comm_get, _molsetc.MMDriverAmber_driver_mpi_comm_set)
    driver_mpi_group = property(_molsetc.MMDriverAmber_driver_mpi_group_get, _molsetc.MMDriverAmber_driver_mpi_group_set)

    def SaveAmberRunFile(self) -> "int":
        return _molsetc.MMDriverAmber_SaveAmberRunFile(self)

    def SaveAmberInpFile(self) -> "int":
        return _molsetc.MMDriverAmber_SaveAmberInpFile(self)

    def SaveAmberTopFile(self) -> "int":
        return _molsetc.MMDriverAmber_SaveAmberTopFile(self)

    def SaveAmberCrdFile(self) -> "int":
        return _molsetc.MMDriverAmber_SaveAmberCrdFile(self)

    def SaveAmberRstFile(self, fname: "char const *") -> "int":
        return _molsetc.MMDriverAmber_SaveAmberRstFile(self, fname)

    def SaveAllInpFiles(self) -> "int":
        return _molsetc.MMDriverAmber_SaveAllInpFiles(self)

    def DeleteOutputFiles(self) -> "int":
        return _molsetc.MMDriverAmber_DeleteOutputFiles(self)

    def RunAmberProg(self, sync: "int") -> "int":
        return _molsetc.MMDriverAmber_RunAmberProg(self, sync)

    def LoadAmberRestartFile(self, rst_file_name: "char const *") -> "int":
        return _molsetc.MMDriverAmber_LoadAmberRestartFile(self, rst_file_name)

    def LoadAmberMDInfoFile(self) -> "int":
        return _molsetc.MMDriverAmber_LoadAmberMDInfoFile(self)
    master = property(_molsetc.MMDriverAmber_master_get, _molsetc.MMDriverAmber_master_set)
    numtasks = property(_molsetc.MMDriverAmber_numtasks_get, _molsetc.MMDriverAmber_numtasks_set)
    mytaskid = property(_molsetc.MMDriverAmber_mytaskid_get, _molsetc.MMDriverAmber_mytaskid_set)
    my_atm_cnt = property(_molsetc.MMDriverAmber_my_atm_cnt_get, _molsetc.MMDriverAmber_my_atm_cnt_set)
    gbl_my_atm_lst = property(_molsetc.MMDriverAmber_gbl_my_atm_lst_get, _molsetc.MMDriverAmber_gbl_my_atm_lst_set)
    gbl_atm_owner_map = property(_molsetc.MMDriverAmber_gbl_atm_owner_map_get, _molsetc.MMDriverAmber_gbl_atm_owner_map_set)

    def SetMPICommAllProcs(self) -> "int":
        return _molsetc.MMDriverAmber_SetMPICommAllProcs(self)

    def InitParallelDatMod(self) -> "void":
        return _molsetc.MMDriverAmber_InitParallelDatMod(self)

    def ResizeCrdVelFrcArrays(self, natom: "int") -> "void":
        return _molsetc.MMDriverAmber_ResizeCrdVelFrcArrays(self, natom)

    def BcastCrd(self, comm: "MPI_Comm &") -> "void":
        return _molsetc.MMDriverAmber_BcastCrd(self, comm)

    def BcastVel(self, comm: "MPI_Comm &") -> "void":
        return _molsetc.MMDriverAmber_BcastVel(self, comm)

    def BcastFrc(self, comm: "MPI_Comm &") -> "void":
        return _molsetc.MMDriverAmber_BcastFrc(self, comm)

    def BcastPBox(self, comm: "MPI_Comm &") -> "void":
        return _molsetc.MMDriverAmber_BcastPBox(self, comm)

    def SetupMasterNode(self) -> "void":
        return _molsetc.MMDriverAmber_SetupMasterNode(self)

    def SetupShakePars(self) -> "void":
        return _molsetc.MMDriverAmber_SetupShakePars(self)

    def SetupPME(self) -> "void":
        return _molsetc.MMDriverAmber_SetupPME(self)

    def SetupGB(self) -> "void":
        return _molsetc.MMDriverAmber_SetupGB(self)

    def ValidateCntrParams(self) -> "void":
        return _molsetc.MMDriverAmber_ValidateCntrParams(self)

    def PrintMDCntrData(self) -> "void":
        return _molsetc.MMDriverAmber_PrintMDCntrData(self)

    def InitPMEParams(self) -> "void":
        return _molsetc.MMDriverAmber_InitPMEParams(self)

    def InitAddMDCtrlParams(self) -> "void":
        return _molsetc.MMDriverAmber_InitAddMDCtrlParams(self)

    def BCastAddMDCtrlParams(self, comm: "MPI_Comm &") -> "void":
        return _molsetc.MMDriverAmber_BCastAddMDCtrlParams(self, comm)

    def SetAddMDCtrParamsFortran(self) -> "void":
        return _molsetc.MMDriverAmber_SetAddMDCtrParamsFortran(self)

    def AllGatherVec(self, vec: "HaVec_double") -> "void":
        return _molsetc.MMDriverAmber_AllGatherVec(self, vec)

    def PrintLogMDOUT(self, format: "char const *") -> "void":
        return _molsetc.MMDriverAmber_PrintLogMDOUT(self, format)

    def FlushMDOUT(self) -> "void":
        return _molsetc.MMDriverAmber_FlushMDOUT(self)
    stack_limit = property(_molsetc.MMDriverAmber_stack_limit_get, _molsetc.MMDriverAmber_stack_limit_set)

    def ResetStackLimits(self) -> "void":
        return _molsetc.MMDriverAmber_ResetStackLimits(self)

    def InitSimulationsStep2(self) -> "int":
        return _molsetc.MMDriverAmber_InitSimulationsStep2(self)

    def InitCtrlParams(self) -> "int":
        return _molsetc.MMDriverAmber_InitCtrlParams(self)

    def SaveAmberTopToStream(self, os: "ostream") -> "int":
        return _molsetc.MMDriverAmber_SaveAmberTopToStream(self, os)

    def SetAtomCrdToInternalArrays(self) -> "void":
        return _molsetc.MMDriverAmber_SetAtomCrdToInternalArrays(self)

    def GetAtomCrdFromInternalArrays(self) -> "void":
        return _molsetc.MMDriverAmber_GetAtomCrdFromInternalArrays(self)

    def SaveModelToFortran(self) -> "void":
        return _molsetc.MMDriverAmber_SaveModelToFortran(self)

    def SetPBoxDataToFortran(self) -> "void":
        return _molsetc.MMDriverAmber_SetPBoxDataToFortran(self)

    def GetPBoxDataFromFortran(self) -> "void":
        return _molsetc.MMDriverAmber_GetPBoxDataFromFortran(self)

    def CheckForStop(self) -> "int":
        return _molsetc.MMDriverAmber_CheckForStop(self)

    def OpenOutputFiles(self) -> "int":
        return _molsetc.MMDriverAmber_OpenOutputFiles(self)

    def CloseOutputFiles(self) -> "int":
        return _molsetc.MMDriverAmber_CloseOutputFiles(self)

    def GBForce(self, atm_cnt: "int", crd: "HaVec_double", frc: "HaVec_double", si: "HaVec_double", ncalls: "int") -> "void":
        return _molsetc.MMDriverAmber_GBForce(self, atm_cnt, crd, frc, si, ncalls)

    def PMEForce(self, atm_cnt: "int", crd: "HaVec_double", vel: "HaVec_double", frc: "HaVec_double", new_list: "int", si: "HaVec_double") -> "void":
        return _molsetc.MMDriverAmber_PMEForce(self, atm_cnt, crd, vel, frc, new_list, si)

    def CalcForceAndEne(self, new_list: "int", ncalls: "int") -> "void":
        return _molsetc.MMDriverAmber_CalcForceAndEne(self, new_list, ncalls)

    def CalcKinEne(self, only_cur_vel: "int"=0) -> "void":
        return _molsetc.MMDriverAmber_CalcKinEne(self, only_cur_vel)

    def IncrementVelAndCrd(self, nstep: "int", crd: "HaVec_double", vel: "HaVec_double", frc: "HaVec_double", reset_velocities: "int &") -> "void":
        return _molsetc.MMDriverAmber_IncrementVelAndCrd(self, nstep, crd, vel, frc, reset_velocities)

    def CalcPressure(self, si: "HaVec_double") -> "void":
        return _molsetc.MMDriverAmber_CalcPressure(self, si)

    def ScaleCoordConstPress(self, crd: "HaVec_double", box: "HaVec_double", si: "HaVec_double") -> "void":
        return _molsetc.MMDriverAmber_ScaleCoordConstPress(self, crd, box, si)

    def PropagateVelHalfStepBack(self, vel: "HaVec_double", frc: "HaVec_double") -> "void":
        return _molsetc.MMDriverAmber_PropagateVelHalfStepBack(self, vel, frc)

    def SaveVelToLastVel(self, all_vels_valid: "int &") -> "void":
        return _molsetc.MMDriverAmber_SaveVelToLastVel(self, all_vels_valid)

    def InitPBC(self) -> "void":
        return _molsetc.MMDriverAmber_InitPBC(self)

    def CalcNumDegFreedom(self) -> "void":
        return _molsetc.MMDriverAmber_CalcNumDegFreedom(self)

    def CalcCenMassVel(self, crd: "HaVec_double", vel: "HaVec_double", xcm: "HaVec_double", vcm: "HaVec_double", ocm: "HaVec_double") -> "void":
        return _molsetc.MMDriverAmber_CalcCenMassVel(self, crd, vel, xcm, vcm, ocm)

    def RemoveCOMVelocity(self) -> "void":
        return _molsetc.MMDriverAmber_RemoveCOMVelocity(self)

    def RemoveCOMVelAndResetCenter(self, all_crds_valid: "int &", all_vels_valid: "int &", sys_cnt: "Vec3D") -> "void":
        return _molsetc.MMDriverAmber_RemoveCOMVelAndResetCenter(self, all_crds_valid, all_vels_valid, sys_cnt)

    def GetPosition(self, crd: "HaVec_double", cnt: "Vec3D") -> "void":
        return _molsetc.MMDriverAmber_GetPosition(self, crd, cnt)

    def RePosition(self, crd: "HaVec_double", cnt: "Vec3D") -> "void":
        return _molsetc.MMDriverAmber_RePosition(self, crd, cnt)

    def GrdMax(self, frc: "HaVec_double", iatmax: "int &", fdmax: "double &") -> "void":
        return _molsetc.MMDriverAmber_GrdMax(self, frc, iatmax, fdmax)

    def ZeroVelFrozenAtoms(self) -> "void":
        return _molsetc.MMDriverAmber_ZeroVelFrozenAtoms(self)

    def ZeroFrcFrozenAtoms(self) -> "void":
        return _molsetc.MMDriverAmber_ZeroFrcFrozenAtoms(self)

    def CollectCoords(self, new_list: "int &", nstep: "int &", collect_crds: "int &", all_crds_valid: "int &") -> "void":
        return _molsetc.MMDriverAmber_CollectCoords(self, new_list, nstep, collect_crds, all_crds_valid)

    def CollectVelocities(self, new_list: "int &", nstep: "int &", collect_crds: "int &", all_vels_valid: "int &") -> "void":
        return _molsetc.MMDriverAmber_CollectVelocities(self, new_list, nstep, collect_crds, all_vels_valid)

    def ScaleVelConstTemp(self) -> "void":
        return _molsetc.MMDriverAmber_ScaleVelConstTemp(self)

    def CheckForNewNonBondList(self) -> "int":
        return _molsetc.MMDriverAmber_CheckForNewNonBondList(self)

    def CheckAllAtomMovement(self, atm_cnt: "int", crd: "HaVec_double") -> "int":
        return _molsetc.MMDriverAmber_CheckAllAtomMovement(self, atm_cnt, crd)

    def RunMinMaster(self) -> "void":
        return _molsetc.MMDriverAmber_RunMinMaster(self)

    def RunMinSlave(self) -> "void":
        return _molsetc.MMDriverAmber_RunMinSlave(self)

    def RunMD(self) -> "void":
        return _molsetc.MMDriverAmber_RunMD(self)

    def CalcCurrEne(self) -> "void":
        return _molsetc.MMDriverAmber_CalcCurrEne(self)

    def SetMMInfo(self, info: "MMSysInfo", si: "HaVec_double") -> "void":
        return _molsetc.MMDriverAmber_SetMMInfo(self, info, si)

    def SetPrmTopIntFortran(self) -> "void":
        return _molsetc.MMDriverAmber_SetPrmTopIntFortran(self)

    def SetMDinCtrlDblFortran(self) -> "void":
        return _molsetc.MMDriverAmber_SetMDinCtrlDblFortran(self)

    def SetMDinCtrlIntFortran(self) -> "void":
        return _molsetc.MMDriverAmber_SetMDinCtrlIntFortran(self)

    def SetAddIntParsFortran(self) -> "void":
        return _molsetc.MMDriverAmber_SetAddIntParsFortran(self)

    def SetPMEParsFortran(self) -> "void":
        return _molsetc.MMDriverAmber_SetPMEParsFortran(self)

    @staticmethod
    def ModifyFormatVal(val: "double &", format: "std::string const &") -> "void":
        return _molsetc.MMDriverAmber_ModifyFormatVal(val, format)

    def PrintMDEneMDOUT(self, si_vec: "HaVec_double", nstep: "int", t: "double") -> "void":
        return _molsetc.MMDriverAmber_PrintMDEneMDOUT(self, si_vec, nstep, t)

    def PrintMinEneMDOUT(self, si_vec: "HaVec_double", nstep: "int", rms: "double", fdmax: "double", iatmax: "int", labmax: "std::string") -> "void":
        return _molsetc.MMDriverAmber_PrintMinEneMDOUT(self, si_vec, nstep, rms, fdmax, iatmax, labmax)

    @staticmethod
    def TestFFT1() -> "void":
        return _molsetc.MMDriverAmber_TestFFT1()

    @staticmethod
    def OpenAmberMDTrajFortran(iunit: "int", fname: "std::string const &", write_flag: "bool"=True, formatted: "bool"=True) -> "int":
        return _molsetc.MMDriverAmber_OpenAmberMDTrajFortran(iunit, fname, write_flag, formatted)

    @staticmethod
    def WriteCrdToAmberMDTrajFortran(iunit: "int", pt_cont: "PointContainer", save_box: "bool"=True, formatted: "bool"=True) -> "int":
        return _molsetc.MMDriverAmber_WriteCrdToAmberMDTrajFortran(iunit, pt_cont, save_box, formatted)

    @staticmethod
    def CloseAmberMDTrajFortran(iunit: "int") -> "int":
        return _molsetc.MMDriverAmber_CloseAmberMDTrajFortran(iunit)
    amber_run_file = property(_molsetc.MMDriverAmber_amber_run_file_get, _molsetc.MMDriverAmber_amber_run_file_set)
    amber_inp_file = property(_molsetc.MMDriverAmber_amber_inp_file_get, _molsetc.MMDriverAmber_amber_inp_file_set)
    amber_top_file = property(_molsetc.MMDriverAmber_amber_top_file_get, _molsetc.MMDriverAmber_amber_top_file_set)
    amber_crd_file = property(_molsetc.MMDriverAmber_amber_crd_file_get, _molsetc.MMDriverAmber_amber_crd_file_set)
    amber_out_file = property(_molsetc.MMDriverAmber_amber_out_file_get, _molsetc.MMDriverAmber_amber_out_file_set)
    amber_rst_file = property(_molsetc.MMDriverAmber_amber_rst_file_get, _molsetc.MMDriverAmber_amber_rst_file_set)
    amber_trj_coord_file = property(_molsetc.MMDriverAmber_amber_trj_coord_file_get, _molsetc.MMDriverAmber_amber_trj_coord_file_set)
    amber_trj_vel_file = property(_molsetc.MMDriverAmber_amber_trj_vel_file_get, _molsetc.MMDriverAmber_amber_trj_vel_file_set)
    amber_trj_ene_file = property(_molsetc.MMDriverAmber_amber_trj_ene_file_get, _molsetc.MMDriverAmber_amber_trj_ene_file_set)
    amber_constr_crd_file = property(_molsetc.MMDriverAmber_amber_constr_crd_file_get, _molsetc.MMDriverAmber_amber_constr_crd_file_set)
    amber_log_file = property(_molsetc.MMDriverAmber_amber_log_file_get, _molsetc.MMDriverAmber_amber_log_file_set)
    trj_coord_fp = property(_molsetc.MMDriverAmber_trj_coord_fp_get, _molsetc.MMDriverAmber_trj_coord_fp_set)
    trj_vel_fp = property(_molsetc.MMDriverAmber_trj_vel_fp_get, _molsetc.MMDriverAmber_trj_vel_fp_set)
    trj_ene_fp = property(_molsetc.MMDriverAmber_trj_ene_fp_get, _molsetc.MMDriverAmber_trj_ene_fp_set)
    title = property(_molsetc.MMDriverAmber_title_get, _molsetc.MMDriverAmber_title_set)
    ntave = property(_molsetc.MMDriverAmber_ntave_get, _molsetc.MMDriverAmber_ntave_set)
    nsnb = property(_molsetc.MMDriverAmber_nsnb_get, _molsetc.MMDriverAmber_nsnb_set)
    nrespa = property(_molsetc.MMDriverAmber_nrespa_get, _molsetc.MMDriverAmber_nrespa_set)
    ntp = property(_molsetc.MMDriverAmber_ntp_get, _molsetc.MMDriverAmber_ntp_set)
    ntc = property(_molsetc.MMDriverAmber_ntc_get, _molsetc.MMDriverAmber_ntc_set)
    jfastw = property(_molsetc.MMDriverAmber_jfastw_get, _molsetc.MMDriverAmber_jfastw_set)
    nrespai = property(_molsetc.MMDriverAmber_nrespai_get, _molsetc.MMDriverAmber_nrespai_set)
    ndfmin = property(_molsetc.MMDriverAmber_ndfmin_get, _molsetc.MMDriverAmber_ndfmin_set)
    t = property(_molsetc.MMDriverAmber_t_get, _molsetc.MMDriverAmber_t_set)
    mdin = property(_molsetc.MMDriverAmber_mdin_get, _molsetc.MMDriverAmber_mdin_set)
    mdout = property(_molsetc.MMDriverAmber_mdout_get, _molsetc.MMDriverAmber_mdout_set)
    mdcrd = property(_molsetc.MMDriverAmber_mdcrd_get, _molsetc.MMDriverAmber_mdcrd_set)
    mdvel = property(_molsetc.MMDriverAmber_mdvel_get, _molsetc.MMDriverAmber_mdvel_set)
    mdinfo_flush_interval = property(_molsetc.MMDriverAmber_mdinfo_flush_interval_get, _molsetc.MMDriverAmber_mdinfo_flush_interval_set)
    mdout_flush_interval = property(_molsetc.MMDriverAmber_mdout_flush_interval_get, _molsetc.MMDriverAmber_mdout_flush_interval_set)
    dbg_atom_redistribution = property(_molsetc.MMDriverAmber_dbg_atom_redistribution_get, _molsetc.MMDriverAmber_dbg_atom_redistribution_set)
    loadbal_verbose = property(_molsetc.MMDriverAmber_loadbal_verbose_get, _molsetc.MMDriverAmber_loadbal_verbose_set)
    next_mdout_flush_sec = property(_molsetc.MMDriverAmber_next_mdout_flush_sec_get, _molsetc.MMDriverAmber_next_mdout_flush_sec_set)
    atm_crd = property(_molsetc.MMDriverAmber_atm_crd_get, _molsetc.MMDriverAmber_atm_crd_set)
    atm_frc = property(_molsetc.MMDriverAmber_atm_frc_get, _molsetc.MMDriverAmber_atm_frc_set)
    atm_vel = property(_molsetc.MMDriverAmber_atm_vel_get, _molsetc.MMDriverAmber_atm_vel_set)
    atm_last_vel = property(_molsetc.MMDriverAmber_atm_last_vel_get, _molsetc.MMDriverAmber_atm_last_vel_set)
    gbl_atm_saved_crd = property(_molsetc.MMDriverAmber_gbl_atm_saved_crd_get, _molsetc.MMDriverAmber_gbl_atm_saved_crd_set)
    gbl_saved_box = property(_molsetc.MMDriverAmber_gbl_saved_box_get, _molsetc.MMDriverAmber_gbl_saved_box_set)
    sys_info = property(_molsetc.MMDriverAmber_sys_info_get, _molsetc.MMDriverAmber_sys_info_set)
    collect_crds = property(_molsetc.MMDriverAmber_collect_crds_get, _molsetc.MMDriverAmber_collect_crds_set)
    all_crds_valid = property(_molsetc.MMDriverAmber_all_crds_valid_get, _molsetc.MMDriverAmber_all_crds_valid_set)
    all_vels_valid = property(_molsetc.MMDriverAmber_all_vels_valid_get, _molsetc.MMDriverAmber_all_vels_valid_set)
    pbc_box = property(_molsetc.MMDriverAmber_pbc_box_get, _molsetc.MMDriverAmber_pbc_box_set)
    pbc_alpha = property(_molsetc.MMDriverAmber_pbc_alpha_get, _molsetc.MMDriverAmber_pbc_alpha_set)
    pbc_beta = property(_molsetc.MMDriverAmber_pbc_beta_get, _molsetc.MMDriverAmber_pbc_beta_set)
    pbc_gamma = property(_molsetc.MMDriverAmber_pbc_gamma_get, _molsetc.MMDriverAmber_pbc_gamma_set)
    is_orthog = property(_molsetc.MMDriverAmber_is_orthog_get, _molsetc.MMDriverAmber_is_orthog_set)
    is_octahedral = property(_molsetc.MMDriverAmber_is_octahedral_get, _molsetc.MMDriverAmber_is_octahedral_set)
    recip = property(_molsetc.MMDriverAmber_recip_get, _molsetc.MMDriverAmber_recip_set)
    ucell = property(_molsetc.MMDriverAmber_ucell_get, _molsetc.MMDriverAmber_ucell_set)
    cut_factor = property(_molsetc.MMDriverAmber_cut_factor_get, _molsetc.MMDriverAmber_cut_factor_set)
    reclng = property(_molsetc.MMDriverAmber_reclng_get, _molsetc.MMDriverAmber_reclng_set)
    uc_volume = property(_molsetc.MMDriverAmber_uc_volume_get, _molsetc.MMDriverAmber_uc_volume_set)
    uc_sphere = property(_molsetc.MMDriverAmber_uc_sphere_get, _molsetc.MMDriverAmber_uc_sphere_set)
    tranvec = property(_molsetc.MMDriverAmber_tranvec_get, _molsetc.MMDriverAmber_tranvec_set)
    dirfrc_efs = property(_molsetc.MMDriverAmber_dirfrc_efs_get, _molsetc.MMDriverAmber_dirfrc_efs_set)
    emulate_ext_amber = property(_molsetc.MMDriverAmber_emulate_ext_amber_get, _molsetc.MMDriverAmber_emulate_ext_amber_set)
    SI_TOT_ENE = _molsetc.MMDriverAmber_SI_TOT_ENE
    SI_KIN_ENE = _molsetc.MMDriverAmber_SI_KIN_ENE
    SI_SOLUTE_KIN_ENE = _molsetc.MMDriverAmber_SI_SOLUTE_KIN_ENE
    SI_SOLVENT_KIN_ENE = _molsetc.MMDriverAmber_SI_SOLVENT_KIN_ENE
    SI_VOLUME = _molsetc.MMDriverAmber_SI_VOLUME
    SI_TOT_PRESS = _molsetc.MMDriverAmber_SI_TOT_PRESS
    SI_TOT_EKCMT = _molsetc.MMDriverAmber_SI_TOT_EKCMT
    SI_TOT_VIRIAL = _molsetc.MMDriverAmber_SI_TOT_VIRIAL
    SI_POT_ENE = _molsetc.MMDriverAmber_SI_POT_ENE
    SI_VDW_ENE = _molsetc.MMDriverAmber_SI_VDW_ENE
    SI_ELECT_ENE = _molsetc.MMDriverAmber_SI_ELECT_ENE
    SI_HBOND_ENE = _molsetc.MMDriverAmber_SI_HBOND_ENE
    SI_BOND_ENE = _molsetc.MMDriverAmber_SI_BOND_ENE
    SI_ANGLE_ENE = _molsetc.MMDriverAmber_SI_ANGLE_ENE
    SI_DIHEDRAL_ENE = _molsetc.MMDriverAmber_SI_DIHEDRAL_ENE
    SI_VDW_14_ENE = _molsetc.MMDriverAmber_SI_VDW_14_ENE
    SI_ELECT_14_ENE = _molsetc.MMDriverAmber_SI_ELECT_14_ENE
    SI_RESTRAINT_ENE = _molsetc.MMDriverAmber_SI_RESTRAINT_ENE
    SI_DV_DLAMBDA = _molsetc.MMDriverAmber_SI_DV_DLAMBDA
    SI_DENSITY = _molsetc.MMDriverAmber_SI_DENSITY
    SI_PME_ERR_EST = _molsetc.MMDriverAmber_SI_PME_ERR_EST
    SI_PRESS_0 = _molsetc.MMDriverAmber_SI_PRESS_0
    SI_PRESS_1 = _molsetc.MMDriverAmber_SI_PRESS_1
    SI_PRESS_2 = _molsetc.MMDriverAmber_SI_PRESS_2
    SI_EKCMT_0 = _molsetc.MMDriverAmber_SI_EKCMT_0
    SI_EKCMT_1 = _molsetc.MMDriverAmber_SI_EKCMT_1
    SI_EKCMT_2 = _molsetc.MMDriverAmber_SI_EKCMT_2
    SI_VIR_0 = _molsetc.MMDriverAmber_SI_VIR_0
    SI_VIR_1 = _molsetc.MMDriverAmber_SI_VIR_1
    SI_VIR_2 = _molsetc.MMDriverAmber_SI_VIR_2
    SI_KIN_ENE_PLUS_HALF_DT = _molsetc.MMDriverAmber_SI_KIN_ENE_PLUS_HALF_DT
    SI_KIN_ENE_MINUS_HALF_DT = _molsetc.MMDriverAmber_SI_KIN_ENE_MINUS_HALF_DT
    SI_KIN_ENE_PBS = _molsetc.MMDriverAmber_SI_KIN_ENE_PBS
    SI_TEMP = _molsetc.MMDriverAmber_SI_TEMP
    SI_TEMP_SOLUTE = _molsetc.MMDriverAmber_SI_TEMP_SOLUTE
    SI_TEMP_SOLVENT = _molsetc.MMDriverAmber_SI_TEMP_SOLVENT
    SI_POLAR = _molsetc.MMDriverAmber_SI_POLAR
    SI_DIPITER = _molsetc.MMDriverAmber_SI_DIPITER
    SI_DIPRMS = _molsetc.MMDriverAmber_SI_DIPRMS
    SI_CNT = _molsetc.MMDriverAmber_SI_CNT

# Register MMDriverAmber in _molsetc:
_molsetc.MMDriverAmber_swigregister(MMDriverAmber)

def MMDriverAmber_ModifyFormatVal(val: "double &", format: "std::string const &") -> "void":
    return _molsetc.MMDriverAmber_ModifyFormatVal(val, format)

def MMDriverAmber_TestFFT1() -> "void":
    return _molsetc.MMDriverAmber_TestFFT1()

def MMDriverAmber_OpenAmberMDTrajFortran(iunit: "int", fname: "std::string const &", write_flag: "bool"=True, formatted: "bool"=True) -> "int":
    return _molsetc.MMDriverAmber_OpenAmberMDTrajFortran(iunit, fname, write_flag, formatted)

def MMDriverAmber_WriteCrdToAmberMDTrajFortran(iunit: "int", pt_cont: "PointContainer", save_box: "bool"=True, formatted: "bool"=True) -> "int":
    return _molsetc.MMDriverAmber_WriteCrdToAmberMDTrajFortran(iunit, pt_cont, save_box, formatted)

def MMDriverAmber_CloseAmberMDTrajFortran(iunit: "int") -> "int":
    return _molsetc.MMDriverAmber_CloseAmberMDTrajFortran(iunit)

class AmberMMModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p_mm_model: "MolMechModel"):
        _molsetc.AmberMMModel_swiginit(self, _molsetc.new_AmberMMModel(p_mm_model))
    __swig_destroy__ = _molsetc.delete_AmberMMModel

    def UpdateAmberData(self) -> "int":
        return _molsetc.AmberMMModel_UpdateAmberData(self)

    def InitAmberModelAmoeba(self) -> "int":
        return _molsetc.AmberMMModel_InitAmberModelAmoeba(self)

    def SetAtomNum(self, natom_new: "int") -> "int":
        return _molsetc.AmberMMModel_SetAtomNum(self, natom_new)

    def FindResMolPartition(self) -> "void":
        return _molsetc.AmberMMModel_FindResMolPartition(self)

    def CalcAddDihParams(self) -> "void":
        return _molsetc.AmberMMModel_CalcAddDihParams(self)

    def SetAtomPosRestrData(self) -> "int":
        return _molsetc.AmberMMModel_SetAtomPosRestrData(self)

    def Bcast(self, comm: "MPI_Comm &") -> "void":
        return _molsetc.AmberMMModel_Bcast(self, comm)

    def BcastAtmMass(self, comm: "MPI_Comm &") -> "void":
        return _molsetc.AmberMMModel_BcastAtmMass(self, comm)

    def Clear(self) -> "void":
        return _molsetc.AmberMMModel_Clear(self)

    def SetUpdateDataFlag(self, to_update_flag_new: "int"=1) -> "void":
        return _molsetc.AmberMMModel_SetUpdateDataFlag(self, to_update_flag_new)
    ntf = property(_molsetc.AmberMMModel_ntf_get, _molsetc.AmberMMModel_ntf_set)
    natom = property(_molsetc.AmberMMModel_natom_get, _molsetc.AmberMMModel_natom_set)
    ntypes = property(_molsetc.AmberMMModel_ntypes_get, _molsetc.AmberMMModel_ntypes_set)
    nbonh = property(_molsetc.AmberMMModel_nbonh_get, _molsetc.AmberMMModel_nbonh_set)
    ntheth = property(_molsetc.AmberMMModel_ntheth_get, _molsetc.AmberMMModel_ntheth_set)
    nphih = property(_molsetc.AmberMMModel_nphih_get, _molsetc.AmberMMModel_nphih_set)
    next = property(_molsetc.AmberMMModel_next_get, _molsetc.AmberMMModel_next_set)
    nres = property(_molsetc.AmberMMModel_nres_get, _molsetc.AmberMMModel_nres_set)
    nbona = property(_molsetc.AmberMMModel_nbona_get, _molsetc.AmberMMModel_nbona_set)
    ntheta = property(_molsetc.AmberMMModel_ntheta_get, _molsetc.AmberMMModel_ntheta_set)
    nphia = property(_molsetc.AmberMMModel_nphia_get, _molsetc.AmberMMModel_nphia_set)
    numbnd = property(_molsetc.AmberMMModel_numbnd_get, _molsetc.AmberMMModel_numbnd_set)
    numang = property(_molsetc.AmberMMModel_numang_get, _molsetc.AmberMMModel_numang_set)
    nptra = property(_molsetc.AmberMMModel_nptra_get, _molsetc.AmberMMModel_nptra_set)
    nphb = property(_molsetc.AmberMMModel_nphb_get, _molsetc.AmberMMModel_nphb_set)
    nspm = property(_molsetc.AmberMMModel_nspm_get, _molsetc.AmberMMModel_nspm_set)
    nttyp = property(_molsetc.AmberMMModel_nttyp_get, _molsetc.AmberMMModel_nttyp_set)
    bonda_idx = property(_molsetc.AmberMMModel_bonda_idx_get, _molsetc.AmberMMModel_bonda_idx_set)
    anglea_idx = property(_molsetc.AmberMMModel_anglea_idx_get, _molsetc.AmberMMModel_anglea_idx_set)
    diheda_idx = property(_molsetc.AmberMMModel_diheda_idx_get, _molsetc.AmberMMModel_diheda_idx_set)
    gbl_bond_allocsize = property(_molsetc.AmberMMModel_gbl_bond_allocsize_get, _molsetc.AmberMMModel_gbl_bond_allocsize_set)
    gbl_angle_allocsize = property(_molsetc.AmberMMModel_gbl_angle_allocsize_get, _molsetc.AmberMMModel_gbl_angle_allocsize_set)
    gbl_dihed_allocsize = property(_molsetc.AmberMMModel_gbl_dihed_allocsize_get, _molsetc.AmberMMModel_gbl_dihed_allocsize_set)
    ibelly = property(_molsetc.AmberMMModel_ibelly_get, _molsetc.AmberMMModel_ibelly_set)
    igb = property(_molsetc.AmberMMModel_igb_get, _molsetc.AmberMMModel_igb_set)
    alpb = property(_molsetc.AmberMMModel_alpb_get, _molsetc.AmberMMModel_alpb_set)
    rbornstat = property(_molsetc.AmberMMModel_rbornstat_get, _molsetc.AmberMMModel_rbornstat_set)
    gbsa = property(_molsetc.AmberMMModel_gbsa_get, _molsetc.AmberMMModel_gbsa_set)
    dielc = property(_molsetc.AmberMMModel_dielc_get, _molsetc.AmberMMModel_dielc_set)
    es_cutoff = property(_molsetc.AmberMMModel_es_cutoff_get, _molsetc.AmberMMModel_es_cutoff_set)
    vdw_cutoff = property(_molsetc.AmberMMModel_vdw_cutoff_get, _molsetc.AmberMMModel_vdw_cutoff_set)
    scnb = property(_molsetc.AmberMMModel_scnb_get, _molsetc.AmberMMModel_scnb_set)
    scee = property(_molsetc.AmberMMModel_scee_get, _molsetc.AmberMMModel_scee_set)
    intdiel = property(_molsetc.AmberMMModel_intdiel_get, _molsetc.AmberMMModel_intdiel_set)
    extdiel = property(_molsetc.AmberMMModel_extdiel_get, _molsetc.AmberMMModel_extdiel_set)
    saltcon = property(_molsetc.AmberMMModel_saltcon_get, _molsetc.AmberMMModel_saltcon_set)
    cut_inner = property(_molsetc.AmberMMModel_cut_inner_get, _molsetc.AmberMMModel_cut_inner_set)
    gb_cutoff = property(_molsetc.AmberMMModel_gb_cutoff_get, _molsetc.AmberMMModel_gb_cutoff_set)
    gb_alpha = property(_molsetc.AmberMMModel_gb_alpha_get, _molsetc.AmberMMModel_gb_alpha_set)
    gb_beta = property(_molsetc.AmberMMModel_gb_beta_get, _molsetc.AmberMMModel_gb_beta_set)
    gb_gamma = property(_molsetc.AmberMMModel_gb_gamma_get, _molsetc.AmberMMModel_gb_gamma_set)
    gb_fs_max = property(_molsetc.AmberMMModel_gb_fs_max_get, _molsetc.AmberMMModel_gb_fs_max_set)
    gb_kappa = property(_molsetc.AmberMMModel_gb_kappa_get, _molsetc.AmberMMModel_gb_kappa_set)
    gb_neckscale = property(_molsetc.AmberMMModel_gb_neckscale_get, _molsetc.AmberMMModel_gb_neckscale_set)
    arad = property(_molsetc.AmberMMModel_arad_get, _molsetc.AmberMMModel_arad_set)
    bbox_xmin = property(_molsetc.AmberMMModel_bbox_xmin_get, _molsetc.AmberMMModel_bbox_xmin_set)
    bbox_ymin = property(_molsetc.AmberMMModel_bbox_ymin_get, _molsetc.AmberMMModel_bbox_ymin_set)
    bbox_zmin = property(_molsetc.AmberMMModel_bbox_zmin_get, _molsetc.AmberMMModel_bbox_zmin_set)
    bbox_xmax = property(_molsetc.AmberMMModel_bbox_xmax_get, _molsetc.AmberMMModel_bbox_xmax_set)
    bbox_ymax = property(_molsetc.AmberMMModel_bbox_ymax_get, _molsetc.AmberMMModel_bbox_ymax_set)
    bbox_zmax = property(_molsetc.AmberMMModel_bbox_zmax_get, _molsetc.AmberMMModel_bbox_zmax_set)
    rgbmax = property(_molsetc.AmberMMModel_rgbmax_get, _molsetc.AmberMMModel_rgbmax_set)
    offset = property(_molsetc.AmberMMModel_offset_get, _molsetc.AmberMMModel_offset_set)
    surften = property(_molsetc.AmberMMModel_surften_get, _molsetc.AmberMMModel_surften_set)
    iamoeba = property(_molsetc.AmberMMModel_iamoeba_get, _molsetc.AmberMMModel_iamoeba_set)
    do_amoeba_valence = property(_molsetc.AmberMMModel_do_amoeba_valence_get, _molsetc.AmberMMModel_do_amoeba_valence_set)
    do_amoeba_nonbond = property(_molsetc.AmberMMModel_do_amoeba_nonbond_get, _molsetc.AmberMMModel_do_amoeba_nonbond_set)
    do_bond = property(_molsetc.AmberMMModel_do_bond_get, _molsetc.AmberMMModel_do_bond_set)
    do_ureyb = property(_molsetc.AmberMMModel_do_ureyb_get, _molsetc.AmberMMModel_do_ureyb_set)
    do_reg_angle = property(_molsetc.AmberMMModel_do_reg_angle_get, _molsetc.AmberMMModel_do_reg_angle_set)
    do_trig_angle = property(_molsetc.AmberMMModel_do_trig_angle_get, _molsetc.AmberMMModel_do_trig_angle_set)
    do_opbend = property(_molsetc.AmberMMModel_do_opbend_get, _molsetc.AmberMMModel_do_opbend_set)
    do_torsion = property(_molsetc.AmberMMModel_do_torsion_get, _molsetc.AmberMMModel_do_torsion_set)
    do_pi_torsion = property(_molsetc.AmberMMModel_do_pi_torsion_get, _molsetc.AmberMMModel_do_pi_torsion_set)
    do_strbend = property(_molsetc.AmberMMModel_do_strbend_get, _molsetc.AmberMMModel_do_strbend_set)
    do_torsion_torsion = property(_molsetc.AmberMMModel_do_torsion_torsion_get, _molsetc.AmberMMModel_do_torsion_torsion_set)
    do_str_torsion = property(_molsetc.AmberMMModel_do_str_torsion_get, _molsetc.AmberMMModel_do_str_torsion_set)
    do_recip = property(_molsetc.AmberMMModel_do_recip_get, _molsetc.AmberMMModel_do_recip_set)
    do_adjust = property(_molsetc.AmberMMModel_do_adjust_get, _molsetc.AmberMMModel_do_adjust_set)
    do_direct = property(_molsetc.AmberMMModel_do_direct_get, _molsetc.AmberMMModel_do_direct_set)
    do_self = property(_molsetc.AmberMMModel_do_self_get, _molsetc.AmberMMModel_do_self_set)
    do_vdw = property(_molsetc.AmberMMModel_do_vdw_get, _molsetc.AmberMMModel_do_vdw_set)
    do_induced = property(_molsetc.AmberMMModel_do_induced_get, _molsetc.AmberMMModel_do_induced_set)
    do_vdw_taper = property(_molsetc.AmberMMModel_do_vdw_taper_get, _molsetc.AmberMMModel_do_vdw_taper_set)
    do_vdw_longrange = property(_molsetc.AmberMMModel_do_vdw_longrange_get, _molsetc.AmberMMModel_do_vdw_longrange_set)
    beeman_integrator = property(_molsetc.AmberMMModel_beeman_integrator_get, _molsetc.AmberMMModel_beeman_integrator_set)
    amoeba_verbose = property(_molsetc.AmberMMModel_amoeba_verbose_get, _molsetc.AmberMMModel_amoeba_verbose_set)
    natc = property(_molsetc.AmberMMModel_natc_get, _molsetc.AmberMMModel_natc_set)
    belly_atm_cnt = property(_molsetc.AmberMMModel_belly_atm_cnt_get, _molsetc.AmberMMModel_belly_atm_cnt_set)
    using_pme_potential = property(_molsetc.AmberMMModel_using_pme_potential_get, _molsetc.AmberMMModel_using_pme_potential_set)
    using_gb_potential = property(_molsetc.AmberMMModel_using_gb_potential_get, _molsetc.AmberMMModel_using_gb_potential_set)
    max_res_size = property(_molsetc.AmberMMModel_max_res_size_get, _molsetc.AmberMMModel_max_res_size_set)
    n_solute_res = property(_molsetc.AmberMMModel_n_solute_res_get, _molsetc.AmberMMModel_n_solute_res_set)
    n_solute_mol = property(_molsetc.AmberMMModel_n_solute_mol_get, _molsetc.AmberMMModel_n_solute_mol_set)
    tmass = property(_molsetc.AmberMMModel_tmass_get, _molsetc.AmberMMModel_tmass_set)
    gbl_res_atms = property(_molsetc.AmberMMModel_gbl_res_atms_get, _molsetc.AmberMMModel_gbl_res_atms_set)
    atm_iac = property(_molsetc.AmberMMModel_atm_iac_get, _molsetc.AmberMMModel_atm_iac_set)
    typ_ico = property(_molsetc.AmberMMModel_typ_ico_get, _molsetc.AmberMMModel_typ_ico_set)
    atm_nsp = property(_molsetc.AmberMMModel_atm_nsp_get, _molsetc.AmberMMModel_atm_nsp_set)
    atm_igraph = property(_molsetc.AmberMMModel_atm_igraph_get, _molsetc.AmberMMModel_atm_igraph_set)
    atm_isymbl = property(_molsetc.AmberMMModel_atm_isymbl_get, _molsetc.AmberMMModel_atm_isymbl_set)
    atm_itree = property(_molsetc.AmberMMModel_atm_itree_get, _molsetc.AmberMMModel_atm_itree_set)
    atm_charge = property(_molsetc.AmberMMModel_atm_charge_get, _molsetc.AmberMMModel_atm_charge_set)
    atm_mass = property(_molsetc.AmberMMModel_atm_mass_get, _molsetc.AmberMMModel_atm_mass_set)
    atm_mass_inv = property(_molsetc.AmberMMModel_atm_mass_inv_get, _molsetc.AmberMMModel_atm_mass_inv_set)
    atm_numex = property(_molsetc.AmberMMModel_atm_numex_get, _molsetc.AmberMMModel_atm_numex_set)
    gbl_natex = property(_molsetc.AmberMMModel_gbl_natex_get, _molsetc.AmberMMModel_gbl_natex_set)
    gbl_cn1 = property(_molsetc.AmberMMModel_gbl_cn1_get, _molsetc.AmberMMModel_gbl_cn1_set)
    gbl_cn2 = property(_molsetc.AmberMMModel_gbl_cn2_get, _molsetc.AmberMMModel_gbl_cn2_set)
    gbl_asol = property(_molsetc.AmberMMModel_gbl_asol_get, _molsetc.AmberMMModel_gbl_asol_set)
    gbl_bsol = property(_molsetc.AmberMMModel_gbl_bsol_get, _molsetc.AmberMMModel_gbl_bsol_set)
    atm_gb_radii = property(_molsetc.AmberMMModel_atm_gb_radii_get, _molsetc.AmberMMModel_atm_gb_radii_set)
    atm_gb_fs = property(_molsetc.AmberMMModel_atm_gb_fs_get, _molsetc.AmberMMModel_atm_gb_fs_set)
    gbl_rk = property(_molsetc.AmberMMModel_gbl_rk_get, _molsetc.AmberMMModel_gbl_rk_set)
    gbl_req = property(_molsetc.AmberMMModel_gbl_req_get, _molsetc.AmberMMModel_gbl_req_set)
    gbl_tk = property(_molsetc.AmberMMModel_gbl_tk_get, _molsetc.AmberMMModel_gbl_tk_set)
    gbl_teq = property(_molsetc.AmberMMModel_gbl_teq_get, _molsetc.AmberMMModel_gbl_teq_set)
    gbl_pk = property(_molsetc.AmberMMModel_gbl_pk_get, _molsetc.AmberMMModel_gbl_pk_set)
    gbl_pn = property(_molsetc.AmberMMModel_gbl_pn_get, _molsetc.AmberMMModel_gbl_pn_set)
    gbl_phase = property(_molsetc.AmberMMModel_gbl_phase_get, _molsetc.AmberMMModel_gbl_phase_set)
    gbl_gamc = property(_molsetc.AmberMMModel_gbl_gamc_get, _molsetc.AmberMMModel_gbl_gamc_set)
    gbl_gams = property(_molsetc.AmberMMModel_gbl_gams_get, _molsetc.AmberMMModel_gbl_gams_set)
    gbl_ipn = property(_molsetc.AmberMMModel_gbl_ipn_get, _molsetc.AmberMMModel_gbl_ipn_set)
    gbl_fmn = property(_molsetc.AmberMMModel_gbl_fmn_get, _molsetc.AmberMMModel_gbl_fmn_set)
    gbl_bond = property(_molsetc.AmberMMModel_gbl_bond_get, _molsetc.AmberMMModel_gbl_bond_set)
    gbl_angle = property(_molsetc.AmberMMModel_gbl_angle_get, _molsetc.AmberMMModel_gbl_angle_set)
    gbl_dihed = property(_molsetc.AmberMMModel_gbl_dihed_get, _molsetc.AmberMMModel_gbl_dihed_set)
    loc_bond_params = property(_molsetc.AmberMMModel_loc_bond_params_get, _molsetc.AmberMMModel_loc_bond_params_set)
    bnd_par_idx_map = property(_molsetc.AmberMMModel_bnd_par_idx_map_get, _molsetc.AmberMMModel_bnd_par_idx_map_set)
    loc_val_angle_params = property(_molsetc.AmberMMModel_loc_val_angle_params_get, _molsetc.AmberMMModel_loc_val_angle_params_set)
    vang_par_idx_map = property(_molsetc.AmberMMModel_vang_par_idx_map_get, _molsetc.AmberMMModel_vang_par_idx_map_set)
    loc_dih_ang_par = property(_molsetc.AmberMMModel_loc_dih_ang_par_get, _molsetc.AmberMMModel_loc_dih_ang_par_set)
    dang_par_idx_map = property(_molsetc.AmberMMModel_dang_par_idx_map_get, _molsetc.AmberMMModel_dang_par_idx_map_set)
    amber_residues = property(_molsetc.AmberMMModel_amber_residues_get, _molsetc.AmberMMModel_amber_residues_set)
    nat_amber_residues = property(_molsetc.AmberMMModel_nat_amber_residues_get, _molsetc.AmberMMModel_nat_amber_residues_set)
    res_labels = property(_molsetc.AmberMMModel_res_labels_get, _molsetc.AmberMMModel_res_labels_set)
    loc_point_params = property(_molsetc.AmberMMModel_loc_point_params_get, _molsetc.AmberMMModel_loc_point_params_set)
    ppar_idx_map = property(_molsetc.AmberMMModel_ppar_idx_map_get, _molsetc.AmberMMModel_ppar_idx_map_set)
    num_deg = property(_molsetc.AmberMMModel_num_deg_get, _molsetc.AmberMMModel_num_deg_set)
    num_deg_solute = property(_molsetc.AmberMMModel_num_deg_solute_get, _molsetc.AmberMMModel_num_deg_solute_set)
    num_deg_solvent = property(_molsetc.AmberMMModel_num_deg_solvent_get, _molsetc.AmberMMModel_num_deg_solvent_set)
    atm_xc = property(_molsetc.AmberMMModel_atm_xc_get, _molsetc.AmberMMModel_atm_xc_set)
    atm_weight = property(_molsetc.AmberMMModel_atm_weight_get, _molsetc.AmberMMModel_atm_weight_set)
    atm_jrc = property(_molsetc.AmberMMModel_atm_jrc_get, _molsetc.AmberMMModel_atm_jrc_set)
    atm_igroup = property(_molsetc.AmberMMModel_atm_igroup_get, _molsetc.AmberMMModel_atm_igroup_set)

    def SetMovingAtomsData(self) -> "int":
        return _molsetc.AmberMMModel_SetMovingAtomsData(self)
    num_dist_constr = property(_molsetc.AmberMMModel_num_dist_constr_get, _molsetc.AmberMMModel_num_dist_constr_set)
    dist_constr_idx = property(_molsetc.AmberMMModel_dist_constr_idx_get, _molsetc.AmberMMModel_dist_constr_idx_set)
    dist_constr_params = property(_molsetc.AmberMMModel_dist_constr_params_get, _molsetc.AmberMMModel_dist_constr_params_set)

    def SetDistConstrData(self) -> "int":
        return _molsetc.AmberMMModel_SetDistConstrData(self)
    atm_poltype = property(_molsetc.AmberMMModel_atm_poltype_get, _molsetc.AmberMMModel_atm_poltype_set)
    atm_element = property(_molsetc.AmberMMModel_atm_element_get, _molsetc.AmberMMModel_atm_element_set)
    atm_class_idx = property(_molsetc.AmberMMModel_atm_class_idx_get, _molsetc.AmberMMModel_atm_class_idx_set)
    n_bond_amoeba = property(_molsetc.AmberMMModel_n_bond_amoeba_get, _molsetc.AmberMMModel_n_bond_amoeba_set)
    n_bond_amoeba_params = property(_molsetc.AmberMMModel_n_bond_amoeba_params_get, _molsetc.AmberMMModel_n_bond_amoeba_params_set)
    gbl_bond_amoeba = property(_molsetc.AmberMMModel_gbl_bond_amoeba_get, _molsetc.AmberMMModel_gbl_bond_amoeba_set)
    bond_amoeba_params = property(_molsetc.AmberMMModel_bond_amoeba_params_get, _molsetc.AmberMMModel_bond_amoeba_params_set)
    bond_amoeba_ftab_degree = property(_molsetc.AmberMMModel_bond_amoeba_ftab_degree_get, _molsetc.AmberMMModel_bond_amoeba_ftab_degree_set)
    bond_amoeba_ftab_coef = property(_molsetc.AmberMMModel_bond_amoeba_ftab_coef_get, _molsetc.AmberMMModel_bond_amoeba_ftab_coef_set)
    n_urey_bond = property(_molsetc.AmberMMModel_n_urey_bond_get, _molsetc.AmberMMModel_n_urey_bond_set)
    n_urey_bond_params = property(_molsetc.AmberMMModel_n_urey_bond_params_get, _molsetc.AmberMMModel_n_urey_bond_params_set)
    gbl_bond_urey = property(_molsetc.AmberMMModel_gbl_bond_urey_get, _molsetc.AmberMMModel_gbl_bond_urey_set)
    bond_urey_params = property(_molsetc.AmberMMModel_bond_urey_params_get, _molsetc.AmberMMModel_bond_urey_params_set)
    bond_urey_ftab_degree = property(_molsetc.AmberMMModel_bond_urey_ftab_degree_get, _molsetc.AmberMMModel_bond_urey_ftab_degree_set)
    bond_urey_ftab_coef = property(_molsetc.AmberMMModel_bond_urey_ftab_coef_get, _molsetc.AmberMMModel_bond_urey_ftab_coef_set)
    n_angle_amoeba = property(_molsetc.AmberMMModel_n_angle_amoeba_get, _molsetc.AmberMMModel_n_angle_amoeba_set)
    n_angle_amoeba_params = property(_molsetc.AmberMMModel_n_angle_amoeba_params_get, _molsetc.AmberMMModel_n_angle_amoeba_params_set)
    gbl_angle_amoeba_reg = property(_molsetc.AmberMMModel_gbl_angle_amoeba_reg_get, _molsetc.AmberMMModel_gbl_angle_amoeba_reg_set)
    angle_amoeba_params = property(_molsetc.AmberMMModel_angle_amoeba_params_get, _molsetc.AmberMMModel_angle_amoeba_params_set)
    angle_amoeba_ftab_degree = property(_molsetc.AmberMMModel_angle_amoeba_ftab_degree_get, _molsetc.AmberMMModel_angle_amoeba_ftab_degree_set)
    angle_amoeba_ftab_coef = property(_molsetc.AmberMMModel_angle_amoeba_ftab_coef_get, _molsetc.AmberMMModel_angle_amoeba_ftab_coef_set)
    n_trig_angles = property(_molsetc.AmberMMModel_n_trig_angles_get, _molsetc.AmberMMModel_n_trig_angles_set)
    gbl_angle_amoeba_trig = property(_molsetc.AmberMMModel_gbl_angle_amoeba_trig_get, _molsetc.AmberMMModel_gbl_angle_amoeba_trig_set)
    n_opbend_angles = property(_molsetc.AmberMMModel_n_opbend_angles_get, _molsetc.AmberMMModel_n_opbend_angles_set)
    n_opbend_angles_params = property(_molsetc.AmberMMModel_n_opbend_angles_params_get, _molsetc.AmberMMModel_n_opbend_angles_params_set)
    gbl_opbend_angle = property(_molsetc.AmberMMModel_gbl_opbend_angle_get, _molsetc.AmberMMModel_gbl_opbend_angle_set)
    opbend_angle_params = property(_molsetc.AmberMMModel_opbend_angle_params_get, _molsetc.AmberMMModel_opbend_angle_params_set)
    n_tors_amoeba = property(_molsetc.AmberMMModel_n_tors_amoeba_get, _molsetc.AmberMMModel_n_tors_amoeba_set)
    n_tors_amoeba_params = property(_molsetc.AmberMMModel_n_tors_amoeba_params_get, _molsetc.AmberMMModel_n_tors_amoeba_params_set)
    gbl_amoeba_tors_angle = property(_molsetc.AmberMMModel_gbl_amoeba_tors_angle_get, _molsetc.AmberMMModel_gbl_amoeba_tors_angle_set)
    tors_amoeba_params = property(_molsetc.AmberMMModel_tors_amoeba_params_get, _molsetc.AmberMMModel_tors_amoeba_params_set)
    n_pi_torsions = property(_molsetc.AmberMMModel_n_pi_torsions_get, _molsetc.AmberMMModel_n_pi_torsions_set)
    n_pi_torsions_params = property(_molsetc.AmberMMModel_n_pi_torsions_params_get, _molsetc.AmberMMModel_n_pi_torsions_params_set)
    gbl_pi_tors_angle = property(_molsetc.AmberMMModel_gbl_pi_tors_angle_get, _molsetc.AmberMMModel_gbl_pi_tors_angle_set)
    pi_tors_params = property(_molsetc.AmberMMModel_pi_tors_params_get, _molsetc.AmberMMModel_pi_tors_params_set)
    n_stretch_bend = property(_molsetc.AmberMMModel_n_stretch_bend_get, _molsetc.AmberMMModel_n_stretch_bend_set)
    n_stretch_bend_params = property(_molsetc.AmberMMModel_n_stretch_bend_params_get, _molsetc.AmberMMModel_n_stretch_bend_params_set)
    gbl_str_bend_angle = property(_molsetc.AmberMMModel_gbl_str_bend_angle_get, _molsetc.AmberMMModel_gbl_str_bend_angle_set)
    str_bend_params = property(_molsetc.AmberMMModel_str_bend_params_get, _molsetc.AmberMMModel_str_bend_params_set)
    n_tors_tors = property(_molsetc.AmberMMModel_n_tors_tors_get, _molsetc.AmberMMModel_n_tors_tors_set)
    n_tors_tors_params = property(_molsetc.AmberMMModel_n_tors_tors_params_get, _molsetc.AmberMMModel_n_tors_tors_params_set)
    gbl_tors_tors = property(_molsetc.AmberMMModel_gbl_tors_tors_get, _molsetc.AmberMMModel_gbl_tors_tors_set)
    tors_tors_id_params = property(_molsetc.AmberMMModel_tors_tors_id_params_get, _molsetc.AmberMMModel_tors_tors_id_params_set)
    tors_tors_params = property(_molsetc.AmberMMModel_tors_tors_params_get, _molsetc.AmberMMModel_tors_tors_params_set)
    atm_amoeba_vdw_type = property(_molsetc.AmberMMModel_atm_amoeba_vdw_type_get, _molsetc.AmberMMModel_atm_amoeba_vdw_type_set)
    atm_parent_id = property(_molsetc.AmberMMModel_atm_parent_id_get, _molsetc.AmberMMModel_atm_parent_id_set)
    atm_parent_weight = property(_molsetc.AmberMMModel_atm_parent_weight_get, _molsetc.AmberMMModel_atm_parent_weight_set)
    vdw_buffer_delta = property(_molsetc.AmberMMModel_vdw_buffer_delta_get, _molsetc.AmberMMModel_vdw_buffer_delta_set)
    vdw_buffer_gamma = property(_molsetc.AmberMMModel_vdw_buffer_gamma_get, _molsetc.AmberMMModel_vdw_buffer_gamma_set)
    n_vdw_params = property(_molsetc.AmberMMModel_n_vdw_params_get, _molsetc.AmberMMModel_n_vdw_params_set)
    amoeba_vdw_rstars = property(_molsetc.AmberMMModel_amoeba_vdw_rstars_get, _molsetc.AmberMMModel_amoeba_vdw_rstars_set)
    amoeba_vdw_depths = property(_molsetc.AmberMMModel_amoeba_vdw_depths_get, _molsetc.AmberMMModel_amoeba_vdw_depths_set)
    num_local_multipoles = property(_molsetc.AmberMMModel_num_local_multipoles_get, _molsetc.AmberMMModel_num_local_multipoles_set)
    num_chiral_frames = property(_molsetc.AmberMMModel_num_chiral_frames_get, _molsetc.AmberMMModel_num_chiral_frames_set)
    num_reg_frames = property(_molsetc.AmberMMModel_num_reg_frames_get, _molsetc.AmberMMModel_num_reg_frames_set)
    atm_multipoles = property(_molsetc.AmberMMModel_atm_multipoles_get, _molsetc.AmberMMModel_atm_multipoles_set)
    atm_chiral_frames = property(_molsetc.AmberMMModel_atm_chiral_frames_get, _molsetc.AmberMMModel_atm_chiral_frames_set)
    atm_reg_frames = property(_molsetc.AmberMMModel_atm_reg_frames_get, _molsetc.AmberMMModel_atm_reg_frames_set)

    def AddAtomFrames(self, aptr: "HaAtom", p_at_ff: "AtomFFParam", p_templ_atname_to_res_map: "StrAtomMap *") -> "int":
        return _molsetc.AmberMMModel_AddAtomFrames(self, aptr, p_at_ff, p_templ_atname_to_res_map)
    num_adjust_list = property(_molsetc.AmberMMModel_num_adjust_list_get, _molsetc.AmberMMModel_num_adjust_list_set)
    atm_adjust_list = property(_molsetc.AmberMMModel_atm_adjust_list_get, _molsetc.AmberMMModel_atm_adjust_list_set)
    adjust_vdw_weights = property(_molsetc.AmberMMModel_adjust_vdw_weights_get, _molsetc.AmberMMModel_adjust_vdw_weights_set)
    adjust_mpole_weights = property(_molsetc.AmberMMModel_adjust_mpole_weights_get, _molsetc.AmberMMModel_adjust_mpole_weights_set)
    adjust_direct_weights = property(_molsetc.AmberMMModel_adjust_direct_weights_get, _molsetc.AmberMMModel_adjust_direct_weights_set)
    adjust_polar_weights = property(_molsetc.AmberMMModel_adjust_polar_weights_get, _molsetc.AmberMMModel_adjust_polar_weights_set)
    adjust_mutual_weights = property(_molsetc.AmberMMModel_adjust_mutual_weights_get, _molsetc.AmberMMModel_adjust_mutual_weights_set)
    atm_polar = property(_molsetc.AmberMMModel_atm_polar_get, _molsetc.AmberMMModel_atm_polar_set)
    atm_hpolar = property(_molsetc.AmberMMModel_atm_hpolar_get, _molsetc.AmberMMModel_atm_hpolar_set)
    atm_screen_polar = property(_molsetc.AmberMMModel_atm_screen_polar_get, _molsetc.AmberMMModel_atm_screen_polar_set)
    damp_polar_strength = property(_molsetc.AmberMMModel_damp_polar_strength_get, _molsetc.AmberMMModel_damp_polar_strength_set)
    damp_polar_sensitivity = property(_molsetc.AmberMMModel_damp_polar_sensitivity_get, _molsetc.AmberMMModel_damp_polar_sensitivity_set)
    damp_polar_rad = property(_molsetc.AmberMMModel_damp_polar_rad_get, _molsetc.AmberMMModel_damp_polar_rad_set)
    atm_qterm = property(_molsetc.AmberMMModel_atm_qterm_get, _molsetc.AmberMMModel_atm_qterm_set)
    is_polarizable = property(_molsetc.AmberMMModel_is_polarizable_get, _molsetc.AmberMMModel_is_polarizable_set)
    p_amber_driver = property(_molsetc.AmberMMModel_p_amber_driver_get, _molsetc.AmberMMModel_p_amber_driver_set)

# Register AmberMMModel in _molsetc:
_molsetc.AmberMMModel_swigregister(AmberMMModel)

class TimerAmber(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p_mm_driver_new: "MMDriverAmber"):
        _molsetc.TimerAmber_swiginit(self, _molsetc.new_TimerAmber(p_mm_driver_new))
    __swig_destroy__ = _molsetc.delete_TimerAmber

    def InitTimers(self) -> "void":
        return _molsetc.TimerAmber_InitTimers(self)

    def EndSetupTimers(self) -> "void":
        return _molsetc.TimerAmber_EndSetupTimers(self)

    def EndRunTimers(self) -> "void":
        return _molsetc.TimerAmber_EndRunTimers(self)

    def PrintTimings(self) -> "void":
        return _molsetc.TimerAmber_PrintTimings(self)

    def ZeroTime(self) -> "void":
        return _molsetc.TimerAmber_ZeroTime(self)

    def UpdateTime(self, itimer_type: "int") -> "void":
        return _molsetc.TimerAmber_UpdateTime(self, itimer_type)
    detailed_timing_flag = property(_molsetc.TimerAmber_detailed_timing_flag_get, _molsetc.TimerAmber_detailed_timing_flag_set)
    run_start_cputime = property(_molsetc.TimerAmber_run_start_cputime_get, _molsetc.TimerAmber_run_start_cputime_set)
    run_setup_end_cputime = property(_molsetc.TimerAmber_run_setup_end_cputime_get, _molsetc.TimerAmber_run_setup_end_cputime_set)
    run_end_cputime = property(_molsetc.TimerAmber_run_end_cputime_get, _molsetc.TimerAmber_run_end_cputime_set)
    run_start_walltime = property(_molsetc.TimerAmber_run_start_walltime_get, _molsetc.TimerAmber_run_start_walltime_set)
    run_setup_end_walltime = property(_molsetc.TimerAmber_run_setup_end_walltime_get, _molsetc.TimerAmber_run_setup_end_walltime_set)
    run_end_walltime = property(_molsetc.TimerAmber_run_end_walltime_get, _molsetc.TimerAmber_run_end_walltime_set)
    FCVE_DIST_TIME = _molsetc.TimerAmber_FCVE_DIST_TIME
    NONBOND_TIME = _molsetc.TimerAmber_NONBOND_TIME
    BOND_TIME = _molsetc.TimerAmber_BOND_TIME
    ANGLE_TIME = _molsetc.TimerAmber_ANGLE_TIME
    DIHEDRAL_TIME = _molsetc.TimerAmber_DIHEDRAL_TIME
    SHAKE_TIME = _molsetc.TimerAmber_SHAKE_TIME
    RUNMD_TIME = _molsetc.TimerAmber_RUNMD_TIME
    OTHER_TIME = _molsetc.TimerAmber_OTHER_TIME
    NONSETUP_TIME = _molsetc.TimerAmber_NONSETUP_TIME
    MAX_GENERIC_TIMER = _molsetc.TimerAmber_MAX_GENERIC_TIMER
    CIT_SETUP_TIMER = _molsetc.TimerAmber_CIT_SETUP_TIMER
    BUILD_LIST_TIMER = _molsetc.TimerAmber_BUILD_LIST_TIMER
    BSPLINE_TIMER = _molsetc.TimerAmber_BSPLINE_TIMER
    GRID_CHARGES_TIMER = _molsetc.TimerAmber_GRID_CHARGES_TIMER
    SCALAR_SUM_TIMER = _molsetc.TimerAmber_SCALAR_SUM_TIMER
    GRAD_SUM_TIMER = _molsetc.TimerAmber_GRAD_SUM_TIMER
    FFT_TIMER = _molsetc.TimerAmber_FFT_TIMER
    DIR_FRC_SUM_TIMER = _molsetc.TimerAmber_DIR_FRC_SUM_TIMER
    ADJUST_MASKED_TIMER = _molsetc.TimerAmber_ADJUST_MASKED_TIMER
    PME_MISC_TIMER = _molsetc.TimerAmber_PME_MISC_TIMER
    ATM_REASSIGN_TIMER = _molsetc.TimerAmber_ATM_REASSIGN_TIMER
    IMG_REASSIGN_TIMER = _molsetc.TimerAmber_IMG_REASSIGN_TIMER
    FFT_SLAB_REASSIGN_TIMER = _molsetc.TimerAmber_FFT_SLAB_REASSIGN_TIMER
    MAX_PME_TIMER = _molsetc.TimerAmber_MAX_PME_TIMER
    CALC_GB_RAD_TIMER = _molsetc.TimerAmber_CALC_GB_RAD_TIMER
    CALC_GB_DIAG_TIMER = _molsetc.TimerAmber_CALC_GB_DIAG_TIMER
    CALC_GB_OFFDIAG_TIMER = _molsetc.TimerAmber_CALC_GB_OFFDIAG_TIMER
    DIST_GB_RAD_TIMER = _molsetc.TimerAmber_DIST_GB_RAD_TIMER
    MAX_GB_TIMER = _molsetc.TimerAmber_MAX_GB_TIMER
    MAX_TIMER = _molsetc.TimerAmber_MAX_TIMER
    p_mm_driver = property(_molsetc.TimerAmber_p_mm_driver_get, _molsetc.TimerAmber_p_mm_driver_set)
    p_amber_model = property(_molsetc.TimerAmber_p_amber_model_get, _molsetc.TimerAmber_p_amber_model_set)

# Register TimerAmber in _molsetc:
_molsetc.TimerAmber_swigregister(TimerAmber)

class HaMolMechMod(HaCompMod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_pmset: "MolSet"):
        _molsetc.HaMolMechMod_swiginit(self, _molsetc.new_HaMolMechMod(new_pmset))
    __swig_destroy__ = _molsetc.delete_HaMolMechMod

    def SetStdParams(self) -> "int":
        return _molsetc.HaMolMechMod_SetStdParams(self)

    def Initialize(self) -> "int":
        return _molsetc.HaMolMechMod_Initialize(self)

    def InitMolMechModel(self, *args) -> "int":
        return _molsetc.HaMolMechMod_InitMolMechModel(self, *args)

    def InitMMSimulations(self) -> "int":
        return _molsetc.HaMolMechMod_InitMMSimulations(self)

    def InitSingleHamMMSimulations(self) -> "int":
        return _molsetc.HaMolMechMod_InitSingleHamMMSimulations(self)

    def InitMixedHamSimulations(self, p_mm_model_2: "MolMechModel") -> "int":
        return _molsetc.HaMolMechMod_InitMixedHamSimulations(self, p_mm_model_2)

    def InitMixedHamSimulations_node(self, p_mm_model_2: "MolMechModel") -> "int":
        return _molsetc.HaMolMechMod_InitMixedHamSimulations_node(self, p_mm_model_2)

    def BcastCtrlParams(self, comm: "MPI_Comm &") -> "void":
        return _molsetc.HaMolMechMod_BcastCtrlParams(self, comm)
    to_init_simulations = property(_molsetc.HaMolMechMod_to_init_simulations_get, _molsetc.HaMolMechMod_to_init_simulations_set)
    to_stop_simulations = property(_molsetc.HaMolMechMod_to_stop_simulations_get, _molsetc.HaMolMechMod_to_stop_simulations_set)

    def SaveXMLToStream(self, os: "ostream", popt: "SaveOptions"=None) -> "int":
        return _molsetc.HaMolMechMod_SaveXMLToStream(self, os, popt)

    def SetMMRunType(self, run_type_new: "MMRunType") -> "void":
        return _molsetc.HaMolMechMod_SetMMRunType(self, run_type_new)

    def SetRunInternal(self, run_internal_flag_new: "int"=1) -> "void":
        return _molsetc.HaMolMechMod_SetRunInternal(self, run_internal_flag_new)

    def SetMMExternalProg(self, ext_mm_prog_new: "MMExternalProg") -> "void":
        return _molsetc.HaMolMechMod_SetMMExternalProg(self, ext_mm_prog_new)

    def RunCtrlThread(self) -> "int":
        return _molsetc.HaMolMechMod_RunCtrlThread(self)

    def Run(self, popt: "HashMap"=None) -> "int":
        return _molsetc.HaMolMechMod_Run(self, popt)

    def RunMinEne(self, popt: "HashMap"=None) -> "int":
        return _molsetc.HaMolMechMod_RunMinEne(self, popt)

    def RunMD(self, popt: "HashMap"=None) -> "int":
        return _molsetc.HaMolMechMod_RunMD(self, popt)

    def RunTI(self, p_mm_model_2: "MolMechModel") -> "int":
        return _molsetc.HaMolMechMod_RunTI(self, p_mm_model_2)

    def RunExternal(self, popt: "HashMap"=None) -> "int":
        return _molsetc.HaMolMechMod_RunExternal(self, popt)

    def RunInternal(self) -> "int":
        return _molsetc.HaMolMechMod_RunInternal(self)

    def ControlCalc(self) -> "int":
        return _molsetc.HaMolMechMod_ControlCalc(self)

    def RunInternal_node(self) -> "void":
        return _molsetc.HaMolMechMod_RunInternal_node(self)

    def CalcEnergy(self) -> "int":
        return _molsetc.HaMolMechMod_CalcEnergy(self)

    def CalcEnergySimple(self) -> "int":
        return _molsetc.HaMolMechMod_CalcEnergySimple(self)

    def PrintEneStr(self, info: "MMSysInfo", str_out: "std::string &") -> "void":
        return _molsetc.HaMolMechMod_PrintEneStr(self, info, str_out)

    def PrintEneStrAccurate(self, info: "MMSysInfo", str_out: "std::string &") -> "void":
        return _molsetc.HaMolMechMod_PrintEneStrAccurate(self, info, str_out)

    def PrintLogEne(self) -> "void":
        return _molsetc.HaMolMechMod_PrintLogEne(self)

    def StopCalc(self) -> "int":
        return _molsetc.HaMolMechMod_StopCalc(self)

    def UpdateMolInfo(self) -> "int":
        return _molsetc.HaMolMechMod_UpdateMolInfo(self)

    def UpdateMolView(self) -> "int":
        return _molsetc.HaMolMechMod_UpdateMolView(self)

    def GetEne(self) -> "double":
        return _molsetc.HaMolMechMod_GetEne(self)

    def GetTotEne(self) -> "double":
        return _molsetc.HaMolMechMod_GetTotEne(self)

    def GetPotEne(self) -> "double":
        return _molsetc.HaMolMechMod_GetPotEne(self)

    def GetConstrEne(self) -> "double":
        return _molsetc.HaMolMechMod_GetConstrEne(self)

    def GetUnConstrEne(self) -> "double":
        return _molsetc.HaMolMechMod_GetUnConstrEne(self)

    def LoadAmberRestartFile(self, rst_file_name: "std::string const &") -> "int":
        return _molsetc.HaMolMechMod_LoadAmberRestartFile(self, rst_file_name)
    internal_mm_running = property(_molsetc.HaMolMechMod_internal_mm_running_get, _molsetc.HaMolMechMod_internal_mm_running_set)
    ctrl_thread_running = property(_molsetc.HaMolMechMod_ctrl_thread_running_get, _molsetc.HaMolMechMod_ctrl_thread_running_set)

    def CheckModelsForTI(self, p_mm_model_1: "MolMechModel", p_mm_model_2: "MolMechModel") -> "int":
        return _molsetc.HaMolMechMod_CheckModelsForTI(self, p_mm_model_1, p_mm_model_2)

    @staticmethod
    def CallMMFunctionOnSlaves(id: "int") -> "void":
        return _molsetc.HaMolMechMod_CallMMFunctionOnSlaves(id)
    lambda_ti = property(_molsetc.HaMolMechMod_lambda_ti_get, _molsetc.HaMolMechMod_lambda_ti_set)

    def SetMPICommSplit2(self) -> "int":
        return _molsetc.HaMolMechMod_SetMPICommSplit2(self)
    inter_model_comm = property(_molsetc.HaMolMechMod_inter_model_comm_get, _molsetc.HaMolMechMod_inter_model_comm_set)
    inter_model_rank = property(_molsetc.HaMolMechMod_inter_model_rank_get, _molsetc.HaMolMechMod_inter_model_rank_set)
    single_job_comm = property(_molsetc.HaMolMechMod_single_job_comm_get, _molsetc.HaMolMechMod_single_job_comm_set)
    single_job_rank = property(_molsetc.HaMolMechMod_single_job_rank_get, _molsetc.HaMolMechMod_single_job_rank_set)

    def GetMolMechModel(self, *args) -> "MolMechModel const *":
        return _molsetc.HaMolMechMod_GetMolMechModel(self, *args)
    p_mm_model = property(_molsetc.HaMolMechMod_p_mm_model_get, _molsetc.HaMolMechMod_p_mm_model_set)

    def OnDelAtoms(self, del_atoms: "AtomContainer") -> "int":
        return _molsetc.HaMolMechMod_OnDelAtoms(self, del_atoms)

    def Print_info(self, sout: "ostream", level: "int const") -> "bool":
        return _molsetc.HaMolMechMod_Print_info(self, sout, level)

    def ProcessEvent(self, type: "int", id: "int") -> "int":
        return _molsetc.HaMolMechMod_ProcessEvent(self, type, id)

    def GetMDSimMod(self) -> "MDSimMod *":
        return _molsetc.HaMolMechMod_GetMDSimMod(self)

    def GetMinEneMod(self) -> "MinEneMod *":
        return _molsetc.HaMolMechMod_GetMinEneMod(self)

    def GetTISimMod(self) -> "TISimMod *":
        return _molsetc.HaMolMechMod_GetTISimMod(self)

    def GetTrajAnalMod(self) -> "MDTrajAnalMod *":
        return _molsetc.HaMolMechMod_GetTrajAnalMod(self)
    p_mm_info = property(_molsetc.HaMolMechMod_p_mm_info_get, _molsetc.HaMolMechMod_p_mm_info_set)
    mm_driver_name = property(_molsetc.HaMolMechMod_mm_driver_name_get, _molsetc.HaMolMechMod_mm_driver_name_set)
    p_amber_driver = property(_molsetc.HaMolMechMod_p_amber_driver_get, _molsetc.HaMolMechMod_p_amber_driver_set)
    p_tinker_driver = property(_molsetc.HaMolMechMod_p_tinker_driver_get, _molsetc.HaMolMechMod_p_tinker_driver_set)
    p_gromacs_driver = property(_molsetc.HaMolMechMod_p_gromacs_driver_get, _molsetc.HaMolMechMod_p_gromacs_driver_set)

    def SetPrefix(self, *args) -> "void":
        return _molsetc.HaMolMechMod_SetPrefix(self, *args)

    def GetPrefix(self) -> "std::string":
        return _molsetc.HaMolMechMod_GetPrefix(self)

    def SetRestrtFileFormat(self, format: "CrdFormatParam") -> "void":
        return _molsetc.HaMolMechMod_SetRestrtFileFormat(self, format)

    def SetMDtrajFileFormat(self, format: "CrdFormatParam") -> "void":
        return _molsetc.HaMolMechMod_SetMDtrajFileFormat(self, format)

    def SetWrtLogFreq(self, wrt_freq: "int") -> "void":
        return _molsetc.HaMolMechMod_SetWrtLogFreq(self, wrt_freq)

    def SetWrtRstrtFreq(self, wrt_freq: "int") -> "void":
        return _molsetc.HaMolMechMod_SetWrtRstrtFreq(self, wrt_freq)

    def SetWrtMDTrajFreq(self, wrt_freq: "int", save_vel: "int"=0) -> "void":
        return _molsetc.HaMolMechMod_SetWrtMDTrajFreq(self, wrt_freq, save_vel)

    def SetWrtCoordFreq(self, wrt_freq: "int") -> "void":
        return _molsetc.HaMolMechMod_SetWrtCoordFreq(self, wrt_freq)

    def SetWrtVelFreq(self, wrt_freq: "int") -> "void":
        return _molsetc.HaMolMechMod_SetWrtVelFreq(self, wrt_freq)

    def SetWrtFrcFreq(self, wrt_freq: "int") -> "void":
        return _molsetc.HaMolMechMod_SetWrtFrcFreq(self, wrt_freq)

    def SetWrtEnerFreq(self, wrt_freq: "int") -> "void":
        return _molsetc.HaMolMechMod_SetWrtEnerFreq(self, wrt_freq)

    def SetWrtConstrFreq(self, wrt_freq: "int") -> "void":
        return _molsetc.HaMolMechMod_SetWrtConstrFreq(self, wrt_freq)
    prefix = property(_molsetc.HaMolMechMod_prefix_get, _molsetc.HaMolMechMod_prefix_set)
    write_coord_format = property(_molsetc.HaMolMechMod_write_coord_format_get, _molsetc.HaMolMechMod_write_coord_format_set)
    traj_wrt_format = property(_molsetc.HaMolMechMod_traj_wrt_format_get, _molsetc.HaMolMechMod_traj_wrt_format_set)
    constr_trj_fname = property(_molsetc.HaMolMechMod_constr_trj_fname_get, _molsetc.HaMolMechMod_constr_trj_fname_set)
    wrt_log_freq = property(_molsetc.HaMolMechMod_wrt_log_freq_get, _molsetc.HaMolMechMod_wrt_log_freq_set)
    wrt_rstrt_freq = property(_molsetc.HaMolMechMod_wrt_rstrt_freq_get, _molsetc.HaMolMechMod_wrt_rstrt_freq_set)
    wrt_coord_freq = property(_molsetc.HaMolMechMod_wrt_coord_freq_get, _molsetc.HaMolMechMod_wrt_coord_freq_set)
    wrt_vel_freq = property(_molsetc.HaMolMechMod_wrt_vel_freq_get, _molsetc.HaMolMechMod_wrt_vel_freq_set)
    wrt_frc_freq = property(_molsetc.HaMolMechMod_wrt_frc_freq_get, _molsetc.HaMolMechMod_wrt_frc_freq_set)
    wrt_ener_freq = property(_molsetc.HaMolMechMod_wrt_ener_freq_get, _molsetc.HaMolMechMod_wrt_ener_freq_set)
    wrt_constr_freq = property(_molsetc.HaMolMechMod_wrt_constr_freq_get, _molsetc.HaMolMechMod_wrt_constr_freq_set)
    limit_wrt_atoms = property(_molsetc.HaMolMechMod_limit_wrt_atoms_get, _molsetc.HaMolMechMod_limit_wrt_atoms_set)
    wrap_coord = property(_molsetc.HaMolMechMod_wrap_coord_get, _molsetc.HaMolMechMod_wrap_coord_set)

    def SetEneMinMethod(self, method: "EneMinMethod") -> "void":
        return _molsetc.HaMolMechMod_SetEneMinMethod(self, method)

    def SetMaxNumMinimSteps(self, max_num_minim_steps_new: "int") -> "void":
        return _molsetc.HaMolMechMod_SetMaxNumMinimSteps(self, max_num_minim_steps_new)

    def SetNumSteepDescentSteps(self, nsteps: "int") -> "void":
        return _molsetc.HaMolMechMod_SetNumSteepDescentSteps(self, nsteps)

    def SetInitMinStep(self, init_min_step_new: "double") -> "void":
        return _molsetc.HaMolMechMod_SetInitMinStep(self, init_min_step_new)

    def SetGradCnvrgVal(self, grad_cnvrg_val_new: "double") -> "void":
        return _molsetc.HaMolMechMod_SetGradCnvrgVal(self, grad_cnvrg_val_new)

    def SetZMatMin(self, set_par: "bool"=True) -> "void":
        return _molsetc.HaMolMechMod_SetZMatMin(self, set_par)

    def IsZMatMin(self) -> "bool":
        return _molsetc.HaMolMechMod_IsZMatMin(self)

    def SetNumMDSteps(self, num_md_steps_new: "int") -> "void":
        return _molsetc.HaMolMechMod_SetNumMDSteps(self, num_md_steps_new)

    def SetRemoveInitRBMotion(self, remove_init_motion: "int"=1) -> "void":
        return _molsetc.HaMolMechMod_SetRemoveInitRBMotion(self, remove_init_motion)

    def SetRemoveRBMotionFreq(self, freq: "int") -> "void":
        return _molsetc.HaMolMechMod_SetRemoveRBMotionFreq(self, freq)

    def SetStartVelMethod(self, start_vel_method_new: "StartVelMethod") -> "void":
        return _molsetc.HaMolMechMod_SetStartVelMethod(self, start_vel_method_new)

    def SetStartTime(self, start_time_new: "double") -> "void":
        return _molsetc.HaMolMechMod_SetStartTime(self, start_time_new)

    def SetMDTimeStep(self, md_time_step_new: "double") -> "void":
        return _molsetc.HaMolMechMod_SetMDTimeStep(self, md_time_step_new)

    def SetNBListUpdateFreq(self, freq: "int") -> "void":
        return _molsetc.HaMolMechMod_SetNBListUpdateFreq(self, freq)

    def SetPerBoundaryCondType(self, type: "PerBoundaryCondType") -> "void":
        return _molsetc.HaMolMechMod_SetPerBoundaryCondType(self, type)

    def SetRefTemp(self, ref_temp_new: "double") -> "void":
        return _molsetc.HaMolMechMod_SetRefTemp(self, ref_temp_new)

    def SetInitTemp(self, init_temp_new: "double") -> "void":
        return _molsetc.HaMolMechMod_SetInitTemp(self, init_temp_new)

    def SetLangevinDumpConst(self, langevin_dump_const_new: "double") -> "void":
        return _molsetc.HaMolMechMod_SetLangevinDumpConst(self, langevin_dump_const_new)

    def SetRandomSeed(self, random_seed_new: "int") -> "void":
        return _molsetc.HaMolMechMod_SetRandomSeed(self, random_seed_new)

    def SetScaleInitVel(self, scale_init_vel_new: "double") -> "void":
        return _molsetc.HaMolMechMod_SetScaleInitVel(self, scale_init_vel_new)

    def SetTempCtrlMethod(self, method: "TempCtrlMethod") -> "void":
        return _molsetc.HaMolMechMod_SetTempCtrlMethod(self, method)

    def SetTempDeviation(self, temp_deviation_new: "double") -> "void":
        return _molsetc.HaMolMechMod_SetTempDeviation(self, temp_deviation_new)

    def SetTempRelaxTimeSolute(self, temp_relax_time_solute_new: "double") -> "void":
        return _molsetc.HaMolMechMod_SetTempRelaxTimeSolute(self, temp_relax_time_solute_new)

    def SetTempRelaxTimeSolvent(self, temp_relax_time_solvent_new: "double") -> "void":
        return _molsetc.HaMolMechMod_SetTempRelaxTimeSolvent(self, temp_relax_time_solvent_new)

    def SetVelLimit(self, vel_limit_new: "double") -> "void":
        return _molsetc.HaMolMechMod_SetVelLimit(self, vel_limit_new)

    def SetPressureRegMethod(self, method: "PressureRegMethod") -> "void":
        return _molsetc.HaMolMechMod_SetPressureRegMethod(self, method)

    def SetRefPressure(self, ref_pressure_new: "double") -> "void":
        return _molsetc.HaMolMechMod_SetRefPressure(self, ref_pressure_new)

    def SetCompressibility(self, compressibility_new: "double") -> "void":
        return _molsetc.HaMolMechMod_SetCompressibility(self, compressibility_new)

    def SetPressRelaxTime(self, press_relax_time_new: "double") -> "void":
        return _molsetc.HaMolMechMod_SetPressRelaxTime(self, press_relax_time_new)

    def SetShakeConstr(self, shake_constr_new: "MMShakeParam") -> "void":
        return _molsetc.HaMolMechMod_SetShakeConstr(self, shake_constr_new)

    def SetShakeTol(self, shake_tol_new: "double") -> "void":
        return _molsetc.HaMolMechMod_SetShakeTol(self, shake_tol_new)
    p_mm_dlg = property(_molsetc.HaMolMechMod_p_mm_dlg_get, _molsetc.HaMolMechMod_p_mm_dlg_set)

    def OnChangePeriodicity(self) -> "void":
        return _molsetc.HaMolMechMod_OnChangePeriodicity(self)

    @staticmethod
    def TestSaveAmoebaTopFile1() -> "void":
        return _molsetc.HaMolMechMod_TestSaveAmoebaTopFile1()

    @staticmethod
    def TestSaveAmoebaTopFile2() -> "void":
        return _molsetc.HaMolMechMod_TestSaveAmoebaTopFile2()

# Register HaMolMechMod in _molsetc:
_molsetc.HaMolMechMod_swigregister(HaMolMechMod)
HA_MOL_MECH_EVENT = cvar.HA_MOL_MECH_EVENT
MOL_MECH_ID_TEST1 = cvar.MOL_MECH_ID_TEST1
MOL_MECH_ID_TEST2 = cvar.MOL_MECH_ID_TEST2
MM_DRIVER_AMBER_RUN_INTERNAL = cvar.MM_DRIVER_AMBER_RUN_INTERNAL
MM_SET_MPI_COMM_ALL_PROCS = cvar.MM_SET_MPI_COMM_ALL_PROCS
MM_MOD_SET_MPI_COMM_SPLIT_2 = cvar.MM_MOD_SET_MPI_COMM_SPLIT_2
MM_INIT_SIMULATIONS_STEP_2 = cvar.MM_INIT_SIMULATIONS_STEP_2
MM_MOD_INIT_MIXED_HAMILTONIAN = cvar.MM_MOD_INIT_MIXED_HAMILTONIAN
MM_UPDATE_CONSTR_2 = cvar.MM_UPDATE_CONSTR_2

def HaMolMechMod_CallMMFunctionOnSlaves(id: "int") -> "void":
    return _molsetc.HaMolMechMod_CallMMFunctionOnSlaves(id)

def HaMolMechMod_TestSaveAmoebaTopFile1() -> "void":
    return _molsetc.HaMolMechMod_TestSaveAmoebaTopFile1()

def HaMolMechMod_TestSaveAmoebaTopFile2() -> "void":
    return _molsetc.HaMolMechMod_TestSaveAmoebaTopFile2()

class MMSysInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p_mm_mod_new: "HaMolMechMod"):
        _molsetc.MMSysInfo_swiginit(self, _molsetc.new_MMSysInfo(p_mm_mod_new))
    __swig_destroy__ = _molsetc.delete_MMSysInfo

    def clear(self) -> "void":
        return _molsetc.MMSysInfo_clear(self)
    nstep = property(_molsetc.MMSysInfo_nstep_get, _molsetc.MMSysInfo_nstep_set)
    time = property(_molsetc.MMSysInfo_time_get, _molsetc.MMSysInfo_time_set)
    temp = property(_molsetc.MMSysInfo_temp_get, _molsetc.MMSysInfo_temp_set)
    temp_solute = property(_molsetc.MMSysInfo_temp_solute_get, _molsetc.MMSysInfo_temp_solute_set)
    temp_solv = property(_molsetc.MMSysInfo_temp_solv_get, _molsetc.MMSysInfo_temp_solv_set)
    press = property(_molsetc.MMSysInfo_press_get, _molsetc.MMSysInfo_press_set)
    pres_x = property(_molsetc.MMSysInfo_pres_x_get, _molsetc.MMSysInfo_pres_x_set)
    pres_y = property(_molsetc.MMSysInfo_pres_y_get, _molsetc.MMSysInfo_pres_y_set)
    pres_z = property(_molsetc.MMSysInfo_pres_z_get, _molsetc.MMSysInfo_pres_z_set)
    press_scale_solute = property(_molsetc.MMSysInfo_press_scale_solute_get, _molsetc.MMSysInfo_press_scale_solute_set)
    press_scale_solvent = property(_molsetc.MMSysInfo_press_scale_solvent_get, _molsetc.MMSysInfo_press_scale_solvent_set)
    tot_energy = property(_molsetc.MMSysInfo_tot_energy_get, _molsetc.MMSysInfo_tot_energy_set)
    kin_ene = property(_molsetc.MMSysInfo_kin_ene_get, _molsetc.MMSysInfo_kin_ene_set)
    pot_ene = property(_molsetc.MMSysInfo_pot_ene_get, _molsetc.MMSysInfo_pot_ene_set)
    bond_ene = property(_molsetc.MMSysInfo_bond_ene_get, _molsetc.MMSysInfo_bond_ene_set)
    vang_ene = property(_molsetc.MMSysInfo_vang_ene_get, _molsetc.MMSysInfo_vang_ene_set)
    dihed_ene = property(_molsetc.MMSysInfo_dihed_ene_get, _molsetc.MMSysInfo_dihed_ene_set)
    vdw_ene = property(_molsetc.MMSysInfo_vdw_ene_get, _molsetc.MMSysInfo_vdw_ene_set)
    vdw_ene_14 = property(_molsetc.MMSysInfo_vdw_ene_14_get, _molsetc.MMSysInfo_vdw_ene_14_set)
    vdw_ene_nb = property(_molsetc.MMSysInfo_vdw_ene_nb_get, _molsetc.MMSysInfo_vdw_ene_nb_set)
    electr_ene = property(_molsetc.MMSysInfo_electr_ene_get, _molsetc.MMSysInfo_electr_ene_set)
    electr_ene_14 = property(_molsetc.MMSysInfo_electr_ene_14_get, _molsetc.MMSysInfo_electr_ene_14_set)
    electr_ene_nb = property(_molsetc.MMSysInfo_electr_ene_nb_get, _molsetc.MMSysInfo_electr_ene_nb_set)
    polar_ene = property(_molsetc.MMSysInfo_polar_ene_get, _molsetc.MMSysInfo_polar_ene_set)
    polar_dip_iter = property(_molsetc.MMSysInfo_polar_dip_iter_get, _molsetc.MMSysInfo_polar_dip_iter_set)
    polar_dip_rms = property(_molsetc.MMSysInfo_polar_dip_rms_get, _molsetc.MMSysInfo_polar_dip_rms_set)
    gb_ene = property(_molsetc.MMSysInfo_gb_ene_get, _molsetc.MMSysInfo_gb_ene_set)
    hbond_ene = property(_molsetc.MMSysInfo_hbond_ene_get, _molsetc.MMSysInfo_hbond_ene_set)
    constraints_ene = property(_molsetc.MMSysInfo_constraints_ene_get, _molsetc.MMSysInfo_constraints_ene_set)
    epol = property(_molsetc.MMSysInfo_epol_get, _molsetc.MMSysInfo_epol_set)
    e3body = property(_molsetc.MMSysInfo_e3body_get, _molsetc.MMSysInfo_e3body_set)
    kin_ene_plus_half_dt = property(_molsetc.MMSysInfo_kin_ene_plus_half_dt_get, _molsetc.MMSysInfo_kin_ene_plus_half_dt_set)
    kin_ene_minus_half_dt = property(_molsetc.MMSysInfo_kin_ene_minus_half_dt_get, _molsetc.MMSysInfo_kin_ene_minus_half_dt_set)
    kin_ene_pbs = property(_molsetc.MMSysInfo_kin_ene_pbs_get, _molsetc.MMSysInfo_kin_ene_pbs_set)
    kin_ene_com = property(_molsetc.MMSysInfo_kin_ene_com_get, _molsetc.MMSysInfo_kin_ene_com_set)
    kin_ene_com_x = property(_molsetc.MMSysInfo_kin_ene_com_x_get, _molsetc.MMSysInfo_kin_ene_com_x_set)
    kin_ene_com_y = property(_molsetc.MMSysInfo_kin_ene_com_y_get, _molsetc.MMSysInfo_kin_ene_com_y_set)
    kin_ene_com_z = property(_molsetc.MMSysInfo_kin_ene_com_z_get, _molsetc.MMSysInfo_kin_ene_com_z_set)
    kin_ene_solute = property(_molsetc.MMSysInfo_kin_ene_solute_get, _molsetc.MMSysInfo_kin_ene_solute_set)
    kin_ene_solvent = property(_molsetc.MMSysInfo_kin_ene_solvent_get, _molsetc.MMSysInfo_kin_ene_solvent_set)
    virial_tot = property(_molsetc.MMSysInfo_virial_tot_get, _molsetc.MMSysInfo_virial_tot_set)
    virial_x = property(_molsetc.MMSysInfo_virial_x_get, _molsetc.MMSysInfo_virial_x_set)
    virial_y = property(_molsetc.MMSysInfo_virial_y_get, _molsetc.MMSysInfo_virial_y_set)
    virial_z = property(_molsetc.MMSysInfo_virial_z_get, _molsetc.MMSysInfo_virial_z_set)
    volume = property(_molsetc.MMSysInfo_volume_get, _molsetc.MMSysInfo_volume_set)
    density = property(_molsetc.MMSysInfo_density_get, _molsetc.MMSysInfo_density_set)
    dv_dlambda = property(_molsetc.MMSysInfo_dv_dlambda_get, _molsetc.MMSysInfo_dv_dlambda_set)
    av_perm_moment = property(_molsetc.MMSysInfo_av_perm_moment_get, _molsetc.MMSysInfo_av_perm_moment_set)
    av_ind_moment = property(_molsetc.MMSysInfo_av_ind_moment_get, _molsetc.MMSysInfo_av_ind_moment_set)
    av_tot_moment = property(_molsetc.MMSysInfo_av_tot_moment_get, _molsetc.MMSysInfo_av_tot_moment_set)
    pme_err_est = property(_molsetc.MMSysInfo_pme_err_est_get, _molsetc.MMSysInfo_pme_err_est_set)
    rms_ene = property(_molsetc.MMSysInfo_rms_ene_get, _molsetc.MMSysInfo_rms_ene_set)
    grad_ene_max = property(_molsetc.MMSysInfo_grad_ene_max_get, _molsetc.MMSysInfo_grad_ene_max_set)

# Register MMSysInfo in _molsetc:
_molsetc.MMSysInfo_swigregister(MMSysInfo)

class MDSimMod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p_mm_mod_new: "HaMolMechMod"):
        _molsetc.MDSimMod_swiginit(self, _molsetc.new_MDSimMod(p_mm_mod_new))
    __swig_destroy__ = _molsetc.delete_MDSimMod

# Register MDSimMod in _molsetc:
_molsetc.MDSimMod_swigregister(MDSimMod)

class MinEneMod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p_mm_mod_new: "HaMolMechMod"):
        _molsetc.MinEneMod_swiginit(self, _molsetc.new_MinEneMod(p_mm_mod_new))
    __swig_destroy__ = _molsetc.delete_MinEneMod

# Register MinEneMod in _molsetc:
_molsetc.MinEneMod_swigregister(MinEneMod)

class TISimMod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p_mm_mod_new: "HaMolMechMod"):
        _molsetc.TISimMod_swiginit(self, _molsetc.new_TISimMod(p_mm_mod_new))
    __swig_destroy__ = _molsetc.delete_TISimMod

    def SetNumLambda(self, num_lmb_new: "int") -> "void":
        return _molsetc.TISimMod_SetNumLambda(self, num_lmb_new)

    def GetNumLambda(self) -> "int":
        return _molsetc.TISimMod_GetNumLambda(self)

    def SetCurIdxLambda(self, cur_idx_lmb_new: "int") -> "void":
        return _molsetc.TISimMod_SetCurIdxLambda(self, cur_idx_lmb_new)

    def SetMaxLambdaIdx(self, max_idx_new: "int") -> "void":
        return _molsetc.TISimMod_SetMaxLambdaIdx(self, max_idx_new)

    def SetTI_OutputFileNames(self) -> "void":
        return _molsetc.TISimMod_SetTI_OutputFileNames(self)

    def GetLambdaByIdx(self, idx: "int") -> "double":
        return _molsetc.TISimMod_GetLambdaByIdx(self, idx)

    def GetCurLambda(self) -> "double":
        return _molsetc.TISimMod_GetCurLambda(self)

    def GetIntegWtByIdx(self, idx: "int") -> "double":
        return _molsetc.TISimMod_GetIntegWtByIdx(self, idx)

    def SetNumEqPoints(self, num_eq_pt_new: "int") -> "void":
        return _molsetc.TISimMod_SetNumEqPoints(self, num_eq_pt_new)

    def CollectForceAndEneTI(self, si: "HaVec_double") -> "void":
        return _molsetc.TISimMod_CollectForceAndEneTI(self, si)

    def SincCrdAndVelTI(self) -> "void":
        return _molsetc.TISimMod_SincCrdAndVelTI(self)

    def ComputeDvDlAvg(self) -> "int":
        return _molsetc.TISimMod_ComputeDvDlAvg(self)

    def CalcDeltaG(self, recalc_dvdl_avg: "int"=1) -> "double":
        return _molsetc.TISimMod_CalcDeltaG(self, recalc_dvdl_avg)

    def ReduceDvDlData(self, *args) -> "void":
        return _molsetc.TISimMod_ReduceDvDlData(self, *args)

    def GetFilePrefixIdx(self, idx: "int") -> "std::string":
        return _molsetc.TISimMod_GetFilePrefixIdx(self, idx)

    def GetCurFilePrefix(self) -> "std::string":
        return _molsetc.TISimMod_GetCurFilePrefix(self)
    file_prefix = property(_molsetc.TISimMod_file_prefix_get, _molsetc.TISimMod_file_prefix_set)
    file_dvdl = property(_molsetc.TISimMod_file_dvdl_get, _molsetc.TISimMod_file_dvdl_set)
    p_mm_mod = property(_molsetc.TISimMod_p_mm_mod_get, _molsetc.TISimMod_p_mm_mod_set)
    allowed_num_lmb = property(_molsetc.TISimMod_allowed_num_lmb_get, _molsetc.TISimMod_allowed_num_lmb_set)
    dvdl_avg = property(_molsetc.TISimMod_dvdl_avg_get, _molsetc.TISimMod_dvdl_avg_set)
    delta_g = property(_molsetc.TISimMod_delta_g_get, _molsetc.TISimMod_delta_g_set)

# Register TISimMod in _molsetc:
_molsetc.TISimMod_swigregister(TISimMod)

class MMDriver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetClassName(self) -> "std::string":
        return _molsetc.MMDriver_GetClassName(self)

    def CalcEnergy(self) -> "int":
        return _molsetc.MMDriver_CalcEnergy(self)
    p_mm_mod = property(_molsetc.MMDriver_p_mm_mod_get, _molsetc.MMDriver_p_mm_mod_set)
    p_mm_model = property(_molsetc.MMDriver_p_mm_model_get, _molsetc.MMDriver_p_mm_model_set)
    pmset = property(_molsetc.MMDriver_pmset_get, _molsetc.MMDriver_pmset_set)
    to_save_input_files = property(_molsetc.MMDriver_to_save_input_files_get, _molsetc.MMDriver_to_save_input_files_set)
    __swig_destroy__ = _molsetc.delete_MMDriver

# Register MMDriver in _molsetc:
_molsetc.MMDriver_swigregister(MMDriver)

class NuclAcidMod(HaCompMod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_pmset: "MolSet"=None):
        _molsetc.NuclAcidMod_swiginit(self, _molsetc.new_NuclAcidMod(new_pmset))
    __swig_destroy__ = _molsetc.delete_NuclAcidMod

    def SetStdParams(self) -> "int":
        return _molsetc.NuclAcidMod_SetStdParams(self)

    def BuildNuclAcid(self) -> "int":
        return _molsetc.NuclAcidMod_BuildNuclAcid(self)

    def UpdateXYZ(self) -> "int":
        return _molsetc.NuclAcidMod_UpdateXYZ(self)

    def MinEne(self) -> "int":
        return _molsetc.NuclAcidMod_MinEne(self)

    def CalcEne(self) -> "int":
        return _molsetc.NuclAcidMod_CalcEne(self)

    def CreateMolFromJumna(self) -> "int":
        return _molsetc.NuclAcidMod_CreateMolFromJumna(self)

    def FindDNAMol(self) -> "HaMolecule *":
        return _molsetc.NuclAcidMod_FindDNAMol(self)

    def SaveAXEfile(self, axe_file: "char const *") -> "int":
        return _molsetc.NuclAcidMod_SaveAXEfile(self, axe_file)

    def ReadAXEfile(self, axe_file: "char const *") -> "int":
        return _molsetc.NuclAcidMod_ReadAXEfile(self, axe_file)
    out_prefix = property(_molsetc.NuclAcidMod_out_prefix_get, _molsetc.NuclAcidMod_out_prefix_set)
    pdb_prefix = property(_molsetc.NuclAcidMod_pdb_prefix_get, _molsetc.NuclAcidMod_pdb_prefix_set)
    nsym_unit = property(_molsetc.NuclAcidMod_nsym_unit_get, _molsetc.NuclAcidMod_nsym_unit_set)
    nbreak_1 = property(_molsetc.NuclAcidMod_nbreak_1_get, _molsetc.NuclAcidMod_nbreak_1_set)
    nbreak_2 = property(_molsetc.NuclAcidMod_nbreak_2_get, _molsetc.NuclAcidMod_nbreak_2_set)
    homon_symm_flags = property(_molsetc.NuclAcidMod_homon_symm_flags_get, _molsetc.NuclAcidMod_homon_symm_flags_set)
    homon_symm_offs = property(_molsetc.NuclAcidMod_homon_symm_offs_get, _molsetc.NuclAcidMod_homon_symm_offs_set)
    ene_per_unit_flag = property(_molsetc.NuclAcidMod_ene_per_unit_flag_get, _molsetc.NuclAcidMod_ene_per_unit_flag_set)
    dir_strand = property(_molsetc.NuclAcidMod_dir_strand_get, _molsetc.NuclAcidMod_dir_strand_set)
    seq = property(_molsetc.NuclAcidMod_seq_get, _molsetc.NuclAcidMod_seq_set)

    def SetSeq(self, seq_str: "char const *") -> "int":
        return _molsetc.NuclAcidMod_SetSeq(self, seq_str)

    def GenComplStrand(self) -> "int":
        return _molsetc.NuclAcidMod_GenComplStrand(self)
    max_iter = property(_molsetc.NuclAcidMod_max_iter_get, _molsetc.NuclAcidMod_max_iter_set)
    init_flag = property(_molsetc.NuclAcidMod_init_flag_get, _molsetc.NuclAcidMod_init_flag_set)
    sup_helix_rad = property(_molsetc.NuclAcidMod_sup_helix_rad_get, _molsetc.NuclAcidMod_sup_helix_rad_set)
    sup_helix_pit = property(_molsetc.NuclAcidMod_sup_helix_pit_get, _molsetc.NuclAcidMod_sup_helix_pit_set)
    fst_twist = property(_molsetc.NuclAcidMod_fst_twist_get, _molsetc.NuclAcidMod_fst_twist_set)

    def SetFFtype(self, new_ff_type: "char const *") -> "int":
        return _molsetc.NuclAcidMod_SetFFtype(self, new_ff_type)

    def SetFFtypeIdx(self, i_ff_type: "int const") -> "int":
        return _molsetc.NuclAcidMod_SetFFtypeIdx(self, i_ff_type)
    force_field = property(_molsetc.NuclAcidMod_force_field_get, _molsetc.NuclAcidMod_force_field_set)

    def SetDielSlope(self, slope_new: "double") -> "int":
        return _molsetc.NuclAcidMod_SetDielSlope(self, slope_new)
    diel_slope = property(_molsetc.NuclAcidMod_diel_slope_get, _molsetc.NuclAcidMod_diel_slope_set)

    def SetPhosChrg(self, phos_chrg_new: "double") -> "int":
        return _molsetc.NuclAcidMod_SetPhosChrg(self, phos_chrg_new)
    phos_chrg = property(_molsetc.NuclAcidMod_phos_chrg_get, _molsetc.NuclAcidMod_phos_chrg_set)
    hel_crd = property(_molsetc.NuclAcidMod_hel_crd_get, _molsetc.NuclAcidMod_hel_crd_set)
    lock_hel = property(_molsetc.NuclAcidMod_lock_hel_get, _molsetc.NuclAcidMod_lock_hel_set)
    bb_crd = property(_molsetc.NuclAcidMod_bb_crd_get, _molsetc.NuclAcidMod_bb_crd_set)
    lock_bb = property(_molsetc.NuclAcidMod_lock_bb_get, _molsetc.NuclAcidMod_lock_bb_set)
    bb_sidx = property(_molsetc.NuclAcidMod_bb_sidx_get, _molsetc.NuclAcidMod_bb_sidx_set)
    u = property(_molsetc.NuclAcidMod_u_get, _molsetc.NuclAcidMod_u_set)
    h = property(_molsetc.NuclAcidMod_h_get, _molsetc.NuclAcidMod_h_set)
    o = property(_molsetc.NuclAcidMod_o_get, _molsetc.NuclAcidMod_o_set)
    uho = property(_molsetc.NuclAcidMod_uho_get, _molsetc.NuclAcidMod_uho_set)
    hho = property(_molsetc.NuclAcidMod_hho_get, _molsetc.NuclAcidMod_hho_set)
    ul = property(_molsetc.NuclAcidMod_ul_get, _molsetc.NuclAcidMod_ul_set)
    dif = property(_molsetc.NuclAcidMod_dif_get, _molsetc.NuclAcidMod_dif_set)
    hel = property(_molsetc.NuclAcidMod_hel_get, _molsetc.NuclAcidMod_hel_set)
    hold = property(_molsetc.NuclAcidMod_hold_get, _molsetc.NuclAcidMod_hold_set)
    vold = property(_molsetc.NuclAcidMod_vold_get, _molsetc.NuclAcidMod_vold_set)
    bend = property(_molsetc.NuclAcidMod_bend_get, _molsetc.NuclAcidMod_bend_set)
    vkin = property(_molsetc.NuclAcidMod_vkin_get, _molsetc.NuclAcidMod_vkin_set)
    tor = property(_molsetc.NuclAcidMod_tor_get, _molsetc.NuclAcidMod_tor_set)
    sug = property(_molsetc.NuclAcidMod_sug_get, _molsetc.NuclAcidMod_sug_set)
    bs_bs_pars = property(_molsetc.NuclAcidMod_bs_bs_pars_get, _molsetc.NuclAcidMod_bs_bs_pars_set)
    ncrd_res = property(_molsetc.NuclAcidMod_ncrd_res_get, _molsetc.NuclAcidMod_ncrd_res_set)
    ncrd_ind_res = property(_molsetc.NuclAcidMod_ncrd_ind_res_get, _molsetc.NuclAcidMod_ncrd_ind_res_set)

    def SetHelCoord(self, i_strand: "int", i_res: "int", i_crd: "int", crd_val: "double") -> "int":
        return _molsetc.NuclAcidMod_SetHelCoord(self, i_strand, i_res, i_crd, crd_val)

    def LockHelCoord(self, i_strand: "int", i_res: "int", i_crd: "int", do_lock: "int") -> "int":
        return _molsetc.NuclAcidMod_LockHelCoord(self, i_strand, i_res, i_crd, do_lock)

    def IsHelCoordLocked(self, ir: "int", i_crd: "int") -> "int":
        return _molsetc.NuclAcidMod_IsHelCoordLocked(self, ir, i_crd)

    def SetBBCoord(self, i_strand: "int", i_res: "int", i_crd: "int", crd_val: "double") -> "int":
        return _molsetc.NuclAcidMod_SetBBCoord(self, i_strand, i_res, i_crd, crd_val)

    def LockBBCoord(self, i_strand: "int", i_res: "int", i_crd: "int", do_lock: "int") -> "int":
        return _molsetc.NuclAcidMod_LockBBCoord(self, i_strand, i_res, i_crd, do_lock)
    update_var_flag = property(_molsetc.NuclAcidMod_update_var_flag_get, _molsetc.NuclAcidMod_update_var_flag_set)

    def UpdateVarCoord(self) -> "int":
        return _molsetc.NuclAcidMod_UpdateVarCoord(self)

    def SetCoordsFromJumna(self) -> "int":
        return _molsetc.NuclAcidMod_SetCoordsFromJumna(self)

    def SetIntCoordsToJumna(self) -> "int":
        return _molsetc.NuclAcidMod_SetIntCoordsToJumna(self)

    def SaveConfig(self) -> "int":
        return _molsetc.NuclAcidMod_SaveConfig(self)

    def RestoreConfig(self) -> "int":
        return _molsetc.NuclAcidMod_RestoreConfig(self)

    def BBOffset(self, ir: "int") -> "int":
        return _molsetc.NuclAcidMod_BBOffset(self, ir)

    def IsRibRes(self, ir: "int") -> "int":
        return _molsetc.NuclAcidMod_IsRibRes(self, ir)

    def IsThymineRes(self, ir: "int") -> "int":
        return _molsetc.NuclAcidMod_IsThymineRes(self, ir)

    def NumIndBBVarRes(self, ir: "int") -> "int":
        return _molsetc.NuclAcidMod_NumIndBBVarRes(self, ir)

    def NumAllBBVarRes(self, ir: "int") -> "int":
        return _molsetc.NuclAcidMod_NumAllBBVarRes(self, ir)

    def Is3endRes(self, ir: "int") -> "int":
        return _molsetc.NuclAcidMod_Is3endRes(self, ir)

    def IsFstResInChain(self, ir: "int") -> "int":
        return _molsetc.NuclAcidMod_IsFstResInChain(self, ir)

    def IdxResInChain(self, ir: "int") -> "int":
        return _molsetc.NuclAcidMod_IdxResInChain(self, ir)

    def ChainIdxOfRes(self, ir: "int") -> "int":
        return _molsetc.NuclAcidMod_ChainIdxOfRes(self, ir)

    def IsSupHlxConstr(self) -> "int":
        return _molsetc.NuclAcidMod_IsSupHlxConstr(self)

    def NumBBCoord(self) -> "int":
        return _molsetc.NuclAcidMod_NumBBCoord(self)

    def NumFreeBBCoord(self) -> "int":
        return _molsetc.NuclAcidMod_NumFreeBBCoord(self)

    def IdxLastHelCoord(self) -> "int":
        return _molsetc.NuclAcidMod_IdxLastHelCoord(self)

    def IdxLastFreeHelCoord(self) -> "int":
        return _molsetc.NuclAcidMod_IdxLastFreeHelCoord(self)

    def SetShlxTwist(self, shlx_tw: "double") -> "int":
        return _molsetc.NuclAcidMod_SetShlxTwist(self, shlx_tw)

    def GetAtomCrd(self, at_num: "int", coord_num: "int") -> "double":
        return _molsetc.NuclAcidMod_GetAtomCrd(self, at_num, coord_num)

    def GetVarNum(self, crd_num: "int") -> "double":
        return _molsetc.NuclAcidMod_GetVarNum(self, crd_num)

    def CalcPdistToShlxCnt(self) -> "int":
        return _molsetc.NuclAcidMod_CalcPdistToShlxCnt(self)

    def CalcLocCrdSys(self) -> "int":
        return _molsetc.NuclAcidMod_CalcLocCrdSys(self)

    def CalcLocHlxCrd(self, for_bp: "int"=1) -> "int":
        return _molsetc.NuclAcidMod_CalcLocHlxCrd(self, for_bp)

    def CalcAxis(self) -> "int":
        return _molsetc.NuclAcidMod_CalcAxis(self)

    def CalcBend(self) -> "int":
        return _molsetc.NuclAcidMod_CalcBend(self)

    def CalcGlobHlxCrd(self) -> "int":
        return _molsetc.NuclAcidMod_CalcGlobHlxCrd(self)

    def CalcBBCrd(self) -> "int":
        return _molsetc.NuclAcidMod_CalcBBCrd(self)

    def CalcAxisPar1(self, ax_hlxc: "HaMat_double", sum: "double &", gra: "HaVec_double", scp: "HaVec_double") -> "int":
        return _molsetc.NuclAcidMod_CalcAxisPar1(self, ax_hlxc, sum, gra, scp)

    def GetNRes(self) -> "int":
        return _molsetc.NuclAcidMod_GetNRes(self)
    tot_energy = property(_molsetc.NuclAcidMod_tot_energy_get, _molsetc.NuclAcidMod_tot_energy_set)
    p_dna_mol = property(_molsetc.NuclAcidMod_p_dna_mol_get, _molsetc.NuclAcidMod_p_dna_mol_set)

# Register NuclAcidMod in _molsetc:
_molsetc.NuclAcidMod_swigregister(NuclAcidMod)
FLEX_FF = cvar.FLEX_FF
AMBER91_FF = cvar.AMBER91_FF
AMBER94_FF = cvar.AMBER94_FF

class HaResDB(MolSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.HaResDB_swiginit(self, _molsetc.new_HaResDB())
    __swig_destroy__ = _molsetc.delete_HaResDB

    def Init(self) -> "int":
        return _molsetc.HaResDB_Init(self)

    def GetMolTemplForRes(self, res_templ_name: "std::string const &") -> "HaMolecule *":
        return _molsetc.HaResDB_GetMolTemplForRes(self, res_templ_name)

    def GetTemplateForResidue(self, res_full_name: "std::string const &") -> "HaResidue *":
        return _molsetc.HaResDB_GetTemplateForResidue(self, res_full_name)

    def GetTemplateForAtom(self, aptr: "HaAtom") -> "HaAtom *":
        return _molsetc.HaResDB_GetTemplateForAtom(self, aptr)

    def GetTemplResAtomMaps(self, pres: "HaResidue", res_to_templ_map: "AtomAtomMap", templ_to_res_map: "AtomAtomMap") -> "int":
        return _molsetc.HaResDB_GetTemplResAtomMaps(self, pres, res_to_templ_map, templ_to_res_map)

    def GetTemplResAtNameAtomMap(self, pres: "HaResidue", templ_atname_to_res_map: "StrAtomMap &") -> "int":
        return _molsetc.HaResDB_GetTemplResAtNameAtomMap(self, pres, templ_atname_to_res_map)

    def LoadXMLFile(self, fname: "std::string const &") -> "int":
        return _molsetc.HaResDB_LoadXMLFile(self, fname)

    @staticmethod
    def GetDefaultResDB() -> "HaResDB *":
        return _molsetc.HaResDB_GetDefaultResDB()
    res_db_files = property(_molsetc.HaResDB_res_db_files_get, _molsetc.HaResDB_res_db_files_set)

# Register HaResDB in _molsetc:
_molsetc.HaResDB_swigregister(HaResDB)

def HaResDB_GetDefaultResDB() -> "HaResDB *":
    return _molsetc.HaResDB_GetDefaultResDB()

class StrKey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.StrKey_swiginit(self, _molsetc.new_StrKey(*args))
    __swig_destroy__ = _molsetc.delete_StrKey

    def SetStr(self, str: "char const *") -> "void":
        return _molsetc.StrKey_SetStr(self, str)

    def GetStr(self) -> "char const *":
        return _molsetc.StrKey_GetStr(self)

    def Print_To(self, os: "ostream") -> "std::ostream &":
        return _molsetc.StrKey_Print_To(self, os)
    key_str = property(_molsetc.StrKey_key_str_get, _molsetc.StrKey_key_str_set)

# Register StrKey in _molsetc:
_molsetc.StrKey_swigregister(StrKey)

class HaGrpOperID(StrKey):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.HaGrpOperID_swiginit(self, _molsetc.new_HaGrpOperID(*args))
    __swig_destroy__ = _molsetc.delete_HaGrpOperID

    def set(self, *args) -> "void":
        return _molsetc.HaGrpOperID_set(self, *args)

# Register HaGrpOperID in _molsetc:
_molsetc.HaGrpOperID_swigregister(HaGrpOperID)

class HaGrp4MatID(StrKey):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.HaGrp4MatID_swiginit(self, _molsetc.new_HaGrp4MatID(*args))
    __swig_destroy__ = _molsetc.delete_HaGrp4MatID

# Register HaGrp4MatID in _molsetc:
_molsetc.HaGrp4MatID_swigregister(HaGrp4MatID)

class HaMatDB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.HaMatDB_swiginit(self, _molsetc.new_HaMatDB(*args))
    __swig_destroy__ = _molsetc.delete_HaMatDB

    def open(self, fname: "char const *", mode: "char const *") -> "bool":
        return _molsetc.HaMatDB_open(self, fname, mode)

    def close(self) -> "bool":
        return _molsetc.HaMatDB_close(self)

    def is_open(self) -> "bool":
        return _molsetc.HaMatDB_is_open(self)

    def put(self, key: "StrKey", fgmat: "HaMat_double") -> "bool":
        return _molsetc.HaMatDB_put(self, key, fgmat)

    def get(self, key: "StrKey", fgmat: "HaMat_double") -> "bool":
        return _molsetc.HaMatDB_get(self, key, fgmat)

    def ListKeys(self) -> "bool":
        return _molsetc.HaMatDB_ListKeys(self)

    def ListAll(self, s: "ostream") -> "bool":
        return _molsetc.HaMatDB_ListAll(self, s)

    def PutMat(self, key_str: "char const *", fmat: "HaMat_double") -> "int":
        return _molsetc.HaMatDB_PutMat(self, key_str, fmat)

    def GetMat(self, key_str: "char const *", fmat: "HaMat_double") -> "int":
        return _molsetc.HaMatDB_GetMat(self, key_str, fmat)

    def ExtractToFile(self, keys: "StrVec", fname: "char const *") -> "int":
        return _molsetc.HaMatDB_ExtractToFile(self, keys, fname)

    def ExtractAllToFile(self, fname: "char const *") -> "int":
        return _molsetc.HaMatDB_ExtractAllToFile(self, fname)

    def AddFromFile(self, fname: "char const *") -> "int":
        return _molsetc.HaMatDB_AddFromFile(self, fname)
    io_format = property(_molsetc.HaMatDB_io_format_get, _molsetc.HaMatDB_io_format_set)

# Register HaMatDB in _molsetc:
_molsetc.HaMatDB_swigregister(HaMatDB)

class HaTests(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def calc_polar_gcontr() -> "void":
        return _molsetc.HaTests_calc_polar_gcontr()

    @staticmethod
    def save_grp_oper_mat() -> "void":
        return _molsetc.HaTests_save_grp_oper_mat()

    @staticmethod
    def calc_polar_contr_f() -> "void":
        return _molsetc.HaTests_calc_polar_contr_f()

    @staticmethod
    def read_polar_contr() -> "void":
        return _molsetc.HaTests_read_polar_contr()

    @staticmethod
    def calc_beta_contr_2idx() -> "void":
        return _molsetc.HaTests_calc_beta_contr_2idx()

    @staticmethod
    def read_beta_contr_2idx() -> "void":
        return _molsetc.HaTests_read_beta_contr_2idx()

    @staticmethod
    def calc_polar_contr_2idx() -> "void":
        return _molsetc.HaTests_calc_polar_contr_2idx()

    @staticmethod
    def read_polar_contr_2idx() -> "void":
        return _molsetc.HaTests_read_polar_contr_2idx()

    @staticmethod
    def test_oper_1() -> "void":
        return _molsetc.HaTests_test_oper_1()

    @staticmethod
    def test_oper_2() -> "void":
        return _molsetc.HaTests_test_oper_2()

    @staticmethod
    def test_qcmod_1() -> "void":
        return _molsetc.HaTests_test_qcmod_1()

    @staticmethod
    def dump_mol_info() -> "void":
        return _molsetc.HaTests_dump_mol_info()

    @staticmethod
    def dump_gauss_bcommon() -> "void":
        return _molsetc.HaTests_dump_gauss_bcommon()

    @staticmethod
    def dump_overlap() -> "void":
        return _molsetc.HaTests_dump_overlap()

    @staticmethod
    def dump_overlap2() -> "void":
        return _molsetc.HaTests_dump_overlap2()

    @staticmethod
    def test_min_1() -> "void":
        return _molsetc.HaTests_test_min_1()

    @staticmethod
    def test_graph_1() -> "void":
        return _molsetc.HaTests_test_graph_1()

    @staticmethod
    def test_python_1() -> "void":
        return _molsetc.HaTests_test_python_1()

    @staticmethod
    def model_mc_calc() -> "void":
        return _molsetc.HaTests_model_mc_calc()

    def __init__(self):
        _molsetc.HaTests_swiginit(self, _molsetc.new_HaTests())
    __swig_destroy__ = _molsetc.delete_HaTests

# Register HaTests in _molsetc:
_molsetc.HaTests_swigregister(HaTests)

def HaTests_calc_polar_gcontr() -> "void":
    return _molsetc.HaTests_calc_polar_gcontr()

def HaTests_save_grp_oper_mat() -> "void":
    return _molsetc.HaTests_save_grp_oper_mat()

def HaTests_calc_polar_contr_f() -> "void":
    return _molsetc.HaTests_calc_polar_contr_f()

def HaTests_read_polar_contr() -> "void":
    return _molsetc.HaTests_read_polar_contr()

def HaTests_calc_beta_contr_2idx() -> "void":
    return _molsetc.HaTests_calc_beta_contr_2idx()

def HaTests_read_beta_contr_2idx() -> "void":
    return _molsetc.HaTests_read_beta_contr_2idx()

def HaTests_calc_polar_contr_2idx() -> "void":
    return _molsetc.HaTests_calc_polar_contr_2idx()

def HaTests_read_polar_contr_2idx() -> "void":
    return _molsetc.HaTests_read_polar_contr_2idx()

def HaTests_test_oper_1() -> "void":
    return _molsetc.HaTests_test_oper_1()

def HaTests_test_oper_2() -> "void":
    return _molsetc.HaTests_test_oper_2()

def HaTests_test_qcmod_1() -> "void":
    return _molsetc.HaTests_test_qcmod_1()

def HaTests_dump_mol_info() -> "void":
    return _molsetc.HaTests_dump_mol_info()

def HaTests_dump_gauss_bcommon() -> "void":
    return _molsetc.HaTests_dump_gauss_bcommon()

def HaTests_dump_overlap() -> "void":
    return _molsetc.HaTests_dump_overlap()

def HaTests_dump_overlap2() -> "void":
    return _molsetc.HaTests_dump_overlap2()

def HaTests_test_min_1() -> "void":
    return _molsetc.HaTests_test_min_1()

def HaTests_test_graph_1() -> "void":
    return _molsetc.HaTests_test_graph_1()

def HaTests_test_python_1() -> "void":
    return _molsetc.HaTests_test_python_1()

def HaTests_model_mc_calc() -> "void":
    return _molsetc.HaTests_model_mc_calc()

class MolEditor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _molsetc.MolEditor_swiginit(self, _molsetc.new_MolEditor())
    __swig_destroy__ = _molsetc.delete_MolEditor

    def Init(self) -> "void":
        return _molsetc.MolEditor_Init(self)

    def FindMissingHydrogens(self, aptr: "HaAtom") -> "std::vector< HaAtom >":
        return _molsetc.MolEditor_FindMissingHydrogens(self, aptr)

    def DeleteExtraAtoms(self, pmset: "MolSet") -> "int":
        return _molsetc.MolEditor_DeleteExtraAtoms(self, pmset)

    def AddMissingAtoms(self, pmset: "MolSet") -> "int":
        return _molsetc.MolEditor_AddMissingAtoms(self, pmset)

    def AddHydrogens(self, pmset: "MolSet") -> "int":
        return _molsetc.MolEditor_AddHydrogens(self, pmset)

    def AddPolarHydrogens(self, pmset: "MolSet") -> "int":
        return _molsetc.MolEditor_AddPolarHydrogens(self, pmset)

    def AddHydrogensHybrid(self, pmset: "MolSet") -> "int":
        return _molsetc.MolEditor_AddHydrogensHybrid(self, pmset)

    def SetAtomElemFromTempl(self, pmset: "MolSet") -> "int":
        return _molsetc.MolEditor_SetAtomElemFromTempl(self, pmset)

    def SetHBondDonAccStatus(self, p_at_coll: "AtomContainer") -> "int":
        return _molsetc.MolEditor_SetHBondDonAccStatus(self, p_at_coll)

    def SetStdAtomicParams(self, pmset: "MolSet", at_params_type: "int") -> "int":
        return _molsetc.MolEditor_SetStdAtomicParams(self, pmset, at_params_type)

    def SetFormalAtChrgFromTempl(self, pmset: "MolSet") -> "int":
        return _molsetc.MolEditor_SetFormalAtChrgFromTempl(self, pmset)

    @staticmethod
    def ClearAtomFFParams(pmset: "MolSet") -> "int":
        return _molsetc.MolEditor_ClearAtomFFParams(pmset)

    def FixBondsUsingTempl(self, pmset: "MolSet") -> "int":
        return _molsetc.MolEditor_FixBondsUsingTempl(self, pmset)

    def OrderAtomsInRes(self, pmset: "MolSet") -> "int":
        return _molsetc.MolEditor_OrderAtomsInRes(self, pmset)

    def RenameAtomsToAmber(self, pmset: "MolSet") -> "int":
        return _molsetc.MolEditor_RenameAtomsToAmber(self, pmset)

    def RenameAtomsToGromacs(self, pmset: "MolSet") -> "int":
        return _molsetc.MolEditor_RenameAtomsToGromacs(self, pmset)

    def ConvertWaterArrowVB(self, pmset: "MolSet") -> "int":
        return _molsetc.MolEditor_ConvertWaterArrowVB(self, pmset)

    def CreateCovBonds(self, at_col: "AtomContainer") -> "int":
        return _molsetc.MolEditor_CreateCovBonds(self, at_col)

    @staticmethod
    def BondIfClose(sptr: "HaAtom", dptr: "HaAtom") -> "int":
        return _molsetc.MolEditor_BondIfClose(sptr, dptr)

    def SetBondDist(self, aptr1: "HaAtom", aptr2: "HaAtom", new_dist: "double") -> "int":
        return _molsetc.MolEditor_SetBondDist(self, aptr1, aptr2, new_dist)

    def SetAngle(self, aptr1: "HaAtom", aptr2: "HaAtom", aptr3: "HaAtom", ang_new: "double") -> "int":
        return _molsetc.MolEditor_SetAngle(self, aptr1, aptr2, aptr3, ang_new)

    def SetTorsion(self, aptr1: "HaAtom", aptr2: "HaAtom", aptr3: "HaAtom", aptr4: "HaAtom", tors_new: "double") -> "int":
        return _molsetc.MolEditor_SetTorsion(self, aptr1, aptr2, aptr3, aptr4, tors_new)

    def FindHBondsAtomCollection(self, p_at_coll: "AtomContainer", hbonds: "std::vector< HaHBond > &") -> "int":
        return _molsetc.MolEditor_FindHBondsAtomCollection(self, p_at_coll, hbonds)

    def CalcHBonds(self, pmset: "MolSet", recalc: "bool"=False) -> "bool":
        return _molsetc.MolEditor_CalcHBonds(self, pmset, recalc)

    def IsValidHBond(self, p_hb: "HaHBond") -> "int":
        return _molsetc.MolEditor_IsValidHBond(self, p_hb)

    def CalcHydrogenBonds(self, pmset: "MolSet") -> "void":
        return _molsetc.MolEditor_CalcHydrogenBonds(self, pmset)

    def FindDisulphideBridges(self, pmset: "MolSet") -> "void":
        return _molsetc.MolEditor_FindDisulphideBridges(self, pmset)

    def CalcNucleicHBonds(self, chn1: "HaChain") -> "int":
        return _molsetc.MolEditor_CalcNucleicHBonds(self, chn1)

    def CalcProteinHBonds(self, chn1: "HaChain") -> "int":
        return _molsetc.MolEditor_CalcProteinHBonds(self, chn1)

    def FindBackbone(self, pmset: "MolSet") -> "int":
        return _molsetc.MolEditor_FindBackbone(self, pmset)

    def UpdateBackBone(self, pmset: "MolSet") -> "int":
        return _molsetc.MolEditor_UpdateBackBone(self, pmset)

    def DetermineSecStructure(self, pmol: "HaMolecule", flag: "int") -> "int":
        return _molsetc.MolEditor_DetermineSecStructure(self, pmol, flag)

    def FindAlphaHelix(self, pmol: "HaMolecule", pitch: "int", flag: "int") -> "int":
        return _molsetc.MolEditor_FindAlphaHelix(self, pmol, pitch, flag)

    def FindTurnStructure(self, pmol: "HaMolecule") -> "int":
        return _molsetc.MolEditor_FindTurnStructure(self, pmol)

    def FindBetaTurns(self, pmol: "HaMolecule") -> "int":
        return _molsetc.MolEditor_FindBetaTurns(self, pmol)

    def FindBetaSheets(self, pmol: "HaMolecule") -> "int":
        return _molsetc.MolEditor_FindBetaSheets(self, pmol)

    def SetAlphaHelix(self, pmset: "MolSet") -> "void":
        return _molsetc.MolEditor_SetAlphaHelix(self, pmset)
    max_bond_length = property(_molsetc.MolEditor_max_bond_length_get, _molsetc.MolEditor_max_bond_length_set)
    max_hbond = property(_molsetc.MolEditor_max_hbond_get, _molsetc.MolEditor_max_hbond_set)
    max_da_dist_no_acc = property(_molsetc.MolEditor_max_da_dist_no_acc_get, _molsetc.MolEditor_max_da_dist_no_acc_set)
    max_da_dist_s_acc = property(_molsetc.MolEditor_max_da_dist_s_acc_get, _molsetc.MolEditor_max_da_dist_s_acc_set)
    max_ha_dist_no_acc = property(_molsetc.MolEditor_max_ha_dist_no_acc_get, _molsetc.MolEditor_max_ha_dist_no_acc_set)
    max_ha_dist_s_acc = property(_molsetc.MolEditor_max_ha_dist_s_acc_get, _molsetc.MolEditor_max_ha_dist_s_acc_set)
    max_hda_angle = property(_molsetc.MolEditor_max_hda_angle_get, _molsetc.MolEditor_max_hda_angle_set)
    m_calc_s_hbonds_flag = property(_molsetc.MolEditor_m_calc_s_hbonds_flag_get, _molsetc.MolEditor_m_calc_s_hbonds_flag_set)

    def CenterAtOrigin(self, at_cont: "AtomContainer") -> "int":
        return _molsetc.MolEditor_CenterAtOrigin(self, at_cont)

    def CenterAtOriginWithRad(self, at_cont: "AtomContainer") -> "int":
        return _molsetc.MolEditor_CenterAtOriginWithRad(self, at_cont)

    def Solvate(self, pmset: "MolSet") -> "int":
        return _molsetc.MolEditor_Solvate(self, pmset)

    def CenterSoluteInSolvent(self, pmset: "MolSet") -> "int":
        return _molsetc.MolEditor_CenterSoluteInSolvent(self, pmset)

    def CenterMolInPBox(self, pmset: "MolSet") -> "int":
        return _molsetc.MolEditor_CenterMolInPBox(self, pmset)

    def ReplicatePeriodBox(self, pmset: "MolSet", nx: "int", ny: "int", nz: "int") -> "int":
        return _molsetc.MolEditor_ReplicatePeriodBox(self, pmset, nx, ny, nz)

    def WrapToUnitCell(self, at_cont: "AtomContainer", per_info: "PeriodicUnitInfo") -> "int":
        return _molsetc.MolEditor_WrapToUnitCell(self, at_cont, per_info)

    def DeleteOverlapMols(self, pmset: "MolSet", at_coll: "AtomGroup") -> "int":
        return _molsetc.MolEditor_DeleteOverlapMols(self, pmset, at_coll)

    def SplitToMolecules(self, p_at_coll: "AtomContainer", mols: "std::vector< AtomGroup > &") -> "int":
        return _molsetc.MolEditor_SplitToMolecules(self, p_at_coll, mols)

    def MergeMolecules(self, pMol1: "HaMolecule", pMol2: "HaMolecule") -> "int":
        return _molsetc.MolEditor_MergeMolecules(self, pMol1, pMol2)

    def CreateTransAlk(self, *args) -> "HaMolecule *":
        return _molsetc.MolEditor_CreateTransAlk(self, *args)

    def CreateSurf(self, *args) -> "HaMolecule *":
        return _molsetc.MolEditor_CreateSurf(self, *args)

    def Create2DMolArray(self, pmset: "MolSet", pMol_ref: "HaMolecule", deltx: "double const", delty: "double const", nx: "int const", ny: "int const", alpha: "double const", tilt: "double const") -> "bool":
        return _molsetc.MolEditor_Create2DMolArray(self, pmset, pMol_ref, deltx, delty, nx, ny, alpha, tilt)

    def AddElectrSurf(self, pmset: "MolSet", add_surf_below_flag: "int", add_surf_top_flag: "int", add_atom_top_flag: "int", add_atom_below_flag: "int") -> "bool":
        return _molsetc.MolEditor_AddElectrSurf(self, pmset, add_surf_below_flag, add_surf_top_flag, add_atom_top_flag, add_atom_below_flag)
    solv_name = property(_molsetc.MolEditor_solv_name_get, _molsetc.MolEditor_solv_name_set)
    solv_buffer_dist = property(_molsetc.MolEditor_solv_buffer_dist_get, _molsetc.MolEditor_solv_buffer_dist_set)

# Register MolEditor in _molsetc:
_molsetc.MolEditor_swigregister(MolEditor)

def MolEditor_ClearAtomFFParams(pmset: "MolSet") -> "int":
    return _molsetc.MolEditor_ClearAtomFFParams(pmset)

def MolEditor_BondIfClose(sptr: "HaAtom", dptr: "HaAtom") -> "int":
    return _molsetc.MolEditor_BondIfClose(sptr, dptr)

BACKBONE_CHRG = _molsetc.BACKBONE_CHRG
PROT_CHARGED_GROUPS_CHRG = _molsetc.PROT_CHARGED_GROUPS_CHRG
ZERO_CHRG = _molsetc.ZERO_CHRG
AMBER_ALL_ATOM_CHRGS = _molsetc.AMBER_ALL_ATOM_CHRGS
AMBER_ALL_ATOM_FF_SYMBOLS = _molsetc.AMBER_ALL_ATOM_FF_SYMBOLS
AMBER_ALL_ATOM_MASSES = _molsetc.AMBER_ALL_ATOM_MASSES
ATOM_ELEM_FROM_TEMPL = _molsetc.ATOM_ELEM_FROM_TEMPL
ATOM_MASSES_ELEMENT = _molsetc.ATOM_MASSES_ELEMENT
ATOM_HBOND_DA_STATUS = _molsetc.ATOM_HBOND_DA_STATUS
class AltChemStateType(HaEnum1):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_AltChemStateType
    PROTONATED = _molsetc.AltChemStateType_PROTONATED
    UNPROTONATED = _molsetc.AltChemStateType_UNPROTONATED
    REDUCED = _molsetc.AltChemStateType_REDUCED
    OXIDIZED = _molsetc.AltChemStateType_OXIDIZED

    def __eq__(self, val: "AltChemStateType::Value const &") -> "bool":
        return _molsetc.AltChemStateType___eq__(self, val)

    def __ne__(self, val: "AltChemStateType::Value const &") -> "bool":
        return _molsetc.AltChemStateType___ne__(self, val)

    def GetLabelsMap(self) -> "IntStrMap &":
        return _molsetc.AltChemStateType_GetLabelsMap(self)

    def value(self) -> "int &":
        return _molsetc.AltChemStateType_value(self)

    def label(self) -> "char const *":
        return _molsetc.AltChemStateType_label(self)

    def SetWithValue(self, val: "int") -> "int":
        return _molsetc.AltChemStateType_SetWithValue(self, val)

    def SetWithLabel(self, label: "char const *") -> "int":
        return _molsetc.AltChemStateType_SetWithLabel(self, label)

    def __init__(self, *args):
        _molsetc.AltChemStateType_swiginit(self, _molsetc.new_AltChemStateType(*args))

# Register AltChemStateType in _molsetc:
_molsetc.AltChemStateType_swigregister(AltChemStateType)

class AltChemState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _molsetc.AltChemState_swiginit(self, _molsetc.new_AltChemState(*args))
    __swig_destroy__ = _molsetc.delete_AltChemState

    def GetHostAtomGroup(self) -> "AtomGroup *":
        return _molsetc.AltChemState_GetHostAtomGroup(self)

    def SetStdParam(self) -> "void":
        return _molsetc.AltChemState_SetStdParam(self)

    def SetAltCharges(self, weight: "double") -> "int":
        return _molsetc.AltChemState_SetAltCharges(self, weight)

    def SetAltChForAtom(self, at_name: "char const *", new_ch: "double") -> "int":
        return _molsetc.AltChemState_SetAltChForAtom(self, at_name, new_ch)
    id = property(_molsetc.AltChemState_id_get, _molsetc.AltChemState_id_set)
    chmap = property(_molsetc.AltChemState_chmap_get, _molsetc.AltChemState_chmap_set)
    mod_atom_name = property(_molsetc.AltChemState_mod_atom_name_get, _molsetc.AltChemState_mod_atom_name_set)
    alt_state_type = property(_molsetc.AltChemState_alt_state_type_get, _molsetc.AltChemState_alt_state_type_set)
    pk = property(_molsetc.AltChemState_pk_get, _molsetc.AltChemState_pk_set)
    std_pk = property(_molsetc.AltChemState_std_pk_get, _molsetc.AltChemState_std_pk_set)
    active_flag = property(_molsetc.AltChemState_active_flag_get, _molsetc.AltChemState_active_flag_set)
    host_atom_group = property(_molsetc.AltChemState_host_atom_group_get, _molsetc.AltChemState_host_atom_group_set)

# Register AltChemState in _molsetc:
_molsetc.AltChemState_swigregister(AltChemState)
PROTONATED = cvar.PROTONATED
UNPROTONATED = cvar.UNPROTONATED
REDUCED = cvar.REDUCED
OXIDIZED = cvar.OXIDIZED

class vector_AltChemState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _molsetc.vector_AltChemState_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _molsetc.vector_AltChemState___nonzero__(self)

    def __bool__(self) -> "bool":
        return _molsetc.vector_AltChemState___bool__(self)

    def __len__(self) -> "std::vector< AltChemState * >::size_type":
        return _molsetc.vector_AltChemState___len__(self)

    def __getslice__(self, i: "std::vector< AltChemState * >::difference_type", j: "std::vector< AltChemState * >::difference_type") -> "std::vector< AltChemState *,std::allocator< AltChemState * > > *":
        return _molsetc.vector_AltChemState___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _molsetc.vector_AltChemState___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< AltChemState * >::difference_type", j: "std::vector< AltChemState * >::difference_type") -> "void":
        return _molsetc.vector_AltChemState___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _molsetc.vector_AltChemState___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< AltChemState * >::value_type":
        return _molsetc.vector_AltChemState___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _molsetc.vector_AltChemState___setitem__(self, *args)

    def pop(self) -> "std::vector< AltChemState * >::value_type":
        return _molsetc.vector_AltChemState_pop(self)

    def append(self, x: "AltChemState") -> "void":
        return _molsetc.vector_AltChemState_append(self, x)

    def empty(self) -> "bool":
        return _molsetc.vector_AltChemState_empty(self)

    def size(self) -> "std::vector< AltChemState * >::size_type":
        return _molsetc.vector_AltChemState_size(self)

    def swap(self, v: "vector_AltChemState") -> "void":
        return _molsetc.vector_AltChemState_swap(self, v)

    def begin(self) -> "std::vector< AltChemState * >::iterator":
        return _molsetc.vector_AltChemState_begin(self)

    def end(self) -> "std::vector< AltChemState * >::iterator":
        return _molsetc.vector_AltChemState_end(self)

    def rbegin(self) -> "std::vector< AltChemState * >::reverse_iterator":
        return _molsetc.vector_AltChemState_rbegin(self)

    def rend(self) -> "std::vector< AltChemState * >::reverse_iterator":
        return _molsetc.vector_AltChemState_rend(self)

    def clear(self) -> "void":
        return _molsetc.vector_AltChemState_clear(self)

    def get_allocator(self) -> "std::vector< AltChemState * >::allocator_type":
        return _molsetc.vector_AltChemState_get_allocator(self)

    def pop_back(self) -> "void":
        return _molsetc.vector_AltChemState_pop_back(self)

    def erase(self, *args) -> "std::vector< AltChemState * >::iterator":
        return _molsetc.vector_AltChemState_erase(self, *args)

    def __init__(self, *args):
        _molsetc.vector_AltChemState_swiginit(self, _molsetc.new_vector_AltChemState(*args))

    def push_back(self, x: "AltChemState") -> "void":
        return _molsetc.vector_AltChemState_push_back(self, x)

    def front(self) -> "std::vector< AltChemState * >::value_type":
        return _molsetc.vector_AltChemState_front(self)

    def back(self) -> "std::vector< AltChemState * >::value_type":
        return _molsetc.vector_AltChemState_back(self)

    def assign(self, n: "std::vector< AltChemState * >::size_type", x: "AltChemState") -> "void":
        return _molsetc.vector_AltChemState_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _molsetc.vector_AltChemState_resize(self, *args)

    def insert(self, *args) -> "void":
        return _molsetc.vector_AltChemState_insert(self, *args)

    def reserve(self, n: "std::vector< AltChemState * >::size_type") -> "void":
        return _molsetc.vector_AltChemState_reserve(self, n)

    def capacity(self) -> "std::vector< AltChemState * >::size_type":
        return _molsetc.vector_AltChemState_capacity(self)
    __swig_destroy__ = _molsetc.delete_vector_AltChemState

# Register vector_AltChemState in _molsetc:
_molsetc.vector_AltChemState_swigregister(vector_AltChemState)

class MultiSitePopulationMethod(HaEnum1):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _molsetc.delete_MultiSitePopulationMethod
    SCF_MULTI_SITE_CALC = _molsetc.MultiSitePopulationMethod_SCF_MULTI_SITE_CALC
    MC_MULTI_SITE_CALC = _molsetc.MultiSitePopulationMethod_MC_MULTI_SITE_CALC
    PFUNC_MULTI_SITE_CALC = _molsetc.MultiSitePopulationMethod_PFUNC_MULTI_SITE_CALC

    def __eq__(self, val: "MultiSitePopulationMethod::Value const &") -> "bool":
        return _molsetc.MultiSitePopulationMethod___eq__(self, val)

    def __ne__(self, val: "MultiSitePopulationMethod::Value const &") -> "bool":
        return _molsetc.MultiSitePopulationMethod___ne__(self, val)

    def GetLabelsMap(self) -> "IntStrMap &":
        return _molsetc.MultiSitePopulationMethod_GetLabelsMap(self)

    def value(self) -> "int &":
        return _molsetc.MultiSitePopulationMethod_value(self)

    def label(self) -> "char const *":
        return _molsetc.MultiSitePopulationMethod_label(self)

    def SetWithValue(self, val: "int") -> "int":
        return _molsetc.MultiSitePopulationMethod_SetWithValue(self, val)

    def SetWithLabel(self, label: "char const *") -> "int":
        return _molsetc.MultiSitePopulationMethod_SetWithLabel(self, label)

    def __init__(self, *args):
        _molsetc.MultiSitePopulationMethod_swiginit(self, _molsetc.new_MultiSitePopulationMethod(*args))

# Register MultiSitePopulationMethod in _molsetc:
_molsetc.MultiSitePopulationMethod_swigregister(MultiSitePopulationMethod)

class ProtonRedoxMod(HaCompMod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, new_phost_mset: "MolSet"):
        _molsetc.ProtonRedoxMod_swiginit(self, _molsetc.new_ProtonRedoxMod(new_phost_mset))
    __swig_destroy__ = _molsetc.delete_ProtonRedoxMod
    alt_chem_states = property(_molsetc.ProtonRedoxMod_alt_chem_states_get, _molsetc.ProtonRedoxMod_alt_chem_states_set)

    def ClearResAltChemStates(self, pres: "HaResidue") -> "void":
        return _molsetc.ProtonRedoxMod_ClearResAltChemStates(self, pres)

    def ClearAltChemStates(self) -> "void":
        return _molsetc.ProtonRedoxMod_ClearAltChemStates(self)

    def GetNumResAltChemStates(self, pres: "HaResidue") -> "int":
        return _molsetc.ProtonRedoxMod_GetNumResAltChemStates(self, pres)

    def GetResAltChemState(self, pres: "HaResidue", alt_state_idx: "int") -> "AltChemState *":
        return _molsetc.ProtonRedoxMod_GetResAltChemState(self, pres, alt_state_idx)

    def GetResAltChemStateByAtName(self, pres: "HaResidue", at_name: "char const *") -> "AltChemState *":
        return _molsetc.ProtonRedoxMod_GetResAltChemStateByAtName(self, pres, at_name)
    heme_model = property(_molsetc.ProtonRedoxMod_heme_model_get, _molsetc.ProtonRedoxMod_heme_model_set)

    def PrintResPKa(self, pres: "HaResidue") -> "void":
        return _molsetc.ProtonRedoxMod_PrintResPKa(self, pres)

    def AddAltChemState(self, pgrp: "AtomGroup") -> "AltChemState *":
        return _molsetc.ProtonRedoxMod_AddAltChemState(self, pgrp)

    def SetStdResPKa(self, pres: "HaResidue", set_redox_pot: "int") -> "int":
        return _molsetc.ProtonRedoxMod_SetStdResPKa(self, pres, set_redox_pot)

    def SetStdResPKa_G1(self, pres: "HaResidue", set_redox_pot: "int") -> "int":
        return _molsetc.ProtonRedoxMod_SetStdResPKa_G1(self, pres, set_redox_pot)

    def SetStdPKa(self) -> "void":
        return _molsetc.ProtonRedoxMod_SetStdPKa(self)

    def SetStdPKa_G1(self) -> "void":
        return _molsetc.ProtonRedoxMod_SetStdPKa_G1(self)

    def CalcPKaForSelection(self, *args) -> "void":
        return _molsetc.ProtonRedoxMod_CalcPKaForSelection(self, *args)

    def SetStdPKforAtName(self, pres: "HaResidue", at_name: "char const *", std_pk_new: "double") -> "bool":
        return _molsetc.ProtonRedoxMod_SetStdPKforAtName(self, pres, at_name, std_pk_new)

    @staticmethod
    def CalcAvgPopMC(inter_mat: "HaMat_double", avg_st_pop: "HaVec_double", alt_st_ene: "HaVec_double", N_mc_cyc: "int"=10000) -> "int":
        return _molsetc.ProtonRedoxMod_CalcAvgPopMC(inter_mat, avg_st_pop, alt_st_ene, N_mc_cyc)

    @staticmethod
    def CalcAvgPopSCF(inter_mat: "HaMat_double", avg_st_pop: "HaVec_double", alt_st_ene: "HaVec_double") -> "int":
        return _molsetc.ProtonRedoxMod_CalcAvgPopSCF(inter_mat, avg_st_pop, alt_st_ene)

    @staticmethod
    def CalcAvgPopPFunc(inter_mat: "HaMat_double", avg_st_pop: "HaVec_double", alt_st_ene: "HaVec_double") -> "int":
        return _molsetc.ProtonRedoxMod_CalcAvgPopPFunc(inter_mat, avg_st_pop, alt_st_ene)

    @staticmethod
    def TestCalcPopFun() -> "int":
        return _molsetc.ProtonRedoxMod_TestCalcPopFun()

    def SetAltStatesActive(self, set_flag: "int") -> "void":
        return _molsetc.ProtonRedoxMod_SetAltStatesActive(self, set_flag)

    def SetResChargesForPH(self, pres: "HaResidue", pH_val: "double") -> "bool":
        return _molsetc.ProtonRedoxMod_SetResChargesForPH(self, pres, pH_val)

    def SetChargesForPH(self, pH_val: "double") -> "bool":
        return _molsetc.ProtonRedoxMod_SetChargesForPH(self, pH_val)

    def SetChargesForCurrentPH(self) -> "bool":
        return _molsetc.ProtonRedoxMod_SetChargesForCurrentPH(self)

    def SetPH(self, new_ph: "double") -> "void":
        return _molsetc.ProtonRedoxMod_SetPH(self, new_ph)

    def GetPH(self) -> "double":
        return _molsetc.ProtonRedoxMod_GetPH(self)
    set_std_redox_pot = property(_molsetc.ProtonRedoxMod_set_std_redox_pot_get, _molsetc.ProtonRedoxMod_set_std_redox_pot_set)
    save_alt_st_inter = property(_molsetc.ProtonRedoxMod_save_alt_st_inter_get, _molsetc.ProtonRedoxMod_save_alt_st_inter_set)
    read_alt_st_inter = property(_molsetc.ProtonRedoxMod_read_alt_st_inter_get, _molsetc.ProtonRedoxMod_read_alt_st_inter_set)
    save_titration_data = property(_molsetc.ProtonRedoxMod_save_titration_data_get, _molsetc.ProtonRedoxMod_save_titration_data_set)
    save_only_redox_titr = property(_molsetc.ProtonRedoxMod_save_only_redox_titr_get, _molsetc.ProtonRedoxMod_save_only_redox_titr_set)
    n_mc_cyc = property(_molsetc.ProtonRedoxMod_n_mc_cyc_get, _molsetc.ProtonRedoxMod_n_mc_cyc_set)
    multi_site_pop_method = property(_molsetc.ProtonRedoxMod_multi_site_pop_method_get, _molsetc.ProtonRedoxMod_multi_site_pop_method_set)
    ph_min = property(_molsetc.ProtonRedoxMod_ph_min_get, _molsetc.ProtonRedoxMod_ph_min_set)
    ph_max = property(_molsetc.ProtonRedoxMod_ph_max_get, _molsetc.ProtonRedoxMod_ph_max_set)
    ph_step = property(_molsetc.ProtonRedoxMod_ph_step_get, _molsetc.ProtonRedoxMod_ph_step_set)
    e0_min = property(_molsetc.ProtonRedoxMod_e0_min_get, _molsetc.ProtonRedoxMod_e0_min_set)
    e0_max = property(_molsetc.ProtonRedoxMod_e0_max_get, _molsetc.ProtonRedoxMod_e0_max_set)
    e0_step = property(_molsetc.ProtonRedoxMod_e0_step_get, _molsetc.ProtonRedoxMod_e0_step_set)
    e0 = property(_molsetc.ProtonRedoxMod_e0_get, _molsetc.ProtonRedoxMod_e0_set)
    ph = property(_molsetc.ProtonRedoxMod_ph_get, _molsetc.ProtonRedoxMod_ph_set)

# Register ProtonRedoxMod in _molsetc:
_molsetc.ProtonRedoxMod_swigregister(ProtonRedoxMod)
SCF_MULTI_SITE_CALC = cvar.SCF_MULTI_SITE_CALC
MC_MULTI_SITE_CALC = cvar.MC_MULTI_SITE_CALC
PFUNC_MULTI_SITE_CALC = cvar.PFUNC_MULTI_SITE_CALC

def ProtonRedoxMod_CalcAvgPopMC(inter_mat: "HaMat_double", avg_st_pop: "HaVec_double", alt_st_ene: "HaVec_double", N_mc_cyc: "int"=10000) -> "int":
    return _molsetc.ProtonRedoxMod_CalcAvgPopMC(inter_mat, avg_st_pop, alt_st_ene, N_mc_cyc)

def ProtonRedoxMod_CalcAvgPopSCF(inter_mat: "HaMat_double", avg_st_pop: "HaVec_double", alt_st_ene: "HaVec_double") -> "int":
    return _molsetc.ProtonRedoxMod_CalcAvgPopSCF(inter_mat, avg_st_pop, alt_st_ene)

def ProtonRedoxMod_CalcAvgPopPFunc(inter_mat: "HaMat_double", avg_st_pop: "HaVec_double", alt_st_ene: "HaVec_double") -> "int":
    return _molsetc.ProtonRedoxMod_CalcAvgPopPFunc(inter_mat, avg_st_pop, alt_st_ene)

def ProtonRedoxMod_TestCalcPopFun() -> "int":
    return _molsetc.ProtonRedoxMod_TestCalcPopFun()


def CreatewxFieldPlaneView(PlView: "PlaneViewOfHaField3D", _MolSet: "MolSet", title: "char const *", OwnerOfView: "int") -> "void":
    return _molsetc.CreatewxFieldPlaneView(PlView, _MolSet, title, OwnerOfView)

def StartHaMainFrameWX() -> "void":
    return _molsetc.StartHaMainFrameWX()


