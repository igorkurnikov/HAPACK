# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pnpsll')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pnpsll')
    _pnpsll = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pnpsll', [dirname(__file__)])
        except ImportError:
            import _pnpsll
            return _pnpsll
        try:
            _mod = imp.load_module('_pnpsll', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pnpsll = swig_import_helper()
    del swig_import_helper
else:
    import _pnpsll
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pnpsll.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _pnpsll.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _pnpsll.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _pnpsll.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _pnpsll.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _pnpsll.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _pnpsll.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _pnpsll.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _pnpsll.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _pnpsll.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _pnpsll.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _pnpsll.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _pnpsll.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _pnpsll.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _pnpsll.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _pnpsll.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _pnpsll.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pnpsll.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pnpsll.new_intp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_intp
    __del__ = lambda self: None

    def assign(self, value: 'int') -> "void":
        return _pnpsll.intp_assign(self, value)

    def value(self) -> "int":
        return _pnpsll.intp_value(self)

    def cast(self) -> "int *":
        return _pnpsll.intp_cast(self)
    if _newclass:
        frompointer = staticmethod(_pnpsll.intp_frompointer)
    else:
        frompointer = _pnpsll.intp_frompointer
intp_swigregister = _pnpsll.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(t: 'int *') -> "intp *":
    return _pnpsll.intp_frompointer(t)
intp_frompointer = _pnpsll.intp_frompointer

class doublep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doublep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doublep, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pnpsll.new_doublep()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_doublep
    __del__ = lambda self: None

    def assign(self, value: 'double') -> "void":
        return _pnpsll.doublep_assign(self, value)

    def value(self) -> "double":
        return _pnpsll.doublep_value(self)

    def cast(self) -> "double *":
        return _pnpsll.doublep_cast(self)
    if _newclass:
        frompointer = staticmethod(_pnpsll.doublep_frompointer)
    else:
        frompointer = _pnpsll.doublep_frompointer
doublep_swigregister = _pnpsll.doublep_swigregister
doublep_swigregister(doublep)

def doublep_frompointer(t: 'double *') -> "doublep *":
    return _pnpsll.doublep_frompointer(t)
doublep_frompointer = _pnpsll.doublep_frompointer


def new_doublepf() -> "double *":
    return _pnpsll.new_doublepf()
new_doublepf = _pnpsll.new_doublepf

def copy_doublepf(value: 'double') -> "double *":
    return _pnpsll.copy_doublepf(value)
copy_doublepf = _pnpsll.copy_doublepf

def delete_doublepf(obj: 'double *') -> "void":
    return _pnpsll.delete_doublepf(obj)
delete_doublepf = _pnpsll.delete_doublepf

def doublepf_assign(obj: 'double *', value: 'double') -> "void":
    return _pnpsll.doublepf_assign(obj, value)
doublepf_assign = _pnpsll.doublepf_assign

def doublepf_value(obj: 'double *') -> "double":
    return _pnpsll.doublepf_value(obj)
doublepf_value = _pnpsll.doublepf_value

def new_intArray(nelements: 'size_t') -> "int *":
    return _pnpsll.new_intArray(nelements)
new_intArray = _pnpsll.new_intArray

def delete_intArray(ary: 'int *') -> "void":
    return _pnpsll.delete_intArray(ary)
delete_intArray = _pnpsll.delete_intArray

def intArray_getitem(ary: 'int *', index: 'size_t') -> "int":
    return _pnpsll.intArray_getitem(ary, index)
intArray_getitem = _pnpsll.intArray_getitem

def intArray_setitem(ary: 'int *', index: 'size_t', value: 'int') -> "void":
    return _pnpsll.intArray_setitem(ary, index, value)
intArray_setitem = _pnpsll.intArray_setitem

def new_boolArray(nelements: 'size_t') -> "bool *":
    return _pnpsll.new_boolArray(nelements)
new_boolArray = _pnpsll.new_boolArray

def delete_boolArray(ary: 'bool *') -> "void":
    return _pnpsll.delete_boolArray(ary)
delete_boolArray = _pnpsll.delete_boolArray

def boolArray_getitem(ary: 'bool *', index: 'size_t') -> "bool":
    return _pnpsll.boolArray_getitem(ary, index)
boolArray_getitem = _pnpsll.boolArray_getitem

def boolArray_setitem(ary: 'bool *', index: 'size_t', value: 'bool') -> "void":
    return _pnpsll.boolArray_setitem(ary, index, value)
boolArray_setitem = _pnpsll.boolArray_setitem

def new_floatArray(nelements: 'size_t') -> "float *":
    return _pnpsll.new_floatArray(nelements)
new_floatArray = _pnpsll.new_floatArray

def delete_floatArray(ary: 'float *') -> "void":
    return _pnpsll.delete_floatArray(ary)
delete_floatArray = _pnpsll.delete_floatArray

def floatArray_getitem(ary: 'float *', index: 'size_t') -> "float":
    return _pnpsll.floatArray_getitem(ary, index)
floatArray_getitem = _pnpsll.floatArray_getitem

def floatArray_setitem(ary: 'float *', index: 'size_t', value: 'float') -> "void":
    return _pnpsll.floatArray_setitem(ary, index, value)
floatArray_setitem = _pnpsll.floatArray_setitem
class vectorf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorf, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pnpsll.vectorf_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pnpsll.vectorf___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pnpsll.vectorf___bool__(self)

    def __len__(self) -> "std::vector< float >::size_type":
        return _pnpsll.vectorf___len__(self)

    def __getslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "std::vector< float,std::allocator< float > > *":
        return _pnpsll.vectorf___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pnpsll.vectorf___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "void":
        return _pnpsll.vectorf___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pnpsll.vectorf___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        return _pnpsll.vectorf___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pnpsll.vectorf___setitem__(self, *args)

    def pop(self) -> "std::vector< float >::value_type":
        return _pnpsll.vectorf_pop(self)

    def append(self, x: 'std::vector< float >::value_type const &') -> "void":
        return _pnpsll.vectorf_append(self, x)

    def empty(self) -> "bool":
        return _pnpsll.vectorf_empty(self)

    def size(self) -> "std::vector< float >::size_type":
        return _pnpsll.vectorf_size(self)

    def swap(self, v: 'vectorf') -> "void":
        return _pnpsll.vectorf_swap(self, v)

    def begin(self) -> "std::vector< float >::iterator":
        return _pnpsll.vectorf_begin(self)

    def end(self) -> "std::vector< float >::iterator":
        return _pnpsll.vectorf_end(self)

    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        return _pnpsll.vectorf_rbegin(self)

    def rend(self) -> "std::vector< float >::reverse_iterator":
        return _pnpsll.vectorf_rend(self)

    def clear(self) -> "void":
        return _pnpsll.vectorf_clear(self)

    def get_allocator(self) -> "std::vector< float >::allocator_type":
        return _pnpsll.vectorf_get_allocator(self)

    def pop_back(self) -> "void":
        return _pnpsll.vectorf_pop_back(self)

    def erase(self, *args) -> "std::vector< float >::iterator":
        return _pnpsll.vectorf_erase(self, *args)

    def __init__(self, *args):
        this = _pnpsll.new_vectorf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< float >::value_type const &') -> "void":
        return _pnpsll.vectorf_push_back(self, x)

    def front(self) -> "std::vector< float >::value_type const &":
        return _pnpsll.vectorf_front(self)

    def back(self) -> "std::vector< float >::value_type const &":
        return _pnpsll.vectorf_back(self)

    def assign(self, n: 'std::vector< float >::size_type', x: 'std::vector< float >::value_type const &') -> "void":
        return _pnpsll.vectorf_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pnpsll.vectorf_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pnpsll.vectorf_insert(self, *args)

    def reserve(self, n: 'std::vector< float >::size_type') -> "void":
        return _pnpsll.vectorf_reserve(self, n)

    def capacity(self) -> "std::vector< float >::size_type":
        return _pnpsll.vectorf_capacity(self)
    __swig_destroy__ = _pnpsll.delete_vectorf
    __del__ = lambda self: None
vectorf_swigregister = _pnpsll.vectorf_swigregister
vectorf_swigregister(vectorf)

PNPSVERSION = _pnpsll.PNPSVERSION
PNP_MAP_IO_STRING_LENGTH = _pnpsll.PNP_MAP_IO_STRING_LENGTH
class PnpsObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PnpsObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PnpsObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pnpsll.new_PnpsObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_PnpsObject
    __del__ = lambda self: None

    def Clear(self) -> "int":
        return _pnpsll.PnpsObject_Clear(self)

    def SetName(self, name_new: 'std::string const &') -> "void":
        return _pnpsll.PnpsObject_SetName(self, name_new)

    def GetName(self) -> "char const *":
        return _pnpsll.PnpsObject_GetName(self)

    def GetCStrName(self) -> "char const *":
        return _pnpsll.PnpsObject_GetCStrName(self)

    def GetStdStrName(self) -> "std::string":
        return _pnpsll.PnpsObject_GetStdStrName(self)
PnpsObject_swigregister = _pnpsll.PnpsObject_swigregister
PnpsObject_swigregister(PnpsObject)

class PNPSApp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PNPSApp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PNPSApp, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetMyAbsRank(self) -> "int":
        return _pnpsll.PNPSApp_GetMyAbsRank(self)

    def GetTotalProc(self) -> "int":
        return _pnpsll.PNPSApp_GetTotalProc(self)

    def GetMyGroupNumber(self) -> "int":
        return _pnpsll.PNPSApp_GetMyGroupNumber(self)

    def GetNumberOfGroups(self) -> "int":
        return _pnpsll.PNPSApp_GetNumberOfGroups(self)

    def GetMyRankInGroup(self) -> "int":
        return _pnpsll.PNPSApp_GetMyRankInGroup(self)

    def GetNumProcsInMyGroup(self) -> "int":
        return _pnpsll.PNPSApp_GetNumProcsInMyGroup(self)

    def GetMyGroupLeader(self) -> "int":
        return _pnpsll.PNPSApp_GetMyGroupLeader(self)

    def GetMaster(self) -> "int":
        return _pnpsll.PNPSApp_GetMaster(self)

    def GetNumProcsInGroup(self, GroupNumber: 'int') -> "int":
        return _pnpsll.PNPSApp_GetNumProcsInGroup(self, GroupNumber)

    def AmIGroupLeader(self) -> "bool":
        return _pnpsll.PNPSApp_AmIGroupLeader(self)

    def AmIBigBrother(self) -> "bool":
        return _pnpsll.PNPSApp_AmIBigBrother(self)

    def GetMasterProc(self) -> "int":
        return _pnpsll.PNPSApp_GetMasterProc(self)

    def SendCStr(self, dest: 'int', CStr: 'char const *') -> "int":
        return _pnpsll.PNPSApp_SendCStr(self, dest, CStr)

    def RecvCStr(self, dest: 'int', CStr: 'char *') -> "int":
        return _pnpsll.PNPSApp_RecvCStr(self, dest, CStr)

    def BcastCStr(self, CStr: 'char *', root: 'int'=0) -> "int":
        return _pnpsll.PNPSApp_BcastCStr(self, CStr, root)

    def BcastTiXmlElement(self, Elt: 'TiXmlElement *') -> "TiXmlElement *":
        return _pnpsll.PNPSApp_BcastTiXmlElement(self, Elt)

    def BcastTiXmlElementWithinGroup(self, Elt: 'TiXmlElement *') -> "TiXmlElement *":
        return _pnpsll.PNPSApp_BcastTiXmlElementWithinGroup(self, Elt)

    def GetNumOfThreads(self) -> "int":
        return _pnpsll.PNPSApp_GetNumOfThreads(self)

    def SetNumOfThreads(self, m_NumOfThread: 'int const') -> "int":
        return _pnpsll.PNPSApp_SetNumOfThreads(self, m_NumOfThread)
    if _newclass:
        InitPNPSApp = staticmethod(_pnpsll.PNPSApp_InitPNPSApp)
    else:
        InitPNPSApp = _pnpsll.PNPSApp_InitPNPSApp
    if _newclass:
        DeletePNPSApp = staticmethod(_pnpsll.PNPSApp_DeletePNPSApp)
    else:
        DeletePNPSApp = _pnpsll.PNPSApp_DeletePNPSApp
    if _newclass:
        GetPNPSApp = staticmethod(_pnpsll.PNPSApp_GetPNPSApp)
    else:
        GetPNPSApp = _pnpsll.PNPSApp_GetPNPSApp

    def DropArray(self, source: 'Bytef *', sourceLen: 'uLong') -> "int":
        return _pnpsll.PNPSApp_DropArray(self, source, sourceLen)

    def PullArray(self, Out: 'Bytef *', id: 'int') -> "int":
        return _pnpsll.PNPSApp_PullArray(self, Out, id)
    if _newclass:
        compress3 = staticmethod(_pnpsll.PNPSApp_compress3)
    else:
        compress3 = _pnpsll.PNPSApp_compress3
    if _newclass:
        AddProcessNumberToFileName = staticmethod(_pnpsll.PNPSApp_AddProcessNumberToFileName)
    else:
        AddProcessNumberToFileName = _pnpsll.PNPSApp_AddProcessNumberToFileName

    def AddMyAbsProcNumberToFileName(self, out: 'char *', arg3: 'char const *') -> "void":
        return _pnpsll.PNPSApp_AddMyAbsProcNumberToFileName(self, out, arg3)

    def AddMyGroupNumberToFileName(self, out: 'char *', arg3: 'char const *') -> "void":
        return _pnpsll.PNPSApp_AddMyGroupNumberToFileName(self, out, arg3)

    def AddMyGroupNumberToFileNameStdStr(self, filename: 'std::string *') -> "void":
        return _pnpsll.PNPSApp_AddMyGroupNumberToFileNameStdStr(self, filename)

    def AddMyGroupStringNameToFileNameStdStr(self, filename: 'std::string *') -> "void":
        return _pnpsll.PNPSApp_AddMyGroupStringNameToFileNameStdStr(self, filename)

    def AddGroupStringNameToFileNameStdStr(self, filename: 'std::string *', GroupNumber: 'int') -> "void":
        return _pnpsll.PNPSApp_AddGroupStringNameToFileNameStdStr(self, filename, GroupNumber)

    def AddGroupStringNameToFileNameCStr(self, filename: 'char const *', GroupNumber: 'int') -> "char *":
        return _pnpsll.PNPSApp_AddGroupStringNameToFileNameCStr(self, filename, GroupNumber)
    if _newclass:
        RedirectOutputToFile = staticmethod(_pnpsll.PNPSApp_RedirectOutputToFile)
    else:
        RedirectOutputToFile = _pnpsll.PNPSApp_RedirectOutputToFile
    if _newclass:
        RedirectOutputToStd = staticmethod(_pnpsll.PNPSApp_RedirectOutputToStd)
    else:
        RedirectOutputToStd = _pnpsll.PNPSApp_RedirectOutputToStd

    def HaveTimeToRun(self) -> "bool":
        return _pnpsll.PNPSApp_HaveTimeToRun(self)
    __swig_setmethods__["bTimerOn"] = _pnpsll.PNPSApp_bTimerOn_set
    __swig_getmethods__["bTimerOn"] = _pnpsll.PNPSApp_bTimerOn_get
    if _newclass:
        bTimerOn = _swig_property(_pnpsll.PNPSApp_bTimerOn_get, _pnpsll.PNPSApp_bTimerOn_set)

    def SetWallTimeToRun(self, walltime: 'char const *') -> "int":
        return _pnpsll.PNPSApp_SetWallTimeToRun(self, walltime)
    __swig_setmethods__["StartTime"] = _pnpsll.PNPSApp_StartTime_set
    __swig_getmethods__["StartTime"] = _pnpsll.PNPSApp_StartTime_get
    if _newclass:
        StartTime = _swig_property(_pnpsll.PNPSApp_StartTime_get, _pnpsll.PNPSApp_StartTime_set)
    __swig_setmethods__["SecondsToRun"] = _pnpsll.PNPSApp_SecondsToRun_set
    __swig_getmethods__["SecondsToRun"] = _pnpsll.PNPSApp_SecondsToRun_get
    if _newclass:
        SecondsToRun = _swig_property(_pnpsll.PNPSApp_SecondsToRun_get, _pnpsll.PNPSApp_SecondsToRun_set)
PNPSApp_swigregister = _pnpsll.PNPSApp_swigregister
PNPSApp_swigregister(PNPSApp)

def PNPSApp_InitPNPSApp(*args) -> "int":
    return _pnpsll.PNPSApp_InitPNPSApp(*args)
PNPSApp_InitPNPSApp = _pnpsll.PNPSApp_InitPNPSApp

def PNPSApp_DeletePNPSApp() -> "int":
    return _pnpsll.PNPSApp_DeletePNPSApp()
PNPSApp_DeletePNPSApp = _pnpsll.PNPSApp_DeletePNPSApp

def PNPSApp_GetPNPSApp() -> "PNPSApp *":
    return _pnpsll.PNPSApp_GetPNPSApp()
PNPSApp_GetPNPSApp = _pnpsll.PNPSApp_GetPNPSApp

def PNPSApp_compress3(dest: 'Bytef **', destLen: 'uLongf *', source: 'Bytef const *', sourceLen: 'uLong', level: 'int') -> "int":
    return _pnpsll.PNPSApp_compress3(dest, destLen, source, sourceLen, level)
PNPSApp_compress3 = _pnpsll.PNPSApp_compress3

def PNPSApp_AddProcessNumberToFileName(out: 'char *', arg3: 'char const *', pref: 'char const *', pnum: 'int', totnum: 'int') -> "void":
    return _pnpsll.PNPSApp_AddProcessNumberToFileName(out, arg3, pref, pnum, totnum)
PNPSApp_AddProcessNumberToFileName = _pnpsll.PNPSApp_AddProcessNumberToFileName

def PNPSApp_RedirectOutputToFile(FileName: 'char const *', AddGroupStringName: 'bool') -> "int":
    return _pnpsll.PNPSApp_RedirectOutputToFile(FileName, AddGroupStringName)
PNPSApp_RedirectOutputToFile = _pnpsll.PNPSApp_RedirectOutputToFile

def PNPSApp_RedirectOutputToStd() -> "int":
    return _pnpsll.PNPSApp_RedirectOutputToStd()
PNPSApp_RedirectOutputToStd = _pnpsll.PNPSApp_RedirectOutputToStd

class GenericSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenericSolver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pnpsll.delete_GenericSolver
    __del__ = lambda self: None

    def InitZero(self) -> "int":
        return _pnpsll.GenericSolver_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.GenericSolver_Clear(self)

    def ShowParameters(self) -> "int":
        return _pnpsll.GenericSolver_ShowParameters(self)

    def ShowProperties(self) -> "int":
        return _pnpsll.GenericSolver_ShowProperties(self)

    def InitSolver(self) -> "int":
        return _pnpsll.GenericSolver_InitSolver(self)

    def Solve(self) -> "int":
        return _pnpsll.GenericSolver_Solve(self)
GenericSolver_swigregister = _pnpsll.GenericSolver_swigregister
GenericSolver_swigregister(GenericSolver)
cvar = _pnpsll.cvar
MaxNumOfParts = cvar.MaxNumOfParts
MaxNPartSize = cvar.MaxNPartSize

FILE_MAP_GZ = _pnpsll.FILE_MAP_GZ
FILE_MAP_MBN = _pnpsll.FILE_MAP_MBN
FILE_MAP_MB2 = _pnpsll.FILE_MAP_MB2
FILE_MAP_IGB = _pnpsll.FILE_MAP_IGB
FILE_MAP_DX = _pnpsll.FILE_MAP_DX

def TypeOfMapFile(filename: 'char const *') -> "int":
    return _pnpsll.TypeOfMapFile(filename)
TypeOfMapFile = _pnpsll.TypeOfMapFile

def WriteMapGZ(*args) -> "int":
    return _pnpsll.WriteMapGZ(*args)
WriteMapGZ = _pnpsll.WriteMapGZ

def ReadMapGZ(*args) -> "int":
    return _pnpsll.ReadMapGZ(*args)
ReadMapGZ = _pnpsll.ReadMapGZ

def WriteIndexGZinTwoColumns(file: 'gzFile', nmap: 'unsigned int *', GSXYZ: 'unsigned int') -> "int":
    return _pnpsll.WriteIndexGZinTwoColumns(file, nmap, GSXYZ)
WriteIndexGZinTwoColumns = _pnpsll.WriteIndexGZinTwoColumns

def ReadIndexGZfromTwoColumns(file: 'gzFile', nmap: 'unsigned int *', GSXYZ: 'unsigned int') -> "int":
    return _pnpsll.ReadIndexGZfromTwoColumns(file, nmap, GSXYZ)
ReadIndexGZfromTwoColumns = _pnpsll.ReadIndexGZfromTwoColumns

def WriteIndexGZTwoColumns(file: 'gzFile', nmap: 'int *', GSXYZ: 'unsigned int') -> "int":
    return _pnpsll.WriteIndexGZTwoColumns(file, nmap, GSXYZ)
WriteIndexGZTwoColumns = _pnpsll.WriteIndexGZTwoColumns

def ReadIndexGZTwoColumns(file: 'gzFile', nmap: 'int *', GSXYZ: 'unsigned int') -> "int":
    return _pnpsll.ReadIndexGZTwoColumns(file, nmap, GSXYZ)
ReadIndexGZTwoColumns = _pnpsll.ReadIndexGZTwoColumns

def WriteMapGZOneColumns(file: 'gzFile', nmap: 'float *', N: 'unsigned int', coef: 'float'=1.0) -> "int":
    return _pnpsll.WriteMapGZOneColumns(file, nmap, N, coef)
WriteMapGZOneColumns = _pnpsll.WriteMapGZOneColumns

def ReadMapGZOneColumns(file: 'gzFile', nmap: 'float *', N: 'unsigned int', coef: 'float'=1.0) -> "int":
    return _pnpsll.ReadMapGZOneColumns(file, nmap, N, coef)
ReadMapGZOneColumns = _pnpsll.ReadMapGZOneColumns

def WriteMapGZTwoColumns(file: 'gzFile', nmap: 'float *', N: 'unsigned int', coef: 'float'=1.0) -> "int":
    return _pnpsll.WriteMapGZTwoColumns(file, nmap, N, coef)
WriteMapGZTwoColumns = _pnpsll.WriteMapGZTwoColumns

def ReadMapGZTwoColumns(file: 'gzFile', nmap: 'float *', N: 'unsigned int', coef: 'float'=1.0) -> "int":
    return _pnpsll.ReadMapGZTwoColumns(file, nmap, N, coef)
ReadMapGZTwoColumns = _pnpsll.ReadMapGZTwoColumns

def ConvertToPBC(V: 'float *', GS_X: 'int', GS_Y: 'int', GS_Z: 'int', pbcX: 'bool', pbcY: 'bool', pbcZ: 'bool') -> "int":
    return _pnpsll.ConvertToPBC(V, GS_X, GS_Y, GS_Z, pbcX, pbcY, pbcZ)
ConvertToPBC = _pnpsll.ConvertToPBC

def RemovePBC(V: 'float *', GS_X: 'int', GS_Y: 'int', GS_Z: 'int', pbcX: 'bool', pbcY: 'bool', pbcZ: 'bool') -> "int":
    return _pnpsll.RemovePBC(V, GS_X, GS_Y, GS_Z, pbcX, pbcY, pbcZ)
RemovePBC = _pnpsll.RemovePBC
class VectorIntField3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorIntField3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorIntField3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pnpsll.new_VectorIntField3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_VectorIntField3D
    __del__ = lambda self: None
    INTERNAL_ALLOC = _pnpsll.VectorIntField3D_INTERNAL_ALLOC
    EXTERNAL_ALLOC = _pnpsll.VectorIntField3D_EXTERNAL_ALLOC
    __swig_setmethods__["amode"] = _pnpsll.VectorIntField3D_amode_set
    __swig_getmethods__["amode"] = _pnpsll.VectorIntField3D_amode_get
    if _newclass:
        amode = _swig_property(_pnpsll.VectorIntField3D_amode_get, _pnpsll.VectorIntField3D_amode_set)

    def InitZero(self) -> "int":
        return _pnpsll.VectorIntField3D_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.VectorIntField3D_Clear(self)
    __swig_setmethods__["GridSize"] = _pnpsll.VectorIntField3D_GridSize_set
    __swig_getmethods__["GridSize"] = _pnpsll.VectorIntField3D_GridSize_get
    if _newclass:
        GridSize = _swig_property(_pnpsll.VectorIntField3D_GridSize_get, _pnpsll.VectorIntField3D_GridSize_set)
    __swig_setmethods__["GridScale"] = _pnpsll.VectorIntField3D_GridScale_set
    __swig_getmethods__["GridScale"] = _pnpsll.VectorIntField3D_GridScale_get
    if _newclass:
        GridScale = _swig_property(_pnpsll.VectorIntField3D_GridScale_get, _pnpsll.VectorIntField3D_GridScale_set)
    __swig_setmethods__["Nelem"] = _pnpsll.VectorIntField3D_Nelem_set
    __swig_getmethods__["Nelem"] = _pnpsll.VectorIntField3D_Nelem_get
    if _newclass:
        Nelem = _swig_property(_pnpsll.VectorIntField3D_Nelem_get, _pnpsll.VectorIntField3D_Nelem_set)
    __swig_setmethods__["V"] = _pnpsll.VectorIntField3D_V_set
    __swig_getmethods__["V"] = _pnpsll.VectorIntField3D_V_get
    if _newclass:
        V = _swig_property(_pnpsll.VectorIntField3D_V_get, _pnpsll.VectorIntField3D_V_set)

    def SetVectorField3D(self, gridsize: 'int *', gridscale: 'float', nelem: 'int') -> "int":
        return _pnpsll.VectorIntField3D_SetVectorField3D(self, gridsize, gridscale, nelem)

    def ReadFromFile(self, filename: 'char const *') -> "int":
        return _pnpsll.VectorIntField3D_ReadFromFile(self, filename)

    def WriteToFile(self, filename: 'char const *', Columns: 'int'=2) -> "int":
        return _pnpsll.VectorIntField3D_WriteToFile(self, filename, Columns)

    def GetNelem(self) -> "int":
        return _pnpsll.VectorIntField3D_GetNelem(self)

    def GetNx(self) -> "int":
        return _pnpsll.VectorIntField3D_GetNx(self)

    def GetNy(self) -> "int":
        return _pnpsll.VectorIntField3D_GetNy(self)

    def GetNz(self) -> "int":
        return _pnpsll.VectorIntField3D_GetNz(self)

    def GetValue(self, arg2: 'int', ix: 'int', iy: 'int', iz: 'int') -> "int":
        return _pnpsll.VectorIntField3D_GetValue(self, arg2, ix, iy, iz)

    def SetValue(self, arg2: 'int', ix: 'int', iy: 'int', iz: 'int', val: 'int') -> "void":
        return _pnpsll.VectorIntField3D_SetValue(self, arg2, ix, iy, iz, val)

    def GetValueByGrdNmb(self, arg2: 'int', igrd: 'int') -> "int":
        return _pnpsll.VectorIntField3D_GetValueByGrdNmb(self, arg2, igrd)

    def SetValueByGrdNmb(self, arg2: 'int', igrd: 'int', val: 'int') -> "void":
        return _pnpsll.VectorIntField3D_SetValueByGrdNmb(self, arg2, igrd, val)

    def FillValue(self, val: 'int') -> "void":
        return _pnpsll.VectorIntField3D_FillValue(self, val)
VectorIntField3D_swigregister = _pnpsll.VectorIntField3D_swigregister
VectorIntField3D_swigregister(VectorIntField3D)

class VectorField3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorField3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorField3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pnpsll.new_VectorField3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_VectorField3D
    __del__ = lambda self: None
    INTERNAL_ALLOC = _pnpsll.VectorField3D_INTERNAL_ALLOC
    EXTERNAL_ALLOC = _pnpsll.VectorField3D_EXTERNAL_ALLOC
    __swig_setmethods__["amode"] = _pnpsll.VectorField3D_amode_set
    __swig_getmethods__["amode"] = _pnpsll.VectorField3D_amode_get
    if _newclass:
        amode = _swig_property(_pnpsll.VectorField3D_amode_get, _pnpsll.VectorField3D_amode_set)

    def InitZero(self) -> "int":
        return _pnpsll.VectorField3D_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.VectorField3D_Clear(self)
    __swig_setmethods__["GridSize"] = _pnpsll.VectorField3D_GridSize_set
    __swig_getmethods__["GridSize"] = _pnpsll.VectorField3D_GridSize_get
    if _newclass:
        GridSize = _swig_property(_pnpsll.VectorField3D_GridSize_get, _pnpsll.VectorField3D_GridSize_set)
    __swig_setmethods__["GridScale"] = _pnpsll.VectorField3D_GridScale_set
    __swig_getmethods__["GridScale"] = _pnpsll.VectorField3D_GridScale_get
    if _newclass:
        GridScale = _swig_property(_pnpsll.VectorField3D_GridScale_get, _pnpsll.VectorField3D_GridScale_set)
    __swig_setmethods__["Nelem"] = _pnpsll.VectorField3D_Nelem_set
    __swig_getmethods__["Nelem"] = _pnpsll.VectorField3D_Nelem_get
    if _newclass:
        Nelem = _swig_property(_pnpsll.VectorField3D_Nelem_get, _pnpsll.VectorField3D_Nelem_set)
    __swig_setmethods__["V"] = _pnpsll.VectorField3D_V_set
    __swig_getmethods__["V"] = _pnpsll.VectorField3D_V_get
    if _newclass:
        V = _swig_property(_pnpsll.VectorField3D_V_get, _pnpsll.VectorField3D_V_set)

    def GetField(self, i: 'int const') -> "float *":
        return _pnpsll.VectorField3D_GetField(self, i)

    def SetField(self, i: 'int const', v: 'float *') -> "void":
        return _pnpsll.VectorField3D_SetField(self, i, v)

    def SetVectorField3D(self, gridsize: 'int *', gridscale: 'float', nelem: 'int') -> "int":
        return _pnpsll.VectorField3D_SetVectorField3D(self, gridsize, gridscale, nelem)

    def ReadFromFile(self, filename: 'char const *', coef: 'float'=1.0) -> "int":
        return _pnpsll.VectorField3D_ReadFromFile(self, filename, coef)

    def WriteToFile(self, filename: 'char const *', coef: 'float'=1.0, Columns: 'int'=1) -> "int":
        return _pnpsll.VectorField3D_WriteToFile(self, filename, coef, Columns)

    def RMSD(self, vcomp: 'VectorField3D') -> "float":
        return _pnpsll.VectorField3D_RMSD(self, vcomp)

    def RMSDInternal(self, vcomp: 'VectorField3D') -> "float":
        return _pnpsll.VectorField3D_RMSDInternal(self, vcomp)

    def GetNelem(self) -> "int":
        return _pnpsll.VectorField3D_GetNelem(self)

    def GetNx(self) -> "int":
        return _pnpsll.VectorField3D_GetNx(self)

    def GetNy(self) -> "int":
        return _pnpsll.VectorField3D_GetNy(self)

    def GetNz(self) -> "int":
        return _pnpsll.VectorField3D_GetNz(self)

    def GetValue(self, arg2: 'int', ix: 'int', iy: 'int', iz: 'int') -> "float":
        return _pnpsll.VectorField3D_GetValue(self, arg2, ix, iy, iz)

    def GetInterpolatedValueGrid(self, arg2: 'int', fx: 'float', fy: 'float', fz: 'float') -> "float":
        return _pnpsll.VectorField3D_GetInterpolatedValueGrid(self, arg2, fx, fy, fz)

    def SetValue(self, arg2: 'int', ix: 'int', iy: 'int', iz: 'int', val: 'float') -> "void":
        return _pnpsll.VectorField3D_SetValue(self, arg2, ix, iy, iz, val)

    def GetValueByGrdNmb(self, arg2: 'int', igrd: 'int') -> "float":
        return _pnpsll.VectorField3D_GetValueByGrdNmb(self, arg2, igrd)

    def SetValueByGrdNmb(self, arg2: 'int', igrd: 'int', val: 'float') -> "void":
        return _pnpsll.VectorField3D_SetValueByGrdNmb(self, arg2, igrd, val)

    def FillValue(self, val: 'float') -> "void":
        return _pnpsll.VectorField3D_FillValue(self, val)

    def MultiplyBy(self, coef: 'float') -> "int":
        return _pnpsll.VectorField3D_MultiplyBy(self, coef)

    def MultiplyOneElementBy(self, coef: 'float', Elm2set: 'int') -> "int":
        return _pnpsll.VectorField3D_MultiplyOneElementBy(self, coef, Elm2set)

    def MaskWithVectorField3D(self, VExt: 'VectorField3D', Value: 'float', dvalue: 'float', value2set: 'float') -> "int":
        return _pnpsll.VectorField3D_MaskWithVectorField3D(self, VExt, Value, dvalue, value2set)

    def MaskWithVectorField3DUseOneElement(self, VExt: 'VectorField3D', VExtElm: 'int', Elm2set: 'int', Value: 'float', dvalue: 'float', value2set: 'float') -> "int":
        return _pnpsll.VectorField3D_MaskWithVectorField3DUseOneElement(self, VExt, VExtElm, Elm2set, Value, dvalue, value2set)

    def Copy(self, VExt: 'VectorField3D') -> "int":
        return _pnpsll.VectorField3D_Copy(self, VExt)

    def CopyOneElement(self, VExt: 'VectorField3D', VExtElm: 'int', Elm2set: 'int') -> "int":
        return _pnpsll.VectorField3D_CopyOneElement(self, VExt, VExtElm, Elm2set)

    def AddVectorField3D(self, VExt: 'VectorField3D') -> "int":
        return _pnpsll.VectorField3D_AddVectorField3D(self, VExt)

    def AddOneElementOfVectorField3D(self, VExt: 'VectorField3D', VExtElm: 'int', Elm2set: 'int') -> "int":
        return _pnpsll.VectorField3D_AddOneElementOfVectorField3D(self, VExt, VExtElm, Elm2set)

    def SubtractVectorField3D(self, VExt: 'VectorField3D') -> "int":
        return _pnpsll.VectorField3D_SubtractVectorField3D(self, VExt)

    def SubtractOneElementOfVectorField3D(self, VExt: 'VectorField3D', VExtElm: 'int', Elm2set: 'int') -> "int":
        return _pnpsll.VectorField3D_SubtractOneElementOfVectorField3D(self, VExt, VExtElm, Elm2set)

    def MinMax(self, Elem: 'int', Min: 'float *', Max: 'float *', MinPnt: 'int *', MaxPnt: 'int *') -> "void":
        return _pnpsll.VectorField3D_MinMax(self, Elem, Min, Max, MinPnt, MaxPnt)

    def ReadFromFileAddPBC(self, filename: 'char const *', coef: 'float', pbcX: 'bool', pbcY: 'bool', pbcZ: 'bool') -> "int":
        return _pnpsll.VectorField3D_ReadFromFileAddPBC(self, filename, coef, pbcX, pbcY, pbcZ)

    def ReadFromFileAddPBCandSplitSDMPI4FDaZ(self, filename: 'char const *', coef: 'float', pbc: 'bool *', LocaliZ0: 'int', LocaliZ1: 'int') -> "int":
        return _pnpsll.VectorField3D_ReadFromFileAddPBCandSplitSDMPI4FDaZ(self, filename, coef, pbc, LocaliZ0, LocaliZ1)

    def SplitExtVF3DSDMPI4FDaZ(self, VExt: 'VectorField3D', LocaliZ0: 'int', LocaliZ1: 'int') -> "int":
        return _pnpsll.VectorField3D_SplitExtVF3DSDMPI4FDaZ(self, VExt, LocaliZ0, LocaliZ1)

    def WriteToFileRemovePBC(self, filename: 'char const *', coef: 'float', Columns: 'int', pbcX: 'bool', pbcY: 'bool', pbcZ: 'bool') -> "int":
        return _pnpsll.VectorField3D_WriteToFileRemovePBC(self, filename, coef, Columns, pbcX, pbcY, pbcZ)

    def WriteToFileCombineSDMPIDistrRemovePBC(self, filename: 'char const *', coef: 'float', Columns: 'int', GridSizeGlobal: 'int *', pbc: 'bool *', LocaliZ0: 'int', LocaliZ1: 'int') -> "int":
        return _pnpsll.VectorField3D_WriteToFileCombineSDMPIDistrRemovePBC(self, filename, coef, Columns, GridSizeGlobal, pbc, LocaliZ0, LocaliZ1)

    def CalcLinInterFloat(self, V0: 'float', V1: 'float', x: 'float') -> "float":
        return _pnpsll.VectorField3D_CalcLinInterFloat(self, V0, V1, x)

    def InterpolateFromExt(self, VExt: 'VectorField3D') -> "int":
        return _pnpsll.VectorField3D_InterpolateFromExt(self, VExt)

    def InterpolateBoarderFromExt(self, VExt: 'VectorField3D') -> "int":
        return _pnpsll.VectorField3D_InterpolateBoarderFromExt(self, VExt)

    def InterpolateBoarderFromExtWithMultipl(self, VExt: 'VectorField3D', Multipl: 'float') -> "int":
        return _pnpsll.VectorField3D_InterpolateBoarderFromExtWithMultipl(self, VExt, Multipl)

    def InterpolateInternalBoarderFromExt(self, VExt: 'VectorField3D', InternalBoarderMinGridLev0: 'int *', InternalBoarderMaxGridLev0: 'int *') -> "int":
        return _pnpsll.VectorField3D_InterpolateInternalBoarderFromExt(self, VExt, InternalBoarderMinGridLev0, InternalBoarderMaxGridLev0)

    def InterpolateInternalBoarderFromExtWithMultipl(self, VExt: 'VectorField3D', InternalBoarderMinGridLev0: 'int *', InternalBoarderMaxGridLev0: 'int *', Multipl: 'float') -> "int":
        return _pnpsll.VectorField3D_InterpolateInternalBoarderFromExtWithMultipl(self, VExt, InternalBoarderMinGridLev0, InternalBoarderMaxGridLev0, Multipl)

    def ConvFloatToIntUnitsX(self, Xext: 'float') -> "float":
        return _pnpsll.VectorField3D_ConvFloatToIntUnitsX(self, Xext)

    def ConvFloatToIntUnitsY(self, Yext: 'float') -> "float":
        return _pnpsll.VectorField3D_ConvFloatToIntUnitsY(self, Yext)

    def ConvFloatToIntUnitsZ(self, Zext: 'float') -> "float":
        return _pnpsll.VectorField3D_ConvFloatToIntUnitsZ(self, Zext)

    def ConvIntXYZToGrdPnt(self, Xint: 'float', Yint: 'float', Zint: 'float') -> "int":
        return _pnpsll.VectorField3D_ConvIntXYZToGrdPnt(self, Xint, Yint, Zint)

    def ConvExtXYZToGrdPnt(self, Xext: 'float', Yext: 'float', Zext: 'float') -> "int":
        return _pnpsll.VectorField3D_ConvExtXYZToGrdPnt(self, Xext, Yext, Zext)

    def ConvIntToExtUnitsX(self, Xint: 'float') -> "float":
        return _pnpsll.VectorField3D_ConvIntToExtUnitsX(self, Xint)

    def ConvIntToExtUnitsY(self, Yint: 'float') -> "float":
        return _pnpsll.VectorField3D_ConvIntToExtUnitsY(self, Yint)

    def ConvIntToExtUnitsZ(self, Zint: 'float') -> "float":
        return _pnpsll.VectorField3D_ConvIntToExtUnitsZ(self, Zint)

    def AverageThrLaplas(self, _Mask: 'VectorIntField3D', iter: 'int', MaskNotToDo: 'int') -> "int":
        return _pnpsll.VectorField3D_AverageThrLaplas(self, _Mask, iter, MaskNotToDo)
VectorField3D_swigregister = _pnpsll.VectorField3D_swigregister
VectorField3D_swigregister(VectorField3D)

DO_ONE = _pnpsll.DO_ONE
DO_TWO = _pnpsll.DO_TWO
DO_THREE = _pnpsll.DO_THREE
DO_FOUR = _pnpsll.DO_FOUR
DO_FIVE = _pnpsll.DO_FIVE
DO_SIX = _pnpsll.DO_SIX
SEND_ENERGY = _pnpsll.SEND_ENERGY
class MapsIOData(PnpsObject):
    __swig_setmethods__ = {}
    for _s in [PnpsObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapsIOData, name, value)
    __swig_getmethods__ = {}
    for _s in [PnpsObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MapsIOData, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pnpsll.new_MapsIOData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_MapsIOData
    __del__ = lambda self: None
    __swig_setmethods__["DielectricConstantMap"] = _pnpsll.MapsIOData_DielectricConstantMap_set
    __swig_getmethods__["DielectricConstantMap"] = _pnpsll.MapsIOData_DielectricConstantMap_get
    if _newclass:
        DielectricConstantMap = _swig_property(_pnpsll.MapsIOData_DielectricConstantMap_get, _pnpsll.MapsIOData_DielectricConstantMap_set)
    __swig_setmethods__["DiffusionMapFile"] = _pnpsll.MapsIOData_DiffusionMapFile_set
    __swig_getmethods__["DiffusionMapFile"] = _pnpsll.MapsIOData_DiffusionMapFile_get
    if _newclass:
        DiffusionMapFile = _swig_property(_pnpsll.MapsIOData_DiffusionMapFile_get, _pnpsll.MapsIOData_DiffusionMapFile_set)
    __swig_setmethods__["DynamicChargeMapFile"] = _pnpsll.MapsIOData_DynamicChargeMapFile_set
    __swig_getmethods__["DynamicChargeMapFile"] = _pnpsll.MapsIOData_DynamicChargeMapFile_get
    if _newclass:
        DynamicChargeMapFile = _swig_property(_pnpsll.MapsIOData_DynamicChargeMapFile_get, _pnpsll.MapsIOData_DynamicChargeMapFile_set)
    __swig_setmethods__["StaticChargeMapFile"] = _pnpsll.MapsIOData_StaticChargeMapFile_set
    __swig_getmethods__["StaticChargeMapFile"] = _pnpsll.MapsIOData_StaticChargeMapFile_get
    if _newclass:
        StaticChargeMapFile = _swig_property(_pnpsll.MapsIOData_StaticChargeMapFile_get, _pnpsll.MapsIOData_StaticChargeMapFile_set)
    __swig_setmethods__["PotentialMapFile"] = _pnpsll.MapsIOData_PotentialMapFile_set
    __swig_getmethods__["PotentialMapFile"] = _pnpsll.MapsIOData_PotentialMapFile_get
    if _newclass:
        PotentialMapFile = _swig_property(_pnpsll.MapsIOData_PotentialMapFile_get, _pnpsll.MapsIOData_PotentialMapFile_set)
    __swig_setmethods__["PMFMapFile"] = _pnpsll.MapsIOData_PMFMapFile_set
    __swig_getmethods__["PMFMapFile"] = _pnpsll.MapsIOData_PMFMapFile_get
    if _newclass:
        PMFMapFile = _swig_property(_pnpsll.MapsIOData_PMFMapFile_get, _pnpsll.MapsIOData_PMFMapFile_set)
    __swig_setmethods__["PMFMapFile2"] = _pnpsll.MapsIOData_PMFMapFile2_set
    __swig_getmethods__["PMFMapFile2"] = _pnpsll.MapsIOData_PMFMapFile2_get
    if _newclass:
        PMFMapFile2 = _swig_property(_pnpsll.MapsIOData_PMFMapFile2_get, _pnpsll.MapsIOData_PMFMapFile2_set)
    __swig_setmethods__["NodeIndexingFile"] = _pnpsll.MapsIOData_NodeIndexingFile_set
    __swig_getmethods__["NodeIndexingFile"] = _pnpsll.MapsIOData_NodeIndexingFile_get
    if _newclass:
        NodeIndexingFile = _swig_property(_pnpsll.MapsIOData_NodeIndexingFile_get, _pnpsll.MapsIOData_NodeIndexingFile_set)
    __swig_setmethods__["Mode"] = _pnpsll.MapsIOData_Mode_set
    __swig_getmethods__["Mode"] = _pnpsll.MapsIOData_Mode_get
    if _newclass:
        Mode = _swig_property(_pnpsll.MapsIOData_Mode_get, _pnpsll.MapsIOData_Mode_set)
    Read = _pnpsll.MapsIOData_Read
    Write = _pnpsll.MapsIOData_Write
    Auto = _pnpsll.MapsIOData_Auto
    __swig_setmethods__["ModeStr"] = _pnpsll.MapsIOData_ModeStr_set
    __swig_getmethods__["ModeStr"] = _pnpsll.MapsIOData_ModeStr_get
    if _newclass:
        ModeStr = _swig_property(_pnpsll.MapsIOData_ModeStr_get, _pnpsll.MapsIOData_ModeStr_set)
    __swig_setmethods__["AddGroupStringSuffix"] = _pnpsll.MapsIOData_AddGroupStringSuffix_set
    __swig_getmethods__["AddGroupStringSuffix"] = _pnpsll.MapsIOData_AddGroupStringSuffix_get
    if _newclass:
        AddGroupStringSuffix = _swig_property(_pnpsll.MapsIOData_AddGroupStringSuffix_get, _pnpsll.MapsIOData_AddGroupStringSuffix_set)
    __swig_setmethods__["AddGroupNumberSuffix"] = _pnpsll.MapsIOData_AddGroupNumberSuffix_set
    __swig_getmethods__["AddGroupNumberSuffix"] = _pnpsll.MapsIOData_AddGroupNumberSuffix_get
    if _newclass:
        AddGroupNumberSuffix = _swig_property(_pnpsll.MapsIOData_AddGroupNumberSuffix_get, _pnpsll.MapsIOData_AddGroupNumberSuffix_set)
MapsIOData_swigregister = _pnpsll.MapsIOData_swigregister
MapsIOData_swigregister(MapsIOData)

class NodeIndexing(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeIndexing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeIndexing, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pnpsll.new_NodeIndexing()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_NodeIndexing
    __del__ = lambda self: None

    def InitZero(self) -> "int":
        return _pnpsll.NodeIndexing_InitZero(self)
    Epsilon0 = _pnpsll.NodeIndexing_Epsilon0
    Epsilon1 = _pnpsll.NodeIndexing_Epsilon1
    Epsilon2 = _pnpsll.NodeIndexing_Epsilon2
    Ion0 = _pnpsll.NodeIndexing_Ion0
    Ion1 = _pnpsll.NodeIndexing_Ion1
    Ion2 = _pnpsll.NodeIndexing_Ion2
    Ion3 = _pnpsll.NodeIndexing_Ion3
    Epsilon0Sft = _pnpsll.NodeIndexing_Epsilon0Sft
    Epsilon1Sft = _pnpsll.NodeIndexing_Epsilon1Sft
    Epsilon2Sft = _pnpsll.NodeIndexing_Epsilon2Sft
    Ion0Sft = _pnpsll.NodeIndexing_Ion0Sft
    Ion1Sft = _pnpsll.NodeIndexing_Ion1Sft
    Ion2Sft = _pnpsll.NodeIndexing_Ion2Sft
    Ion3Sft = _pnpsll.NodeIndexing_Ion3Sft
    Flexible = _pnpsll.NodeIndexing_Flexible
    BlackAndWhiteMask = _pnpsll.NodeIndexing_BlackAndWhiteMask
    ChargeMask = _pnpsll.NodeIndexing_ChargeMask
    DielBoarderMask = _pnpsll.NodeIndexing_DielBoarderMask
    DiffIon0BoarderMask = _pnpsll.NodeIndexing_DiffIon0BoarderMask
    DiffIon1BoarderMask = _pnpsll.NodeIndexing_DiffIon1BoarderMask
    DiffIon2BoarderMask = _pnpsll.NodeIndexing_DiffIon2BoarderMask
    DiffIon3BoarderMask = _pnpsll.NodeIndexing_DiffIon3BoarderMask
    BlackAndWhiteMaskSft = _pnpsll.NodeIndexing_BlackAndWhiteMaskSft
    ChargeMaskSft = _pnpsll.NodeIndexing_ChargeMaskSft
    DielBoarderMaskSft = _pnpsll.NodeIndexing_DielBoarderMaskSft
    DiffIon0BoarderMaskSft = _pnpsll.NodeIndexing_DiffIon0BoarderMaskSft
    DiffIon1BoarderMaskSft = _pnpsll.NodeIndexing_DiffIon1BoarderMaskSft
    DiffIon2BoarderMaskSft = _pnpsll.NodeIndexing_DiffIon2BoarderMaskSft
    DiffIon3BoarderMaskSft = _pnpsll.NodeIndexing_DiffIon3BoarderMaskSft
    DielConst = _pnpsll.NodeIndexing_DielConst
    DiffConst = _pnpsll.NodeIndexing_DiffConst
    Conc = _pnpsll.NodeIndexing_Conc
    Charge = _pnpsll.NodeIndexing_Charge
    __swig_setmethods__["EpsilonField"] = _pnpsll.NodeIndexing_EpsilonField_set
    __swig_getmethods__["EpsilonField"] = _pnpsll.NodeIndexing_EpsilonField_get
    if _newclass:
        EpsilonField = _swig_property(_pnpsll.NodeIndexing_EpsilonField_get, _pnpsll.NodeIndexing_EpsilonField_set)
    __swig_setmethods__["EpsilonFieldSft"] = _pnpsll.NodeIndexing_EpsilonFieldSft_set
    __swig_getmethods__["EpsilonFieldSft"] = _pnpsll.NodeIndexing_EpsilonFieldSft_get
    if _newclass:
        EpsilonFieldSft = _swig_property(_pnpsll.NodeIndexing_EpsilonFieldSft_get, _pnpsll.NodeIndexing_EpsilonFieldSft_set)
    __swig_setmethods__["IonField"] = _pnpsll.NodeIndexing_IonField_set
    __swig_getmethods__["IonField"] = _pnpsll.NodeIndexing_IonField_get
    if _newclass:
        IonField = _swig_property(_pnpsll.NodeIndexing_IonField_get, _pnpsll.NodeIndexing_IonField_set)
    __swig_setmethods__["IonFieldSft"] = _pnpsll.NodeIndexing_IonFieldSft_set
    __swig_getmethods__["IonFieldSft"] = _pnpsll.NodeIndexing_IonFieldSft_get
    if _newclass:
        IonFieldSft = _swig_property(_pnpsll.NodeIndexing_IonFieldSft_get, _pnpsll.NodeIndexing_IonFieldSft_set)
    __swig_setmethods__["DiffBoarderMask"] = _pnpsll.NodeIndexing_DiffBoarderMask_set
    __swig_getmethods__["DiffBoarderMask"] = _pnpsll.NodeIndexing_DiffBoarderMask_get
    if _newclass:
        DiffBoarderMask = _swig_property(_pnpsll.NodeIndexing_DiffBoarderMask_get, _pnpsll.NodeIndexing_DiffBoarderMask_set)
    __swig_setmethods__["DiffBoarderMaskSft"] = _pnpsll.NodeIndexing_DiffBoarderMaskSft_set
    __swig_getmethods__["DiffBoarderMaskSft"] = _pnpsll.NodeIndexing_DiffBoarderMaskSft_get
    if _newclass:
        DiffBoarderMaskSft = _swig_property(_pnpsll.NodeIndexing_DiffBoarderMaskSft_get, _pnpsll.NodeIndexing_DiffBoarderMaskSft_set)
    __swig_setmethods__["GridSize"] = _pnpsll.NodeIndexing_GridSize_set
    __swig_getmethods__["GridSize"] = _pnpsll.NodeIndexing_GridSize_get
    if _newclass:
        GridSize = _swig_property(_pnpsll.NodeIndexing_GridSize_get, _pnpsll.NodeIndexing_GridSize_set)
    __swig_setmethods__["GridScale"] = _pnpsll.NodeIndexing_GridScale_set
    __swig_getmethods__["GridScale"] = _pnpsll.NodeIndexing_GridScale_get
    if _newclass:
        GridScale = _swig_property(_pnpsll.NodeIndexing_GridScale_get, _pnpsll.NodeIndexing_GridScale_set)
    __swig_setmethods__["Eps"] = _pnpsll.NodeIndexing_Eps_set
    __swig_getmethods__["Eps"] = _pnpsll.NodeIndexing_Eps_get
    if _newclass:
        Eps = _swig_property(_pnpsll.NodeIndexing_Eps_get, _pnpsll.NodeIndexing_Eps_set)
    __swig_setmethods__["D"] = _pnpsll.NodeIndexing_D_set
    __swig_getmethods__["D"] = _pnpsll.NodeIndexing_D_get
    if _newclass:
        D = _swig_property(_pnpsll.NodeIndexing_D_get, _pnpsll.NodeIndexing_D_set)
    __swig_setmethods__["C"] = _pnpsll.NodeIndexing_C_set
    __swig_getmethods__["C"] = _pnpsll.NodeIndexing_C_get
    if _newclass:
        C = _swig_property(_pnpsll.NodeIndexing_C_get, _pnpsll.NodeIndexing_C_set)
    __swig_setmethods__["NIonsTypes"] = _pnpsll.NodeIndexing_NIonsTypes_set
    __swig_getmethods__["NIonsTypes"] = _pnpsll.NodeIndexing_NIonsTypes_get
    if _newclass:
        NIonsTypes = _swig_property(_pnpsll.NodeIndexing_NIonsTypes_get, _pnpsll.NodeIndexing_NIonsTypes_set)
    __swig_setmethods__["IonsQ"] = _pnpsll.NodeIndexing_IonsQ_set
    __swig_getmethods__["IonsQ"] = _pnpsll.NodeIndexing_IonsQ_get
    if _newclass:
        IonsQ = _swig_property(_pnpsll.NodeIndexing_IonsQ_get, _pnpsll.NodeIndexing_IonsQ_set)
    __swig_setmethods__["NIndex"] = _pnpsll.NodeIndexing_NIndex_set
    __swig_getmethods__["NIndex"] = _pnpsll.NodeIndexing_NIndex_get
    if _newclass:
        NIndex = _swig_property(_pnpsll.NodeIndexing_NIndex_get, _pnpsll.NodeIndexing_NIndex_set)
    __swig_setmethods__["Q"] = _pnpsll.NodeIndexing_Q_set
    __swig_getmethods__["Q"] = _pnpsll.NodeIndexing_Q_get
    if _newclass:
        Q = _swig_property(_pnpsll.NodeIndexing_Q_get, _pnpsll.NodeIndexing_Q_set)
    __swig_setmethods__["PBC"] = _pnpsll.NodeIndexing_PBC_set
    __swig_getmethods__["PBC"] = _pnpsll.NodeIndexing_PBC_get
    if _newclass:
        PBC = _swig_property(_pnpsll.NodeIndexing_PBC_get, _pnpsll.NodeIndexing_PBC_set)

    def SetNoPBC(self) -> "int":
        return _pnpsll.NodeIndexing_SetNoPBC(self)

    def SetPBC(self, pbcX: 'bool', pbcY: 'bool', pbcZ: 'bool') -> "int":
        return _pnpsll.NodeIndexing_SetPBC(self, pbcX, pbcY, pbcZ)
    __swig_setmethods__["QNum"] = _pnpsll.NodeIndexing_QNum_set
    __swig_getmethods__["QNum"] = _pnpsll.NodeIndexing_QNum_get
    if _newclass:
        QNum = _swig_property(_pnpsll.NodeIndexing_QNum_get, _pnpsll.NodeIndexing_QNum_set)

    def GetNx(self) -> "int":
        return _pnpsll.NodeIndexing_GetNx(self)

    def GetNy(self) -> "int":
        return _pnpsll.NodeIndexing_GetNy(self)

    def GetNz(self) -> "int":
        return _pnpsll.NodeIndexing_GetNz(self)

    def GetDielConstInUse(self, i: 'int') -> "float":
        return _pnpsll.NodeIndexing_GetDielConstInUse(self, i)

    def SetDielConstInUse(self, i: 'int', Val: 'float') -> "void":
        return _pnpsll.NodeIndexing_SetDielConstInUse(self, i, Val)

    def SetNNodes(self, gridsize: 'unsigned int *', gridscale: 'float') -> "int":
        return _pnpsll.NodeIndexing_SetNNodes(self, gridsize, gridscale)

    def SetBlackAndWhiteNodes(self, FirstNode: 'int'=0) -> "int":
        return _pnpsll.NodeIndexing_SetBlackAndWhiteNodes(self, FirstNode)

    def SetIndexFieldFromIntArray(self, arr: 'int *', mask: 'NodeIndexing::NodeIndexDescriptor', sft: 'NodeIndexing::NodeIndexDescriptor') -> "int":
        return _pnpsll.NodeIndexing_SetIndexFieldFromIntArray(self, arr, mask, sft)

    def SetIonAccess(self, DiffusionsMaps: 'float **') -> "int":
        return _pnpsll.NodeIndexing_SetIonAccess(self, DiffusionsMaps)

    def GetCMap(self, FieldType: 'NodeIndexing::NodeIndexDescriptor', mask: 'NodeIndex') -> "float *":
        return _pnpsll.NodeIndexing_GetCMap(self, FieldType, mask)

    def GetIntArrayFromIndexField(self, FieldType: 'NodeIndexing::NodeIndexDescriptor', mask: 'NodeIndex') -> "int *":
        return _pnpsll.NodeIndexing_GetIntArrayFromIndexField(self, FieldType, mask)

    def GetField(self, FieldType: 'NodeIndexing::NodeIndexDescriptor', mask: 'NodeIndexing::NodeIndexDescriptor', Map: 'float *'=None) -> "float *":
        return _pnpsll.NodeIndexing_GetField(self, FieldType, mask, Map)

    def CalcDielBoarder(self) -> "int":
        return _pnpsll.NodeIndexing_CalcDielBoarder(self)

    def CalcDiffBoarder(self) -> "int":
        return _pnpsll.NodeIndexing_CalcDiffBoarder(self)

    def InsertSphereInDielMap(self, r: 'float *', R: 'float', Value: 'int') -> "int":
        return _pnpsll.NodeIndexing_InsertSphereInDielMap(self, r, R, Value)

    def CheckBoarder4Q(self) -> "int":
        return _pnpsll.NodeIndexing_CheckBoarder4Q(self)

    def CheckNodeIndex(self) -> "int":
        return _pnpsll.NodeIndexing_CheckNodeIndex(self)

    def RemoveBadDiffusionPoints(self) -> "int":
        return _pnpsll.NodeIndexing_RemoveBadDiffusionPoints(self)

    def SetChargeMapFromArray(self, q: 'float *') -> "int":
        return _pnpsll.NodeIndexing_SetChargeMapFromArray(self, q)

    def SetChargeMapFromArrayNoQonBoarder(self, q: 'float *') -> "int":
        return _pnpsll.NodeIndexing_SetChargeMapFromArrayNoQonBoarder(self, q)

    def SetChargeMapToZero(self) -> "int":
        return _pnpsll.NodeIndexing_SetChargeMapToZero(self)

    def GetChargeArray(self) -> "float *":
        return _pnpsll.NodeIndexing_GetChargeArray(self)

    def GetChargeIndex(self) -> "int *":
        return _pnpsll.NodeIndexing_GetChargeIndex(self)

    def ReadFromFile(self, filename: 'char const *') -> "int":
        return _pnpsll.NodeIndexing_ReadFromFile(self, filename)

    def ConvertToPBC(self, V: 'NodeIndex *', GS_X: 'int', GS_Y: 'int', GS_Z: 'int', pbcX: 'bool', pbcY: 'bool', pbcZ: 'bool') -> "int":
        return _pnpsll.NodeIndexing_ConvertToPBC(self, V, GS_X, GS_Y, GS_Z, pbcX, pbcY, pbcZ)

    def ReadFromFileAddPBC(self, filename: 'char const *', pbcX: 'bool', pbcY: 'bool', pbcZ: 'bool') -> "int":
        return _pnpsll.NodeIndexing_ReadFromFileAddPBC(self, filename, pbcX, pbcY, pbcZ)

    def ReadFromFile4SDMPI(self, filename: 'char const *', World: 'ContWorld') -> "int":
        return _pnpsll.NodeIndexing_ReadFromFile4SDMPI(self, filename, World)

    def WriteToFile(self, filename: 'char const *') -> "int":
        return _pnpsll.NodeIndexing_WriteToFile(self, filename)

    def GetMyPart4MPI(self, World: 'ContWorld', NIndexGlobal: 'NodeIndexing'=None) -> "int":
        return _pnpsll.NodeIndexing_GetMyPart4MPI(self, World, NIndexGlobal)

    def GetCentralPartFromNIExtMyPart4MPI(self, NIExt: 'NodeIndexing') -> "int":
        return _pnpsll.NodeIndexing_GetCentralPartFromNIExtMyPart4MPI(self, NIExt)

    def GetDiel(self, i: 'int', node: 'int') -> "int":
        return _pnpsll.NodeIndexing_GetDiel(self, i, node)

    def GetDielFloat(self, i: 'int', node: 'int') -> "float":
        return _pnpsll.NodeIndexing_GetDielFloat(self, i, node)

    def SetSCharDielMapForGAPS(self, CDiel: 'signed char **', gapsEps: 'float *') -> "int":
        return _pnpsll.NodeIndexing_SetSCharDielMapForGAPS(self, CDiel, gapsEps)

    def SetDiel(self, i: 'int', node: 'int', Val: 'int') -> "void":
        return _pnpsll.NodeIndexing_SetDiel(self, i, node, Val)

    def GetIonField(self, i: 'int', node: 'int') -> "int":
        return _pnpsll.NodeIndexing_GetIonField(self, i, node)

    def GetDiffFloat(self, i: 'int', node: 'int') -> "float":
        return _pnpsll.NodeIndexing_GetDiffFloat(self, i, node)

    def GetDiffDouble(self, i: 'int', node: 'int') -> "double":
        return _pnpsll.NodeIndexing_GetDiffDouble(self, i, node)

    def GetConcFloat(self, i: 'int', node: 'int') -> "float":
        return _pnpsll.NodeIndexing_GetConcFloat(self, i, node)

    def SetIonField(self, i: 'int', node: 'int', Val: 'int') -> "void":
        return _pnpsll.NodeIndexing_SetIonField(self, i, node, Val)

    def GetDiffZeroInd(self) -> "int":
        return _pnpsll.NodeIndexing_GetDiffZeroInd(self)

    def SetDiffToZero(self, ion: 'int', node: 'int') -> "void":
        return _pnpsll.NodeIndexing_SetDiffToZero(self, ion, node)
NodeIndexing_swigregister = _pnpsll.NodeIndexing_swigregister
NodeIndexing_swigregister(NodeIndexing)
NodeIndexMaxValues = cvar.NodeIndexMaxValues
MaxIonTypes = cvar.MaxIonTypes

class ContWorld(PnpsObject):
    """Class for continuum representation of system"""

    __swig_setmethods__ = {}
    for _s in [PnpsObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContWorld, name, value)
    __swig_getmethods__ = {}
    for _s in [PnpsObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContWorld, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """Class for continuum representation of system"""
        this = _pnpsll.new_ContWorld(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __init__(self,
    		GridSize=[65,65,65],
    		GridScale=2.0,
    		PBC=[False,False,False],
    		Qions=None,
    		Verbose=True):
    	"""ContWorld constructor
    	Input Parameters:
    		GridSize=[int,int,int], default=[65,65,65]
    			System grid size
    		GridScale=float, default=2.0
    			Grid scale in grids/Angstroms
    		PBC=[Bool, Bool, Bool], default=[False,False,False]
    			Set periodicity in X,Y,Z dimentions
    		Qions=None|[float, float], default=None
    			charges of mobile ions
    			Examples:
    				None for no module charges
    				[1.0,-1.0] for 2 types of mobile ions with unit charges +1 and -1
    		Verbose=bool, default=True
    			Print world parameters
    	Returned value:
    		ContWorld - instance of ContWorld

    	Example:
    		contworld=pnpmod.ContWorld(
    			GridSize=[65,65,65],
    			GridScale=1.0,
    			PBC=[True,True,False],
    			Qions=[1.0,-1.0]
    			)
    	"""
    #validate input
    #GridSize
    	if not (type(GridSize) is list or type(GridSize) is tuple):
    		raise TypeError("ContWorld.__init__: GridSize must be list of three integers")
    	if len(GridSize)!=3:
    		raise TypeError("ContWorld.__init__:GridSize must be list of three integers")
    	for i in range(3):
    		if not isinstance( GridSize[i], int ):
    			raise TypeError("ContWorld.__init__: GridSize must be list of three integers")

    #GridScale
    	if isinstance(GridScale, int):
    		GridScale=float(GridScale)
    	if not isinstance(GridScale,  float):
    		raise TypeError("ContWorld.__init__: GridScale must be float")
    	if GridScale<=0.0:
    		raise ValueError("ContWorld.__init__: GridScale must be positive")

    #PBC
    	if not (type(PBC) is list or type(PBC) is tuple):
    		raise TypeError("ContWorld.__init__: PBC must be list of three bools (True|False)")
    	if len(PBC)!=3:
    		raise TypeError("ContWorld.__init__: PBC must be list of three bools (True|False)")
    	for i in range(3):
    		if isinstance( PBC[i], int):
    			PBC[i]=bool(PBC[i])
    		if not isinstance( PBC[i], bool):
    			raise TypeError("ContWorld.__init__: PBC must be list of three bools (True|False)")

    #Qions
    	if Qions!=None:
    		if not (type(Qions) is list or type(Qions) is tuple):
    			raise TypeError("ContWorld.__init__: Qions must be list of floats")
    		for i in range(len(Qions)):
    			if isinstance( Qions[i], int):
    				Qions[i]=float(Qions[i])
    			if not isinstance(Qions[i], float):
    				raise TypeError("ContWorld.__init__: Qions must be list of floats")
    		Qtot=0.0
    		for i in range(len(Qions)):
    			Qtot+=Qions[i]
    		if Qtot>0.0001 or Qtot < -0.0001:
    			raise ValueError("ContWorld.__init__: sum of Qions must be zero")
    #Verbose
    	if isinstance(Verbose, int):
    		Verbose=bool(Verbose)
    	if not isinstance( Verbose, ( bool ) ):
    		raise TypeError("ContWorld.__init__: Verbose must be bools (True|False)")


    #Convert python to c++/c
    	m_GridSize=new_intArray(3)
    	for i in range(3):intArray_setitem(m_GridSize,i,GridSize[i])
    	m_PBC=new_boolArray(3)

    	for i in range(3):
    		boolArray_setitem(m_PBC,i,PBC[i])
    #add padding for periodicity
    #rem if PBC[i]:
    #	intArray_setitem(m_GridSize,i,intArray_getitem(m_GridSize,i)+2)
    	m_NIonsTypes=0
    	m_Qions=None
    	if Qions!=None and len(Qions)>0:
    		m_NIonsTypes=len(Qions)
    		m_Qions=new_floatArray(3)
    		for i in range(m_NIonsTypes):floatArray_setitem(m_Qions,i,Qions[i])
    #swig auto generated stuff
    	this = _pnpsll.new_ContWorld(m_GridSize, GridScale, m_PBC, m_NIonsTypes, m_Qions)
    	try: self.this.append(this)
    	except: self.this = this
    #delete temporary arrays
    	if m_NIonsTypes!=0:delete_floatArray(m_Qions)
    	delete_boolArray(m_PBC)
    	delete_intArray(m_GridSize)

    	if Verbose:
    		self.Print()

    __swig_destroy__ = _pnpsll.delete_ContWorld
    __del__ = lambda self: None

    def InitZero(self) -> "int":
        return _pnpsll.ContWorld_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.ContWorld_Clear(self)
    __swig_setmethods__["MyRank"] = _pnpsll.ContWorld_MyRank_set
    __swig_getmethods__["MyRank"] = _pnpsll.ContWorld_MyRank_get
    if _newclass:
        MyRank = _swig_property(_pnpsll.ContWorld_MyRank_get, _pnpsll.ContWorld_MyRank_set)
    __swig_setmethods__["NProcs"] = _pnpsll.ContWorld_NProcs_set
    __swig_getmethods__["NProcs"] = _pnpsll.ContWorld_NProcs_get
    if _newclass:
        NProcs = _swig_property(_pnpsll.ContWorld_NProcs_get, _pnpsll.ContWorld_NProcs_set)
    __swig_setmethods__["MyGlobalZ0"] = _pnpsll.ContWorld_MyGlobalZ0_set
    __swig_getmethods__["MyGlobalZ0"] = _pnpsll.ContWorld_MyGlobalZ0_get
    if _newclass:
        MyGlobalZ0 = _swig_property(_pnpsll.ContWorld_MyGlobalZ0_get, _pnpsll.ContWorld_MyGlobalZ0_set)
    __swig_setmethods__["MyGlobalZ1"] = _pnpsll.ContWorld_MyGlobalZ1_set
    __swig_getmethods__["MyGlobalZ1"] = _pnpsll.ContWorld_MyGlobalZ1_get
    if _newclass:
        MyGlobalZ1 = _swig_property(_pnpsll.ContWorld_MyGlobalZ1_get, _pnpsll.ContWorld_MyGlobalZ1_set)
    __swig_setmethods__["MPISpreadWorld"] = _pnpsll.ContWorld_MPISpreadWorld_set
    __swig_getmethods__["MPISpreadWorld"] = _pnpsll.ContWorld_MPISpreadWorld_get
    if _newclass:
        MPISpreadWorld = _swig_property(_pnpsll.ContWorld_MPISpreadWorld_get, _pnpsll.ContWorld_MPISpreadWorld_set)
    __swig_setmethods__["NIonsTypes"] = _pnpsll.ContWorld_NIonsTypes_set
    __swig_getmethods__["NIonsTypes"] = _pnpsll.ContWorld_NIonsTypes_get
    if _newclass:
        NIonsTypes = _swig_property(_pnpsll.ContWorld_NIonsTypes_get, _pnpsll.ContWorld_NIonsTypes_set)
    __swig_setmethods__["IonsQ"] = _pnpsll.ContWorld_IonsQ_set
    __swig_getmethods__["IonsQ"] = _pnpsll.ContWorld_IonsQ_get
    if _newclass:
        IonsQ = _swig_property(_pnpsll.ContWorld_IonsQ_get, _pnpsll.ContWorld_IonsQ_set)
    __swig_setmethods__["GridSize"] = _pnpsll.ContWorld_GridSize_set
    __swig_getmethods__["GridSize"] = _pnpsll.ContWorld_GridSize_get
    if _newclass:
        GridSize = _swig_property(_pnpsll.ContWorld_GridSize_get, _pnpsll.ContWorld_GridSize_set)
    __swig_setmethods__["GridSizeGlobal"] = _pnpsll.ContWorld_GridSizeGlobal_set
    __swig_getmethods__["GridSizeGlobal"] = _pnpsll.ContWorld_GridSizeGlobal_get
    if _newclass:
        GridSizeGlobal = _swig_property(_pnpsll.ContWorld_GridSizeGlobal_get, _pnpsll.ContWorld_GridSizeGlobal_set)
    __swig_setmethods__["GridSizeOriginal"] = _pnpsll.ContWorld_GridSizeOriginal_set
    __swig_getmethods__["GridSizeOriginal"] = _pnpsll.ContWorld_GridSizeOriginal_get
    if _newclass:
        GridSizeOriginal = _swig_property(_pnpsll.ContWorld_GridSizeOriginal_get, _pnpsll.ContWorld_GridSizeOriginal_set)
    __swig_setmethods__["GS_XYZ"] = _pnpsll.ContWorld_GS_XYZ_set
    __swig_getmethods__["GS_XYZ"] = _pnpsll.ContWorld_GS_XYZ_get
    if _newclass:
        GS_XYZ = _swig_property(_pnpsll.ContWorld_GS_XYZ_get, _pnpsll.ContWorld_GS_XYZ_set)
    __swig_setmethods__["GS_XY"] = _pnpsll.ContWorld_GS_XY_set
    __swig_getmethods__["GS_XY"] = _pnpsll.ContWorld_GS_XY_get
    if _newclass:
        GS_XY = _swig_property(_pnpsll.ContWorld_GS_XY_get, _pnpsll.ContWorld_GS_XY_set)
    __swig_setmethods__["GS_X"] = _pnpsll.ContWorld_GS_X_set
    __swig_getmethods__["GS_X"] = _pnpsll.ContWorld_GS_X_get
    if _newclass:
        GS_X = _swig_property(_pnpsll.ContWorld_GS_X_get, _pnpsll.ContWorld_GS_X_set)
    __swig_setmethods__["GS_Y"] = _pnpsll.ContWorld_GS_Y_set
    __swig_getmethods__["GS_Y"] = _pnpsll.ContWorld_GS_Y_get
    if _newclass:
        GS_Y = _swig_property(_pnpsll.ContWorld_GS_Y_get, _pnpsll.ContWorld_GS_Y_set)
    __swig_setmethods__["GS_Z"] = _pnpsll.ContWorld_GS_Z_set
    __swig_getmethods__["GS_Z"] = _pnpsll.ContWorld_GS_Z_get
    if _newclass:
        GS_Z = _swig_property(_pnpsll.ContWorld_GS_Z_get, _pnpsll.ContWorld_GS_Z_set)
    __swig_setmethods__["GridSizeXYZGlobal"] = _pnpsll.ContWorld_GridSizeXYZGlobal_set
    __swig_getmethods__["GridSizeXYZGlobal"] = _pnpsll.ContWorld_GridSizeXYZGlobal_get
    if _newclass:
        GridSizeXYZGlobal = _swig_property(_pnpsll.ContWorld_GridSizeXYZGlobal_get, _pnpsll.ContWorld_GridSizeXYZGlobal_set)
    __swig_setmethods__["GridSizeXYZOriginal"] = _pnpsll.ContWorld_GridSizeXYZOriginal_set
    __swig_getmethods__["GridSizeXYZOriginal"] = _pnpsll.ContWorld_GridSizeXYZOriginal_get
    if _newclass:
        GridSizeXYZOriginal = _swig_property(_pnpsll.ContWorld_GridSizeXYZOriginal_get, _pnpsll.ContWorld_GridSizeXYZOriginal_set)
    __swig_setmethods__["startBlackAndWhite"] = _pnpsll.ContWorld_startBlackAndWhite_set
    __swig_getmethods__["startBlackAndWhite"] = _pnpsll.ContWorld_startBlackAndWhite_get
    if _newclass:
        startBlackAndWhite = _swig_property(_pnpsll.ContWorld_startBlackAndWhite_get, _pnpsll.ContWorld_startBlackAndWhite_set)
    __swig_setmethods__["GridScale"] = _pnpsll.ContWorld_GridScale_set
    __swig_getmethods__["GridScale"] = _pnpsll.ContWorld_GridScale_get
    if _newclass:
        GridScale = _swig_property(_pnpsll.ContWorld_GridScale_get, _pnpsll.ContWorld_GridScale_set)
    __swig_setmethods__["NIndexing"] = _pnpsll.ContWorld_NIndexing_set
    __swig_getmethods__["NIndexing"] = _pnpsll.ContWorld_NIndexing_get
    if _newclass:
        NIndexing = _swig_property(_pnpsll.ContWorld_NIndexing_get, _pnpsll.ContWorld_NIndexing_set)
    __swig_setmethods__["Epsilon"] = _pnpsll.ContWorld_Epsilon_set
    __swig_getmethods__["Epsilon"] = _pnpsll.ContWorld_Epsilon_get
    if _newclass:
        Epsilon = _swig_property(_pnpsll.ContWorld_Epsilon_get, _pnpsll.ContWorld_Epsilon_set)
    __swig_setmethods__["Qstat"] = _pnpsll.ContWorld_Qstat_set
    __swig_getmethods__["Qstat"] = _pnpsll.ContWorld_Qstat_get
    if _newclass:
        Qstat = _swig_property(_pnpsll.ContWorld_Qstat_get, _pnpsll.ContWorld_Qstat_set)
    __swig_setmethods__["C"] = _pnpsll.ContWorld_C_set
    __swig_getmethods__["C"] = _pnpsll.ContWorld_C_get
    if _newclass:
        C = _swig_property(_pnpsll.ContWorld_C_get, _pnpsll.ContWorld_C_set)
    __swig_setmethods__["CDouble"] = _pnpsll.ContWorld_CDouble_set
    __swig_getmethods__["CDouble"] = _pnpsll.ContWorld_CDouble_get
    if _newclass:
        CDouble = _swig_property(_pnpsll.ContWorld_CDouble_get, _pnpsll.ContWorld_CDouble_set)
    __swig_setmethods__["D"] = _pnpsll.ContWorld_D_set
    __swig_getmethods__["D"] = _pnpsll.ContWorld_D_get
    if _newclass:
        D = _swig_property(_pnpsll.ContWorld_D_get, _pnpsll.ContWorld_D_set)
    __swig_setmethods__["PMF"] = _pnpsll.ContWorld_PMF_set
    __swig_getmethods__["PMF"] = _pnpsll.ContWorld_PMF_get
    if _newclass:
        PMF = _swig_property(_pnpsll.ContWorld_PMF_get, _pnpsll.ContWorld_PMF_set)
    __swig_setmethods__["Potential"] = _pnpsll.ContWorld_Potential_set
    __swig_getmethods__["Potential"] = _pnpsll.ContWorld_Potential_get
    if _newclass:
        Potential = _swig_property(_pnpsll.ContWorld_Potential_get, _pnpsll.ContWorld_Potential_set)
    __swig_setmethods__["PotentialDouble"] = _pnpsll.ContWorld_PotentialDouble_set
    __swig_getmethods__["PotentialDouble"] = _pnpsll.ContWorld_PotentialDouble_get
    if _newclass:
        PotentialDouble = _swig_property(_pnpsll.ContWorld_PotentialDouble_get, _pnpsll.ContWorld_PotentialDouble_set)
    __swig_setmethods__["PBC"] = _pnpsll.ContWorld_PBC_set
    __swig_getmethods__["PBC"] = _pnpsll.ContWorld_PBC_get
    if _newclass:
        PBC = _swig_property(_pnpsll.ContWorld_PBC_get, _pnpsll.ContWorld_PBC_set)
    __swig_setmethods__["BoundaryCondition"] = _pnpsll.ContWorld_BoundaryCondition_set
    __swig_getmethods__["BoundaryCondition"] = _pnpsll.ContWorld_BoundaryCondition_get
    if _newclass:
        BoundaryCondition = _swig_property(_pnpsll.ContWorld_BoundaryCondition_get, _pnpsll.ContWorld_BoundaryCondition_set)
    __swig_setmethods__["SystemEnergy"] = _pnpsll.ContWorld_SystemEnergy_set
    __swig_getmethods__["SystemEnergy"] = _pnpsll.ContWorld_SystemEnergy_get
    if _newclass:
        SystemEnergy = _swig_property(_pnpsll.ContWorld_SystemEnergy_get, _pnpsll.ContWorld_SystemEnergy_set)

    def SetContWorld(self, m_GridSize: 'int *', m_GridScale: 'float', m_PBC: 'bool *', m_NIonsTypes: 'int', m_Qions: 'float *') -> "int":
        return _pnpsll.ContWorld_SetContWorld(self, m_GridSize, m_GridScale, m_PBC, m_NIonsTypes, m_Qions)

    def SetContWorldNoMobIons(self, _GridSizeX: 'int', _GridSizeY: 'int', _GridSizeZ: 'int', _GridScale: 'float', PBCX: 'bool', PBCY: 'bool', PBCZ: 'bool') -> "int":
        return _pnpsll.ContWorld_SetContWorldNoMobIons(self, _GridSizeX, _GridSizeY, _GridSizeZ, _GridScale, PBCX, PBCY, PBCZ)

    def SetContWorldTwoMobIons(self, _GridSizeX: 'int', _GridSizeY: 'int', _GridSizeZ: 'int', _GridScale: 'float', PBCX: 'bool', PBCY: 'bool', PBCZ: 'bool', q1: 'float', q2: 'float') -> "int":
        return _pnpsll.ContWorld_SetContWorldTwoMobIons(self, _GridSizeX, _GridSizeY, _GridSizeZ, _GridScale, PBCX, PBCY, PBCZ, q1, q2)

    def Print(self) -> "int":
        return _pnpsll.ContWorld_Print(self)

    def ReadMaps(self, Dt: 'MapsIOData') -> "int":
        return _pnpsll.ContWorld_ReadMaps(self, Dt)

    def WriteMaps(self, Dt: 'MapsIOData') -> "int":
        return _pnpsll.ContWorld_WriteMaps(self, Dt)

    def CheckGridOfVectorField3D(self, VF3D: 'VectorField3D', deleteOldVF3DifNotSame: 'bool', VF3DDescription: 'char const *', ReadFromFile: 'char const *') -> "VectorField3D *":
        return _pnpsll.ContWorld_CheckGridOfVectorField3D(self, VF3D, deleteOldVF3DifNotSame, VF3DDescription, ReadFromFile)

    def SaveQstPhi(self, filename: 'char const *') -> "int":
        return _pnpsll.ContWorld_SaveQstPhi(self, filename)

    def ReadPotential(self, filename: 'char const *') -> "int":
        return _pnpsll.ContWorld_ReadPotential(self, filename)

    def ReadPotentialChargeZRange(self, filename: 'char const *', Z0: 'float', Z1: 'float') -> "int":
        return _pnpsll.ContWorld_ReadPotentialChargeZRange(self, filename, Z0, Z1)

    def WritePotential(self, filename: 'char const *', opt: 'int'=1) -> "int":
        return _pnpsll.ContWorld_WritePotential(self, filename, opt)

    def ReadPMF(self, filename: 'char const *', filename2: 'char const *') -> "int":
        return _pnpsll.ContWorld_ReadPMF(self, filename, filename2)

    def WritePMF(self, filename: 'char const *', opt: 'int'=1) -> "int":
        return _pnpsll.ContWorld_WritePMF(self, filename, opt)

    def ReadNodeIndexing(self, filename: 'char const *') -> "int":
        return _pnpsll.ContWorld_ReadNodeIndexing(self, filename)

    def WriteNodeIndexing(self, filename: 'char const *', opt: 'int'=1) -> "int":
        return _pnpsll.ContWorld_WriteNodeIndexing(self, filename, opt)

    def WriteContTop(self, filename: 'char const *', opt: 'int'=1) -> "int":
        return _pnpsll.ContWorld_WriteContTop(self, filename, opt)

    def ReadDynamicCharge(self, filename: 'char const *') -> "int":
        return _pnpsll.ContWorld_ReadDynamicCharge(self, filename)

    def ReadDynamicChargeZRange(self, filename: 'char const *', Z0: 'float', Z1: 'float') -> "int":
        return _pnpsll.ContWorld_ReadDynamicChargeZRange(self, filename, Z0, Z1)

    def WriteDynamicCharge(self, filename: 'char const *', opt: 'int'=1) -> "int":
        return _pnpsll.ContWorld_WriteDynamicCharge(self, filename, opt)

    def ReadDiffusion(self, filename: 'char const *') -> "int":
        return _pnpsll.ContWorld_ReadDiffusion(self, filename)

    def WriteDiffusion(self, filename: 'char const *', opt: 'int'=1) -> "int":
        return _pnpsll.ContWorld_WriteDiffusion(self, filename, opt)

    def ReadVectorField3D(self, filename: 'char const *', coef: 'float') -> "VectorField3D *":
        return _pnpsll.ContWorld_ReadVectorField3D(self, filename, coef)

    def BorderExchange(self, ArrayToExchange: 'float *') -> "int":
        return _pnpsll.ContWorld_BorderExchange(self, ArrayToExchange)

    def BorderExchangeInt(self, ArrayToExchange: 'int *') -> "int":
        return _pnpsll.ContWorld_BorderExchangeInt(self, ArrayToExchange)

    def BorderExchangeDouble(self, ArrayToExchange: 'double *') -> "int":
        return _pnpsll.ContWorld_BorderExchangeDouble(self, ArrayToExchange)

    def CheckArrays(self, ArSet: 'char const *', BuildIfNI: 'bool') -> "int":
        return _pnpsll.ContWorld_CheckArrays(self, ArSet, BuildIfNI)

    def CheckSystem(self) -> "int":
        return _pnpsll.ContWorld_CheckSystem(self)

    def SetInitConcentrationFromNIndexing(self) -> "int":
        return _pnpsll.ContWorld_SetInitConcentrationFromNIndexing(self)

    def convertRealToOriginalGrid(self, mapIn: 'float *', mapOut: 'float *') -> "int":
        return _pnpsll.ContWorld_convertRealToOriginalGrid(self, mapIn, mapOut)

    def convertOriginalToRealGrid(self, *args) -> "int":
        return _pnpsll.ContWorld_convertOriginalToRealGrid(self, *args)

    def ConvFloatToGlobIntUnitsX(self, Xext: 'float') -> "float":
        return _pnpsll.ContWorld_ConvFloatToGlobIntUnitsX(self, Xext)

    def ConvFloatToLocIntUnitsX(self, Xext: 'float') -> "float":
        return _pnpsll.ContWorld_ConvFloatToLocIntUnitsX(self, Xext)

    def ConvFloatToGlobIntUnitsY(self, Yext: 'float') -> "float":
        return _pnpsll.ContWorld_ConvFloatToGlobIntUnitsY(self, Yext)

    def ConvFloatToLocIntUnitsY(self, Yext: 'float') -> "float":
        return _pnpsll.ContWorld_ConvFloatToLocIntUnitsY(self, Yext)

    def ConvFloatToGlobIntUnitsZ(self, Zext: 'float') -> "float":
        return _pnpsll.ContWorld_ConvFloatToGlobIntUnitsZ(self, Zext)

    def ConvFloatToLocIntUnitsZ(self, Zext: 'float') -> "float":
        return _pnpsll.ContWorld_ConvFloatToLocIntUnitsZ(self, Zext)

    def ConvGlobalIntenalXYZToGrdPnt(self, Xint: 'float', Yint: 'float', Zint: 'float') -> "int":
        return _pnpsll.ContWorld_ConvGlobalIntenalXYZToGrdPnt(self, Xint, Yint, Zint)

    def ConvGlobalExternalXYZToGrdPnt(self, Xext: 'float', Yext: 'float', Zext: 'float') -> "int":
        return _pnpsll.ContWorld_ConvGlobalExternalXYZToGrdPnt(self, Xext, Yext, Zext)

    def ConvGlobIntToGlobExtUnitsX(self, Xint: 'float') -> "float":
        return _pnpsll.ContWorld_ConvGlobIntToGlobExtUnitsX(self, Xint)

    def ConvGlobIntToGlobExtUnitsY(self, Yint: 'float') -> "float":
        return _pnpsll.ContWorld_ConvGlobIntToGlobExtUnitsY(self, Yint)

    def ConvGlobIntToGlobExtUnitsZ(self, Zint: 'float') -> "float":
        return _pnpsll.ContWorld_ConvGlobIntToGlobExtUnitsZ(self, Zint)

    def GetBorder(self, z1: 'int *', z2: 'int *', ProcRank: 'int') -> "int":
        return _pnpsll.ContWorld_GetBorder(self, z1, z2, ProcRank)

    def AddPotential(self, Z0: 'float', Z1: 'float', Phi0: 'float', Phi1: 'float') -> "int":
        return _pnpsll.ContWorld_AddPotential(self, Z0, Z1, Phi0, Phi1)

    def ApplyAsymConc(self,z,C0,C1):
    	"""ApplyAsymConc - Set diffrent concentration of mobile ions below and above coordinate z
    		Parameters:
    			z=float
    				coordinate for concentration switching, usually middle of membrane is a good choice
    			C0=float|[float,float] - single float number or list of floats
    				concentration of mobile ions below z, if single float value is given will use that concentration for all ions
    				otherwise will use specific concentration for each ion
    			C1=float|[float,float] - single float number or list of floats
    				concentration of mobile ions above z, if single float value is given will use that concentration for all ions
    				otherwise will use specific concentration for each ion
    	"""
    #convert python to c++/c
    	Cz0 = new_floatArray(self.NIonsTypes)
    	if type(C0) is list or type(C0) is tuple:
    		for i in range(self.NIonsTypes):floatArray_setitem(Cz0,i,C0[i])
    	else:
    		for i in range(self.NIonsTypes):floatArray_setitem(Cz0,i,C0)
    	Cz1 = new_floatArray(self.NIonsTypes)
    	if type(C1) is list or type(C1) is tuple:
    		for i in range(self.NIonsTypes):floatArray_setitem(Cz1,i,C1[i])
    	else:
    		for i in range(self.NIonsTypes):floatArray_setitem(Cz1,i,C1)

    	self.cxxApplyAsymConc(z,Cz0,Cz1)

    #clean-up
    	delete_floatArray(Cz1)
    	delete_floatArray(Cz0)


    def cxxApplyAsymConc(self, z: 'float', Cz0: 'float *', Cz1: 'float *') -> "int":
        return _pnpsll.ContWorld_cxxApplyAsymConc(self, z, Cz0, Cz1)

    def ApplyAsymConcByScaling(self, z: 'float', Cz0: 'float *', Cz1: 'float *') -> "int":
        return _pnpsll.ContWorld_ApplyAsymConcByScaling(self, z, Cz0, Cz1)

    def ConvertIonStrengthToDynamicCharge(self) -> "int":
        return _pnpsll.ContWorld_ConvertIonStrengthToDynamicCharge(self)

    def RemoveDiffusionPointsAtNegativeC(self) -> "int":
        return _pnpsll.ContWorld_RemoveDiffusionPointsAtNegativeC(self)

    def RemoveDiffusionPoints(self, IType: 'int', pnts: 'int *', n: 'int') -> "int":
        return _pnpsll.ContWorld_RemoveDiffusionPoints(self, IType, pnts, n)

    def FindImplicitMembranePosition(self, z0: 'double *', z1: 'double *') -> "bool":
        return _pnpsll.ContWorld_FindImplicitMembranePosition(self, z0, z1)

    def AddPotentialAuto(self, PotDiff):
    	z0=new_doublepf()
    	z1=new_doublepf()
    	if not self.FindImplicitMembranePosition(z0,z1):
    		return None
    	LimitCurrentCalcZ0=doublepf_value(z0)
    	LimitCurrentCalcZ1=doublepf_value(z1)
    	self.AddPotential(LimitCurrentCalcZ0,LimitCurrentCalcZ1,PotDiff,0.0)
    	return [LimitCurrentCalcZ0,LimitCurrentCalcZ1]

ContWorld_swigregister = _pnpsll.ContWorld_swigregister
ContWorld_swigregister(ContWorld)


def ReadContWorldFromNodeIndexing(node_indexing_filename: 'char const *') -> "ContWorld *":
    return _pnpsll.ReadContWorldFromNodeIndexing(node_indexing_filename)
ReadContWorldFromNodeIndexing = _pnpsll.ReadContWorldFromNodeIndexing

def GetContWorld(**kwargs):
	"""depriciated"""
	GridSize = kwargs.get("GridSize")
	if GridSize==None:
		print("Error: GridSize must be defined")
		return None
	GridScale = kwargs.get("GridScale")
	if GridScale==None:
		print("Error: GridScale must be defined")
		return None

	PBC = kwargs.get("PBC",[0,0,0])
	Qions = kwargs.get("Qions",[1.0,-1.0])

	w=ContWorld(GridSize[0],GridSize[1],GridSize[2],
		GridScale,
		PBC[0],PBC[1],PBC[2],
		Qions[0],Qions[1])
	w.thisown = 0
	return w

def LoadContWorld(**kwargs):
	"""
	Options:
	SysTop - filename of continious topology
	Potential     - potential
	Concentration    - concentration
	Diffusion - Diffusion
	PMF     - filename for PMF of SR
	"""
	SysTop=kwargs.get("SysTop",None)



	if SysTop == None:
		print("Error: ContTop must be specified")
		return None
	w=ReadContWorldFromNodeIndexing(str(SysTop))

	Potential=kwargs.get("Potential",None)
	if Potential != None:
		w.ReadPotential(str(Potential))

	Concentration=kwargs.get("Concentration",None)
	if Concentration != None:
		w.ReadDynamicCharge(str(Concentration))

	Diffusion=kwargs.get("Diffusion",None)
	if Diffusion != None:
		w.ReadDiffusion(str(Diffusion))

	PMF=kwargs.get("PMF",None)
	if PMF != None:
		w.ReadPMF(str(PMF),"")

	return w

AligneSize = _pnpsll.AligneSize
class FieldBW(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldBW, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldBW, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pnpsll.new_FieldBW()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_FieldBW
    __del__ = lambda self: None
    __swig_setmethods__["B"] = _pnpsll.FieldBW_B_set
    __swig_getmethods__["B"] = _pnpsll.FieldBW_B_get
    if _newclass:
        B = _swig_property(_pnpsll.FieldBW_B_get, _pnpsll.FieldBW_B_set)
    __swig_setmethods__["W"] = _pnpsll.FieldBW_W_set
    __swig_getmethods__["W"] = _pnpsll.FieldBW_W_get
    if _newclass:
        W = _swig_property(_pnpsll.FieldBW_W_get, _pnpsll.FieldBW_W_set)
    __swig_setmethods__["Borg"] = _pnpsll.FieldBW_Borg_set
    __swig_getmethods__["Borg"] = _pnpsll.FieldBW_Borg_get
    if _newclass:
        Borg = _swig_property(_pnpsll.FieldBW_Borg_get, _pnpsll.FieldBW_Borg_set)
    __swig_setmethods__["Worg"] = _pnpsll.FieldBW_Worg_set
    __swig_getmethods__["Worg"] = _pnpsll.FieldBW_Worg_get
    if _newclass:
        Worg = _swig_property(_pnpsll.FieldBW_Worg_get, _pnpsll.FieldBW_Worg_set)
    __swig_setmethods__["GS_X"] = _pnpsll.FieldBW_GS_X_set
    __swig_getmethods__["GS_X"] = _pnpsll.FieldBW_GS_X_get
    if _newclass:
        GS_X = _swig_property(_pnpsll.FieldBW_GS_X_get, _pnpsll.FieldBW_GS_X_set)
    __swig_setmethods__["GS_Y"] = _pnpsll.FieldBW_GS_Y_set
    __swig_getmethods__["GS_Y"] = _pnpsll.FieldBW_GS_Y_get
    if _newclass:
        GS_Y = _swig_property(_pnpsll.FieldBW_GS_Y_get, _pnpsll.FieldBW_GS_Y_set)
    __swig_setmethods__["GS_Z"] = _pnpsll.FieldBW_GS_Z_set
    __swig_getmethods__["GS_Z"] = _pnpsll.FieldBW_GS_Z_get
    if _newclass:
        GS_Z = _swig_property(_pnpsll.FieldBW_GS_Z_get, _pnpsll.FieldBW_GS_Z_set)
    __swig_setmethods__["StrideX"] = _pnpsll.FieldBW_StrideX_set
    __swig_getmethods__["StrideX"] = _pnpsll.FieldBW_StrideX_get
    if _newclass:
        StrideX = _swig_property(_pnpsll.FieldBW_StrideX_get, _pnpsll.FieldBW_StrideX_set)
    __swig_setmethods__["StrideXY"] = _pnpsll.FieldBW_StrideXY_set
    __swig_getmethods__["StrideXY"] = _pnpsll.FieldBW_StrideXY_get
    if _newclass:
        StrideXY = _swig_property(_pnpsll.FieldBW_StrideXY_get, _pnpsll.FieldBW_StrideXY_set)
    __swig_setmethods__["Bsize"] = _pnpsll.FieldBW_Bsize_set
    __swig_getmethods__["Bsize"] = _pnpsll.FieldBW_Bsize_get
    if _newclass:
        Bsize = _swig_property(_pnpsll.FieldBW_Bsize_get, _pnpsll.FieldBW_Bsize_set)
    __swig_setmethods__["Wsize"] = _pnpsll.FieldBW_Wsize_set
    __swig_getmethods__["Wsize"] = _pnpsll.FieldBW_Wsize_get
    if _newclass:
        Wsize = _swig_property(_pnpsll.FieldBW_Wsize_get, _pnpsll.FieldBW_Wsize_set)

    def Init(self, GridSize: 'int *') -> "void":
        return _pnpsll.FieldBW_Init(self, GridSize)

    def SameSize(self, GridSize: 'int *') -> "bool":
        return _pnpsll.FieldBW_SameSize(self, GridSize)

    def SetFromField(self, F: 'float const *') -> "void":
        return _pnpsll.FieldBW_SetFromField(self, F)

    def SetField(self, F: 'float *') -> "void":
        return _pnpsll.FieldBW_SetField(self, F)

    def BorderExchange(self, PBC: 'bool const *') -> "void":
        return _pnpsll.FieldBW_BorderExchange(self, PBC)
FieldBW_swigregister = _pnpsll.FieldBW_swigregister
FieldBW_swigregister(FieldBW)

PlusX = _pnpsll.PlusX
MinusX = _pnpsll.MinusX
PlusY = _pnpsll.PlusY
MinusY = _pnpsll.MinusY
PlusZ = _pnpsll.PlusZ
MinusZ = _pnpsll.MinusZ
CUDAXTRAX = _pnpsll.CUDAXTRAX
class float4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, float4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, float4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pnpsll.float4_x_set
    __swig_getmethods__["x"] = _pnpsll.float4_x_get
    if _newclass:
        x = _swig_property(_pnpsll.float4_x_get, _pnpsll.float4_x_set)
    __swig_setmethods__["y"] = _pnpsll.float4_y_set
    __swig_getmethods__["y"] = _pnpsll.float4_y_get
    if _newclass:
        y = _swig_property(_pnpsll.float4_y_get, _pnpsll.float4_y_set)
    __swig_setmethods__["z"] = _pnpsll.float4_z_set
    __swig_getmethods__["z"] = _pnpsll.float4_z_get
    if _newclass:
        z = _swig_property(_pnpsll.float4_z_get, _pnpsll.float4_z_set)
    __swig_setmethods__["w"] = _pnpsll.float4_w_set
    __swig_getmethods__["w"] = _pnpsll.float4_w_get
    if _newclass:
        w = _swig_property(_pnpsll.float4_w_get, _pnpsll.float4_w_set)

    def __init__(self):
        this = _pnpsll.new_float4()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_float4
    __del__ = lambda self: None
float4_swigregister = _pnpsll.float4_swigregister
float4_swigregister(float4)

class float3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, float3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, float3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pnpsll.float3_x_set
    __swig_getmethods__["x"] = _pnpsll.float3_x_get
    if _newclass:
        x = _swig_property(_pnpsll.float3_x_get, _pnpsll.float3_x_set)
    __swig_setmethods__["y"] = _pnpsll.float3_y_set
    __swig_getmethods__["y"] = _pnpsll.float3_y_get
    if _newclass:
        y = _swig_property(_pnpsll.float3_y_get, _pnpsll.float3_y_set)
    __swig_setmethods__["z"] = _pnpsll.float3_z_set
    __swig_getmethods__["z"] = _pnpsll.float3_z_get
    if _newclass:
        z = _swig_property(_pnpsll.float3_z_get, _pnpsll.float3_z_set)

    def __init__(self):
        this = _pnpsll.new_float3()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_float3
    __del__ = lambda self: None
float3_swigregister = _pnpsll.float3_swigregister
float3_swigregister(float3)

class int3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pnpsll.int3_x_set
    __swig_getmethods__["x"] = _pnpsll.int3_x_get
    if _newclass:
        x = _swig_property(_pnpsll.int3_x_get, _pnpsll.int3_x_set)
    __swig_setmethods__["y"] = _pnpsll.int3_y_set
    __swig_getmethods__["y"] = _pnpsll.int3_y_get
    if _newclass:
        y = _swig_property(_pnpsll.int3_y_get, _pnpsll.int3_y_set)
    __swig_setmethods__["z"] = _pnpsll.int3_z_set
    __swig_getmethods__["z"] = _pnpsll.int3_z_get
    if _newclass:
        z = _swig_property(_pnpsll.int3_z_get, _pnpsll.int3_z_set)

    def __init__(self):
        this = _pnpsll.new_int3()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_int3
    __del__ = lambda self: None
int3_swigregister = _pnpsll.int3_swigregister
int3_swigregister(int3)

class int4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pnpsll.int4_x_set
    __swig_getmethods__["x"] = _pnpsll.int4_x_get
    if _newclass:
        x = _swig_property(_pnpsll.int4_x_get, _pnpsll.int4_x_set)
    __swig_setmethods__["y"] = _pnpsll.int4_y_set
    __swig_getmethods__["y"] = _pnpsll.int4_y_get
    if _newclass:
        y = _swig_property(_pnpsll.int4_y_get, _pnpsll.int4_y_set)
    __swig_setmethods__["z"] = _pnpsll.int4_z_set
    __swig_getmethods__["z"] = _pnpsll.int4_z_get
    if _newclass:
        z = _swig_property(_pnpsll.int4_z_get, _pnpsll.int4_z_set)
    __swig_setmethods__["w"] = _pnpsll.int4_w_set
    __swig_getmethods__["w"] = _pnpsll.int4_w_get
    if _newclass:
        w = _swig_property(_pnpsll.int4_w_get, _pnpsll.int4_w_set)

    def __init__(self):
        this = _pnpsll.new_int4()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_int4
    __del__ = lambda self: None
int4_swigregister = _pnpsll.int4_swigregister
int4_swigregister(int4)

class PoissonSolverOnCudaStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoissonSolverOnCudaStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoissonSolverOnCudaStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GS"] = _pnpsll.PoissonSolverOnCudaStruct_GS_set
    __swig_getmethods__["GS"] = _pnpsll.PoissonSolverOnCudaStruct_GS_get
    if _newclass:
        GS = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_GS_get, _pnpsll.PoissonSolverOnCudaStruct_GS_set)
    __swig_setmethods__["GridScale"] = _pnpsll.PoissonSolverOnCudaStruct_GridScale_set
    __swig_getmethods__["GridScale"] = _pnpsll.PoissonSolverOnCudaStruct_GridScale_get
    if _newclass:
        GridScale = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_GridScale_get, _pnpsll.PoissonSolverOnCudaStruct_GridScale_set)
    __swig_setmethods__["spltGSWBC"] = _pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_set
    __swig_getmethods__["spltGSWBC"] = _pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_get
    if _newclass:
        spltGSWBC = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_get, _pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_set)
    __swig_setmethods__["spltGSWBC_X"] = _pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_X_set
    __swig_getmethods__["spltGSWBC_X"] = _pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_X_get
    if _newclass:
        spltGSWBC_X = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_X_get, _pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_X_set)
    __swig_setmethods__["spltGSWBC_XY"] = _pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_XY_set
    __swig_getmethods__["spltGSWBC_XY"] = _pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_XY_get
    if _newclass:
        spltGSWBC_XY = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_XY_get, _pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_XY_set)
    __swig_setmethods__["spltGSWBC_XYZ"] = _pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_XYZ_set
    __swig_getmethods__["spltGSWBC_XYZ"] = _pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_XYZ_get
    if _newclass:
        spltGSWBC_XYZ = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_XYZ_get, _pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_XYZ_set)
    __swig_setmethods__["P"] = _pnpsll.PoissonSolverOnCudaStruct_P_set
    __swig_getmethods__["P"] = _pnpsll.PoissonSolverOnCudaStruct_P_get
    if _newclass:
        P = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_P_get, _pnpsll.PoissonSolverOnCudaStruct_P_set)
    __swig_setmethods__["MaxIterations"] = _pnpsll.PoissonSolverOnCudaStruct_MaxIterations_set
    __swig_getmethods__["MaxIterations"] = _pnpsll.PoissonSolverOnCudaStruct_MaxIterations_get
    if _newclass:
        MaxIterations = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_MaxIterations_get, _pnpsll.PoissonSolverOnCudaStruct_MaxIterations_set)
    __swig_setmethods__["Relaxation"] = _pnpsll.PoissonSolverOnCudaStruct_Relaxation_set
    __swig_getmethods__["Relaxation"] = _pnpsll.PoissonSolverOnCudaStruct_Relaxation_get
    if _newclass:
        Relaxation = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_Relaxation_get, _pnpsll.PoissonSolverOnCudaStruct_Relaxation_set)
    __swig_setmethods__["Qnum"] = _pnpsll.PoissonSolverOnCudaStruct_Qnum_set
    __swig_getmethods__["Qnum"] = _pnpsll.PoissonSolverOnCudaStruct_Qnum_get
    if _newclass:
        Qnum = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_Qnum_get, _pnpsll.PoissonSolverOnCudaStruct_Qnum_set)
    __swig_setmethods__["Q"] = _pnpsll.PoissonSolverOnCudaStruct_Q_set
    __swig_getmethods__["Q"] = _pnpsll.PoissonSolverOnCudaStruct_Q_get
    if _newclass:
        Q = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_Q_get, _pnpsll.PoissonSolverOnCudaStruct_Q_set)
    __swig_setmethods__["Qmult"] = _pnpsll.PoissonSolverOnCudaStruct_Qmult_set
    __swig_getmethods__["Qmult"] = _pnpsll.PoissonSolverOnCudaStruct_Qmult_get
    if _newclass:
        Qmult = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_Qmult_get, _pnpsll.PoissonSolverOnCudaStruct_Qmult_set)
    __swig_setmethods__["Qpos"] = _pnpsll.PoissonSolverOnCudaStruct_Qpos_set
    __swig_getmethods__["Qpos"] = _pnpsll.PoissonSolverOnCudaStruct_Qpos_get
    if _newclass:
        Qpos = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_Qpos_get, _pnpsll.PoissonSolverOnCudaStruct_Qpos_set)
    __swig_setmethods__["DielBordNum"] = _pnpsll.PoissonSolverOnCudaStruct_DielBordNum_set
    __swig_getmethods__["DielBordNum"] = _pnpsll.PoissonSolverOnCudaStruct_DielBordNum_get
    if _newclass:
        DielBordNum = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_DielBordNum_get, _pnpsll.PoissonSolverOnCudaStruct_DielBordNum_set)
    __swig_setmethods__["DielMult"] = _pnpsll.PoissonSolverOnCudaStruct_DielMult_set
    __swig_getmethods__["DielMult"] = _pnpsll.PoissonSolverOnCudaStruct_DielMult_get
    if _newclass:
        DielMult = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_DielMult_get, _pnpsll.PoissonSolverOnCudaStruct_DielMult_set)
    __swig_setmethods__["DielBordPos"] = _pnpsll.PoissonSolverOnCudaStruct_DielBordPos_set
    __swig_getmethods__["DielBordPos"] = _pnpsll.PoissonSolverOnCudaStruct_DielBordPos_get
    if _newclass:
        DielBordPos = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_DielBordPos_get, _pnpsll.PoissonSolverOnCudaStruct_DielBordPos_set)
    __swig_setmethods__["ConvergenceCheck"] = _pnpsll.PoissonSolverOnCudaStruct_ConvergenceCheck_set
    __swig_getmethods__["ConvergenceCheck"] = _pnpsll.PoissonSolverOnCudaStruct_ConvergenceCheck_get
    if _newclass:
        ConvergenceCheck = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_ConvergenceCheck_get, _pnpsll.PoissonSolverOnCudaStruct_ConvergenceCheck_set)
    __swig_setmethods__["Tolerance"] = _pnpsll.PoissonSolverOnCudaStruct_Tolerance_set
    __swig_getmethods__["Tolerance"] = _pnpsll.PoissonSolverOnCudaStruct_Tolerance_get
    if _newclass:
        Tolerance = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_Tolerance_get, _pnpsll.PoissonSolverOnCudaStruct_Tolerance_set)
    __swig_setmethods__["TotalEnergy"] = _pnpsll.PoissonSolverOnCudaStruct_TotalEnergy_set
    __swig_getmethods__["TotalEnergy"] = _pnpsll.PoissonSolverOnCudaStruct_TotalEnergy_get
    if _newclass:
        TotalEnergy = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_TotalEnergy_get, _pnpsll.PoissonSolverOnCudaStruct_TotalEnergy_set)
    __swig_setmethods__["AvrOverChecks"] = _pnpsll.PoissonSolverOnCudaStruct_AvrOverChecks_set
    __swig_getmethods__["AvrOverChecks"] = _pnpsll.PoissonSolverOnCudaStruct_AvrOverChecks_get
    if _newclass:
        AvrOverChecks = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_AvrOverChecks_get, _pnpsll.PoissonSolverOnCudaStruct_AvrOverChecks_set)
    __swig_setmethods__["TEavr"] = _pnpsll.PoissonSolverOnCudaStruct_TEavr_set
    __swig_getmethods__["TEavr"] = _pnpsll.PoissonSolverOnCudaStruct_TEavr_get
    if _newclass:
        TEavr = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_TEavr_get, _pnpsll.PoissonSolverOnCudaStruct_TEavr_set)
    __swig_setmethods__["stdevTE"] = _pnpsll.PoissonSolverOnCudaStruct_stdevTE_set
    __swig_getmethods__["stdevTE"] = _pnpsll.PoissonSolverOnCudaStruct_stdevTE_get
    if _newclass:
        stdevTE = _swig_property(_pnpsll.PoissonSolverOnCudaStruct_stdevTE_get, _pnpsll.PoissonSolverOnCudaStruct_stdevTE_set)

    def __init__(self):
        this = _pnpsll.new_PoissonSolverOnCudaStruct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_PoissonSolverOnCudaStruct
    __del__ = lambda self: None
PoissonSolverOnCudaStruct_swigregister = _pnpsll.PoissonSolverOnCudaStruct_swigregister
PoissonSolverOnCudaStruct_swigregister(PoissonSolverOnCudaStruct)

class PSolverOnCudaStructDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSolverOnCudaStructDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSolverOnCudaStructDouble, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GS"] = _pnpsll.PSolverOnCudaStructDouble_GS_set
    __swig_getmethods__["GS"] = _pnpsll.PSolverOnCudaStructDouble_GS_get
    if _newclass:
        GS = _swig_property(_pnpsll.PSolverOnCudaStructDouble_GS_get, _pnpsll.PSolverOnCudaStructDouble_GS_set)
    __swig_setmethods__["GridScale"] = _pnpsll.PSolverOnCudaStructDouble_GridScale_set
    __swig_getmethods__["GridScale"] = _pnpsll.PSolverOnCudaStructDouble_GridScale_get
    if _newclass:
        GridScale = _swig_property(_pnpsll.PSolverOnCudaStructDouble_GridScale_get, _pnpsll.PSolverOnCudaStructDouble_GridScale_set)
    __swig_setmethods__["spltGSWBC"] = _pnpsll.PSolverOnCudaStructDouble_spltGSWBC_set
    __swig_getmethods__["spltGSWBC"] = _pnpsll.PSolverOnCudaStructDouble_spltGSWBC_get
    if _newclass:
        spltGSWBC = _swig_property(_pnpsll.PSolverOnCudaStructDouble_spltGSWBC_get, _pnpsll.PSolverOnCudaStructDouble_spltGSWBC_set)
    __swig_setmethods__["spltGSWBC_X"] = _pnpsll.PSolverOnCudaStructDouble_spltGSWBC_X_set
    __swig_getmethods__["spltGSWBC_X"] = _pnpsll.PSolverOnCudaStructDouble_spltGSWBC_X_get
    if _newclass:
        spltGSWBC_X = _swig_property(_pnpsll.PSolverOnCudaStructDouble_spltGSWBC_X_get, _pnpsll.PSolverOnCudaStructDouble_spltGSWBC_X_set)
    __swig_setmethods__["spltGSWBC_XY"] = _pnpsll.PSolverOnCudaStructDouble_spltGSWBC_XY_set
    __swig_getmethods__["spltGSWBC_XY"] = _pnpsll.PSolverOnCudaStructDouble_spltGSWBC_XY_get
    if _newclass:
        spltGSWBC_XY = _swig_property(_pnpsll.PSolverOnCudaStructDouble_spltGSWBC_XY_get, _pnpsll.PSolverOnCudaStructDouble_spltGSWBC_XY_set)
    __swig_setmethods__["spltGSWBC_XYZ"] = _pnpsll.PSolverOnCudaStructDouble_spltGSWBC_XYZ_set
    __swig_getmethods__["spltGSWBC_XYZ"] = _pnpsll.PSolverOnCudaStructDouble_spltGSWBC_XYZ_get
    if _newclass:
        spltGSWBC_XYZ = _swig_property(_pnpsll.PSolverOnCudaStructDouble_spltGSWBC_XYZ_get, _pnpsll.PSolverOnCudaStructDouble_spltGSWBC_XYZ_set)
    __swig_setmethods__["P"] = _pnpsll.PSolverOnCudaStructDouble_P_set
    __swig_getmethods__["P"] = _pnpsll.PSolverOnCudaStructDouble_P_get
    if _newclass:
        P = _swig_property(_pnpsll.PSolverOnCudaStructDouble_P_get, _pnpsll.PSolverOnCudaStructDouble_P_set)
    __swig_setmethods__["MaxIterations"] = _pnpsll.PSolverOnCudaStructDouble_MaxIterations_set
    __swig_getmethods__["MaxIterations"] = _pnpsll.PSolverOnCudaStructDouble_MaxIterations_get
    if _newclass:
        MaxIterations = _swig_property(_pnpsll.PSolverOnCudaStructDouble_MaxIterations_get, _pnpsll.PSolverOnCudaStructDouble_MaxIterations_set)
    __swig_setmethods__["Relaxation"] = _pnpsll.PSolverOnCudaStructDouble_Relaxation_set
    __swig_getmethods__["Relaxation"] = _pnpsll.PSolverOnCudaStructDouble_Relaxation_get
    if _newclass:
        Relaxation = _swig_property(_pnpsll.PSolverOnCudaStructDouble_Relaxation_get, _pnpsll.PSolverOnCudaStructDouble_Relaxation_set)
    __swig_setmethods__["Qnum"] = _pnpsll.PSolverOnCudaStructDouble_Qnum_set
    __swig_getmethods__["Qnum"] = _pnpsll.PSolverOnCudaStructDouble_Qnum_get
    if _newclass:
        Qnum = _swig_property(_pnpsll.PSolverOnCudaStructDouble_Qnum_get, _pnpsll.PSolverOnCudaStructDouble_Qnum_set)
    __swig_setmethods__["Q"] = _pnpsll.PSolverOnCudaStructDouble_Q_set
    __swig_getmethods__["Q"] = _pnpsll.PSolverOnCudaStructDouble_Q_get
    if _newclass:
        Q = _swig_property(_pnpsll.PSolverOnCudaStructDouble_Q_get, _pnpsll.PSolverOnCudaStructDouble_Q_set)
    __swig_setmethods__["Qmult"] = _pnpsll.PSolverOnCudaStructDouble_Qmult_set
    __swig_getmethods__["Qmult"] = _pnpsll.PSolverOnCudaStructDouble_Qmult_get
    if _newclass:
        Qmult = _swig_property(_pnpsll.PSolverOnCudaStructDouble_Qmult_get, _pnpsll.PSolverOnCudaStructDouble_Qmult_set)
    __swig_setmethods__["Qpos"] = _pnpsll.PSolverOnCudaStructDouble_Qpos_set
    __swig_getmethods__["Qpos"] = _pnpsll.PSolverOnCudaStructDouble_Qpos_get
    if _newclass:
        Qpos = _swig_property(_pnpsll.PSolverOnCudaStructDouble_Qpos_get, _pnpsll.PSolverOnCudaStructDouble_Qpos_set)
    __swig_setmethods__["DielBordNum"] = _pnpsll.PSolverOnCudaStructDouble_DielBordNum_set
    __swig_getmethods__["DielBordNum"] = _pnpsll.PSolverOnCudaStructDouble_DielBordNum_get
    if _newclass:
        DielBordNum = _swig_property(_pnpsll.PSolverOnCudaStructDouble_DielBordNum_get, _pnpsll.PSolverOnCudaStructDouble_DielBordNum_set)
    __swig_setmethods__["DielMult"] = _pnpsll.PSolverOnCudaStructDouble_DielMult_set
    __swig_getmethods__["DielMult"] = _pnpsll.PSolverOnCudaStructDouble_DielMult_get
    if _newclass:
        DielMult = _swig_property(_pnpsll.PSolverOnCudaStructDouble_DielMult_get, _pnpsll.PSolverOnCudaStructDouble_DielMult_set)
    __swig_setmethods__["DielBordPos"] = _pnpsll.PSolverOnCudaStructDouble_DielBordPos_set
    __swig_getmethods__["DielBordPos"] = _pnpsll.PSolverOnCudaStructDouble_DielBordPos_get
    if _newclass:
        DielBordPos = _swig_property(_pnpsll.PSolverOnCudaStructDouble_DielBordPos_get, _pnpsll.PSolverOnCudaStructDouble_DielBordPos_set)
    __swig_setmethods__["ConvergenceCheck"] = _pnpsll.PSolverOnCudaStructDouble_ConvergenceCheck_set
    __swig_getmethods__["ConvergenceCheck"] = _pnpsll.PSolverOnCudaStructDouble_ConvergenceCheck_get
    if _newclass:
        ConvergenceCheck = _swig_property(_pnpsll.PSolverOnCudaStructDouble_ConvergenceCheck_get, _pnpsll.PSolverOnCudaStructDouble_ConvergenceCheck_set)
    __swig_setmethods__["Tolerance"] = _pnpsll.PSolverOnCudaStructDouble_Tolerance_set
    __swig_getmethods__["Tolerance"] = _pnpsll.PSolverOnCudaStructDouble_Tolerance_get
    if _newclass:
        Tolerance = _swig_property(_pnpsll.PSolverOnCudaStructDouble_Tolerance_get, _pnpsll.PSolverOnCudaStructDouble_Tolerance_set)
    __swig_setmethods__["TotalEnergy"] = _pnpsll.PSolverOnCudaStructDouble_TotalEnergy_set
    __swig_getmethods__["TotalEnergy"] = _pnpsll.PSolverOnCudaStructDouble_TotalEnergy_get
    if _newclass:
        TotalEnergy = _swig_property(_pnpsll.PSolverOnCudaStructDouble_TotalEnergy_get, _pnpsll.PSolverOnCudaStructDouble_TotalEnergy_set)
    __swig_setmethods__["AvrOverChecks"] = _pnpsll.PSolverOnCudaStructDouble_AvrOverChecks_set
    __swig_getmethods__["AvrOverChecks"] = _pnpsll.PSolverOnCudaStructDouble_AvrOverChecks_get
    if _newclass:
        AvrOverChecks = _swig_property(_pnpsll.PSolverOnCudaStructDouble_AvrOverChecks_get, _pnpsll.PSolverOnCudaStructDouble_AvrOverChecks_set)
    __swig_setmethods__["TEavr"] = _pnpsll.PSolverOnCudaStructDouble_TEavr_set
    __swig_getmethods__["TEavr"] = _pnpsll.PSolverOnCudaStructDouble_TEavr_get
    if _newclass:
        TEavr = _swig_property(_pnpsll.PSolverOnCudaStructDouble_TEavr_get, _pnpsll.PSolverOnCudaStructDouble_TEavr_set)
    __swig_setmethods__["stdevTE"] = _pnpsll.PSolverOnCudaStructDouble_stdevTE_set
    __swig_getmethods__["stdevTE"] = _pnpsll.PSolverOnCudaStructDouble_stdevTE_get
    if _newclass:
        stdevTE = _swig_property(_pnpsll.PSolverOnCudaStructDouble_stdevTE_get, _pnpsll.PSolverOnCudaStructDouble_stdevTE_set)

    def __init__(self):
        this = _pnpsll.new_PSolverOnCudaStructDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_PSolverOnCudaStructDouble
    __del__ = lambda self: None
PSolverOnCudaStructDouble_swigregister = _pnpsll.PSolverOnCudaStructDouble_swigregister
PSolverOnCudaStructDouble_swigregister(PSolverOnCudaStructDouble)

class PoissonSolverOnCuda4Struct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoissonSolverOnCuda4Struct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoissonSolverOnCuda4Struct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GS"] = _pnpsll.PoissonSolverOnCuda4Struct_GS_set
    __swig_getmethods__["GS"] = _pnpsll.PoissonSolverOnCuda4Struct_GS_get
    if _newclass:
        GS = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_GS_get, _pnpsll.PoissonSolverOnCuda4Struct_GS_set)
    __swig_setmethods__["ps4GS"] = _pnpsll.PoissonSolverOnCuda4Struct_ps4GS_set
    __swig_getmethods__["ps4GS"] = _pnpsll.PoissonSolverOnCuda4Struct_ps4GS_get
    if _newclass:
        ps4GS = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_ps4GS_get, _pnpsll.PoissonSolverOnCuda4Struct_ps4GS_set)
    __swig_setmethods__["GridScale"] = _pnpsll.PoissonSolverOnCuda4Struct_GridScale_set
    __swig_getmethods__["GridScale"] = _pnpsll.PoissonSolverOnCuda4Struct_GridScale_get
    if _newclass:
        GridScale = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_GridScale_get, _pnpsll.PoissonSolverOnCuda4Struct_GridScale_set)
    __swig_setmethods__["Pot"] = _pnpsll.PoissonSolverOnCuda4Struct_Pot_set
    __swig_getmethods__["Pot"] = _pnpsll.PoissonSolverOnCuda4Struct_Pot_get
    if _newclass:
        Pot = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_Pot_get, _pnpsll.PoissonSolverOnCuda4Struct_Pot_set)
    __swig_setmethods__["P000"] = _pnpsll.PoissonSolverOnCuda4Struct_P000_set
    __swig_getmethods__["P000"] = _pnpsll.PoissonSolverOnCuda4Struct_P000_get
    if _newclass:
        P000 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P000_get, _pnpsll.PoissonSolverOnCuda4Struct_P000_set)
    __swig_setmethods__["P100"] = _pnpsll.PoissonSolverOnCuda4Struct_P100_set
    __swig_getmethods__["P100"] = _pnpsll.PoissonSolverOnCuda4Struct_P100_get
    if _newclass:
        P100 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P100_get, _pnpsll.PoissonSolverOnCuda4Struct_P100_set)
    __swig_setmethods__["P200"] = _pnpsll.PoissonSolverOnCuda4Struct_P200_set
    __swig_getmethods__["P200"] = _pnpsll.PoissonSolverOnCuda4Struct_P200_get
    if _newclass:
        P200 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P200_get, _pnpsll.PoissonSolverOnCuda4Struct_P200_set)
    __swig_setmethods__["P300"] = _pnpsll.PoissonSolverOnCuda4Struct_P300_set
    __swig_getmethods__["P300"] = _pnpsll.PoissonSolverOnCuda4Struct_P300_get
    if _newclass:
        P300 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P300_get, _pnpsll.PoissonSolverOnCuda4Struct_P300_set)
    __swig_setmethods__["P010"] = _pnpsll.PoissonSolverOnCuda4Struct_P010_set
    __swig_getmethods__["P010"] = _pnpsll.PoissonSolverOnCuda4Struct_P010_get
    if _newclass:
        P010 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P010_get, _pnpsll.PoissonSolverOnCuda4Struct_P010_set)
    __swig_setmethods__["P110"] = _pnpsll.PoissonSolverOnCuda4Struct_P110_set
    __swig_getmethods__["P110"] = _pnpsll.PoissonSolverOnCuda4Struct_P110_get
    if _newclass:
        P110 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P110_get, _pnpsll.PoissonSolverOnCuda4Struct_P110_set)
    __swig_setmethods__["P210"] = _pnpsll.PoissonSolverOnCuda4Struct_P210_set
    __swig_getmethods__["P210"] = _pnpsll.PoissonSolverOnCuda4Struct_P210_get
    if _newclass:
        P210 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P210_get, _pnpsll.PoissonSolverOnCuda4Struct_P210_set)
    __swig_setmethods__["P310"] = _pnpsll.PoissonSolverOnCuda4Struct_P310_set
    __swig_getmethods__["P310"] = _pnpsll.PoissonSolverOnCuda4Struct_P310_get
    if _newclass:
        P310 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P310_get, _pnpsll.PoissonSolverOnCuda4Struct_P310_set)
    __swig_setmethods__["P020"] = _pnpsll.PoissonSolverOnCuda4Struct_P020_set
    __swig_getmethods__["P020"] = _pnpsll.PoissonSolverOnCuda4Struct_P020_get
    if _newclass:
        P020 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P020_get, _pnpsll.PoissonSolverOnCuda4Struct_P020_set)
    __swig_setmethods__["P120"] = _pnpsll.PoissonSolverOnCuda4Struct_P120_set
    __swig_getmethods__["P120"] = _pnpsll.PoissonSolverOnCuda4Struct_P120_get
    if _newclass:
        P120 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P120_get, _pnpsll.PoissonSolverOnCuda4Struct_P120_set)
    __swig_setmethods__["P220"] = _pnpsll.PoissonSolverOnCuda4Struct_P220_set
    __swig_getmethods__["P220"] = _pnpsll.PoissonSolverOnCuda4Struct_P220_get
    if _newclass:
        P220 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P220_get, _pnpsll.PoissonSolverOnCuda4Struct_P220_set)
    __swig_setmethods__["P320"] = _pnpsll.PoissonSolverOnCuda4Struct_P320_set
    __swig_getmethods__["P320"] = _pnpsll.PoissonSolverOnCuda4Struct_P320_get
    if _newclass:
        P320 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P320_get, _pnpsll.PoissonSolverOnCuda4Struct_P320_set)
    __swig_setmethods__["P030"] = _pnpsll.PoissonSolverOnCuda4Struct_P030_set
    __swig_getmethods__["P030"] = _pnpsll.PoissonSolverOnCuda4Struct_P030_get
    if _newclass:
        P030 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P030_get, _pnpsll.PoissonSolverOnCuda4Struct_P030_set)
    __swig_setmethods__["P130"] = _pnpsll.PoissonSolverOnCuda4Struct_P130_set
    __swig_getmethods__["P130"] = _pnpsll.PoissonSolverOnCuda4Struct_P130_get
    if _newclass:
        P130 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P130_get, _pnpsll.PoissonSolverOnCuda4Struct_P130_set)
    __swig_setmethods__["P230"] = _pnpsll.PoissonSolverOnCuda4Struct_P230_set
    __swig_getmethods__["P230"] = _pnpsll.PoissonSolverOnCuda4Struct_P230_get
    if _newclass:
        P230 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P230_get, _pnpsll.PoissonSolverOnCuda4Struct_P230_set)
    __swig_setmethods__["P330"] = _pnpsll.PoissonSolverOnCuda4Struct_P330_set
    __swig_getmethods__["P330"] = _pnpsll.PoissonSolverOnCuda4Struct_P330_get
    if _newclass:
        P330 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P330_get, _pnpsll.PoissonSolverOnCuda4Struct_P330_set)
    __swig_setmethods__["P001"] = _pnpsll.PoissonSolverOnCuda4Struct_P001_set
    __swig_getmethods__["P001"] = _pnpsll.PoissonSolverOnCuda4Struct_P001_get
    if _newclass:
        P001 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P001_get, _pnpsll.PoissonSolverOnCuda4Struct_P001_set)
    __swig_setmethods__["P101"] = _pnpsll.PoissonSolverOnCuda4Struct_P101_set
    __swig_getmethods__["P101"] = _pnpsll.PoissonSolverOnCuda4Struct_P101_get
    if _newclass:
        P101 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P101_get, _pnpsll.PoissonSolverOnCuda4Struct_P101_set)
    __swig_setmethods__["P201"] = _pnpsll.PoissonSolverOnCuda4Struct_P201_set
    __swig_getmethods__["P201"] = _pnpsll.PoissonSolverOnCuda4Struct_P201_get
    if _newclass:
        P201 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P201_get, _pnpsll.PoissonSolverOnCuda4Struct_P201_set)
    __swig_setmethods__["P301"] = _pnpsll.PoissonSolverOnCuda4Struct_P301_set
    __swig_getmethods__["P301"] = _pnpsll.PoissonSolverOnCuda4Struct_P301_get
    if _newclass:
        P301 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P301_get, _pnpsll.PoissonSolverOnCuda4Struct_P301_set)
    __swig_setmethods__["P011"] = _pnpsll.PoissonSolverOnCuda4Struct_P011_set
    __swig_getmethods__["P011"] = _pnpsll.PoissonSolverOnCuda4Struct_P011_get
    if _newclass:
        P011 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P011_get, _pnpsll.PoissonSolverOnCuda4Struct_P011_set)
    __swig_setmethods__["P111"] = _pnpsll.PoissonSolverOnCuda4Struct_P111_set
    __swig_getmethods__["P111"] = _pnpsll.PoissonSolverOnCuda4Struct_P111_get
    if _newclass:
        P111 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P111_get, _pnpsll.PoissonSolverOnCuda4Struct_P111_set)
    __swig_setmethods__["P211"] = _pnpsll.PoissonSolverOnCuda4Struct_P211_set
    __swig_getmethods__["P211"] = _pnpsll.PoissonSolverOnCuda4Struct_P211_get
    if _newclass:
        P211 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P211_get, _pnpsll.PoissonSolverOnCuda4Struct_P211_set)
    __swig_setmethods__["P311"] = _pnpsll.PoissonSolverOnCuda4Struct_P311_set
    __swig_getmethods__["P311"] = _pnpsll.PoissonSolverOnCuda4Struct_P311_get
    if _newclass:
        P311 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P311_get, _pnpsll.PoissonSolverOnCuda4Struct_P311_set)
    __swig_setmethods__["P021"] = _pnpsll.PoissonSolverOnCuda4Struct_P021_set
    __swig_getmethods__["P021"] = _pnpsll.PoissonSolverOnCuda4Struct_P021_get
    if _newclass:
        P021 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P021_get, _pnpsll.PoissonSolverOnCuda4Struct_P021_set)
    __swig_setmethods__["P121"] = _pnpsll.PoissonSolverOnCuda4Struct_P121_set
    __swig_getmethods__["P121"] = _pnpsll.PoissonSolverOnCuda4Struct_P121_get
    if _newclass:
        P121 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P121_get, _pnpsll.PoissonSolverOnCuda4Struct_P121_set)
    __swig_setmethods__["P221"] = _pnpsll.PoissonSolverOnCuda4Struct_P221_set
    __swig_getmethods__["P221"] = _pnpsll.PoissonSolverOnCuda4Struct_P221_get
    if _newclass:
        P221 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P221_get, _pnpsll.PoissonSolverOnCuda4Struct_P221_set)
    __swig_setmethods__["P321"] = _pnpsll.PoissonSolverOnCuda4Struct_P321_set
    __swig_getmethods__["P321"] = _pnpsll.PoissonSolverOnCuda4Struct_P321_get
    if _newclass:
        P321 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P321_get, _pnpsll.PoissonSolverOnCuda4Struct_P321_set)
    __swig_setmethods__["P031"] = _pnpsll.PoissonSolverOnCuda4Struct_P031_set
    __swig_getmethods__["P031"] = _pnpsll.PoissonSolverOnCuda4Struct_P031_get
    if _newclass:
        P031 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P031_get, _pnpsll.PoissonSolverOnCuda4Struct_P031_set)
    __swig_setmethods__["P131"] = _pnpsll.PoissonSolverOnCuda4Struct_P131_set
    __swig_getmethods__["P131"] = _pnpsll.PoissonSolverOnCuda4Struct_P131_get
    if _newclass:
        P131 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P131_get, _pnpsll.PoissonSolverOnCuda4Struct_P131_set)
    __swig_setmethods__["P231"] = _pnpsll.PoissonSolverOnCuda4Struct_P231_set
    __swig_getmethods__["P231"] = _pnpsll.PoissonSolverOnCuda4Struct_P231_get
    if _newclass:
        P231 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P231_get, _pnpsll.PoissonSolverOnCuda4Struct_P231_set)
    __swig_setmethods__["P331"] = _pnpsll.PoissonSolverOnCuda4Struct_P331_set
    __swig_getmethods__["P331"] = _pnpsll.PoissonSolverOnCuda4Struct_P331_get
    if _newclass:
        P331 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P331_get, _pnpsll.PoissonSolverOnCuda4Struct_P331_set)
    __swig_setmethods__["P002"] = _pnpsll.PoissonSolverOnCuda4Struct_P002_set
    __swig_getmethods__["P002"] = _pnpsll.PoissonSolverOnCuda4Struct_P002_get
    if _newclass:
        P002 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P002_get, _pnpsll.PoissonSolverOnCuda4Struct_P002_set)
    __swig_setmethods__["P102"] = _pnpsll.PoissonSolverOnCuda4Struct_P102_set
    __swig_getmethods__["P102"] = _pnpsll.PoissonSolverOnCuda4Struct_P102_get
    if _newclass:
        P102 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P102_get, _pnpsll.PoissonSolverOnCuda4Struct_P102_set)
    __swig_setmethods__["P202"] = _pnpsll.PoissonSolverOnCuda4Struct_P202_set
    __swig_getmethods__["P202"] = _pnpsll.PoissonSolverOnCuda4Struct_P202_get
    if _newclass:
        P202 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P202_get, _pnpsll.PoissonSolverOnCuda4Struct_P202_set)
    __swig_setmethods__["P302"] = _pnpsll.PoissonSolverOnCuda4Struct_P302_set
    __swig_getmethods__["P302"] = _pnpsll.PoissonSolverOnCuda4Struct_P302_get
    if _newclass:
        P302 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P302_get, _pnpsll.PoissonSolverOnCuda4Struct_P302_set)
    __swig_setmethods__["P012"] = _pnpsll.PoissonSolverOnCuda4Struct_P012_set
    __swig_getmethods__["P012"] = _pnpsll.PoissonSolverOnCuda4Struct_P012_get
    if _newclass:
        P012 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P012_get, _pnpsll.PoissonSolverOnCuda4Struct_P012_set)
    __swig_setmethods__["P112"] = _pnpsll.PoissonSolverOnCuda4Struct_P112_set
    __swig_getmethods__["P112"] = _pnpsll.PoissonSolverOnCuda4Struct_P112_get
    if _newclass:
        P112 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P112_get, _pnpsll.PoissonSolverOnCuda4Struct_P112_set)
    __swig_setmethods__["P212"] = _pnpsll.PoissonSolverOnCuda4Struct_P212_set
    __swig_getmethods__["P212"] = _pnpsll.PoissonSolverOnCuda4Struct_P212_get
    if _newclass:
        P212 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P212_get, _pnpsll.PoissonSolverOnCuda4Struct_P212_set)
    __swig_setmethods__["P312"] = _pnpsll.PoissonSolverOnCuda4Struct_P312_set
    __swig_getmethods__["P312"] = _pnpsll.PoissonSolverOnCuda4Struct_P312_get
    if _newclass:
        P312 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P312_get, _pnpsll.PoissonSolverOnCuda4Struct_P312_set)
    __swig_setmethods__["P022"] = _pnpsll.PoissonSolverOnCuda4Struct_P022_set
    __swig_getmethods__["P022"] = _pnpsll.PoissonSolverOnCuda4Struct_P022_get
    if _newclass:
        P022 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P022_get, _pnpsll.PoissonSolverOnCuda4Struct_P022_set)
    __swig_setmethods__["P122"] = _pnpsll.PoissonSolverOnCuda4Struct_P122_set
    __swig_getmethods__["P122"] = _pnpsll.PoissonSolverOnCuda4Struct_P122_get
    if _newclass:
        P122 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P122_get, _pnpsll.PoissonSolverOnCuda4Struct_P122_set)
    __swig_setmethods__["P222"] = _pnpsll.PoissonSolverOnCuda4Struct_P222_set
    __swig_getmethods__["P222"] = _pnpsll.PoissonSolverOnCuda4Struct_P222_get
    if _newclass:
        P222 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P222_get, _pnpsll.PoissonSolverOnCuda4Struct_P222_set)
    __swig_setmethods__["P322"] = _pnpsll.PoissonSolverOnCuda4Struct_P322_set
    __swig_getmethods__["P322"] = _pnpsll.PoissonSolverOnCuda4Struct_P322_get
    if _newclass:
        P322 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P322_get, _pnpsll.PoissonSolverOnCuda4Struct_P322_set)
    __swig_setmethods__["P032"] = _pnpsll.PoissonSolverOnCuda4Struct_P032_set
    __swig_getmethods__["P032"] = _pnpsll.PoissonSolverOnCuda4Struct_P032_get
    if _newclass:
        P032 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P032_get, _pnpsll.PoissonSolverOnCuda4Struct_P032_set)
    __swig_setmethods__["P132"] = _pnpsll.PoissonSolverOnCuda4Struct_P132_set
    __swig_getmethods__["P132"] = _pnpsll.PoissonSolverOnCuda4Struct_P132_get
    if _newclass:
        P132 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P132_get, _pnpsll.PoissonSolverOnCuda4Struct_P132_set)
    __swig_setmethods__["P232"] = _pnpsll.PoissonSolverOnCuda4Struct_P232_set
    __swig_getmethods__["P232"] = _pnpsll.PoissonSolverOnCuda4Struct_P232_get
    if _newclass:
        P232 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P232_get, _pnpsll.PoissonSolverOnCuda4Struct_P232_set)
    __swig_setmethods__["P332"] = _pnpsll.PoissonSolverOnCuda4Struct_P332_set
    __swig_getmethods__["P332"] = _pnpsll.PoissonSolverOnCuda4Struct_P332_get
    if _newclass:
        P332 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P332_get, _pnpsll.PoissonSolverOnCuda4Struct_P332_set)
    __swig_setmethods__["P003"] = _pnpsll.PoissonSolverOnCuda4Struct_P003_set
    __swig_getmethods__["P003"] = _pnpsll.PoissonSolverOnCuda4Struct_P003_get
    if _newclass:
        P003 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P003_get, _pnpsll.PoissonSolverOnCuda4Struct_P003_set)
    __swig_setmethods__["P103"] = _pnpsll.PoissonSolverOnCuda4Struct_P103_set
    __swig_getmethods__["P103"] = _pnpsll.PoissonSolverOnCuda4Struct_P103_get
    if _newclass:
        P103 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P103_get, _pnpsll.PoissonSolverOnCuda4Struct_P103_set)
    __swig_setmethods__["P203"] = _pnpsll.PoissonSolverOnCuda4Struct_P203_set
    __swig_getmethods__["P203"] = _pnpsll.PoissonSolverOnCuda4Struct_P203_get
    if _newclass:
        P203 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P203_get, _pnpsll.PoissonSolverOnCuda4Struct_P203_set)
    __swig_setmethods__["P303"] = _pnpsll.PoissonSolverOnCuda4Struct_P303_set
    __swig_getmethods__["P303"] = _pnpsll.PoissonSolverOnCuda4Struct_P303_get
    if _newclass:
        P303 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P303_get, _pnpsll.PoissonSolverOnCuda4Struct_P303_set)
    __swig_setmethods__["P013"] = _pnpsll.PoissonSolverOnCuda4Struct_P013_set
    __swig_getmethods__["P013"] = _pnpsll.PoissonSolverOnCuda4Struct_P013_get
    if _newclass:
        P013 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P013_get, _pnpsll.PoissonSolverOnCuda4Struct_P013_set)
    __swig_setmethods__["P113"] = _pnpsll.PoissonSolverOnCuda4Struct_P113_set
    __swig_getmethods__["P113"] = _pnpsll.PoissonSolverOnCuda4Struct_P113_get
    if _newclass:
        P113 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P113_get, _pnpsll.PoissonSolverOnCuda4Struct_P113_set)
    __swig_setmethods__["P213"] = _pnpsll.PoissonSolverOnCuda4Struct_P213_set
    __swig_getmethods__["P213"] = _pnpsll.PoissonSolverOnCuda4Struct_P213_get
    if _newclass:
        P213 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P213_get, _pnpsll.PoissonSolverOnCuda4Struct_P213_set)
    __swig_setmethods__["P313"] = _pnpsll.PoissonSolverOnCuda4Struct_P313_set
    __swig_getmethods__["P313"] = _pnpsll.PoissonSolverOnCuda4Struct_P313_get
    if _newclass:
        P313 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P313_get, _pnpsll.PoissonSolverOnCuda4Struct_P313_set)
    __swig_setmethods__["P023"] = _pnpsll.PoissonSolverOnCuda4Struct_P023_set
    __swig_getmethods__["P023"] = _pnpsll.PoissonSolverOnCuda4Struct_P023_get
    if _newclass:
        P023 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P023_get, _pnpsll.PoissonSolverOnCuda4Struct_P023_set)
    __swig_setmethods__["P123"] = _pnpsll.PoissonSolverOnCuda4Struct_P123_set
    __swig_getmethods__["P123"] = _pnpsll.PoissonSolverOnCuda4Struct_P123_get
    if _newclass:
        P123 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P123_get, _pnpsll.PoissonSolverOnCuda4Struct_P123_set)
    __swig_setmethods__["P223"] = _pnpsll.PoissonSolverOnCuda4Struct_P223_set
    __swig_getmethods__["P223"] = _pnpsll.PoissonSolverOnCuda4Struct_P223_get
    if _newclass:
        P223 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P223_get, _pnpsll.PoissonSolverOnCuda4Struct_P223_set)
    __swig_setmethods__["P323"] = _pnpsll.PoissonSolverOnCuda4Struct_P323_set
    __swig_getmethods__["P323"] = _pnpsll.PoissonSolverOnCuda4Struct_P323_get
    if _newclass:
        P323 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P323_get, _pnpsll.PoissonSolverOnCuda4Struct_P323_set)
    __swig_setmethods__["P033"] = _pnpsll.PoissonSolverOnCuda4Struct_P033_set
    __swig_getmethods__["P033"] = _pnpsll.PoissonSolverOnCuda4Struct_P033_get
    if _newclass:
        P033 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P033_get, _pnpsll.PoissonSolverOnCuda4Struct_P033_set)
    __swig_setmethods__["P133"] = _pnpsll.PoissonSolverOnCuda4Struct_P133_set
    __swig_getmethods__["P133"] = _pnpsll.PoissonSolverOnCuda4Struct_P133_get
    if _newclass:
        P133 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P133_get, _pnpsll.PoissonSolverOnCuda4Struct_P133_set)
    __swig_setmethods__["P233"] = _pnpsll.PoissonSolverOnCuda4Struct_P233_set
    __swig_getmethods__["P233"] = _pnpsll.PoissonSolverOnCuda4Struct_P233_get
    if _newclass:
        P233 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P233_get, _pnpsll.PoissonSolverOnCuda4Struct_P233_set)
    __swig_setmethods__["P333"] = _pnpsll.PoissonSolverOnCuda4Struct_P333_set
    __swig_getmethods__["P333"] = _pnpsll.PoissonSolverOnCuda4Struct_P333_get
    if _newclass:
        P333 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_P333_get, _pnpsll.PoissonSolverOnCuda4Struct_P333_set)
    __swig_setmethods__["spltGSWBC"] = _pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_set
    __swig_getmethods__["spltGSWBC"] = _pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_get
    if _newclass:
        spltGSWBC = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_get, _pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_set)
    __swig_setmethods__["spltGSWBC_X"] = _pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_X_set
    __swig_getmethods__["spltGSWBC_X"] = _pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_X_get
    if _newclass:
        spltGSWBC_X = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_X_get, _pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_X_set)
    __swig_setmethods__["spltGSWBC_XY"] = _pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_XY_set
    __swig_getmethods__["spltGSWBC_XY"] = _pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_XY_get
    if _newclass:
        spltGSWBC_XY = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_XY_get, _pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_XY_set)
    __swig_setmethods__["spltGSWBC_XYZ"] = _pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_XYZ_set
    __swig_getmethods__["spltGSWBC_XYZ"] = _pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_XYZ_get
    if _newclass:
        spltGSWBC_XYZ = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_XYZ_get, _pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_XYZ_set)
    __swig_setmethods__["MaxIter"] = _pnpsll.PoissonSolverOnCuda4Struct_MaxIter_set
    __swig_getmethods__["MaxIter"] = _pnpsll.PoissonSolverOnCuda4Struct_MaxIter_get
    if _newclass:
        MaxIter = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_MaxIter_get, _pnpsll.PoissonSolverOnCuda4Struct_MaxIter_set)
    __swig_setmethods__["Rel"] = _pnpsll.PoissonSolverOnCuda4Struct_Rel_set
    __swig_getmethods__["Rel"] = _pnpsll.PoissonSolverOnCuda4Struct_Rel_get
    if _newclass:
        Rel = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_Rel_get, _pnpsll.PoissonSolverOnCuda4Struct_Rel_set)
    __swig_setmethods__["Tol"] = _pnpsll.PoissonSolverOnCuda4Struct_Tol_set
    __swig_getmethods__["Tol"] = _pnpsll.PoissonSolverOnCuda4Struct_Tol_get
    if _newclass:
        Tol = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_Tol_get, _pnpsll.PoissonSolverOnCuda4Struct_Tol_set)
    __swig_setmethods__["Qnum"] = _pnpsll.PoissonSolverOnCuda4Struct_Qnum_set
    __swig_getmethods__["Qnum"] = _pnpsll.PoissonSolverOnCuda4Struct_Qnum_get
    if _newclass:
        Qnum = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_Qnum_get, _pnpsll.PoissonSolverOnCuda4Struct_Qnum_set)
    __swig_setmethods__["Q"] = _pnpsll.PoissonSolverOnCuda4Struct_Q_set
    __swig_getmethods__["Q"] = _pnpsll.PoissonSolverOnCuda4Struct_Q_get
    if _newclass:
        Q = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_Q_get, _pnpsll.PoissonSolverOnCuda4Struct_Q_set)
    __swig_setmethods__["Qmult"] = _pnpsll.PoissonSolverOnCuda4Struct_Qmult_set
    __swig_getmethods__["Qmult"] = _pnpsll.PoissonSolverOnCuda4Struct_Qmult_get
    if _newclass:
        Qmult = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_Qmult_get, _pnpsll.PoissonSolverOnCuda4Struct_Qmult_set)
    __swig_setmethods__["Qpos"] = _pnpsll.PoissonSolverOnCuda4Struct_Qpos_set
    __swig_getmethods__["Qpos"] = _pnpsll.PoissonSolverOnCuda4Struct_Qpos_get
    if _newclass:
        Qpos = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_Qpos_get, _pnpsll.PoissonSolverOnCuda4Struct_Qpos_set)
    __swig_setmethods__["DielBordNum"] = _pnpsll.PoissonSolverOnCuda4Struct_DielBordNum_set
    __swig_getmethods__["DielBordNum"] = _pnpsll.PoissonSolverOnCuda4Struct_DielBordNum_get
    if _newclass:
        DielBordNum = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_DielBordNum_get, _pnpsll.PoissonSolverOnCuda4Struct_DielBordNum_set)
    __swig_setmethods__["DielMult"] = _pnpsll.PoissonSolverOnCuda4Struct_DielMult_set
    __swig_getmethods__["DielMult"] = _pnpsll.PoissonSolverOnCuda4Struct_DielMult_get
    if _newclass:
        DielMult = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_DielMult_get, _pnpsll.PoissonSolverOnCuda4Struct_DielMult_set)
    __swig_setmethods__["DielBordPos"] = _pnpsll.PoissonSolverOnCuda4Struct_DielBordPos_set
    __swig_getmethods__["DielBordPos"] = _pnpsll.PoissonSolverOnCuda4Struct_DielBordPos_get
    if _newclass:
        DielBordPos = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_DielBordPos_get, _pnpsll.PoissonSolverOnCuda4Struct_DielBordPos_set)
    __swig_setmethods__["ConvergenceCheck"] = _pnpsll.PoissonSolverOnCuda4Struct_ConvergenceCheck_set
    __swig_getmethods__["ConvergenceCheck"] = _pnpsll.PoissonSolverOnCuda4Struct_ConvergenceCheck_get
    if _newclass:
        ConvergenceCheck = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_ConvergenceCheck_get, _pnpsll.PoissonSolverOnCuda4Struct_ConvergenceCheck_set)
    __swig_setmethods__["TotalEnergy"] = _pnpsll.PoissonSolverOnCuda4Struct_TotalEnergy_set
    __swig_getmethods__["TotalEnergy"] = _pnpsll.PoissonSolverOnCuda4Struct_TotalEnergy_get
    if _newclass:
        TotalEnergy = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_TotalEnergy_get, _pnpsll.PoissonSolverOnCuda4Struct_TotalEnergy_set)
    __swig_setmethods__["AvrOverChecks"] = _pnpsll.PoissonSolverOnCuda4Struct_AvrOverChecks_set
    __swig_getmethods__["AvrOverChecks"] = _pnpsll.PoissonSolverOnCuda4Struct_AvrOverChecks_get
    if _newclass:
        AvrOverChecks = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_AvrOverChecks_get, _pnpsll.PoissonSolverOnCuda4Struct_AvrOverChecks_set)
    __swig_setmethods__["TEavr"] = _pnpsll.PoissonSolverOnCuda4Struct_TEavr_set
    __swig_getmethods__["TEavr"] = _pnpsll.PoissonSolverOnCuda4Struct_TEavr_get
    if _newclass:
        TEavr = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_TEavr_get, _pnpsll.PoissonSolverOnCuda4Struct_TEavr_set)
    __swig_setmethods__["stdevTE"] = _pnpsll.PoissonSolverOnCuda4Struct_stdevTE_set
    __swig_getmethods__["stdevTE"] = _pnpsll.PoissonSolverOnCuda4Struct_stdevTE_get
    if _newclass:
        stdevTE = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_stdevTE_get, _pnpsll.PoissonSolverOnCuda4Struct_stdevTE_set)
    __swig_setmethods__["om1"] = _pnpsll.PoissonSolverOnCuda4Struct_om1_set
    __swig_getmethods__["om1"] = _pnpsll.PoissonSolverOnCuda4Struct_om1_get
    if _newclass:
        om1 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_om1_get, _pnpsll.PoissonSolverOnCuda4Struct_om1_set)
    __swig_setmethods__["om2d6"] = _pnpsll.PoissonSolverOnCuda4Struct_om2d6_set
    __swig_getmethods__["om2d6"] = _pnpsll.PoissonSolverOnCuda4Struct_om2d6_get
    if _newclass:
        om2d6 = _swig_property(_pnpsll.PoissonSolverOnCuda4Struct_om2d6_get, _pnpsll.PoissonSolverOnCuda4Struct_om2d6_set)

    def __init__(self):
        this = _pnpsll.new_PoissonSolverOnCuda4Struct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_PoissonSolverOnCuda4Struct
    __del__ = lambda self: None
PoissonSolverOnCuda4Struct_swigregister = _pnpsll.PoissonSolverOnCuda4Struct_swigregister
PoissonSolverOnCuda4Struct_swigregister(PoissonSolverOnCuda4Struct)

class PoissonSolverOnCuda1Struct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoissonSolverOnCuda1Struct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoissonSolverOnCuda1Struct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GS"] = _pnpsll.PoissonSolverOnCuda1Struct_GS_set
    __swig_getmethods__["GS"] = _pnpsll.PoissonSolverOnCuda1Struct_GS_get
    if _newclass:
        GS = _swig_property(_pnpsll.PoissonSolverOnCuda1Struct_GS_get, _pnpsll.PoissonSolverOnCuda1Struct_GS_set)
    __swig_setmethods__["GridScale"] = _pnpsll.PoissonSolverOnCuda1Struct_GridScale_set
    __swig_getmethods__["GridScale"] = _pnpsll.PoissonSolverOnCuda1Struct_GridScale_get
    if _newclass:
        GridScale = _swig_property(_pnpsll.PoissonSolverOnCuda1Struct_GridScale_get, _pnpsll.PoissonSolverOnCuda1Struct_GridScale_set)
    __swig_setmethods__["Pot"] = _pnpsll.PoissonSolverOnCuda1Struct_Pot_set
    __swig_getmethods__["Pot"] = _pnpsll.PoissonSolverOnCuda1Struct_Pot_get
    if _newclass:
        Pot = _swig_property(_pnpsll.PoissonSolverOnCuda1Struct_Pot_get, _pnpsll.PoissonSolverOnCuda1Struct_Pot_set)
    __swig_setmethods__["PotCu"] = _pnpsll.PoissonSolverOnCuda1Struct_PotCu_set
    __swig_getmethods__["PotCu"] = _pnpsll.PoissonSolverOnCuda1Struct_PotCu_get
    if _newclass:
        PotCu = _swig_property(_pnpsll.PoissonSolverOnCuda1Struct_PotCu_get, _pnpsll.PoissonSolverOnCuda1Struct_PotCu_set)
    __swig_setmethods__["spltGSWBC"] = _pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_set
    __swig_getmethods__["spltGSWBC"] = _pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_get
    if _newclass:
        spltGSWBC = _swig_property(_pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_get, _pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_set)
    __swig_setmethods__["spltGSWBC_X"] = _pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_X_set
    __swig_getmethods__["spltGSWBC_X"] = _pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_X_get
    if _newclass:
        spltGSWBC_X = _swig_property(_pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_X_get, _pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_X_set)
    __swig_setmethods__["spltGSWBC_XY"] = _pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_XY_set
    __swig_getmethods__["spltGSWBC_XY"] = _pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_XY_get
    if _newclass:
        spltGSWBC_XY = _swig_property(_pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_XY_get, _pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_XY_set)
    __swig_setmethods__["spltGSWBC_XYZ"] = _pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_XYZ_set
    __swig_getmethods__["spltGSWBC_XYZ"] = _pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_XYZ_get
    if _newclass:
        spltGSWBC_XYZ = _swig_property(_pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_XYZ_get, _pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_XYZ_set)
    __swig_setmethods__["MaxIter"] = _pnpsll.PoissonSolverOnCuda1Struct_MaxIter_set
    __swig_getmethods__["MaxIter"] = _pnpsll.PoissonSolverOnCuda1Struct_MaxIter_get
    if _newclass:
        MaxIter = _swig_property(_pnpsll.PoissonSolverOnCuda1Struct_MaxIter_get, _pnpsll.PoissonSolverOnCuda1Struct_MaxIter_set)
    __swig_setmethods__["Rel"] = _pnpsll.PoissonSolverOnCuda1Struct_Rel_set
    __swig_getmethods__["Rel"] = _pnpsll.PoissonSolverOnCuda1Struct_Rel_get
    if _newclass:
        Rel = _swig_property(_pnpsll.PoissonSolverOnCuda1Struct_Rel_get, _pnpsll.PoissonSolverOnCuda1Struct_Rel_set)
    __swig_setmethods__["Tol"] = _pnpsll.PoissonSolverOnCuda1Struct_Tol_set
    __swig_getmethods__["Tol"] = _pnpsll.PoissonSolverOnCuda1Struct_Tol_get
    if _newclass:
        Tol = _swig_property(_pnpsll.PoissonSolverOnCuda1Struct_Tol_get, _pnpsll.PoissonSolverOnCuda1Struct_Tol_set)
    __swig_setmethods__["om1"] = _pnpsll.PoissonSolverOnCuda1Struct_om1_set
    __swig_getmethods__["om1"] = _pnpsll.PoissonSolverOnCuda1Struct_om1_get
    if _newclass:
        om1 = _swig_property(_pnpsll.PoissonSolverOnCuda1Struct_om1_get, _pnpsll.PoissonSolverOnCuda1Struct_om1_set)
    __swig_setmethods__["om2d6"] = _pnpsll.PoissonSolverOnCuda1Struct_om2d6_set
    __swig_getmethods__["om2d6"] = _pnpsll.PoissonSolverOnCuda1Struct_om2d6_get
    if _newclass:
        om2d6 = _swig_property(_pnpsll.PoissonSolverOnCuda1Struct_om2d6_get, _pnpsll.PoissonSolverOnCuda1Struct_om2d6_set)

    def __init__(self):
        this = _pnpsll.new_PoissonSolverOnCuda1Struct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_PoissonSolverOnCuda1Struct
    __del__ = lambda self: None
PoissonSolverOnCuda1Struct_swigregister = _pnpsll.PoissonSolverOnCuda1Struct_swigregister
PoissonSolverOnCuda1Struct_swigregister(PoissonSolverOnCuda1Struct)

class PoissonSolverOnCudaParamStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoissonSolverOnCudaParamStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoissonSolverOnCudaParamStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BS_X"] = _pnpsll.PoissonSolverOnCudaParamStruct_BS_X_set
    __swig_getmethods__["BS_X"] = _pnpsll.PoissonSolverOnCudaParamStruct_BS_X_get
    if _newclass:
        BS_X = _swig_property(_pnpsll.PoissonSolverOnCudaParamStruct_BS_X_get, _pnpsll.PoissonSolverOnCudaParamStruct_BS_X_set)
    __swig_setmethods__["BS_Y"] = _pnpsll.PoissonSolverOnCudaParamStruct_BS_Y_set
    __swig_getmethods__["BS_Y"] = _pnpsll.PoissonSolverOnCudaParamStruct_BS_Y_get
    if _newclass:
        BS_Y = _swig_property(_pnpsll.PoissonSolverOnCudaParamStruct_BS_Y_get, _pnpsll.PoissonSolverOnCudaParamStruct_BS_Y_set)
    __swig_setmethods__["BS_Z"] = _pnpsll.PoissonSolverOnCudaParamStruct_BS_Z_set
    __swig_getmethods__["BS_Z"] = _pnpsll.PoissonSolverOnCudaParamStruct_BS_Z_get
    if _newclass:
        BS_Z = _swig_property(_pnpsll.PoissonSolverOnCudaParamStruct_BS_Z_get, _pnpsll.PoissonSolverOnCudaParamStruct_BS_Z_set)
    __swig_setmethods__["BS_XY"] = _pnpsll.PoissonSolverOnCudaParamStruct_BS_XY_set
    __swig_getmethods__["BS_XY"] = _pnpsll.PoissonSolverOnCudaParamStruct_BS_XY_get
    if _newclass:
        BS_XY = _swig_property(_pnpsll.PoissonSolverOnCudaParamStruct_BS_XY_get, _pnpsll.PoissonSolverOnCudaParamStruct_BS_XY_set)
    __swig_setmethods__["BS_XYZ"] = _pnpsll.PoissonSolverOnCudaParamStruct_BS_XYZ_set
    __swig_getmethods__["BS_XYZ"] = _pnpsll.PoissonSolverOnCudaParamStruct_BS_XYZ_get
    if _newclass:
        BS_XYZ = _swig_property(_pnpsll.PoissonSolverOnCudaParamStruct_BS_XYZ_get, _pnpsll.PoissonSolverOnCudaParamStruct_BS_XYZ_set)
    __swig_setmethods__["Qblock"] = _pnpsll.PoissonSolverOnCudaParamStruct_Qblock_set
    __swig_getmethods__["Qblock"] = _pnpsll.PoissonSolverOnCudaParamStruct_Qblock_get
    if _newclass:
        Qblock = _swig_property(_pnpsll.PoissonSolverOnCudaParamStruct_Qblock_get, _pnpsll.PoissonSolverOnCudaParamStruct_Qblock_set)
    __swig_setmethods__["DBblock"] = _pnpsll.PoissonSolverOnCudaParamStruct_DBblock_set
    __swig_getmethods__["DBblock"] = _pnpsll.PoissonSolverOnCudaParamStruct_DBblock_get
    if _newclass:
        DBblock = _swig_property(_pnpsll.PoissonSolverOnCudaParamStruct_DBblock_get, _pnpsll.PoissonSolverOnCudaParamStruct_DBblock_set)

    def __init__(self):
        this = _pnpsll.new_PoissonSolverOnCudaParamStruct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_PoissonSolverOnCudaParamStruct
    __del__ = lambda self: None
PoissonSolverOnCudaParamStruct_swigregister = _pnpsll.PoissonSolverOnCudaParamStruct_swigregister
PoissonSolverOnCudaParamStruct_swigregister(PoissonSolverOnCudaParamStruct)

class GOAtomsStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GOAtomsStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GOAtomsStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GS_X"] = _pnpsll.GOAtomsStruct_GS_X_set
    __swig_getmethods__["GS_X"] = _pnpsll.GOAtomsStruct_GS_X_get
    if _newclass:
        GS_X = _swig_property(_pnpsll.GOAtomsStruct_GS_X_get, _pnpsll.GOAtomsStruct_GS_X_set)
    __swig_setmethods__["GS_Y"] = _pnpsll.GOAtomsStruct_GS_Y_set
    __swig_getmethods__["GS_Y"] = _pnpsll.GOAtomsStruct_GS_Y_get
    if _newclass:
        GS_Y = _swig_property(_pnpsll.GOAtomsStruct_GS_Y_get, _pnpsll.GOAtomsStruct_GS_Y_set)
    __swig_setmethods__["GS_Z"] = _pnpsll.GOAtomsStruct_GS_Z_set
    __swig_getmethods__["GS_Z"] = _pnpsll.GOAtomsStruct_GS_Z_get
    if _newclass:
        GS_Z = _swig_property(_pnpsll.GOAtomsStruct_GS_Z_get, _pnpsll.GOAtomsStruct_GS_Z_set)
    __swig_setmethods__["Natoms"] = _pnpsll.GOAtomsStruct_Natoms_set
    __swig_getmethods__["Natoms"] = _pnpsll.GOAtomsStruct_Natoms_get
    if _newclass:
        Natoms = _swig_property(_pnpsll.GOAtomsStruct_Natoms_get, _pnpsll.GOAtomsStruct_Natoms_set)
    __swig_setmethods__["r"] = _pnpsll.GOAtomsStruct_r_set
    __swig_getmethods__["r"] = _pnpsll.GOAtomsStruct_r_get
    if _newclass:
        r = _swig_property(_pnpsll.GOAtomsStruct_r_get, _pnpsll.GOAtomsStruct_r_set)
    __swig_setmethods__["R"] = _pnpsll.GOAtomsStruct_R_set
    __swig_getmethods__["R"] = _pnpsll.GOAtomsStruct_R_get
    if _newclass:
        R = _swig_property(_pnpsll.GOAtomsStruct_R_get, _pnpsll.GOAtomsStruct_R_set)
    __swig_setmethods__["q"] = _pnpsll.GOAtomsStruct_q_set
    __swig_getmethods__["q"] = _pnpsll.GOAtomsStruct_q_get
    if _newclass:
        q = _swig_property(_pnpsll.GOAtomsStruct_q_get, _pnpsll.GOAtomsStruct_q_set)
    __swig_setmethods__["Rsmoth"] = _pnpsll.GOAtomsStruct_Rsmoth_set
    __swig_getmethods__["Rsmoth"] = _pnpsll.GOAtomsStruct_Rsmoth_get
    if _newclass:
        Rsmoth = _swig_property(_pnpsll.GOAtomsStruct_Rsmoth_get, _pnpsll.GOAtomsStruct_Rsmoth_set)
    __swig_setmethods__["iDiel"] = _pnpsll.GOAtomsStruct_iDiel_set
    __swig_getmethods__["iDiel"] = _pnpsll.GOAtomsStruct_iDiel_get
    if _newclass:
        iDiel = _swig_property(_pnpsll.GOAtomsStruct_iDiel_get, _pnpsll.GOAtomsStruct_iDiel_set)
    __swig_setmethods__["iDielBulk"] = _pnpsll.GOAtomsStruct_iDielBulk_set
    __swig_getmethods__["iDielBulk"] = _pnpsll.GOAtomsStruct_iDielBulk_get
    if _newclass:
        iDielBulk = _swig_property(_pnpsll.GOAtomsStruct_iDielBulk_get, _pnpsll.GOAtomsStruct_iDielBulk_set)
    __swig_setmethods__["Surf"] = _pnpsll.GOAtomsStruct_Surf_set
    __swig_getmethods__["Surf"] = _pnpsll.GOAtomsStruct_Surf_get
    if _newclass:
        Surf = _swig_property(_pnpsll.GOAtomsStruct_Surf_get, _pnpsll.GOAtomsStruct_Surf_set)
    __swig_setmethods__["iVtmp"] = _pnpsll.GOAtomsStruct_iVtmp_set
    __swig_getmethods__["iVtmp"] = _pnpsll.GOAtomsStruct_iVtmp_get
    if _newclass:
        iVtmp = _swig_property(_pnpsll.GOAtomsStruct_iVtmp_get, _pnpsll.GOAtomsStruct_iVtmp_set)

    def __init__(self):
        this = _pnpsll.new_GOAtomsStruct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_GOAtomsStruct
    __del__ = lambda self: None
GOAtomsStruct_swigregister = _pnpsll.GOAtomsStruct_swigregister
GOAtomsStruct_swigregister(GOAtomsStruct)


def GOAtomsStruct_Create(GS_X: 'int', GS_Y: 'int', GS_Z: 'int', Natoms: 'int', Rsmoth: 'float') -> "GOAtomsStruct *":
    return _pnpsll.GOAtomsStruct_Create(GS_X, GS_Y, GS_Z, Natoms, Rsmoth)
GOAtomsStruct_Create = _pnpsll.GOAtomsStruct_Create

def GOAtomsStruct_Delete(goatoms: 'GOAtomsStruct') -> "GOAtomsStruct *":
    return _pnpsll.GOAtomsStruct_Delete(goatoms)
GOAtomsStruct_Delete = _pnpsll.GOAtomsStruct_Delete
POISSON_SOLVER_CONVERGENCE_CHECK = _pnpsll.POISSON_SOLVER_CONVERGENCE_CHECK
POISSON_SOLVER_CHARGED_POINT = _pnpsll.POISSON_SOLVER_CHARGED_POINT
POISSON_SOLVER_UNCOMMON_DIELECTRIC_POINT = _pnpsll.POISSON_SOLVER_UNCOMMON_DIELECTRIC_POINT
POISSON_SOLVER_CHARGED_UNCOMMON_DIELECTRIC_POINT = _pnpsll.POISSON_SOLVER_CHARGED_UNCOMMON_DIELECTRIC_POINT
class PoissonSolverDataW(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoissonSolverDataW, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoissonSolverDataW, name)
    __repr__ = _swig_repr
    __swig_setmethods__["borderPoints"] = _pnpsll.PoissonSolverDataW_borderPoints_set
    __swig_getmethods__["borderPoints"] = _pnpsll.PoissonSolverDataW_borderPoints_get
    if _newclass:
        borderPoints = _swig_property(_pnpsll.PoissonSolverDataW_borderPoints_get, _pnpsll.PoissonSolverDataW_borderPoints_set)
    __swig_setmethods__["om2InverseDielectricSum"] = _pnpsll.PoissonSolverDataW_om2InverseDielectricSum_set
    __swig_getmethods__["om2InverseDielectricSum"] = _pnpsll.PoissonSolverDataW_om2InverseDielectricSum_get
    if _newclass:
        om2InverseDielectricSum = _swig_property(_pnpsll.PoissonSolverDataW_om2InverseDielectricSum_get, _pnpsll.PoissonSolverDataW_om2InverseDielectricSum_set)
    __swig_setmethods__["typeOfBorderPoint"] = _pnpsll.PoissonSolverDataW_typeOfBorderPoint_set
    __swig_getmethods__["typeOfBorderPoint"] = _pnpsll.PoissonSolverDataW_typeOfBorderPoint_get
    if _newclass:
        typeOfBorderPoint = _swig_property(_pnpsll.PoissonSolverDataW_typeOfBorderPoint_get, _pnpsll.PoissonSolverDataW_typeOfBorderPoint_set)
    __swig_setmethods__["maxIterations"] = _pnpsll.PoissonSolverDataW_maxIterations_set
    __swig_getmethods__["maxIterations"] = _pnpsll.PoissonSolverDataW_maxIterations_get
    if _newclass:
        maxIterations = _swig_property(_pnpsll.PoissonSolverDataW_maxIterations_get, _pnpsll.PoissonSolverDataW_maxIterations_set)
    __swig_setmethods__["convergence"] = _pnpsll.PoissonSolverDataW_convergence_set
    __swig_getmethods__["convergence"] = _pnpsll.PoissonSolverDataW_convergence_get
    if _newclass:
        convergence = _swig_property(_pnpsll.PoissonSolverDataW_convergence_get, _pnpsll.PoissonSolverDataW_convergence_set)
    __swig_setmethods__["relaxation"] = _pnpsll.PoissonSolverDataW_relaxation_set
    __swig_getmethods__["relaxation"] = _pnpsll.PoissonSolverDataW_relaxation_get
    if _newclass:
        relaxation = _swig_property(_pnpsll.PoissonSolverDataW_relaxation_get, _pnpsll.PoissonSolverDataW_relaxation_set)
    __swig_setmethods__["hasDynamicCharges"] = _pnpsll.PoissonSolverDataW_hasDynamicCharges_set
    __swig_getmethods__["hasDynamicCharges"] = _pnpsll.PoissonSolverDataW_hasDynamicCharges_get
    if _newclass:
        hasDynamicCharges = _swig_property(_pnpsll.PoissonSolverDataW_hasDynamicCharges_get, _pnpsll.PoissonSolverDataW_hasDynamicCharges_set)

    def __init__(self):
        this = _pnpsll.new_PoissonSolverDataW()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_PoissonSolverDataW
    __del__ = lambda self: None
PoissonSolverDataW_swigregister = _pnpsll.PoissonSolverDataW_swigregister
PoissonSolverDataW_swigregister(PoissonSolverDataW)

class PoissonSolver(GenericSolver, PnpsObject):
    __swig_setmethods__ = {}
    for _s in [GenericSolver, PnpsObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoissonSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericSolver, PnpsObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PoissonSolver, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pnpsll.new_PoissonSolver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_PoissonSolver
    __del__ = lambda self: None

    def InitZero(self) -> "int":
        return _pnpsll.PoissonSolver_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.PoissonSolver_Clear(self)
    Auto = _pnpsll.PoissonSolver_Auto
    NodeIndexBased = _pnpsll.PoissonSolver_NodeIndexBased
    ArrayDirect = _pnpsll.PoissonSolver_ArrayDirect
    PNPC = _pnpsll.PoissonSolver_PNPC
    __swig_setmethods__["solver"] = _pnpsll.PoissonSolver_solver_set
    __swig_getmethods__["solver"] = _pnpsll.PoissonSolver_solver_get
    if _newclass:
        solver = _swig_property(_pnpsll.PoissonSolver_solver_get, _pnpsll.PoissonSolver_solver_set)
    __swig_setmethods__["MaxIterations"] = _pnpsll.PoissonSolver_MaxIterations_set
    __swig_getmethods__["MaxIterations"] = _pnpsll.PoissonSolver_MaxIterations_get
    if _newclass:
        MaxIterations = _swig_property(_pnpsll.PoissonSolver_MaxIterations_get, _pnpsll.PoissonSolver_MaxIterations_set)
    __swig_setmethods__["MinIterations"] = _pnpsll.PoissonSolver_MinIterations_set
    __swig_getmethods__["MinIterations"] = _pnpsll.PoissonSolver_MinIterations_get
    if _newclass:
        MinIterations = _swig_property(_pnpsll.PoissonSolver_MinIterations_get, _pnpsll.PoissonSolver_MinIterations_set)
    __swig_setmethods__["ConvergenceCheck"] = _pnpsll.PoissonSolver_ConvergenceCheck_set
    __swig_getmethods__["ConvergenceCheck"] = _pnpsll.PoissonSolver_ConvergenceCheck_get
    if _newclass:
        ConvergenceCheck = _swig_property(_pnpsll.PoissonSolver_ConvergenceCheck_get, _pnpsll.PoissonSolver_ConvergenceCheck_set)
    __swig_setmethods__["Convergence"] = _pnpsll.PoissonSolver_Convergence_set
    __swig_getmethods__["Convergence"] = _pnpsll.PoissonSolver_Convergence_get
    if _newclass:
        Convergence = _swig_property(_pnpsll.PoissonSolver_Convergence_get, _pnpsll.PoissonSolver_Convergence_set)
    __swig_setmethods__["Relaxation"] = _pnpsll.PoissonSolver_Relaxation_set
    __swig_getmethods__["Relaxation"] = _pnpsll.PoissonSolver_Relaxation_get
    if _newclass:
        Relaxation = _swig_property(_pnpsll.PoissonSolver_Relaxation_get, _pnpsll.PoissonSolver_Relaxation_set)
    __swig_setmethods__["QmobMod"] = _pnpsll.PoissonSolver_QmobMod_set
    __swig_getmethods__["QmobMod"] = _pnpsll.PoissonSolver_QmobMod_get
    if _newclass:
        QmobMod = _swig_property(_pnpsll.PoissonSolver_QmobMod_get, _pnpsll.PoissonSolver_QmobMod_set)
    __swig_setmethods__["verbose"] = _pnpsll.PoissonSolver_verbose_set
    __swig_getmethods__["verbose"] = _pnpsll.PoissonSolver_verbose_get
    if _newclass:
        verbose = _swig_property(_pnpsll.PoissonSolver_verbose_get, _pnpsll.PoissonSolver_verbose_set)
    __swig_setmethods__["totalChange"] = _pnpsll.PoissonSolver_totalChange_set
    __swig_getmethods__["totalChange"] = _pnpsll.PoissonSolver_totalChange_get
    if _newclass:
        totalChange = _swig_property(_pnpsll.PoissonSolver_totalChange_get, _pnpsll.PoissonSolver_totalChange_set)
    __swig_setmethods__["relativeChange"] = _pnpsll.PoissonSolver_relativeChange_set
    __swig_getmethods__["relativeChange"] = _pnpsll.PoissonSolver_relativeChange_get
    if _newclass:
        relativeChange = _swig_property(_pnpsll.PoissonSolver_relativeChange_get, _pnpsll.PoissonSolver_relativeChange_set)
    __swig_setmethods__["totalEnergy"] = _pnpsll.PoissonSolver_totalEnergy_set
    __swig_getmethods__["totalEnergy"] = _pnpsll.PoissonSolver_totalEnergy_get
    if _newclass:
        totalEnergy = _swig_property(_pnpsll.PoissonSolver_totalEnergy_get, _pnpsll.PoissonSolver_totalEnergy_set)
    __swig_setmethods__["totalEnergyInd"] = _pnpsll.PoissonSolver_totalEnergyInd_set
    __swig_getmethods__["totalEnergyInd"] = _pnpsll.PoissonSolver_totalEnergyInd_get
    if _newclass:
        totalEnergyInd = _swig_property(_pnpsll.PoissonSolver_totalEnergyInd_get, _pnpsll.PoissonSolver_totalEnergyInd_set)
    __swig_setmethods__["ConvFac"] = _pnpsll.PoissonSolver_ConvFac_set
    __swig_getmethods__["ConvFac"] = _pnpsll.PoissonSolver_ConvFac_get
    if _newclass:
        ConvFac = _swig_property(_pnpsll.PoissonSolver_ConvFac_get, _pnpsll.PoissonSolver_ConvFac_set)
    __swig_setmethods__["WayToCalcSystemEnergy"] = _pnpsll.PoissonSolver_WayToCalcSystemEnergy_set
    __swig_getmethods__["WayToCalcSystemEnergy"] = _pnpsll.PoissonSolver_WayToCalcSystemEnergy_get
    if _newclass:
        WayToCalcSystemEnergy = _swig_property(_pnpsll.PoissonSolver_WayToCalcSystemEnergy_get, _pnpsll.PoissonSolver_WayToCalcSystemEnergy_set)
    __swig_setmethods__["ConvFacMaxHistory"] = _pnpsll.PoissonSolver_ConvFacMaxHistory_set
    __swig_getmethods__["ConvFacMaxHistory"] = _pnpsll.PoissonSolver_ConvFacMaxHistory_get
    if _newclass:
        ConvFacMaxHistory = _swig_property(_pnpsll.PoissonSolver_ConvFacMaxHistory_get, _pnpsll.PoissonSolver_ConvFacMaxHistory_set)
    __swig_setmethods__["World"] = _pnpsll.PoissonSolver_World_set
    __swig_getmethods__["World"] = _pnpsll.PoissonSolver_World_get
    if _newclass:
        World = _swig_property(_pnpsll.PoissonSolver_World_get, _pnpsll.PoissonSolver_World_set)
    __swig_setmethods__["NoSingularNum"] = _pnpsll.PoissonSolver_NoSingularNum_set
    __swig_getmethods__["NoSingularNum"] = _pnpsll.PoissonSolver_NoSingularNum_get
    if _newclass:
        NoSingularNum = _swig_property(_pnpsll.PoissonSolver_NoSingularNum_get, _pnpsll.PoissonSolver_NoSingularNum_set)
    __swig_setmethods__["IndexNoSingular"] = _pnpsll.PoissonSolver_IndexNoSingular_set
    __swig_getmethods__["IndexNoSingular"] = _pnpsll.PoissonSolver_IndexNoSingular_get
    if _newclass:
        IndexNoSingular = _swig_property(_pnpsll.PoissonSolver_IndexNoSingular_get, _pnpsll.PoissonSolver_IndexNoSingular_set)
    __swig_setmethods__["SingularNum"] = _pnpsll.PoissonSolver_SingularNum_set
    __swig_getmethods__["SingularNum"] = _pnpsll.PoissonSolver_SingularNum_get
    if _newclass:
        SingularNum = _swig_property(_pnpsll.PoissonSolver_SingularNum_get, _pnpsll.PoissonSolver_SingularNum_set)
    __swig_setmethods__["IndexSingular"] = _pnpsll.PoissonSolver_IndexSingular_set
    __swig_getmethods__["IndexSingular"] = _pnpsll.PoissonSolver_IndexSingular_get
    if _newclass:
        IndexSingular = _swig_property(_pnpsll.PoissonSolver_IndexSingular_get, _pnpsll.PoissonSolver_IndexSingular_set)
    __swig_setmethods__["dielectricXS"] = _pnpsll.PoissonSolver_dielectricXS_set
    __swig_getmethods__["dielectricXS"] = _pnpsll.PoissonSolver_dielectricXS_get
    if _newclass:
        dielectricXS = _swig_property(_pnpsll.PoissonSolver_dielectricXS_get, _pnpsll.PoissonSolver_dielectricXS_set)
    __swig_setmethods__["dielectricYS"] = _pnpsll.PoissonSolver_dielectricYS_set
    __swig_getmethods__["dielectricYS"] = _pnpsll.PoissonSolver_dielectricYS_get
    if _newclass:
        dielectricYS = _swig_property(_pnpsll.PoissonSolver_dielectricYS_get, _pnpsll.PoissonSolver_dielectricYS_set)
    __swig_setmethods__["dielectricZS"] = _pnpsll.PoissonSolver_dielectricZS_set
    __swig_getmethods__["dielectricZS"] = _pnpsll.PoissonSolver_dielectricZS_get
    if _newclass:
        dielectricZS = _swig_property(_pnpsll.PoissonSolver_dielectricZS_get, _pnpsll.PoissonSolver_dielectricZS_set)
    __swig_setmethods__["dielectricZSSUM"] = _pnpsll.PoissonSolver_dielectricZSSUM_set
    __swig_getmethods__["dielectricZSSUM"] = _pnpsll.PoissonSolver_dielectricZSSUM_get
    if _newclass:
        dielectricZSSUM = _swig_property(_pnpsll.PoissonSolver_dielectricZSSUM_get, _pnpsll.PoissonSolver_dielectricZSSUM_set)
    __swig_setmethods__["dielectricXmS"] = _pnpsll.PoissonSolver_dielectricXmS_set
    __swig_getmethods__["dielectricXmS"] = _pnpsll.PoissonSolver_dielectricXmS_get
    if _newclass:
        dielectricXmS = _swig_property(_pnpsll.PoissonSolver_dielectricXmS_get, _pnpsll.PoissonSolver_dielectricXmS_set)
    __swig_setmethods__["dielectricYmS"] = _pnpsll.PoissonSolver_dielectricYmS_set
    __swig_getmethods__["dielectricYmS"] = _pnpsll.PoissonSolver_dielectricYmS_get
    if _newclass:
        dielectricYmS = _swig_property(_pnpsll.PoissonSolver_dielectricYmS_get, _pnpsll.PoissonSolver_dielectricYmS_set)
    __swig_setmethods__["dielectricZmS"] = _pnpsll.PoissonSolver_dielectricZmS_set
    __swig_getmethods__["dielectricZmS"] = _pnpsll.PoissonSolver_dielectricZmS_get
    if _newclass:
        dielectricZmS = _swig_property(_pnpsll.PoissonSolver_dielectricZmS_get, _pnpsll.PoissonSolver_dielectricZmS_set)
    __swig_setmethods__["QstS"] = _pnpsll.PoissonSolver_QstS_set
    __swig_getmethods__["QstS"] = _pnpsll.PoissonSolver_QstS_get
    if _newclass:
        QstS = _swig_property(_pnpsll.PoissonSolver_QstS_get, _pnpsll.PoissonSolver_QstS_set)
    __swig_setmethods__["PhiSingular"] = _pnpsll.PoissonSolver_PhiSingular_set
    __swig_getmethods__["PhiSingular"] = _pnpsll.PoissonSolver_PhiSingular_get
    if _newclass:
        PhiSingular = _swig_property(_pnpsll.PoissonSolver_PhiSingular_get, _pnpsll.PoissonSolver_PhiSingular_set)
    __swig_setmethods__["DielBoarderNum"] = _pnpsll.PoissonSolver_DielBoarderNum_set
    __swig_getmethods__["DielBoarderNum"] = _pnpsll.PoissonSolver_DielBoarderNum_get
    if _newclass:
        DielBoarderNum = _swig_property(_pnpsll.PoissonSolver_DielBoarderNum_get, _pnpsll.PoissonSolver_DielBoarderNum_set)
    __swig_setmethods__["IndexDielBoarder"] = _pnpsll.PoissonSolver_IndexDielBoarder_set
    __swig_getmethods__["IndexDielBoarder"] = _pnpsll.PoissonSolver_IndexDielBoarder_get
    if _newclass:
        IndexDielBoarder = _swig_property(_pnpsll.PoissonSolver_IndexDielBoarder_get, _pnpsll.PoissonSolver_IndexDielBoarder_set)
    __swig_setmethods__["dielectricXDB"] = _pnpsll.PoissonSolver_dielectricXDB_set
    __swig_getmethods__["dielectricXDB"] = _pnpsll.PoissonSolver_dielectricXDB_get
    if _newclass:
        dielectricXDB = _swig_property(_pnpsll.PoissonSolver_dielectricXDB_get, _pnpsll.PoissonSolver_dielectricXDB_set)
    __swig_setmethods__["dielectricYDB"] = _pnpsll.PoissonSolver_dielectricYDB_set
    __swig_getmethods__["dielectricYDB"] = _pnpsll.PoissonSolver_dielectricYDB_get
    if _newclass:
        dielectricYDB = _swig_property(_pnpsll.PoissonSolver_dielectricYDB_get, _pnpsll.PoissonSolver_dielectricYDB_set)
    __swig_setmethods__["dielectricZDB"] = _pnpsll.PoissonSolver_dielectricZDB_set
    __swig_getmethods__["dielectricZDB"] = _pnpsll.PoissonSolver_dielectricZDB_get
    if _newclass:
        dielectricZDB = _swig_property(_pnpsll.PoissonSolver_dielectricZDB_get, _pnpsll.PoissonSolver_dielectricZDB_set)
    __swig_setmethods__["dielectricZDBSUM"] = _pnpsll.PoissonSolver_dielectricZDBSUM_set
    __swig_getmethods__["dielectricZDBSUM"] = _pnpsll.PoissonSolver_dielectricZDBSUM_get
    if _newclass:
        dielectricZDBSUM = _swig_property(_pnpsll.PoissonSolver_dielectricZDBSUM_get, _pnpsll.PoissonSolver_dielectricZDBSUM_set)
    __swig_setmethods__["dielectricXmDB"] = _pnpsll.PoissonSolver_dielectricXmDB_set
    __swig_getmethods__["dielectricXmDB"] = _pnpsll.PoissonSolver_dielectricXmDB_get
    if _newclass:
        dielectricXmDB = _swig_property(_pnpsll.PoissonSolver_dielectricXmDB_get, _pnpsll.PoissonSolver_dielectricXmDB_set)
    __swig_setmethods__["dielectricYmDB"] = _pnpsll.PoissonSolver_dielectricYmDB_set
    __swig_getmethods__["dielectricYmDB"] = _pnpsll.PoissonSolver_dielectricYmDB_get
    if _newclass:
        dielectricYmDB = _swig_property(_pnpsll.PoissonSolver_dielectricYmDB_get, _pnpsll.PoissonSolver_dielectricYmDB_set)
    __swig_setmethods__["dielectricZmDB"] = _pnpsll.PoissonSolver_dielectricZmDB_set
    __swig_getmethods__["dielectricZmDB"] = _pnpsll.PoissonSolver_dielectricZmDB_get
    if _newclass:
        dielectricZmDB = _swig_property(_pnpsll.PoissonSolver_dielectricZmDB_get, _pnpsll.PoissonSolver_dielectricZmDB_set)
    __swig_setmethods__["ChargeNum"] = _pnpsll.PoissonSolver_ChargeNum_set
    __swig_getmethods__["ChargeNum"] = _pnpsll.PoissonSolver_ChargeNum_get
    if _newclass:
        ChargeNum = _swig_property(_pnpsll.PoissonSolver_ChargeNum_get, _pnpsll.PoissonSolver_ChargeNum_set)
    __swig_setmethods__["IndexCharge"] = _pnpsll.PoissonSolver_IndexCharge_set
    __swig_getmethods__["IndexCharge"] = _pnpsll.PoissonSolver_IndexCharge_get
    if _newclass:
        IndexCharge = _swig_property(_pnpsll.PoissonSolver_IndexCharge_get, _pnpsll.PoissonSolver_IndexCharge_set)
    __swig_setmethods__["dielectricCh"] = _pnpsll.PoissonSolver_dielectricCh_set
    __swig_getmethods__["dielectricCh"] = _pnpsll.PoissonSolver_dielectricCh_get
    if _newclass:
        dielectricCh = _swig_property(_pnpsll.PoissonSolver_dielectricCh_get, _pnpsll.PoissonSolver_dielectricCh_set)
    __swig_setmethods__["Qst"] = _pnpsll.PoissonSolver_Qst_set
    __swig_getmethods__["Qst"] = _pnpsll.PoissonSolver_Qst_get
    if _newclass:
        Qst = _swig_property(_pnpsll.PoissonSolver_Qst_get, _pnpsll.PoissonSolver_Qst_set)
    __swig_setmethods__["PhiCharge"] = _pnpsll.PoissonSolver_PhiCharge_set
    __swig_getmethods__["PhiCharge"] = _pnpsll.PoissonSolver_PhiCharge_get
    if _newclass:
        PhiCharge = _swig_property(_pnpsll.PoissonSolver_PhiCharge_get, _pnpsll.PoissonSolver_PhiCharge_set)
    __swig_setmethods__["ChargeSum"] = _pnpsll.PoissonSolver_ChargeSum_set
    __swig_getmethods__["ChargeSum"] = _pnpsll.PoissonSolver_ChargeSum_get
    if _newclass:
        ChargeSum = _swig_property(_pnpsll.PoissonSolver_ChargeSum_get, _pnpsll.PoissonSolver_ChargeSum_set)
    NoSingular = _pnpsll.PoissonSolver_NoSingular
    Boarder = _pnpsll.PoissonSolver_Boarder
    Charge = _pnpsll.PoissonSolver_Charge
    DielBoarder = _pnpsll.PoissonSolver_DielBoarder
    ChargeAndDielBoarder = _pnpsll.PoissonSolver_ChargeAndDielBoarder
    Singular = _pnpsll.PoissonSolver_Singular
    __swig_setmethods__["QmobNum"] = _pnpsll.PoissonSolver_QmobNum_set
    __swig_getmethods__["QmobNum"] = _pnpsll.PoissonSolver_QmobNum_get
    if _newclass:
        QmobNum = _swig_property(_pnpsll.PoissonSolver_QmobNum_get, _pnpsll.PoissonSolver_QmobNum_set)
    __swig_setmethods__["IndexQmob"] = _pnpsll.PoissonSolver_IndexQmob_set
    __swig_getmethods__["IndexQmob"] = _pnpsll.PoissonSolver_IndexQmob_get
    if _newclass:
        IndexQmob = _swig_property(_pnpsll.PoissonSolver_IndexQmob_get, _pnpsll.PoissonSolver_IndexQmob_set)
    __swig_setmethods__["Qmob"] = _pnpsll.PoissonSolver_Qmob_set
    __swig_getmethods__["Qmob"] = _pnpsll.PoissonSolver_Qmob_get
    if _newclass:
        Qmob = _swig_property(_pnpsll.PoissonSolver_Qmob_get, _pnpsll.PoissonSolver_Qmob_set)
    __swig_setmethods__["dielectricChMob"] = _pnpsll.PoissonSolver_dielectricChMob_set
    __swig_getmethods__["dielectricChMob"] = _pnpsll.PoissonSolver_dielectricChMob_get
    if _newclass:
        dielectricChMob = _swig_property(_pnpsll.PoissonSolver_dielectricChMob_get, _pnpsll.PoissonSolver_dielectricChMob_set)
    __swig_setmethods__["CalcVolume"] = _pnpsll.PoissonSolver_CalcVolume_set
    __swig_getmethods__["CalcVolume"] = _pnpsll.PoissonSolver_CalcVolume_get
    if _newclass:
        CalcVolume = _swig_property(_pnpsll.PoissonSolver_CalcVolume_get, _pnpsll.PoissonSolver_CalcVolume_set)
    __swig_setmethods__["QmobDielBoarderNum"] = _pnpsll.PoissonSolver_QmobDielBoarderNum_set
    __swig_getmethods__["QmobDielBoarderNum"] = _pnpsll.PoissonSolver_QmobDielBoarderNum_get
    if _newclass:
        QmobDielBoarderNum = _swig_property(_pnpsll.PoissonSolver_QmobDielBoarderNum_get, _pnpsll.PoissonSolver_QmobDielBoarderNum_set)
    __swig_setmethods__["IndexQmobDielBoarder"] = _pnpsll.PoissonSolver_IndexQmobDielBoarder_set
    __swig_getmethods__["IndexQmobDielBoarder"] = _pnpsll.PoissonSolver_IndexQmobDielBoarder_get
    if _newclass:
        IndexQmobDielBoarder = _swig_property(_pnpsll.PoissonSolver_IndexQmobDielBoarder_get, _pnpsll.PoissonSolver_IndexQmobDielBoarder_set)
    __swig_setmethods__["QmobDielBoarder"] = _pnpsll.PoissonSolver_QmobDielBoarder_set
    __swig_getmethods__["QmobDielBoarder"] = _pnpsll.PoissonSolver_QmobDielBoarder_get
    if _newclass:
        QmobDielBoarder = _swig_property(_pnpsll.PoissonSolver_QmobDielBoarder_get, _pnpsll.PoissonSolver_QmobDielBoarder_set)
    __swig_setmethods__["dielectricXQmobDB"] = _pnpsll.PoissonSolver_dielectricXQmobDB_set
    __swig_getmethods__["dielectricXQmobDB"] = _pnpsll.PoissonSolver_dielectricXQmobDB_get
    if _newclass:
        dielectricXQmobDB = _swig_property(_pnpsll.PoissonSolver_dielectricXQmobDB_get, _pnpsll.PoissonSolver_dielectricXQmobDB_set)
    __swig_setmethods__["dielectricYQmobDB"] = _pnpsll.PoissonSolver_dielectricYQmobDB_set
    __swig_getmethods__["dielectricYQmobDB"] = _pnpsll.PoissonSolver_dielectricYQmobDB_get
    if _newclass:
        dielectricYQmobDB = _swig_property(_pnpsll.PoissonSolver_dielectricYQmobDB_get, _pnpsll.PoissonSolver_dielectricYQmobDB_set)
    __swig_setmethods__["dielectricZQmobDB"] = _pnpsll.PoissonSolver_dielectricZQmobDB_set
    __swig_getmethods__["dielectricZQmobDB"] = _pnpsll.PoissonSolver_dielectricZQmobDB_get
    if _newclass:
        dielectricZQmobDB = _swig_property(_pnpsll.PoissonSolver_dielectricZQmobDB_get, _pnpsll.PoissonSolver_dielectricZQmobDB_set)
    __swig_setmethods__["dielectricXmQmobDB"] = _pnpsll.PoissonSolver_dielectricXmQmobDB_set
    __swig_getmethods__["dielectricXmQmobDB"] = _pnpsll.PoissonSolver_dielectricXmQmobDB_get
    if _newclass:
        dielectricXmQmobDB = _swig_property(_pnpsll.PoissonSolver_dielectricXmQmobDB_get, _pnpsll.PoissonSolver_dielectricXmQmobDB_set)
    __swig_setmethods__["dielectricYmQmobDB"] = _pnpsll.PoissonSolver_dielectricYmQmobDB_set
    __swig_getmethods__["dielectricYmQmobDB"] = _pnpsll.PoissonSolver_dielectricYmQmobDB_get
    if _newclass:
        dielectricYmQmobDB = _swig_property(_pnpsll.PoissonSolver_dielectricYmQmobDB_get, _pnpsll.PoissonSolver_dielectricYmQmobDB_set)
    __swig_setmethods__["dielectricZmQmobDB"] = _pnpsll.PoissonSolver_dielectricZmQmobDB_set
    __swig_getmethods__["dielectricZmQmobDB"] = _pnpsll.PoissonSolver_dielectricZmQmobDB_get
    if _newclass:
        dielectricZmQmobDB = _swig_property(_pnpsll.PoissonSolver_dielectricZmQmobDB_get, _pnpsll.PoissonSolver_dielectricZmQmobDB_set)
    __swig_setmethods__["dielectricZQmobDBSUM"] = _pnpsll.PoissonSolver_dielectricZQmobDBSUM_set
    __swig_getmethods__["dielectricZQmobDBSUM"] = _pnpsll.PoissonSolver_dielectricZQmobDBSUM_get
    if _newclass:
        dielectricZQmobDBSUM = _swig_property(_pnpsll.PoissonSolver_dielectricZQmobDBSUM_get, _pnpsll.PoissonSolver_dielectricZQmobDBSUM_set)
    __swig_setmethods__["QmobDielBoarderQstNum"] = _pnpsll.PoissonSolver_QmobDielBoarderQstNum_set
    __swig_getmethods__["QmobDielBoarderQstNum"] = _pnpsll.PoissonSolver_QmobDielBoarderQstNum_get
    if _newclass:
        QmobDielBoarderQstNum = _swig_property(_pnpsll.PoissonSolver_QmobDielBoarderQstNum_get, _pnpsll.PoissonSolver_QmobDielBoarderQstNum_set)
    __swig_setmethods__["IndexQmobDielBoarderQst"] = _pnpsll.PoissonSolver_IndexQmobDielBoarderQst_set
    __swig_getmethods__["IndexQmobDielBoarderQst"] = _pnpsll.PoissonSolver_IndexQmobDielBoarderQst_get
    if _newclass:
        IndexQmobDielBoarderQst = _swig_property(_pnpsll.PoissonSolver_IndexQmobDielBoarderQst_get, _pnpsll.PoissonSolver_IndexQmobDielBoarderQst_set)
    __swig_setmethods__["QmobDielBoarderQst"] = _pnpsll.PoissonSolver_QmobDielBoarderQst_set
    __swig_getmethods__["QmobDielBoarderQst"] = _pnpsll.PoissonSolver_QmobDielBoarderQst_get
    if _newclass:
        QmobDielBoarderQst = _swig_property(_pnpsll.PoissonSolver_QmobDielBoarderQst_get, _pnpsll.PoissonSolver_QmobDielBoarderQst_set)
    __swig_setmethods__["QstQmobDielBoarderQst"] = _pnpsll.PoissonSolver_QstQmobDielBoarderQst_set
    __swig_getmethods__["QstQmobDielBoarderQst"] = _pnpsll.PoissonSolver_QstQmobDielBoarderQst_get
    if _newclass:
        QstQmobDielBoarderQst = _swig_property(_pnpsll.PoissonSolver_QstQmobDielBoarderQst_get, _pnpsll.PoissonSolver_QstQmobDielBoarderQst_set)
    __swig_setmethods__["dielectricXQmobDBQst"] = _pnpsll.PoissonSolver_dielectricXQmobDBQst_set
    __swig_getmethods__["dielectricXQmobDBQst"] = _pnpsll.PoissonSolver_dielectricXQmobDBQst_get
    if _newclass:
        dielectricXQmobDBQst = _swig_property(_pnpsll.PoissonSolver_dielectricXQmobDBQst_get, _pnpsll.PoissonSolver_dielectricXQmobDBQst_set)
    __swig_setmethods__["dielectricYQmobDBQst"] = _pnpsll.PoissonSolver_dielectricYQmobDBQst_set
    __swig_getmethods__["dielectricYQmobDBQst"] = _pnpsll.PoissonSolver_dielectricYQmobDBQst_get
    if _newclass:
        dielectricYQmobDBQst = _swig_property(_pnpsll.PoissonSolver_dielectricYQmobDBQst_get, _pnpsll.PoissonSolver_dielectricYQmobDBQst_set)
    __swig_setmethods__["dielectricZQmobDBQst"] = _pnpsll.PoissonSolver_dielectricZQmobDBQst_set
    __swig_getmethods__["dielectricZQmobDBQst"] = _pnpsll.PoissonSolver_dielectricZQmobDBQst_get
    if _newclass:
        dielectricZQmobDBQst = _swig_property(_pnpsll.PoissonSolver_dielectricZQmobDBQst_get, _pnpsll.PoissonSolver_dielectricZQmobDBQst_set)
    __swig_setmethods__["dielectricXmQmobDBQst"] = _pnpsll.PoissonSolver_dielectricXmQmobDBQst_set
    __swig_getmethods__["dielectricXmQmobDBQst"] = _pnpsll.PoissonSolver_dielectricXmQmobDBQst_get
    if _newclass:
        dielectricXmQmobDBQst = _swig_property(_pnpsll.PoissonSolver_dielectricXmQmobDBQst_get, _pnpsll.PoissonSolver_dielectricXmQmobDBQst_set)
    __swig_setmethods__["dielectricYmQmobDBQst"] = _pnpsll.PoissonSolver_dielectricYmQmobDBQst_set
    __swig_getmethods__["dielectricYmQmobDBQst"] = _pnpsll.PoissonSolver_dielectricYmQmobDBQst_get
    if _newclass:
        dielectricYmQmobDBQst = _swig_property(_pnpsll.PoissonSolver_dielectricYmQmobDBQst_get, _pnpsll.PoissonSolver_dielectricYmQmobDBQst_set)
    __swig_setmethods__["dielectricZmQmobDBQst"] = _pnpsll.PoissonSolver_dielectricZmQmobDBQst_set
    __swig_getmethods__["dielectricZmQmobDBQst"] = _pnpsll.PoissonSolver_dielectricZmQmobDBQst_get
    if _newclass:
        dielectricZmQmobDBQst = _swig_property(_pnpsll.PoissonSolver_dielectricZmQmobDBQst_get, _pnpsll.PoissonSolver_dielectricZmQmobDBQst_set)
    __swig_setmethods__["dielectricZQmobDBSUMQst"] = _pnpsll.PoissonSolver_dielectricZQmobDBSUMQst_set
    __swig_getmethods__["dielectricZQmobDBSUMQst"] = _pnpsll.PoissonSolver_dielectricZQmobDBSUMQst_get
    if _newclass:
        dielectricZQmobDBSUMQst = _swig_property(_pnpsll.PoissonSolver_dielectricZQmobDBSUMQst_get, _pnpsll.PoissonSolver_dielectricZQmobDBSUMQst_set)
    __swig_setmethods__["poissonSolverData"] = _pnpsll.PoissonSolver_poissonSolverData_set
    __swig_getmethods__["poissonSolverData"] = _pnpsll.PoissonSolver_poissonSolverData_get
    if _newclass:
        poissonSolverData = _swig_property(_pnpsll.PoissonSolver_poissonSolverData_get, _pnpsll.PoissonSolver_poissonSolverData_set)

    def LoadParamFromPyDict(self, dict: 'PyObject *') -> "int":
        return _pnpsll.PoissonSolver_LoadParamFromPyDict(self, dict)

    def SetContWorld(self, _world: 'ContWorld') -> "int":
        return _pnpsll.PoissonSolver_SetContWorld(self, _world)

    def InitSolver(self) -> "int":
        return _pnpsll.PoissonSolver_InitSolver(self)

    def InitSolverNIB(self) -> "int":
        return _pnpsll.PoissonSolver_InitSolverNIB(self)

    def InitSolverW(self) -> "int":
        return _pnpsll.PoissonSolver_InitSolverW(self)

    def InitSolverAD(self) -> "int":
        return _pnpsll.PoissonSolver_InitSolverAD(self)

    def SetQmobForPNP(self) -> "int":
        return _pnpsll.PoissonSolver_SetQmobForPNP(self)

    def SetQmobFromConcentration(self) -> "int":
        return _pnpsll.PoissonSolver_SetQmobFromConcentration(self)

    def SetQmobFromConcentrationDouble(self) -> "int":
        return _pnpsll.PoissonSolver_SetQmobFromConcentrationDouble(self)

    def Solve(self) -> "int":
        return _pnpsll.PoissonSolver_Solve(self)

    def PoissonSolverNIB(self, ckenergy: 'bool'=True) -> "int":
        return _pnpsll.PoissonSolver_PoissonSolverNIB(self, ckenergy)

    def PoissonSolverAD(self) -> "int":
        return _pnpsll.PoissonSolver_PoissonSolverAD(self)

    def PoissonSolverW(self) -> "int":
        return _pnpsll.PoissonSolver_PoissonSolverW(self)

    def CalcSystemEnergy(self, iteration: 'int') -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergy(self, iteration)

    def CalcSystemEnergyFloat(self, iteration: 'int') -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergyFloat(self, iteration)

    def CalcSystemEnergyDouble(self, iteration: 'int') -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergyDouble(self, iteration)

    def CalcSystemEnergyLongDouble(self, iteration: 'int') -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergyLongDouble(self, iteration)

    def CalcSystemEnergyAnalizer(self, iteration: 'int') -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergyAnalizer(self, iteration)

    def CalcSystemEnergy0(self, iteration: 'int') -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergy0(self, iteration)

    def CalcSystemEnergy1(self, iteration: 'int') -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergy1(self, iteration)

    def CalcSystemEnergy3(self, iteration: 'int') -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergy3(self, iteration)

    def CalcSystemEnergyMaxPhiChange(self, iteration: 'int') -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergyMaxPhiChange(self, iteration)

    def CalcSystemEnergyStdDevPhi(self, iteration: 'int') -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergyStdDevPhi(self, iteration)

    def CalculateEnergyPAD(self, fpoh: 'float', Potential: 'float *', StaticCharge: 'float *', Epsilon: 'float *', IndexCharge: 'int *', IndexSingular: 'int *', ChargeNum: 'int', SingularNum: 'int') -> "float":
        return _pnpsll.PoissonSolver_CalculateEnergyPAD(self, fpoh, Potential, StaticCharge, Epsilon, IndexCharge, IndexSingular, ChargeNum, SingularNum)

    def ShowParameters(self) -> "int":
        return _pnpsll.PoissonSolver_ShowParameters(self)

    def ShowProperties(self) -> "int":
        return _pnpsll.PoissonSolver_ShowProperties(self)
PoissonSolver_swigregister = _pnpsll.PoissonSolver_swigregister
PoissonSolver_swigregister(PoissonSolver)

class PoissonBoltzmannSolver(GenericSolver, PnpsObject):
    __swig_setmethods__ = {}
    for _s in [GenericSolver, PnpsObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoissonBoltzmannSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericSolver, PnpsObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PoissonBoltzmannSolver, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pnpsll.new_PoissonBoltzmannSolver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_PoissonBoltzmannSolver
    __del__ = lambda self: None

    def InitZero(self) -> "int":
        return _pnpsll.PoissonBoltzmannSolver_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.PoissonBoltzmannSolver_Clear(self)
    Auto = _pnpsll.PoissonBoltzmannSolver_Auto
    NodeIndexBased = _pnpsll.PoissonBoltzmannSolver_NodeIndexBased
    ArrayDirect = _pnpsll.PoissonBoltzmannSolver_ArrayDirect
    __swig_setmethods__["solver"] = _pnpsll.PoissonBoltzmannSolver_solver_set
    __swig_getmethods__["solver"] = _pnpsll.PoissonBoltzmannSolver_solver_get
    if _newclass:
        solver = _swig_property(_pnpsll.PoissonBoltzmannSolver_solver_get, _pnpsll.PoissonBoltzmannSolver_solver_set)
    __swig_setmethods__["MaxIterationsLPB"] = _pnpsll.PoissonBoltzmannSolver_MaxIterationsLPB_set
    __swig_getmethods__["MaxIterationsLPB"] = _pnpsll.PoissonBoltzmannSolver_MaxIterationsLPB_get
    if _newclass:
        MaxIterationsLPB = _swig_property(_pnpsll.PoissonBoltzmannSolver_MaxIterationsLPB_get, _pnpsll.PoissonBoltzmannSolver_MaxIterationsLPB_set)
    __swig_setmethods__["MaxIterationsNPB"] = _pnpsll.PoissonBoltzmannSolver_MaxIterationsNPB_set
    __swig_getmethods__["MaxIterationsNPB"] = _pnpsll.PoissonBoltzmannSolver_MaxIterationsNPB_get
    if _newclass:
        MaxIterationsNPB = _swig_property(_pnpsll.PoissonBoltzmannSolver_MaxIterationsNPB_get, _pnpsll.PoissonBoltzmannSolver_MaxIterationsNPB_set)
    __swig_setmethods__["ConvergenceCheck"] = _pnpsll.PoissonBoltzmannSolver_ConvergenceCheck_set
    __swig_getmethods__["ConvergenceCheck"] = _pnpsll.PoissonBoltzmannSolver_ConvergenceCheck_get
    if _newclass:
        ConvergenceCheck = _swig_property(_pnpsll.PoissonBoltzmannSolver_ConvergenceCheck_get, _pnpsll.PoissonBoltzmannSolver_ConvergenceCheck_set)
    __swig_setmethods__["Convergence"] = _pnpsll.PoissonBoltzmannSolver_Convergence_set
    __swig_getmethods__["Convergence"] = _pnpsll.PoissonBoltzmannSolver_Convergence_get
    if _newclass:
        Convergence = _swig_property(_pnpsll.PoissonBoltzmannSolver_Convergence_get, _pnpsll.PoissonBoltzmannSolver_Convergence_set)
    __swig_setmethods__["Relaxation"] = _pnpsll.PoissonBoltzmannSolver_Relaxation_set
    __swig_getmethods__["Relaxation"] = _pnpsll.PoissonBoltzmannSolver_Relaxation_get
    if _newclass:
        Relaxation = _swig_property(_pnpsll.PoissonBoltzmannSolver_Relaxation_get, _pnpsll.PoissonBoltzmannSolver_Relaxation_set)
    __swig_setmethods__["verbose"] = _pnpsll.PoissonBoltzmannSolver_verbose_set
    __swig_getmethods__["verbose"] = _pnpsll.PoissonBoltzmannSolver_verbose_get
    if _newclass:
        verbose = _swig_property(_pnpsll.PoissonBoltzmannSolver_verbose_get, _pnpsll.PoissonBoltzmannSolver_verbose_set)
    __swig_setmethods__["totalChange"] = _pnpsll.PoissonBoltzmannSolver_totalChange_set
    __swig_getmethods__["totalChange"] = _pnpsll.PoissonBoltzmannSolver_totalChange_get
    if _newclass:
        totalChange = _swig_property(_pnpsll.PoissonBoltzmannSolver_totalChange_get, _pnpsll.PoissonBoltzmannSolver_totalChange_set)
    __swig_setmethods__["relativeChange"] = _pnpsll.PoissonBoltzmannSolver_relativeChange_set
    __swig_getmethods__["relativeChange"] = _pnpsll.PoissonBoltzmannSolver_relativeChange_get
    if _newclass:
        relativeChange = _swig_property(_pnpsll.PoissonBoltzmannSolver_relativeChange_get, _pnpsll.PoissonBoltzmannSolver_relativeChange_set)
    __swig_setmethods__["totalEnergy"] = _pnpsll.PoissonBoltzmannSolver_totalEnergy_set
    __swig_getmethods__["totalEnergy"] = _pnpsll.PoissonBoltzmannSolver_totalEnergy_get
    if _newclass:
        totalEnergy = _swig_property(_pnpsll.PoissonBoltzmannSolver_totalEnergy_get, _pnpsll.PoissonBoltzmannSolver_totalEnergy_set)
    __swig_setmethods__["totalEnergyInd"] = _pnpsll.PoissonBoltzmannSolver_totalEnergyInd_set
    __swig_getmethods__["totalEnergyInd"] = _pnpsll.PoissonBoltzmannSolver_totalEnergyInd_get
    if _newclass:
        totalEnergyInd = _swig_property(_pnpsll.PoissonBoltzmannSolver_totalEnergyInd_get, _pnpsll.PoissonBoltzmannSolver_totalEnergyInd_set)
    __swig_setmethods__["ConvFac"] = _pnpsll.PoissonBoltzmannSolver_ConvFac_set
    __swig_getmethods__["ConvFac"] = _pnpsll.PoissonBoltzmannSolver_ConvFac_get
    if _newclass:
        ConvFac = _swig_property(_pnpsll.PoissonBoltzmannSolver_ConvFac_get, _pnpsll.PoissonBoltzmannSolver_ConvFac_set)
    __swig_setmethods__["m_ContWorld"] = _pnpsll.PoissonBoltzmannSolver_m_ContWorld_set
    __swig_getmethods__["m_ContWorld"] = _pnpsll.PoissonBoltzmannSolver_m_ContWorld_get
    if _newclass:
        m_ContWorld = _swig_property(_pnpsll.PoissonBoltzmannSolver_m_ContWorld_get, _pnpsll.PoissonBoltzmannSolver_m_ContWorld_set)
    __swig_setmethods__["NoSingularNum"] = _pnpsll.PoissonBoltzmannSolver_NoSingularNum_set
    __swig_getmethods__["NoSingularNum"] = _pnpsll.PoissonBoltzmannSolver_NoSingularNum_get
    if _newclass:
        NoSingularNum = _swig_property(_pnpsll.PoissonBoltzmannSolver_NoSingularNum_get, _pnpsll.PoissonBoltzmannSolver_NoSingularNum_set)
    __swig_setmethods__["IndexNoSingular"] = _pnpsll.PoissonBoltzmannSolver_IndexNoSingular_set
    __swig_getmethods__["IndexNoSingular"] = _pnpsll.PoissonBoltzmannSolver_IndexNoSingular_get
    if _newclass:
        IndexNoSingular = _swig_property(_pnpsll.PoissonBoltzmannSolver_IndexNoSingular_get, _pnpsll.PoissonBoltzmannSolver_IndexNoSingular_set)
    __swig_setmethods__["SingularNum"] = _pnpsll.PoissonBoltzmannSolver_SingularNum_set
    __swig_getmethods__["SingularNum"] = _pnpsll.PoissonBoltzmannSolver_SingularNum_get
    if _newclass:
        SingularNum = _swig_property(_pnpsll.PoissonBoltzmannSolver_SingularNum_get, _pnpsll.PoissonBoltzmannSolver_SingularNum_set)
    __swig_setmethods__["IndexSingular"] = _pnpsll.PoissonBoltzmannSolver_IndexSingular_set
    __swig_getmethods__["IndexSingular"] = _pnpsll.PoissonBoltzmannSolver_IndexSingular_get
    if _newclass:
        IndexSingular = _swig_property(_pnpsll.PoissonBoltzmannSolver_IndexSingular_get, _pnpsll.PoissonBoltzmannSolver_IndexSingular_set)
    __swig_setmethods__["dielectricXS"] = _pnpsll.PoissonBoltzmannSolver_dielectricXS_set
    __swig_getmethods__["dielectricXS"] = _pnpsll.PoissonBoltzmannSolver_dielectricXS_get
    if _newclass:
        dielectricXS = _swig_property(_pnpsll.PoissonBoltzmannSolver_dielectricXS_get, _pnpsll.PoissonBoltzmannSolver_dielectricXS_set)
    __swig_setmethods__["dielectricYS"] = _pnpsll.PoissonBoltzmannSolver_dielectricYS_set
    __swig_getmethods__["dielectricYS"] = _pnpsll.PoissonBoltzmannSolver_dielectricYS_get
    if _newclass:
        dielectricYS = _swig_property(_pnpsll.PoissonBoltzmannSolver_dielectricYS_get, _pnpsll.PoissonBoltzmannSolver_dielectricYS_set)
    __swig_setmethods__["dielectricZS"] = _pnpsll.PoissonBoltzmannSolver_dielectricZS_set
    __swig_getmethods__["dielectricZS"] = _pnpsll.PoissonBoltzmannSolver_dielectricZS_get
    if _newclass:
        dielectricZS = _swig_property(_pnpsll.PoissonBoltzmannSolver_dielectricZS_get, _pnpsll.PoissonBoltzmannSolver_dielectricZS_set)
    __swig_setmethods__["dielectricZSSUM"] = _pnpsll.PoissonBoltzmannSolver_dielectricZSSUM_set
    __swig_getmethods__["dielectricZSSUM"] = _pnpsll.PoissonBoltzmannSolver_dielectricZSSUM_get
    if _newclass:
        dielectricZSSUM = _swig_property(_pnpsll.PoissonBoltzmannSolver_dielectricZSSUM_get, _pnpsll.PoissonBoltzmannSolver_dielectricZSSUM_set)
    __swig_setmethods__["dielectricXmS"] = _pnpsll.PoissonBoltzmannSolver_dielectricXmS_set
    __swig_getmethods__["dielectricXmS"] = _pnpsll.PoissonBoltzmannSolver_dielectricXmS_get
    if _newclass:
        dielectricXmS = _swig_property(_pnpsll.PoissonBoltzmannSolver_dielectricXmS_get, _pnpsll.PoissonBoltzmannSolver_dielectricXmS_set)
    __swig_setmethods__["dielectricYmS"] = _pnpsll.PoissonBoltzmannSolver_dielectricYmS_set
    __swig_getmethods__["dielectricYmS"] = _pnpsll.PoissonBoltzmannSolver_dielectricYmS_get
    if _newclass:
        dielectricYmS = _swig_property(_pnpsll.PoissonBoltzmannSolver_dielectricYmS_get, _pnpsll.PoissonBoltzmannSolver_dielectricYmS_set)
    __swig_setmethods__["dielectricZmS"] = _pnpsll.PoissonBoltzmannSolver_dielectricZmS_set
    __swig_getmethods__["dielectricZmS"] = _pnpsll.PoissonBoltzmannSolver_dielectricZmS_get
    if _newclass:
        dielectricZmS = _swig_property(_pnpsll.PoissonBoltzmannSolver_dielectricZmS_get, _pnpsll.PoissonBoltzmannSolver_dielectricZmS_set)
    __swig_setmethods__["QstS"] = _pnpsll.PoissonBoltzmannSolver_QstS_set
    __swig_getmethods__["QstS"] = _pnpsll.PoissonBoltzmannSolver_QstS_get
    if _newclass:
        QstS = _swig_property(_pnpsll.PoissonBoltzmannSolver_QstS_get, _pnpsll.PoissonBoltzmannSolver_QstS_set)
    __swig_setmethods__["PhiSingular"] = _pnpsll.PoissonBoltzmannSolver_PhiSingular_set
    __swig_getmethods__["PhiSingular"] = _pnpsll.PoissonBoltzmannSolver_PhiSingular_get
    if _newclass:
        PhiSingular = _swig_property(_pnpsll.PoissonBoltzmannSolver_PhiSingular_get, _pnpsll.PoissonBoltzmannSolver_PhiSingular_set)
    __swig_setmethods__["DielBoarderNum"] = _pnpsll.PoissonBoltzmannSolver_DielBoarderNum_set
    __swig_getmethods__["DielBoarderNum"] = _pnpsll.PoissonBoltzmannSolver_DielBoarderNum_get
    if _newclass:
        DielBoarderNum = _swig_property(_pnpsll.PoissonBoltzmannSolver_DielBoarderNum_get, _pnpsll.PoissonBoltzmannSolver_DielBoarderNum_set)
    __swig_setmethods__["IndexDielBoarder"] = _pnpsll.PoissonBoltzmannSolver_IndexDielBoarder_set
    __swig_getmethods__["IndexDielBoarder"] = _pnpsll.PoissonBoltzmannSolver_IndexDielBoarder_get
    if _newclass:
        IndexDielBoarder = _swig_property(_pnpsll.PoissonBoltzmannSolver_IndexDielBoarder_get, _pnpsll.PoissonBoltzmannSolver_IndexDielBoarder_set)
    __swig_setmethods__["dielectricXDB"] = _pnpsll.PoissonBoltzmannSolver_dielectricXDB_set
    __swig_getmethods__["dielectricXDB"] = _pnpsll.PoissonBoltzmannSolver_dielectricXDB_get
    if _newclass:
        dielectricXDB = _swig_property(_pnpsll.PoissonBoltzmannSolver_dielectricXDB_get, _pnpsll.PoissonBoltzmannSolver_dielectricXDB_set)
    __swig_setmethods__["dielectricYDB"] = _pnpsll.PoissonBoltzmannSolver_dielectricYDB_set
    __swig_getmethods__["dielectricYDB"] = _pnpsll.PoissonBoltzmannSolver_dielectricYDB_get
    if _newclass:
        dielectricYDB = _swig_property(_pnpsll.PoissonBoltzmannSolver_dielectricYDB_get, _pnpsll.PoissonBoltzmannSolver_dielectricYDB_set)
    __swig_setmethods__["dielectricZDB"] = _pnpsll.PoissonBoltzmannSolver_dielectricZDB_set
    __swig_getmethods__["dielectricZDB"] = _pnpsll.PoissonBoltzmannSolver_dielectricZDB_get
    if _newclass:
        dielectricZDB = _swig_property(_pnpsll.PoissonBoltzmannSolver_dielectricZDB_get, _pnpsll.PoissonBoltzmannSolver_dielectricZDB_set)
    __swig_setmethods__["dielectricZDBSUM"] = _pnpsll.PoissonBoltzmannSolver_dielectricZDBSUM_set
    __swig_getmethods__["dielectricZDBSUM"] = _pnpsll.PoissonBoltzmannSolver_dielectricZDBSUM_get
    if _newclass:
        dielectricZDBSUM = _swig_property(_pnpsll.PoissonBoltzmannSolver_dielectricZDBSUM_get, _pnpsll.PoissonBoltzmannSolver_dielectricZDBSUM_set)
    __swig_setmethods__["dielectricXmDB"] = _pnpsll.PoissonBoltzmannSolver_dielectricXmDB_set
    __swig_getmethods__["dielectricXmDB"] = _pnpsll.PoissonBoltzmannSolver_dielectricXmDB_get
    if _newclass:
        dielectricXmDB = _swig_property(_pnpsll.PoissonBoltzmannSolver_dielectricXmDB_get, _pnpsll.PoissonBoltzmannSolver_dielectricXmDB_set)
    __swig_setmethods__["dielectricYmDB"] = _pnpsll.PoissonBoltzmannSolver_dielectricYmDB_set
    __swig_getmethods__["dielectricYmDB"] = _pnpsll.PoissonBoltzmannSolver_dielectricYmDB_get
    if _newclass:
        dielectricYmDB = _swig_property(_pnpsll.PoissonBoltzmannSolver_dielectricYmDB_get, _pnpsll.PoissonBoltzmannSolver_dielectricYmDB_set)
    __swig_setmethods__["dielectricZmDB"] = _pnpsll.PoissonBoltzmannSolver_dielectricZmDB_set
    __swig_getmethods__["dielectricZmDB"] = _pnpsll.PoissonBoltzmannSolver_dielectricZmDB_get
    if _newclass:
        dielectricZmDB = _swig_property(_pnpsll.PoissonBoltzmannSolver_dielectricZmDB_get, _pnpsll.PoissonBoltzmannSolver_dielectricZmDB_set)
    __swig_setmethods__["ChargeNum"] = _pnpsll.PoissonBoltzmannSolver_ChargeNum_set
    __swig_getmethods__["ChargeNum"] = _pnpsll.PoissonBoltzmannSolver_ChargeNum_get
    if _newclass:
        ChargeNum = _swig_property(_pnpsll.PoissonBoltzmannSolver_ChargeNum_get, _pnpsll.PoissonBoltzmannSolver_ChargeNum_set)
    __swig_setmethods__["IndexCharge"] = _pnpsll.PoissonBoltzmannSolver_IndexCharge_set
    __swig_getmethods__["IndexCharge"] = _pnpsll.PoissonBoltzmannSolver_IndexCharge_get
    if _newclass:
        IndexCharge = _swig_property(_pnpsll.PoissonBoltzmannSolver_IndexCharge_get, _pnpsll.PoissonBoltzmannSolver_IndexCharge_set)
    __swig_setmethods__["dielectricCh"] = _pnpsll.PoissonBoltzmannSolver_dielectricCh_set
    __swig_getmethods__["dielectricCh"] = _pnpsll.PoissonBoltzmannSolver_dielectricCh_get
    if _newclass:
        dielectricCh = _swig_property(_pnpsll.PoissonBoltzmannSolver_dielectricCh_get, _pnpsll.PoissonBoltzmannSolver_dielectricCh_set)
    __swig_setmethods__["Qst"] = _pnpsll.PoissonBoltzmannSolver_Qst_set
    __swig_getmethods__["Qst"] = _pnpsll.PoissonBoltzmannSolver_Qst_get
    if _newclass:
        Qst = _swig_property(_pnpsll.PoissonBoltzmannSolver_Qst_get, _pnpsll.PoissonBoltzmannSolver_Qst_set)
    __swig_setmethods__["PhiCharge"] = _pnpsll.PoissonBoltzmannSolver_PhiCharge_set
    __swig_getmethods__["PhiCharge"] = _pnpsll.PoissonBoltzmannSolver_PhiCharge_get
    if _newclass:
        PhiCharge = _swig_property(_pnpsll.PoissonBoltzmannSolver_PhiCharge_get, _pnpsll.PoissonBoltzmannSolver_PhiCharge_set)
    __swig_setmethods__["PBZoneNum"] = _pnpsll.PoissonBoltzmannSolver_PBZoneNum_set
    __swig_getmethods__["PBZoneNum"] = _pnpsll.PoissonBoltzmannSolver_PBZoneNum_get
    if _newclass:
        PBZoneNum = _swig_property(_pnpsll.PoissonBoltzmannSolver_PBZoneNum_get, _pnpsll.PoissonBoltzmannSolver_PBZoneNum_set)
    __swig_setmethods__["IndexPBZone"] = _pnpsll.PoissonBoltzmannSolver_IndexPBZone_set
    __swig_getmethods__["IndexPBZone"] = _pnpsll.PoissonBoltzmannSolver_IndexPBZone_get
    if _newclass:
        IndexPBZone = _swig_property(_pnpsll.PoissonBoltzmannSolver_IndexPBZone_get, _pnpsll.PoissonBoltzmannSolver_IndexPBZone_set)
    __swig_setmethods__["om2d6LPB"] = _pnpsll.PoissonBoltzmannSolver_om2d6LPB_set
    __swig_getmethods__["om2d6LPB"] = _pnpsll.PoissonBoltzmannSolver_om2d6LPB_get
    if _newclass:
        om2d6LPB = _swig_property(_pnpsll.PoissonBoltzmannSolver_om2d6LPB_get, _pnpsll.PoissonBoltzmannSolver_om2d6LPB_set)
    __swig_setmethods__["IonicStrength"] = _pnpsll.PoissonBoltzmannSolver_IonicStrength_set
    __swig_getmethods__["IonicStrength"] = _pnpsll.PoissonBoltzmannSolver_IonicStrength_get
    if _newclass:
        IonicStrength = _swig_property(_pnpsll.PoissonBoltzmannSolver_IonicStrength_get, _pnpsll.PoissonBoltzmannSolver_IonicStrength_set)
    NoSingular = _pnpsll.PoissonBoltzmannSolver_NoSingular
    Boarder = _pnpsll.PoissonBoltzmannSolver_Boarder
    Charge = _pnpsll.PoissonBoltzmannSolver_Charge
    DielBoarder = _pnpsll.PoissonBoltzmannSolver_DielBoarder
    ChargeAndDielBoarder = _pnpsll.PoissonBoltzmannSolver_ChargeAndDielBoarder
    Singular = _pnpsll.PoissonBoltzmannSolver_Singular
    __swig_setmethods__["GS_X"] = _pnpsll.PoissonBoltzmannSolver_GS_X_set
    __swig_getmethods__["GS_X"] = _pnpsll.PoissonBoltzmannSolver_GS_X_get
    if _newclass:
        GS_X = _swig_property(_pnpsll.PoissonBoltzmannSolver_GS_X_get, _pnpsll.PoissonBoltzmannSolver_GS_X_set)
    __swig_setmethods__["GS_Y"] = _pnpsll.PoissonBoltzmannSolver_GS_Y_set
    __swig_getmethods__["GS_Y"] = _pnpsll.PoissonBoltzmannSolver_GS_Y_get
    if _newclass:
        GS_Y = _swig_property(_pnpsll.PoissonBoltzmannSolver_GS_Y_get, _pnpsll.PoissonBoltzmannSolver_GS_Y_set)
    __swig_setmethods__["GS_Z"] = _pnpsll.PoissonBoltzmannSolver_GS_Z_set
    __swig_getmethods__["GS_Z"] = _pnpsll.PoissonBoltzmannSolver_GS_Z_get
    if _newclass:
        GS_Z = _swig_property(_pnpsll.PoissonBoltzmannSolver_GS_Z_get, _pnpsll.PoissonBoltzmannSolver_GS_Z_set)
    __swig_setmethods__["GS_XY"] = _pnpsll.PoissonBoltzmannSolver_GS_XY_set
    __swig_getmethods__["GS_XY"] = _pnpsll.PoissonBoltzmannSolver_GS_XY_get
    if _newclass:
        GS_XY = _swig_property(_pnpsll.PoissonBoltzmannSolver_GS_XY_get, _pnpsll.PoissonBoltzmannSolver_GS_XY_set)
    __swig_setmethods__["GS_XYZ"] = _pnpsll.PoissonBoltzmannSolver_GS_XYZ_set
    __swig_getmethods__["GS_XYZ"] = _pnpsll.PoissonBoltzmannSolver_GS_XYZ_get
    if _newclass:
        GS_XYZ = _swig_property(_pnpsll.PoissonBoltzmannSolver_GS_XYZ_get, _pnpsll.PoissonBoltzmannSolver_GS_XYZ_set)
    __swig_setmethods__["GridScale"] = _pnpsll.PoissonBoltzmannSolver_GridScale_set
    __swig_getmethods__["GridScale"] = _pnpsll.PoissonBoltzmannSolver_GridScale_get
    if _newclass:
        GridScale = _swig_property(_pnpsll.PoissonBoltzmannSolver_GridScale_get, _pnpsll.PoissonBoltzmannSolver_GridScale_set)
    __swig_setmethods__["potential"] = _pnpsll.PoissonBoltzmannSolver_potential_set
    __swig_getmethods__["potential"] = _pnpsll.PoissonBoltzmannSolver_potential_get
    if _newclass:
        potential = _swig_property(_pnpsll.PoissonBoltzmannSolver_potential_get, _pnpsll.PoissonBoltzmannSolver_potential_set)
    __swig_setmethods__["om2"] = _pnpsll.PoissonBoltzmannSolver_om2_set
    __swig_getmethods__["om2"] = _pnpsll.PoissonBoltzmannSolver_om2_get
    if _newclass:
        om2 = _swig_property(_pnpsll.PoissonBoltzmannSolver_om2_get, _pnpsll.PoissonBoltzmannSolver_om2_set)
    __swig_setmethods__["om1"] = _pnpsll.PoissonBoltzmannSolver_om1_set
    __swig_getmethods__["om1"] = _pnpsll.PoissonBoltzmannSolver_om1_get
    if _newclass:
        om1 = _swig_property(_pnpsll.PoissonBoltzmannSolver_om1_get, _pnpsll.PoissonBoltzmannSolver_om1_set)
    __swig_setmethods__["om2d6"] = _pnpsll.PoissonBoltzmannSolver_om2d6_set
    __swig_getmethods__["om2d6"] = _pnpsll.PoissonBoltzmannSolver_om2d6_get
    if _newclass:
        om2d6 = _swig_property(_pnpsll.PoissonBoltzmannSolver_om2d6_get, _pnpsll.PoissonBoltzmannSolver_om2d6_set)

    def GuessNumberOfIteration(self) -> "int":
        return _pnpsll.PoissonBoltzmannSolver_GuessNumberOfIteration(self)

    def SetRelaxation(self, _Relaxation: 'float') -> "int":
        return _pnpsll.PoissonBoltzmannSolver_SetRelaxation(self, _Relaxation)

    def SetContWorld(self, _world: 'ContWorld') -> "int":
        return _pnpsll.PoissonBoltzmannSolver_SetContWorld(self, _world)

    def InitSolver(self) -> "int":
        return _pnpsll.PoissonBoltzmannSolver_InitSolver(self)

    def InitSolverNIB(self) -> "int":
        return _pnpsll.PoissonBoltzmannSolver_InitSolverNIB(self)

    def Solve(self) -> "int":
        return _pnpsll.PoissonBoltzmannSolver_Solve(self)

    def LinearPBSolverNIB(self, Niter: 'int') -> "int":
        return _pnpsll.PoissonBoltzmannSolver_LinearPBSolverNIB(self, Niter)

    def NonlinearPBSolverNIB(self, Niter: 'int') -> "int":
        return _pnpsll.PoissonBoltzmannSolver_NonlinearPBSolverNIB(self, Niter)

    def CalcSystemEnergy(self, iteration: 'int') -> "int":
        return _pnpsll.PoissonBoltzmannSolver_CalcSystemEnergy(self, iteration)

    def CalcSystemEnergyStdDevPhi(self, iteration: 'int') -> "int":
        return _pnpsll.PoissonBoltzmannSolver_CalcSystemEnergyStdDevPhi(self, iteration)

    def ShowParameters(self) -> "int":
        return _pnpsll.PoissonBoltzmannSolver_ShowParameters(self)

    def ShowProperties(self) -> "int":
        return _pnpsll.PoissonBoltzmannSolver_ShowProperties(self)
PoissonBoltzmannSolver_swigregister = _pnpsll.PoissonBoltzmannSolver_swigregister
PoissonBoltzmannSolver_swigregister(PoissonBoltzmannSolver)

class PoissonNernstPlanckSolver(PnpsObject, GenericSolver):
    __swig_setmethods__ = {}
    for _s in [PnpsObject, GenericSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoissonNernstPlanckSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [PnpsObject, GenericSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PoissonNernstPlanckSolver, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pnpsll.new_PoissonNernstPlanckSolver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_PoissonNernstPlanckSolver
    __del__ = lambda self: None

    def InitZero(self) -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_Clear(self)
    __swig_setmethods__["MaxIterations"] = _pnpsll.PoissonNernstPlanckSolver_MaxIterations_set
    __swig_getmethods__["MaxIterations"] = _pnpsll.PoissonNernstPlanckSolver_MaxIterations_get
    if _newclass:
        MaxIterations = _swig_property(_pnpsll.PoissonNernstPlanckSolver_MaxIterations_get, _pnpsll.PoissonNernstPlanckSolver_MaxIterations_set)
    __swig_setmethods__["ConvergenceCheck"] = _pnpsll.PoissonNernstPlanckSolver_ConvergenceCheck_set
    __swig_getmethods__["ConvergenceCheck"] = _pnpsll.PoissonNernstPlanckSolver_ConvergenceCheck_get
    if _newclass:
        ConvergenceCheck = _swig_property(_pnpsll.PoissonNernstPlanckSolver_ConvergenceCheck_get, _pnpsll.PoissonNernstPlanckSolver_ConvergenceCheck_set)
    __swig_setmethods__["tolerance"] = _pnpsll.PoissonNernstPlanckSolver_tolerance_set
    __swig_getmethods__["tolerance"] = _pnpsll.PoissonNernstPlanckSolver_tolerance_get
    if _newclass:
        tolerance = _swig_property(_pnpsll.PoissonNernstPlanckSolver_tolerance_get, _pnpsll.PoissonNernstPlanckSolver_tolerance_set)
    __swig_setmethods__["currentDimension"] = _pnpsll.PoissonNernstPlanckSolver_currentDimension_set
    __swig_getmethods__["currentDimension"] = _pnpsll.PoissonNernstPlanckSolver_currentDimension_get
    if _newclass:
        currentDimension = _swig_property(_pnpsll.PoissonNernstPlanckSolver_currentDimension_get, _pnpsll.PoissonNernstPlanckSolver_currentDimension_set)
    __swig_setmethods__["verbose"] = _pnpsll.PoissonNernstPlanckSolver_verbose_set
    __swig_getmethods__["verbose"] = _pnpsll.PoissonNernstPlanckSolver_verbose_get
    if _newclass:
        verbose = _swig_property(_pnpsll.PoissonNernstPlanckSolver_verbose_get, _pnpsll.PoissonNernstPlanckSolver_verbose_set)
    __swig_setmethods__["PMFWeightMode"] = _pnpsll.PoissonNernstPlanckSolver_PMFWeightMode_set
    __swig_getmethods__["PMFWeightMode"] = _pnpsll.PoissonNernstPlanckSolver_PMFWeightMode_get
    if _newclass:
        PMFWeightMode = _swig_property(_pnpsll.PoissonNernstPlanckSolver_PMFWeightMode_get, _pnpsll.PoissonNernstPlanckSolver_PMFWeightMode_set)
    __swig_setmethods__["PMFWeightModeStr"] = _pnpsll.PoissonNernstPlanckSolver_PMFWeightModeStr_set
    __swig_getmethods__["PMFWeightModeStr"] = _pnpsll.PoissonNernstPlanckSolver_PMFWeightModeStr_get
    if _newclass:
        PMFWeightModeStr = _swig_property(_pnpsll.PoissonNernstPlanckSolver_PMFWeightModeStr_get, _pnpsll.PoissonNernstPlanckSolver_PMFWeightModeStr_set)
    __swig_setmethods__["Itot"] = _pnpsll.PoissonNernstPlanckSolver_Itot_set
    __swig_getmethods__["Itot"] = _pnpsll.PoissonNernstPlanckSolver_Itot_get
    if _newclass:
        Itot = _swig_property(_pnpsll.PoissonNernstPlanckSolver_Itot_get, _pnpsll.PoissonNernstPlanckSolver_Itot_set)
    __swig_setmethods__["Ipos"] = _pnpsll.PoissonNernstPlanckSolver_Ipos_set
    __swig_getmethods__["Ipos"] = _pnpsll.PoissonNernstPlanckSolver_Ipos_get
    if _newclass:
        Ipos = _swig_property(_pnpsll.PoissonNernstPlanckSolver_Ipos_get, _pnpsll.PoissonNernstPlanckSolver_Ipos_set)
    __swig_setmethods__["Ineg"] = _pnpsll.PoissonNernstPlanckSolver_Ineg_set
    __swig_getmethods__["Ineg"] = _pnpsll.PoissonNernstPlanckSolver_Ineg_get
    if _newclass:
        Ineg = _swig_property(_pnpsll.PoissonNernstPlanckSolver_Ineg_get, _pnpsll.PoissonNernstPlanckSolver_Ineg_set)
    __swig_setmethods__["ItotErr"] = _pnpsll.PoissonNernstPlanckSolver_ItotErr_set
    __swig_getmethods__["ItotErr"] = _pnpsll.PoissonNernstPlanckSolver_ItotErr_get
    if _newclass:
        ItotErr = _swig_property(_pnpsll.PoissonNernstPlanckSolver_ItotErr_get, _pnpsll.PoissonNernstPlanckSolver_ItotErr_set)
    __swig_setmethods__["IposErr"] = _pnpsll.PoissonNernstPlanckSolver_IposErr_set
    __swig_getmethods__["IposErr"] = _pnpsll.PoissonNernstPlanckSolver_IposErr_get
    if _newclass:
        IposErr = _swig_property(_pnpsll.PoissonNernstPlanckSolver_IposErr_get, _pnpsll.PoissonNernstPlanckSolver_IposErr_set)
    __swig_setmethods__["InegErr"] = _pnpsll.PoissonNernstPlanckSolver_InegErr_set
    __swig_getmethods__["InegErr"] = _pnpsll.PoissonNernstPlanckSolver_InegErr_get
    if _newclass:
        InegErr = _swig_property(_pnpsll.PoissonNernstPlanckSolver_InegErr_get, _pnpsll.PoissonNernstPlanckSolver_InegErr_set)
    __swig_setmethods__["positiveCurrentProfile"] = _pnpsll.PoissonNernstPlanckSolver_positiveCurrentProfile_set
    __swig_getmethods__["positiveCurrentProfile"] = _pnpsll.PoissonNernstPlanckSolver_positiveCurrentProfile_get
    if _newclass:
        positiveCurrentProfile = _swig_property(_pnpsll.PoissonNernstPlanckSolver_positiveCurrentProfile_get, _pnpsll.PoissonNernstPlanckSolver_positiveCurrentProfile_set)
    __swig_setmethods__["negativeCurrentProfile"] = _pnpsll.PoissonNernstPlanckSolver_negativeCurrentProfile_set
    __swig_getmethods__["negativeCurrentProfile"] = _pnpsll.PoissonNernstPlanckSolver_negativeCurrentProfile_get
    if _newclass:
        negativeCurrentProfile = _swig_property(_pnpsll.PoissonNernstPlanckSolver_negativeCurrentProfile_get, _pnpsll.PoissonNernstPlanckSolver_negativeCurrentProfile_set)
    __swig_setmethods__["bLimitCurrentCalc"] = _pnpsll.PoissonNernstPlanckSolver_bLimitCurrentCalc_set
    __swig_getmethods__["bLimitCurrentCalc"] = _pnpsll.PoissonNernstPlanckSolver_bLimitCurrentCalc_get
    if _newclass:
        bLimitCurrentCalc = _swig_property(_pnpsll.PoissonNernstPlanckSolver_bLimitCurrentCalc_get, _pnpsll.PoissonNernstPlanckSolver_bLimitCurrentCalc_set)
    __swig_setmethods__["LimitCurrentCalcZ"] = _pnpsll.PoissonNernstPlanckSolver_LimitCurrentCalcZ_set
    __swig_getmethods__["LimitCurrentCalcZ"] = _pnpsll.PoissonNernstPlanckSolver_LimitCurrentCalcZ_get
    if _newclass:
        LimitCurrentCalcZ = _swig_property(_pnpsll.PoissonNernstPlanckSolver_LimitCurrentCalcZ_get, _pnpsll.PoissonNernstPlanckSolver_LimitCurrentCalcZ_set)
    __swig_setmethods__["SaveMemory"] = _pnpsll.PoissonNernstPlanckSolver_SaveMemory_set
    __swig_getmethods__["SaveMemory"] = _pnpsll.PoissonNernstPlanckSolver_SaveMemory_get
    if _newclass:
        SaveMemory = _swig_property(_pnpsll.PoissonNernstPlanckSolver_SaveMemory_get, _pnpsll.PoissonNernstPlanckSolver_SaveMemory_set)
    __swig_setmethods__["bDouble"] = _pnpsll.PoissonNernstPlanckSolver_bDouble_set
    __swig_getmethods__["bDouble"] = _pnpsll.PoissonNernstPlanckSolver_bDouble_get
    if _newclass:
        bDouble = _swig_property(_pnpsll.PoissonNernstPlanckSolver_bDouble_get, _pnpsll.PoissonNernstPlanckSolver_bDouble_set)
    __swig_setmethods__["World"] = _pnpsll.PoissonNernstPlanckSolver_World_set
    __swig_getmethods__["World"] = _pnpsll.PoissonNernstPlanckSolver_World_get
    if _newclass:
        World = _swig_property(_pnpsll.PoissonNernstPlanckSolver_World_get, _pnpsll.PoissonNernstPlanckSolver_World_set)
    __swig_setmethods__["Poisson"] = _pnpsll.PoissonNernstPlanckSolver_Poisson_set
    __swig_getmethods__["Poisson"] = _pnpsll.PoissonNernstPlanckSolver_Poisson_get
    if _newclass:
        Poisson = _swig_property(_pnpsll.PoissonNernstPlanckSolver_Poisson_get, _pnpsll.PoissonNernstPlanckSolver_Poisson_set)
    __swig_setmethods__["NernstPlank"] = _pnpsll.PoissonNernstPlanckSolver_NernstPlank_set
    __swig_getmethods__["NernstPlank"] = _pnpsll.PoissonNernstPlanckSolver_NernstPlank_get
    if _newclass:
        NernstPlank = _swig_property(_pnpsll.PoissonNernstPlanckSolver_NernstPlank_get, _pnpsll.PoissonNernstPlanckSolver_NernstPlank_set)

    def LoadParamFromPyDict(self, dict: 'PyObject *') -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_LoadParamFromPyDict(self, dict)

    def SetContWorld(self, _world: 'ContWorld') -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_SetContWorld(self, _world)

    def ShowParameters(self) -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_ShowParameters(self)

    def ShowProperties(self) -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_ShowProperties(self)

    def InitSolver(self) -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_InitSolver(self)

    def Solve(self) -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_Solve(self)

    def SolveSingle(self) -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_SolveSingle(self)

    def SolveDouble(self) -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_SolveDouble(self)

    def CalcCartI(self, ion: 'int') -> "VectorField3D *":
        return _pnpsll.PoissonNernstPlanckSolver_CalcCartI(self, ion)

    def CalcIinout(self, CartI: 'VectorField3D') -> "VectorField3D *":
        return _pnpsll.PoissonNernstPlanckSolver_CalcIinout(self, CartI)

    def CalcAvrI(self, I: 'VectorField3D', iavr: 'int') -> "VectorField3D *":
        return _pnpsll.PoissonNernstPlanckSolver_CalcAvrI(self, I, iavr)
PoissonNernstPlanckSolver_swigregister = _pnpsll.PoissonNernstPlanckSolver_swigregister
PoissonNernstPlanckSolver_swigregister(PoissonNernstPlanckSolver)


def SolvePNPSR(contworld,**kwargs):
	pnps=PoissonNernstPlanckSolver()
	pnps.LoadParamFromPyDict(kwargs);
	pnps.SetContWorld(contworld)
	pnps.InitSolver()
	pnps.Solve()

class PNPUtil(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PNPUtil, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PNPUtil, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pnpsll.new_PNPUtil()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_PNPUtil
    __del__ = lambda self: None
    if _newclass:
        RemoveLargePMFfromPNP = staticmethod(_pnpsll.PNPUtil_RemoveLargePMFfromPNP)
    else:
        RemoveLargePMFfromPNP = _pnpsll.PNPUtil_RemoveLargePMFfromPNP
    if _newclass:
        RemoveSmallCfromPNP = staticmethod(_pnpsll.PNPUtil_RemoveSmallCfromPNP)
    else:
        RemoveSmallCfromPNP = _pnpsll.PNPUtil_RemoveSmallCfromPNP
    if _newclass:
        RemoveSmallCfromPNPNearDiffBoarder = staticmethod(_pnpsll.PNPUtil_RemoveSmallCfromPNPNearDiffBoarder)
    else:
        RemoveSmallCfromPNPNearDiffBoarder = _pnpsll.PNPUtil_RemoveSmallCfromPNPNearDiffBoarder
    if _newclass:
        RemoveLargedPMFfromPNP = staticmethod(_pnpsll.PNPUtil_RemoveLargedPMFfromPNP)
    else:
        RemoveLargedPMFfromPNP = _pnpsll.PNPUtil_RemoveLargedPMFfromPNP
    if _newclass:
        RemoveLargedPMFandLargePMFfromPNP = staticmethod(_pnpsll.PNPUtil_RemoveLargedPMFandLargePMFfromPNP)
    else:
        RemoveLargedPMFandLargePMFfromPNP = _pnpsll.PNPUtil_RemoveLargedPMFandLargePMFfromPNP
    if _newclass:
        RemoveLargedPMFandLargePMFfromPNPOld = staticmethod(_pnpsll.PNPUtil_RemoveLargedPMFandLargePMFfromPNPOld)
    else:
        RemoveLargedPMFandLargePMFfromPNPOld = _pnpsll.PNPUtil_RemoveLargedPMFandLargePMFfromPNPOld
    if _newclass:
        RemoveCavitiesAtDiffusionMap = staticmethod(_pnpsll.PNPUtil_RemoveCavitiesAtDiffusionMap)
    else:
        RemoveCavitiesAtDiffusionMap = _pnpsll.PNPUtil_RemoveCavitiesAtDiffusionMap
    if _newclass:
        ScaleDiffusionInTheChannel = staticmethod(_pnpsll.PNPUtil_ScaleDiffusionInTheChannel)
    else:
        ScaleDiffusionInTheChannel = _pnpsll.PNPUtil_ScaleDiffusionInTheChannel
    if _newclass:
        ConvertPBLJresultsToDynamicCharge = staticmethod(_pnpsll.PNPUtil_ConvertPBLJresultsToDynamicCharge)
    else:
        ConvertPBLJresultsToDynamicCharge = _pnpsll.PNPUtil_ConvertPBLJresultsToDynamicCharge
    if _newclass:
        SetInternalCtoZero = staticmethod(_pnpsll.PNPUtil_SetInternalCtoZero)
    else:
        SetInternalCtoZero = _pnpsll.PNPUtil_SetInternalCtoZero
    if _newclass:
        SetCtoZeroWhereDZero = staticmethod(_pnpsll.PNPUtil_SetCtoZeroWhereDZero)
    else:
        SetCtoZeroWhereDZero = _pnpsll.PNPUtil_SetCtoZeroWhereDZero
    if _newclass:
        SetDzeroAtEps = staticmethod(_pnpsll.PNPUtil_SetDzeroAtEps)
    else:
        SetDzeroAtEps = _pnpsll.PNPUtil_SetDzeroAtEps
    if _newclass:
        SetDZeroWithIndex = staticmethod(_pnpsll.PNPUtil_SetDZeroWithIndex)
    else:
        SetDZeroWithIndex = _pnpsll.PNPUtil_SetDZeroWithIndex
    if _newclass:
        RemoveQfromNI = staticmethod(_pnpsll.PNPUtil_RemoveQfromNI)
    else:
        RemoveQfromNI = _pnpsll.PNPUtil_RemoveQfromNI
    if _newclass:
        RemoveNodesFromPNPBasedOnNPCriteria = staticmethod(_pnpsll.PNPUtil_RemoveNodesFromPNPBasedOnNPCriteria)
    else:
        RemoveNodesFromPNPBasedOnNPCriteria = _pnpsll.PNPUtil_RemoveNodesFromPNPBasedOnNPCriteria
PNPUtil_swigregister = _pnpsll.PNPUtil_swigregister
PNPUtil_swigregister(PNPUtil)

def PNPUtil_RemoveLargePMFfromPNP(world: 'ContWorld', LargePMF: 'float') -> "int":
    return _pnpsll.PNPUtil_RemoveLargePMFfromPNP(world, LargePMF)
PNPUtil_RemoveLargePMFfromPNP = _pnpsll.PNPUtil_RemoveLargePMFfromPNP

def PNPUtil_RemoveSmallCfromPNP(world: 'ContWorld', SmallC: 'float') -> "int":
    return _pnpsll.PNPUtil_RemoveSmallCfromPNP(world, SmallC)
PNPUtil_RemoveSmallCfromPNP = _pnpsll.PNPUtil_RemoveSmallCfromPNP

def PNPUtil_RemoveSmallCfromPNPNearDiffBoarder(world: 'ContWorld', SmallC: 'float') -> "int":
    return _pnpsll.PNPUtil_RemoveSmallCfromPNPNearDiffBoarder(world, SmallC)
PNPUtil_RemoveSmallCfromPNPNearDiffBoarder = _pnpsll.PNPUtil_RemoveSmallCfromPNPNearDiffBoarder

def PNPUtil_RemoveLargedPMFfromPNP(m_ContWorld: 'ContWorld', dPMF: 'float') -> "int":
    return _pnpsll.PNPUtil_RemoveLargedPMFfromPNP(m_ContWorld, dPMF)
PNPUtil_RemoveLargedPMFfromPNP = _pnpsll.PNPUtil_RemoveLargedPMFfromPNP

def PNPUtil_RemoveLargedPMFandLargePMFfromPNP(m_ContWorld: 'ContWorld', dPMF: 'float', PMF: 'float') -> "int":
    return _pnpsll.PNPUtil_RemoveLargedPMFandLargePMFfromPNP(m_ContWorld, dPMF, PMF)
PNPUtil_RemoveLargedPMFandLargePMFfromPNP = _pnpsll.PNPUtil_RemoveLargedPMFandLargePMFfromPNP

def PNPUtil_RemoveLargedPMFandLargePMFfromPNPOld(m_ContWorld: 'ContWorld', dPMF: 'float', PMF: 'float') -> "int":
    return _pnpsll.PNPUtil_RemoveLargedPMFandLargePMFfromPNPOld(m_ContWorld, dPMF, PMF)
PNPUtil_RemoveLargedPMFandLargePMFfromPNPOld = _pnpsll.PNPUtil_RemoveLargedPMFandLargePMFfromPNPOld

def PNPUtil_RemoveCavitiesAtDiffusionMap(m_ContWorld: 'ContWorld') -> "int":
    return _pnpsll.PNPUtil_RemoveCavitiesAtDiffusionMap(m_ContWorld)
PNPUtil_RemoveCavitiesAtDiffusionMap = _pnpsll.PNPUtil_RemoveCavitiesAtDiffusionMap

def PNPUtil_ScaleDiffusionInTheChannel(*args) -> "int":
    return _pnpsll.PNPUtil_ScaleDiffusionInTheChannel(*args)
PNPUtil_ScaleDiffusionInTheChannel = _pnpsll.PNPUtil_ScaleDiffusionInTheChannel

def PNPUtil_ConvertPBLJresultsToDynamicCharge(m_ContWorld: 'ContWorld') -> "int":
    return _pnpsll.PNPUtil_ConvertPBLJresultsToDynamicCharge(m_ContWorld)
PNPUtil_ConvertPBLJresultsToDynamicCharge = _pnpsll.PNPUtil_ConvertPBLJresultsToDynamicCharge

def PNPUtil_SetInternalCtoZero(m_ContWorld: 'ContWorld') -> "int":
    return _pnpsll.PNPUtil_SetInternalCtoZero(m_ContWorld)
PNPUtil_SetInternalCtoZero = _pnpsll.PNPUtil_SetInternalCtoZero

def PNPUtil_SetCtoZeroWhereDZero(m_ContWorld: 'ContWorld') -> "int":
    return _pnpsll.PNPUtil_SetCtoZeroWhereDZero(m_ContWorld)
PNPUtil_SetCtoZeroWhereDZero = _pnpsll.PNPUtil_SetCtoZeroWhereDZero

def PNPUtil_SetDzeroAtEps(m_ContWorld: 'ContWorld', iEps: 'int') -> "int":
    return _pnpsll.PNPUtil_SetDzeroAtEps(m_ContWorld, iEps)
PNPUtil_SetDzeroAtEps = _pnpsll.PNPUtil_SetDzeroAtEps

def PNPUtil_SetDZeroWithIndex(_ContWorld: 'ContWorld') -> "int":
    return _pnpsll.PNPUtil_SetDZeroWithIndex(_ContWorld)
PNPUtil_SetDZeroWithIndex = _pnpsll.PNPUtil_SetDZeroWithIndex

def PNPUtil_RemoveQfromNI(m_ContWorld: 'ContWorld') -> "int":
    return _pnpsll.PNPUtil_RemoveQfromNI(m_ContWorld)
PNPUtil_RemoveQfromNI = _pnpsll.PNPUtil_RemoveQfromNI

def PNPUtil_RemoveNodesFromPNPBasedOnNPCriteria(m_ContWorld: 'ContWorld', Relaxation: 'float', MaxCycles: 'int', MaxdC: 'float', RemoveNegC: 'bool') -> "int":
    return _pnpsll.PNPUtil_RemoveNodesFromPNPBasedOnNPCriteria(m_ContWorld, Relaxation, MaxCycles, MaxdC, RemoveNegC)
PNPUtil_RemoveNodesFromPNPBasedOnNPCriteria = _pnpsll.PNPUtil_RemoveNodesFromPNPBasedOnNPCriteria

class NPMaskBuilder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NPMaskBuilder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NPMaskBuilder, name)
    __repr__ = _swig_repr

    def __init__(self, world: 'ContWorld'):
        this = _pnpsll.new_NPMaskBuilder(world)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_NPMaskBuilder
    __del__ = lambda self: None

    def CmdNPMaskBuilder(self, Elt: 'TiXmlElement const *') -> "int":
        return _pnpsll.NPMaskBuilder_CmdNPMaskBuilder(self, Elt)

    def InitNPMask(self) -> "int":
        return _pnpsll.NPMaskBuilder_InitNPMask(self)

    def SetToNIDiffusion(self) -> "int":
        return _pnpsll.NPMaskBuilder_SetToNIDiffusion(self)

    def RemoveTubeRegion(self, ion: 'int', X: 'float', Y: 'float', Z0: 'float', Z1: 'float', R0: 'float', R2: 'float') -> "int":
        return _pnpsll.NPMaskBuilder_RemoveTubeRegion(self, ion, X, Y, Z0, Z1, R0, R2)

    def RemoveHighC(self, HighC: 'float') -> "int":
        return _pnpsll.NPMaskBuilder_RemoveHighC(self, HighC)

    def ReadNPMask(self, filename: 'char const *') -> "int":
        return _pnpsll.NPMaskBuilder_ReadNPMask(self, filename)

    def WriteNPMask(self, filename: 'char const *') -> "int":
        return _pnpsll.NPMaskBuilder_WriteNPMask(self, filename)
    __swig_setmethods__["m_ContWorld"] = _pnpsll.NPMaskBuilder_m_ContWorld_set
    __swig_getmethods__["m_ContWorld"] = _pnpsll.NPMaskBuilder_m_ContWorld_get
    if _newclass:
        m_ContWorld = _swig_property(_pnpsll.NPMaskBuilder_m_ContWorld_get, _pnpsll.NPMaskBuilder_m_ContWorld_set)
    __swig_setmethods__["NPMask"] = _pnpsll.NPMaskBuilder_NPMask_set
    __swig_getmethods__["NPMask"] = _pnpsll.NPMaskBuilder_NPMask_get
    if _newclass:
        NPMask = _swig_property(_pnpsll.NPMaskBuilder_NPMask_get, _pnpsll.NPMaskBuilder_NPMask_set)
NPMaskBuilder_swigregister = _pnpsll.NPMaskBuilder_swigregister
NPMaskBuilder_swigregister(NPMaskBuilder)

class IAVCalc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAVCalc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAVCalc, name)
    __repr__ = _swig_repr

    def __init__(self, world: 'ContWorld'):
        this = _pnpsll.new_IAVCalc(world)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_IAVCalc
    __del__ = lambda self: None

    def CmdIAVCalcDict(self, dict: 'PyObject *') -> "int":
        return _pnpsll.IAVCalc_CmdIAVCalcDict(self, dict)
IAVCalc_swigregister = _pnpsll.IAVCalc_swigregister
IAVCalc_swigregister(IAVCalc)


def RefineIAV(contworld,**kwarg):
	"""
            MaxdC=0.05,
            MaxCycle=100000,
            PBSR_Param={"MaxIterations":100, "Tolerance":2.0e-06, "Relaxation":1.6},
            NP_Param={"Relaxation":1.0}
	"""
	iavcalc=IAVCalc(contworld)
	iavcalc.CmdIAVCalcDict(kwarg)
	del iavcalc
	print("RefineIAV")

BIGDISTANSE = _pnpsll.BIGDISTANSE
class PartialWorldForSAS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartialWorldForSAS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PartialWorldForSAS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GS_X"] = _pnpsll.PartialWorldForSAS_GS_X_set
    __swig_getmethods__["GS_X"] = _pnpsll.PartialWorldForSAS_GS_X_get
    if _newclass:
        GS_X = _swig_property(_pnpsll.PartialWorldForSAS_GS_X_get, _pnpsll.PartialWorldForSAS_GS_X_set)
    __swig_setmethods__["GS_Y"] = _pnpsll.PartialWorldForSAS_GS_Y_set
    __swig_getmethods__["GS_Y"] = _pnpsll.PartialWorldForSAS_GS_Y_get
    if _newclass:
        GS_Y = _swig_property(_pnpsll.PartialWorldForSAS_GS_Y_get, _pnpsll.PartialWorldForSAS_GS_Y_set)
    __swig_setmethods__["GS_Z"] = _pnpsll.PartialWorldForSAS_GS_Z_set
    __swig_getmethods__["GS_Z"] = _pnpsll.PartialWorldForSAS_GS_Z_get
    if _newclass:
        GS_Z = _swig_property(_pnpsll.PartialWorldForSAS_GS_Z_get, _pnpsll.PartialWorldForSAS_GS_Z_set)
    __swig_setmethods__["GS_XY"] = _pnpsll.PartialWorldForSAS_GS_XY_set
    __swig_getmethods__["GS_XY"] = _pnpsll.PartialWorldForSAS_GS_XY_get
    if _newclass:
        GS_XY = _swig_property(_pnpsll.PartialWorldForSAS_GS_XY_get, _pnpsll.PartialWorldForSAS_GS_XY_set)
    __swig_setmethods__["locGS_Z"] = _pnpsll.PartialWorldForSAS_locGS_Z_set
    __swig_getmethods__["locGS_Z"] = _pnpsll.PartialWorldForSAS_locGS_Z_get
    if _newclass:
        locGS_Z = _swig_property(_pnpsll.PartialWorldForSAS_locGS_Z_get, _pnpsll.PartialWorldForSAS_locGS_Z_set)
    __swig_setmethods__["locR0_Z"] = _pnpsll.PartialWorldForSAS_locR0_Z_set
    __swig_getmethods__["locR0_Z"] = _pnpsll.PartialWorldForSAS_locR0_Z_get
    if _newclass:
        locR0_Z = _swig_property(_pnpsll.PartialWorldForSAS_locR0_Z_get, _pnpsll.PartialWorldForSAS_locR0_Z_set)
    __swig_setmethods__["Surf"] = _pnpsll.PartialWorldForSAS_Surf_set
    __swig_getmethods__["Surf"] = _pnpsll.PartialWorldForSAS_Surf_get
    if _newclass:
        Surf = _swig_property(_pnpsll.PartialWorldForSAS_Surf_get, _pnpsll.PartialWorldForSAS_Surf_set)
    __swig_setmethods__["Field"] = _pnpsll.PartialWorldForSAS_Field_set
    __swig_getmethods__["Field"] = _pnpsll.PartialWorldForSAS_Field_get
    if _newclass:
        Field = _swig_property(_pnpsll.PartialWorldForSAS_Field_get, _pnpsll.PartialWorldForSAS_Field_set)
    __swig_setmethods__["surf_points"] = _pnpsll.PartialWorldForSAS_surf_points_set
    __swig_getmethods__["surf_points"] = _pnpsll.PartialWorldForSAS_surf_points_get
    if _newclass:
        surf_points = _swig_property(_pnpsll.PartialWorldForSAS_surf_points_get, _pnpsll.PartialWorldForSAS_surf_points_set)
    __swig_setmethods__["Nsurf_points"] = _pnpsll.PartialWorldForSAS_Nsurf_points_set
    __swig_getmethods__["Nsurf_points"] = _pnpsll.PartialWorldForSAS_Nsurf_points_get
    if _newclass:
        Nsurf_points = _swig_property(_pnpsll.PartialWorldForSAS_Nsurf_points_get, _pnpsll.PartialWorldForSAS_Nsurf_points_set)

    def __init__(self):
        this = _pnpsll.new_PartialWorldForSAS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_PartialWorldForSAS
    __del__ = lambda self: None
PartialWorldForSAS_swigregister = _pnpsll.PartialWorldForSAS_swigregister
PartialWorldForSAS_swigregister(PartialWorldForSAS)

class GenericGeometricalObject(PnpsObject):
    __swig_setmethods__ = {}
    for _s in [PnpsObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericGeometricalObject, name, value)
    __swig_getmethods__ = {}
    for _s in [PnpsObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenericGeometricalObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pnpsll.new_GenericGeometricalObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_GenericGeometricalObject
    __del__ = lambda self: None

    def Copy(self, GGO: 'GenericGeometricalObject') -> "int":
        return _pnpsll.GenericGeometricalObject_Copy(self, GGO)

    def InitZero(self) -> "int":
        return _pnpsll.GenericGeometricalObject_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.GenericGeometricalObject_Clear(self)
    __swig_setmethods__["Epsilon"] = _pnpsll.GenericGeometricalObject_Epsilon_set
    __swig_getmethods__["Epsilon"] = _pnpsll.GenericGeometricalObject_Epsilon_get
    if _newclass:
        Epsilon = _swig_property(_pnpsll.GenericGeometricalObject_Epsilon_get, _pnpsll.GenericGeometricalObject_Epsilon_set)
    __swig_setmethods__["NIonsTypes"] = _pnpsll.GenericGeometricalObject_NIonsTypes_set
    __swig_getmethods__["NIonsTypes"] = _pnpsll.GenericGeometricalObject_NIonsTypes_get
    if _newclass:
        NIonsTypes = _swig_property(_pnpsll.GenericGeometricalObject_NIonsTypes_get, _pnpsll.GenericGeometricalObject_NIonsTypes_set)
    __swig_setmethods__["IonsD"] = _pnpsll.GenericGeometricalObject_IonsD_set
    __swig_getmethods__["IonsD"] = _pnpsll.GenericGeometricalObject_IonsD_get
    if _newclass:
        IonsD = _swig_property(_pnpsll.GenericGeometricalObject_IonsD_get, _pnpsll.GenericGeometricalObject_IonsD_set)
    __swig_setmethods__["C"] = _pnpsll.GenericGeometricalObject_C_set
    __swig_getmethods__["C"] = _pnpsll.GenericGeometricalObject_C_get
    if _newclass:
        C = _swig_property(_pnpsll.GenericGeometricalObject_C_get, _pnpsll.GenericGeometricalObject_C_set)

    def setPar(self, iEps: 'int', iD0: 'int', iD1: 'int', C0: 'float', C1: 'float'=-1.0) -> "int":
        return _pnpsll.GenericGeometricalObject_setPar(self, iEps, iD0, iD1, C0, C1)

    def Print(self, buildWorld: 'BuildWorldNI'=None) -> "int":
        return _pnpsll.GenericGeometricalObject_Print(self, buildWorld)

    def setParam(self,iEps, iD, C, NIonsTypes=None):
    	"""
    	set parameters
    	Input Parameters:
    		iEps = int
    		iD = [float]*NIonsTypes
    		C = float or [float]*NIonsTypes
    	"""
    	m_NIonsTypes=NIonsTypes
    	if m_NIonsTypes!=None:
    		self.NIonsTypes=m_NIonsTypes
    	if m_NIonsTypes==None:
    		if not (type(iD) is list or type(iD) is tuple):
    			print("Error: iD should be list or tuple")
    			return None
    		m_NIonsTypes=len(iD)

    	m_iD=new_intArray(self.NIonsTypes)
    	if type(iD) is list or type(iD) is tuple:
    		for i in range(self.NIonsTypes):intArray_setitem(m_iD,i,iD[i])
    	else:
    		for i in range(self.NIonsTypes):intArray_setitem(m_iD,i,iD)
    	m_C = new_floatArray(self.NIonsTypes)
    	if type(C) is list or type(C) is tuple:
    		for i in range(self.NIonsTypes):floatArray_setitem(m_C,i,C[i])
    	else:
    		for i in range(self.NIonsTypes):floatArray_setitem(m_C,i,C)
    	self.cxxSetParam(iEps,m_NIonsTypes,m_iD,m_C)
    	delete_intArray(m_iD)
    	delete_floatArray(m_C)


    def cxxSetParam(self, iEps: 'int', m_NIonsTypes: 'int', iD: 'int *', m_C: 'float *') -> "int":
        return _pnpsll.GenericGeometricalObject_cxxSetParam(self, iEps, m_NIonsTypes, iD, m_C)

    def ChangeUnits(self, world: 'ContWorld', ToInternal: 'bool') -> "int":
        return _pnpsll.GenericGeometricalObject_ChangeUnits(self, world, ToInternal)

    def BuildPreMaps(self, Builder: 'BuildWorldNI', world: 'ContWorld', Field: 'int *', iValue: 'int', iBulkValue: 'int', Displ: 'float *', Rion: 'float', Rsmoth: 'float', Surf: 'float *', ParmMask: 'int') -> "int":
        return _pnpsll.GenericGeometricalObject_BuildPreMaps(self, Builder, world, Field, iValue, iBulkValue, Displ, Rion, Rsmoth, Surf, ParmMask)

    def BuildDistMapsFromAtomsCenter(self, Builder: 'BuildWorldNI', world: 'ContWorld', Dist: 'float *', Rmax: 'float', DoNotConsiderAtomsSmallerThen: 'float') -> "int":
        return _pnpsll.GenericGeometricalObject_BuildDistMapsFromAtomsCenter(self, Builder, world, Dist, Rmax, DoNotConsiderAtomsSmallerThen)

    def BuildDistMaps(self, Builder: 'BuildWorldNI', world: 'ContWorld', Field: 'int *', iValue: 'int', iBulkValue: 'int', Displ: 'float *', Rion: 'float', Rsmoth: 'float', Surf: 'float *') -> "int":
        return _pnpsll.GenericGeometricalObject_BuildDistMaps(self, Builder, world, Field, iValue, iBulkValue, Displ, Rion, Rsmoth, Surf)

    def BuildPreMapsMemLim(self, pw: 'PartialWorldForSAS', iValue: 'int', iBulkValue: 'int', Displ: 'float *', Rion: 'float', Rsmoth: 'float') -> "int":
        return _pnpsll.GenericGeometricalObject_BuildPreMapsMemLim(self, pw, iValue, iBulkValue, Displ, Rion, Rsmoth)

    def BuildPreMapsCharges(self, Builder: 'BuildWorldNI', world: 'ContWorld', Field: 'float *') -> "int":
        return _pnpsll.GenericGeometricalObject_BuildPreMapsCharges(self, Builder, world, Field)

    def BuildLJRepultionMap(self, Builder: 'BuildWorldNI', world: 'ContWorld', Ion: 'int', V: 'float *', LimitVlj: 'float') -> "int":
        return _pnpsll.GenericGeometricalObject_BuildLJRepultionMap(self, Builder, world, Ion, V, LimitVlj)

    def SetBoundaryCondition(self, Builder: 'BuildWorldNI', world: 'ContWorld') -> "int":
        return _pnpsll.GenericGeometricalObject_SetBoundaryCondition(self, Builder, world)

    def RotateGGO(self, n: 'double *', cosa: 'double', sina: 'double') -> "int":
        return _pnpsll.GenericGeometricalObject_RotateGGO(self, n, cosa, sina)

    def RotateVecDouble(self, Rext: 'double *', n: 'double *', cosa: 'double', sina: 'double') -> "void":
        return _pnpsll.GenericGeometricalObject_RotateVecDouble(self, Rext, n, cosa, sina)

    def RotateVecFloat(self, Rext: 'float *', n: 'float *', cosa: 'float', sina: 'float') -> "void":
        return _pnpsll.GenericGeometricalObject_RotateVecFloat(self, Rext, n, cosa, sina)
    __swig_setmethods__["ID_GridBegin"] = _pnpsll.GenericGeometricalObject_ID_GridBegin_set
    __swig_getmethods__["ID_GridBegin"] = _pnpsll.GenericGeometricalObject_ID_GridBegin_get
    if _newclass:
        ID_GridBegin = _swig_property(_pnpsll.GenericGeometricalObject_ID_GridBegin_get, _pnpsll.GenericGeometricalObject_ID_GridBegin_set)
    __swig_setmethods__["ID_GridEnd"] = _pnpsll.GenericGeometricalObject_ID_GridEnd_set
    __swig_getmethods__["ID_GridEnd"] = _pnpsll.GenericGeometricalObject_ID_GridEnd_get
    if _newclass:
        ID_GridEnd = _swig_property(_pnpsll.GenericGeometricalObject_ID_GridEnd_get, _pnpsll.GenericGeometricalObject_ID_GridEnd_set)

    def SetGridIDs(self, startIDfrom: 'int') -> "int":
        return _pnpsll.GenericGeometricalObject_SetGridIDs(self, startIDfrom)

    def GetDistToSurf(self, fx: 'float', fy: 'float', fz: 'float', Ri: 'float', Rpr: 'float', GridID: 'int') -> "float":
        return _pnpsll.GenericGeometricalObject_GetDistToSurf(self, fx, fy, fz, Ri, Rpr, GridID)

    def GetDistSQToUnitCenter(self, fx: 'float', fy: 'float', fz: 'float', Ri: 'float', Rpr: 'float', GridID: 'int') -> "float":
        return _pnpsll.GenericGeometricalObject_GetDistSQToUnitCenter(self, fx, fy, fz, Ri, Rpr, GridID)

    def GetClosestSurfPoint(self, fx: 'float *', fy: 'float *', fz: 'float *', Ri: 'float', Rpr: 'float', GridID: 'int') -> "void":
        return _pnpsll.GenericGeometricalObject_GetClosestSurfPoint(self, fx, fy, fz, Ri, Rpr, GridID)
GenericGeometricalObject_swigregister = _pnpsll.GenericGeometricalObject_swigregister
GenericGeometricalObject_swigregister(GenericGeometricalObject)

class GOAtoms(GenericGeometricalObject):
    __swig_setmethods__ = {}
    for _s in [GenericGeometricalObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GOAtoms, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericGeometricalObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GOAtoms, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pnpsll.new_GOAtoms(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_GOAtoms
    __del__ = lambda self: None

    def Copy(self, goAtoms: 'GOAtoms') -> "int":
        return _pnpsll.GOAtoms_Copy(self, goAtoms)

    def InitZero(self) -> "int":
        return _pnpsll.GOAtoms_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.GOAtoms_Clear(self)

    def Print(self, buildWorld: 'BuildWorldNI'=None) -> "int":
        return _pnpsll.GOAtoms_Print(self, buildWorld)
    ClosestNode = _pnpsll.GOAtoms_ClosestNode
    Linear = _pnpsll.GOAtoms_Linear
    Cone = _pnpsll.GOAtoms_Cone
    __swig_setmethods__["NAtoms"] = _pnpsll.GOAtoms_NAtoms_set
    __swig_getmethods__["NAtoms"] = _pnpsll.GOAtoms_NAtoms_get
    if _newclass:
        NAtoms = _swig_property(_pnpsll.GOAtoms_NAtoms_get, _pnpsll.GOAtoms_NAtoms_set)
    __swig_setmethods__["r_x"] = _pnpsll.GOAtoms_r_x_set
    __swig_getmethods__["r_x"] = _pnpsll.GOAtoms_r_x_get
    if _newclass:
        r_x = _swig_property(_pnpsll.GOAtoms_r_x_get, _pnpsll.GOAtoms_r_x_set)
    __swig_setmethods__["r_y"] = _pnpsll.GOAtoms_r_y_set
    __swig_getmethods__["r_y"] = _pnpsll.GOAtoms_r_y_get
    if _newclass:
        r_y = _swig_property(_pnpsll.GOAtoms_r_y_get, _pnpsll.GOAtoms_r_y_set)
    __swig_setmethods__["r_z"] = _pnpsll.GOAtoms_r_z_set
    __swig_getmethods__["r_z"] = _pnpsll.GOAtoms_r_z_get
    if _newclass:
        r_z = _swig_property(_pnpsll.GOAtoms_r_z_get, _pnpsll.GOAtoms_r_z_set)
    __swig_setmethods__["r"] = _pnpsll.GOAtoms_r_set
    __swig_getmethods__["r"] = _pnpsll.GOAtoms_r_get
    if _newclass:
        r = _swig_property(_pnpsll.GOAtoms_r_get, _pnpsll.GOAtoms_r_set)
    __swig_setmethods__["R"] = _pnpsll.GOAtoms_R_set
    __swig_getmethods__["R"] = _pnpsll.GOAtoms_R_get
    if _newclass:
        R = _swig_property(_pnpsll.GOAtoms_R_get, _pnpsll.GOAtoms_R_set)
    __swig_setmethods__["q"] = _pnpsll.GOAtoms_q_set
    __swig_getmethods__["q"] = _pnpsll.GOAtoms_q_get
    if _newclass:
        q = _swig_property(_pnpsll.GOAtoms_q_get, _pnpsll.GOAtoms_q_set)
    __swig_setmethods__["HalfSigma"] = _pnpsll.GOAtoms_HalfSigma_set
    __swig_getmethods__["HalfSigma"] = _pnpsll.GOAtoms_HalfSigma_get
    if _newclass:
        HalfSigma = _swig_property(_pnpsll.GOAtoms_HalfSigma_get, _pnpsll.GOAtoms_HalfSigma_set)
    __swig_setmethods__["FourEpsilon"] = _pnpsll.GOAtoms_FourEpsilon_set
    __swig_getmethods__["FourEpsilon"] = _pnpsll.GOAtoms_FourEpsilon_get
    if _newclass:
        FourEpsilon = _swig_property(_pnpsll.GOAtoms_FourEpsilon_get, _pnpsll.GOAtoms_FourEpsilon_set)
    __swig_setmethods__["LJA"] = _pnpsll.GOAtoms_LJA_set
    __swig_getmethods__["LJA"] = _pnpsll.GOAtoms_LJA_get
    if _newclass:
        LJA = _swig_property(_pnpsll.GOAtoms_LJA_get, _pnpsll.GOAtoms_LJA_set)
    __swig_setmethods__["LJB"] = _pnpsll.GOAtoms_LJB_set
    __swig_getmethods__["LJB"] = _pnpsll.GOAtoms_LJB_get
    if _newclass:
        LJB = _swig_property(_pnpsll.GOAtoms_LJB_get, _pnpsll.GOAtoms_LJB_set)
    __swig_setmethods__["SRA"] = _pnpsll.GOAtoms_SRA_set
    __swig_getmethods__["SRA"] = _pnpsll.GOAtoms_SRA_get
    if _newclass:
        SRA = _swig_property(_pnpsll.GOAtoms_SRA_get, _pnpsll.GOAtoms_SRA_set)
    __swig_setmethods__["SRN"] = _pnpsll.GOAtoms_SRN_set
    __swig_getmethods__["SRN"] = _pnpsll.GOAtoms_SRN_get
    if _newclass:
        SRN = _swig_property(_pnpsll.GOAtoms_SRN_get, _pnpsll.GOAtoms_SRN_set)
    __swig_setmethods__["IER"] = _pnpsll.GOAtoms_IER_set
    __swig_getmethods__["IER"] = _pnpsll.GOAtoms_IER_get
    if _newclass:
        IER = _swig_property(_pnpsll.GOAtoms_IER_get, _pnpsll.GOAtoms_IER_set)

    def DefineChargeDist(self, str: 'char const *') -> "int":
        return _pnpsll.GOAtoms_DefineChargeDist(self, str)
    __swig_setmethods__["ChargeDist"] = _pnpsll.GOAtoms_ChargeDist_set
    __swig_getmethods__["ChargeDist"] = _pnpsll.GOAtoms_ChargeDist_get
    if _newclass:
        ChargeDist = _swig_property(_pnpsll.GOAtoms_ChargeDist_get, _pnpsll.GOAtoms_ChargeDist_set)
    __swig_setmethods__["ChargeDistN"] = _pnpsll.GOAtoms_ChargeDistN_set
    __swig_getmethods__["ChargeDistN"] = _pnpsll.GOAtoms_ChargeDistN_get
    if _newclass:
        ChargeDistN = _swig_property(_pnpsll.GOAtoms_ChargeDistN_get, _pnpsll.GOAtoms_ChargeDistN_set)
    __swig_setmethods__["Offset"] = _pnpsll.GOAtoms_Offset_set
    __swig_getmethods__["Offset"] = _pnpsll.GOAtoms_Offset_get
    if _newclass:
        Offset = _swig_property(_pnpsll.GOAtoms_Offset_get, _pnpsll.GOAtoms_Offset_set)
    __swig_setmethods__["MakePreRoll"] = _pnpsll.GOAtoms_MakePreRoll_set
    __swig_getmethods__["MakePreRoll"] = _pnpsll.GOAtoms_MakePreRoll_get
    if _newclass:
        MakePreRoll = _swig_property(_pnpsll.GOAtoms_MakePreRoll_get, _pnpsll.GOAtoms_MakePreRoll_set)

    def setPar(self, iEps: 'int', iD0: 'int', iD1: 'int', C0: 'float', C1: 'float'=-1.0) -> "int":
        return _pnpsll.GOAtoms_setPar(self, iEps, iD0, iD1, C0, C1)

    def SavePQR(self, filename: 'char const *') -> "int":
        return _pnpsll.GOAtoms_SavePQR(self, filename)

    def LoadPQR(self, filename: 'char const *') -> "int":
        return _pnpsll.GOAtoms_LoadPQR(self, filename)

    def LoadPQRonlyQR(self, filename: 'char const *') -> "int":
        return _pnpsll.GOAtoms_LoadPQRonlyQR(self, filename)

    def LoadPRQ(self, filename: 'char const *') -> "int":
        return _pnpsll.GOAtoms_LoadPRQ(self, filename)

    def LoadDelphiStyle(self, PDB: 'char const *', CRG: 'char const *', SIZ: 'char const *', center: 'bool') -> "int":
        return _pnpsll.GOAtoms_LoadDelphiStyle(self, PDB, CRG, SIZ, center)

    def LoadPRE(self, filename: 'char const *') -> "int":
        return _pnpsll.GOAtoms_LoadPRE(self, filename)

    def LoadPAB(self, filename: 'char const *') -> "int":
        return _pnpsll.GOAtoms_LoadPAB(self, filename)

    def LoadIER(self, filename: 'char const *') -> "int":
        return _pnpsll.GOAtoms_LoadIER(self, filename)

    def LoadPAN(self, filename: 'char const *') -> "int":
        return _pnpsll.GOAtoms_LoadPAN(self, filename)

    def LoadAtomicParam(self, filename: 'char const *') -> "int":
        return _pnpsll.GOAtoms_LoadAtomicParam(self, filename)
    __swig_setmethods__["IAVMethod"] = _pnpsll.GOAtoms_IAVMethod_set
    __swig_getmethods__["IAVMethod"] = _pnpsll.GOAtoms_IAVMethod_get
    if _newclass:
        IAVMethod = _swig_property(_pnpsll.GOAtoms_IAVMethod_get, _pnpsll.GOAtoms_IAVMethod_set)

    def SetCenterToOrigin(self) -> "int":
        return _pnpsll.GOAtoms_SetCenterToOrigin(self)

    def SetCenterToOriginWithRad(self) -> "int":
        return _pnpsll.GOAtoms_SetCenterToOriginWithRad(self)

    def ChangeUnits(self, world: 'ContWorld', ToInternal: 'bool') -> "int":
        return _pnpsll.GOAtoms_ChangeUnits(self, world, ToInternal)

    def BuildPreMaps(self, Builder: 'BuildWorldNI', world: 'ContWorld', Field: 'int *', iValue: 'int', iBulkValue: 'int', Displ: 'float *', Rion: 'float', Rsmoth: 'float', Surf: 'float *', ParmMask: 'int') -> "int":
        return _pnpsll.GOAtoms_BuildPreMaps(self, Builder, world, Field, iValue, iBulkValue, Displ, Rion, Rsmoth, Surf, ParmMask)

    def BuildPreMapsMemLim(self, pw: 'PartialWorldForSAS', iValue: 'int', iBulkValue: 'int', Displ: 'float *', Rion: 'float', Rsmoth: 'float') -> "int":
        return _pnpsll.GOAtoms_BuildPreMapsMemLim(self, pw, iValue, iBulkValue, Displ, Rion, Rsmoth)

    def BuildDistMapsFromAtomsCenter(self, Builder: 'BuildWorldNI', world: 'ContWorld', Dist: 'float *', Rmax: 'float', DoNotConsiderAtomsSmallerThen: 'float') -> "int":
        return _pnpsll.GOAtoms_BuildDistMapsFromAtomsCenter(self, Builder, world, Dist, Rmax, DoNotConsiderAtomsSmallerThen)

    def BuildPreMapsCharges(self, Builder: 'BuildWorldNI', world: 'ContWorld', Field: 'float *') -> "int":
        return _pnpsll.GOAtoms_BuildPreMapsCharges(self, Builder, world, Field)

    def BuildLJRepultionMap(self, Builder: 'BuildWorldNI', world: 'ContWorld', Ion: 'int', V: 'float *', LimitVlj: 'float') -> "int":
        return _pnpsll.GOAtoms_BuildLJRepultionMap(self, Builder, world, Ion, V, LimitVlj)

    def SetBoundaryCondition(self, Builder: 'BuildWorldNI', world: 'ContWorld') -> "int":
        return _pnpsll.GOAtoms_SetBoundaryCondition(self, Builder, world)

    def SetBoundaryConditionOnCuda(self, Builder: 'BuildWorldNI', world: 'ContWorld') -> "int":
        return _pnpsll.GOAtoms_SetBoundaryConditionOnCuda(self, Builder, world)

    def RotateGGO(self, n: 'double *', cosa: 'double', sina: 'double') -> "int":
        return _pnpsll.GOAtoms_RotateGGO(self, n, cosa, sina)

    def SetGridIDs(self, startIDfrom: 'int') -> "int":
        return _pnpsll.GOAtoms_SetGridIDs(self, startIDfrom)

    def GetDistToSurf(self, fx: 'float', fy: 'float', fz: 'float', Ri: 'float', Rpr: 'float', GridID: 'int') -> "float":
        return _pnpsll.GOAtoms_GetDistToSurf(self, fx, fy, fz, Ri, Rpr, GridID)

    def GetDistSQToUnitCenter(self, fx: 'float', fy: 'float', fz: 'float', Ri: 'float', Rpr: 'float', GridID: 'int') -> "float":
        return _pnpsll.GOAtoms_GetDistSQToUnitCenter(self, fx, fy, fz, Ri, Rpr, GridID)

    def GetClosestSurfPoint(self, fx: 'float *', fy: 'float *', fz: 'float *', Ri: 'float', Rpr: 'float', GridID: 'int') -> "void":
        return _pnpsll.GOAtoms_GetClosestSurfPoint(self, fx, fy, fz, Ri, Rpr, GridID)
    __swig_setmethods__["ChargeDistStrs"] = _pnpsll.GOAtoms_ChargeDistStrs_set
    __swig_getmethods__["ChargeDistStrs"] = _pnpsll.GOAtoms_ChargeDistStrs_get
    if _newclass:
        ChargeDistStrs = _swig_property(_pnpsll.GOAtoms_ChargeDistStrs_get, _pnpsll.GOAtoms_ChargeDistStrs_set)
GOAtoms_swigregister = _pnpsll.GOAtoms_swigregister
GOAtoms_swigregister(GOAtoms)

class GOTube(GenericGeometricalObject):
    __swig_setmethods__ = {}
    for _s in [GenericGeometricalObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GOTube, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericGeometricalObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GOTube, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pnpsll.new_GOTube()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_GOTube
    __del__ = lambda self: None

    def InitZero(self) -> "int":
        return _pnpsll.GOTube_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.GOTube_Clear(self)

    def Print(self, buildWorld: 'BuildWorldNI'=None) -> "int":
        return _pnpsll.GOTube_Print(self, buildWorld)
    __swig_setmethods__["XY"] = _pnpsll.GOTube_XY_set
    __swig_getmethods__["XY"] = _pnpsll.GOTube_XY_get
    if _newclass:
        XY = _swig_property(_pnpsll.GOTube_XY_get, _pnpsll.GOTube_XY_set)
    __swig_setmethods__["Z"] = _pnpsll.GOTube_Z_set
    __swig_getmethods__["Z"] = _pnpsll.GOTube_Z_get
    if _newclass:
        Z = _swig_property(_pnpsll.GOTube_Z_get, _pnpsll.GOTube_Z_set)
    __swig_setmethods__["R"] = _pnpsll.GOTube_R_set
    __swig_getmethods__["R"] = _pnpsll.GOTube_R_get
    if _newclass:
        R = _swig_property(_pnpsll.GOTube_R_get, _pnpsll.GOTube_R_set)
    __swig_setmethods__["HalfSigma"] = _pnpsll.GOTube_HalfSigma_set
    __swig_getmethods__["HalfSigma"] = _pnpsll.GOTube_HalfSigma_get
    if _newclass:
        HalfSigma = _swig_property(_pnpsll.GOTube_HalfSigma_get, _pnpsll.GOTube_HalfSigma_set)
    __swig_setmethods__["FourEpsilon"] = _pnpsll.GOTube_FourEpsilon_set
    __swig_getmethods__["FourEpsilon"] = _pnpsll.GOTube_FourEpsilon_get
    if _newclass:
        FourEpsilon = _swig_property(_pnpsll.GOTube_FourEpsilon_get, _pnpsll.GOTube_FourEpsilon_set)

    def setTubeParam(self, X: 'float', Y: 'float', Z0: 'float', Z1: 'float', R0: 'float', R1: 'float') -> "int":
        return _pnpsll.GOTube_setTubeParam(self, X, Y, Z0, Z1, R0, R1)

    def ChangeUnits(self, world: 'ContWorld', ToInternal: 'bool') -> "int":
        return _pnpsll.GOTube_ChangeUnits(self, world, ToInternal)

    def BuildPreMaps(self, Builder: 'BuildWorldNI', world: 'ContWorld', Field: 'int *', iValue: 'int', iBulkValue: 'int', Displ: 'float *', Rion: 'float', Rsmoth: 'float', Surf: 'float *', ParmMask: 'int') -> "int":
        return _pnpsll.GOTube_BuildPreMaps(self, Builder, world, Field, iValue, iBulkValue, Displ, Rion, Rsmoth, Surf, ParmMask)

    def BuildPreMapsMemLim(self, pw: 'PartialWorldForSAS', iValue: 'int', iBulkValue: 'int', Displ: 'float *', Rion: 'float', Rsmoth: 'float') -> "int":
        return _pnpsll.GOTube_BuildPreMapsMemLim(self, pw, iValue, iBulkValue, Displ, Rion, Rsmoth)

    def BuildDistMapsFromAtomsCenter(self, Builder: 'BuildWorldNI', world: 'ContWorld', Dist: 'float *', Rmax: 'float', DoNotConsiderAtomsSmallerThen: 'float') -> "int":
        return _pnpsll.GOTube_BuildDistMapsFromAtomsCenter(self, Builder, world, Dist, Rmax, DoNotConsiderAtomsSmallerThen)

    def BuildLJRepultionMap(self, Builder: 'BuildWorldNI', world: 'ContWorld', Ion: 'int', V: 'float *', LimitVlj: 'float') -> "int":
        return _pnpsll.GOTube_BuildLJRepultionMap(self, Builder, world, Ion, V, LimitVlj)

    def RotateGGO(self, n: 'double *', cosa: 'double', sina: 'double') -> "int":
        return _pnpsll.GOTube_RotateGGO(self, n, cosa, sina)

    def GetDistToSurf(self, fx: 'float', fy: 'float', fz: 'float', Ri: 'float', Rpr: 'float', GridID: 'int') -> "float":
        return _pnpsll.GOTube_GetDistToSurf(self, fx, fy, fz, Ri, Rpr, GridID)

    def GetClosestSurfPoint(self, fx: 'float *', fy: 'float *', fz: 'float *', Ri: 'float', Rpr: 'float', GridID: 'int') -> "void":
        return _pnpsll.GOTube_GetClosestSurfPoint(self, fx, fy, fz, Ri, Rpr, GridID)
GOTube_swigregister = _pnpsll.GOTube_swigregister
GOTube_swigregister(GOTube)

class GODonut(GenericGeometricalObject):
    __swig_setmethods__ = {}
    for _s in [GenericGeometricalObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GODonut, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericGeometricalObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GODonut, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pnpsll.new_GODonut(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_GODonut
    __del__ = lambda self: None

    def InitZero(self) -> "int":
        return _pnpsll.GODonut_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.GODonut_Clear(self)
    __swig_setmethods__["R"] = _pnpsll.GODonut_R_set
    __swig_getmethods__["R"] = _pnpsll.GODonut_R_get
    if _newclass:
        R = _swig_property(_pnpsll.GODonut_R_get, _pnpsll.GODonut_R_set)
    __swig_setmethods__["r"] = _pnpsll.GODonut_r_set
    __swig_getmethods__["r"] = _pnpsll.GODonut_r_get
    if _newclass:
        r = _swig_property(_pnpsll.GODonut_r_get, _pnpsll.GODonut_r_set)
    __swig_setmethods__["X"] = _pnpsll.GODonut_X_set
    __swig_getmethods__["X"] = _pnpsll.GODonut_X_get
    if _newclass:
        X = _swig_property(_pnpsll.GODonut_X_get, _pnpsll.GODonut_X_set)
    __swig_setmethods__["Y"] = _pnpsll.GODonut_Y_set
    __swig_getmethods__["Y"] = _pnpsll.GODonut_Y_get
    if _newclass:
        Y = _swig_property(_pnpsll.GODonut_Y_get, _pnpsll.GODonut_Y_set)
    __swig_setmethods__["Z"] = _pnpsll.GODonut_Z_set
    __swig_getmethods__["Z"] = _pnpsll.GODonut_Z_get
    if _newclass:
        Z = _swig_property(_pnpsll.GODonut_Z_get, _pnpsll.GODonut_Z_set)

    def ChangeUnits(self, world: 'ContWorld', ToInternal: 'bool') -> "int":
        return _pnpsll.GODonut_ChangeUnits(self, world, ToInternal)

    def BuildPreMaps(self, Builder: 'BuildWorldNI', world: 'ContWorld', Field: 'int *', iValue: 'int', iBulkValue: 'int', Displ: 'float *', Rion: 'float', Rsmoth: 'float', Surf: 'float *', ParmMask: 'int') -> "int":
        return _pnpsll.GODonut_BuildPreMaps(self, Builder, world, Field, iValue, iBulkValue, Displ, Rion, Rsmoth, Surf, ParmMask)

    def BuildPreMapsMemLim(self, pw: 'PartialWorldForSAS', iValue: 'int', iBulkValue: 'int', Displ: 'float *', Rion: 'float', Rsmoth: 'float') -> "int":
        return _pnpsll.GODonut_BuildPreMapsMemLim(self, pw, iValue, iBulkValue, Displ, Rion, Rsmoth)
GODonut_swigregister = _pnpsll.GODonut_swigregister
GODonut_swigregister(GODonut)

class GOMembraneZ(GenericGeometricalObject):
    __swig_setmethods__ = {}
    for _s in [GenericGeometricalObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GOMembraneZ, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericGeometricalObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GOMembraneZ, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pnpsll.new_GOMembraneZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_GOMembraneZ
    __del__ = lambda self: None

    def InitZero(self) -> "int":
        return _pnpsll.GOMembraneZ_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.GOMembraneZ_Clear(self)

    def Print(self, buildWorld: 'BuildWorldNI'=None) -> "int":
        return _pnpsll.GOMembraneZ_Print(self, buildWorld)
    __swig_setmethods__["Z"] = _pnpsll.GOMembraneZ_Z_set
    __swig_getmethods__["Z"] = _pnpsll.GOMembraneZ_Z_get
    if _newclass:
        Z = _swig_property(_pnpsll.GOMembraneZ_Z_get, _pnpsll.GOMembraneZ_Z_set)

    def ChangeUnits(self, world: 'ContWorld', ToInternal: 'bool') -> "int":
        return _pnpsll.GOMembraneZ_ChangeUnits(self, world, ToInternal)

    def BuildPreMaps(self, Builder: 'BuildWorldNI', world: 'ContWorld', Field: 'int *', iValue: 'int', iBulkValue: 'int', Displ: 'float *', Rion: 'float', Rsmoth: 'float', Surf: 'float *', ParmMask: 'int') -> "int":
        return _pnpsll.GOMembraneZ_BuildPreMaps(self, Builder, world, Field, iValue, iBulkValue, Displ, Rion, Rsmoth, Surf, ParmMask)

    def BuildPreMapsMemLim(self, pw: 'PartialWorldForSAS', iValue: 'int', iBulkValue: 'int', Displ: 'float *', Rion: 'float', Rsmoth: 'float') -> "int":
        return _pnpsll.GOMembraneZ_BuildPreMapsMemLim(self, pw, iValue, iBulkValue, Displ, Rion, Rsmoth)
GOMembraneZ_swigregister = _pnpsll.GOMembraneZ_swigregister
GOMembraneZ_swigregister(GOMembraneZ)

class BuildWorldNI(PnpsObject):
    __swig_setmethods__ = {}
    for _s in [PnpsObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BuildWorldNI, name, value)
    __swig_getmethods__ = {}
    for _s in [PnpsObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BuildWorldNI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pnpsll.new_BuildWorldNI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_BuildWorldNI
    __del__ = lambda self: None

    def InitZero(self) -> "int":
        return _pnpsll.BuildWorldNI_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.BuildWorldNI_Clear(self)

    def Print(self) -> "int":
        return _pnpsll.BuildWorldNI_Print(self)

    def setEpsilonValues(self, e0: 'float'=0.0, e1: 'float'=0.0, e2: 'float'=0.0, e3: 'float'=0.0, e4: 'float'=0.0, e5: 'float'=0.0, e6: 'float'=0.0, e7: 'float'=0.0, e8: 'float'=0.0, e9: 'float'=0.0, e10: 'float'=0.0, e11: 'float'=0.0, e12: 'float'=0.0, e13: 'float'=0.0, e14: 'float'=0.0) -> "int":
        return _pnpsll.BuildWorldNI_setEpsilonValues(self, e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14)

    def setDiffusionValues(self, D0: 'float'=0.0, D1: 'float'=0.0, D2: 'float'=0.0, D3: 'float'=0.0, D4: 'float'=0.0, D5: 'float'=0.0, D6: 'float'=0.0) -> "int":
        return _pnpsll.BuildWorldNI_setDiffusionValues(self, D0, D1, D2, D3, D4, D5, D6)

    def getEpsilonValueIndex(self, epsilon: 'float') -> "int":
        return _pnpsll.BuildWorldNI_getEpsilonValueIndex(self, epsilon)

    def getDiffusionValueIndex(self, D0: 'float') -> "int":
        return _pnpsll.BuildWorldNI_getDiffusionValueIndex(self, D0)

    def setIonsR(self, R0: 'float', R1: 'float') -> "int":
        return _pnpsll.BuildWorldNI_setIonsR(self, R0, R1)

    def setRwat(self, m_Rwat: 'float') -> "int":
        return _pnpsll.BuildWorldNI_setRwat(self, m_Rwat)

    def setRsmooth(self, m_Rsmooth: 'float') -> "int":
        return _pnpsll.BuildWorldNI_setRsmooth(self, m_Rsmooth)

    def setDiffusionMode(self, DiffMode: 'int') -> "int":
        return _pnpsll.BuildWorldNI_setDiffusionMode(self, DiffMode)

    def setExpDifPar(self, m_Kexpdiff: 'float', m_Rexpdiff: 'float', m_DiffRmaxAffect: 'float') -> "int":
        return _pnpsll.BuildWorldNI_setExpDifPar(self, m_Kexpdiff, m_Rexpdiff, m_DiffRmaxAffect)

    def setMakeDielectricMap(self, bVal: 'int') -> "int":
        return _pnpsll.BuildWorldNI_setMakeDielectricMap(self, bVal)

    def setMakeChargeMap(self, bVal: 'int') -> "int":
        return _pnpsll.BuildWorldNI_setMakeChargeMap(self, bVal)

    def setMakeDiffusionMap(self, bVal: 'int') -> "int":
        return _pnpsll.BuildWorldNI_setMakeDiffusionMap(self, bVal)

    def setMakeConcentrationMap(self, bVal: 'int') -> "int":
        return _pnpsll.BuildWorldNI_setMakeConcentrationMap(self, bVal)

    def setMakeSoftRepultionMap(self, bVal: 'int') -> "int":
        return _pnpsll.BuildWorldNI_setMakeSoftRepultionMap(self, bVal)

    def setBulkPar(self, iEps: 'int', iD0: 'int', iD1: 'int', C0: 'float', C1: 'float'=-1.0) -> "int":
        return _pnpsll.BuildWorldNI_setBulkPar(self, iEps, iD0, iD1, C0, C1)

    def setBulkParam(self, iEps, iD, C):
    	"""
    	set parameters for bulk
    	Input Parameters:
    		iEps = int
    		iD = [float]*NIonsTypes
    		C = float or [float]*NIonsTypes
    	"""
    	if not (type(iD) is list or type(iD) is tuple):
    		print("Error: iD should be list or tuple")
    		return None
    	if len(iD)!=self.NIonsTypes:
    		print("Error: len(iD)!=self.NIonsTypes")
    		return None
    	m_iD=new_intArray(self.NIonsTypes)
    	for i in range(self.NIonsTypes):intArray_setitem(m_iD,i,iD[i])
    	m_C = new_floatArray(self.NIonsTypes)
    	if type(C) is list or type(C) is tuple:
    		for i in range(self.NIonsTypes):floatArray_setitem(m_C,i,C[i])
    	else:
    		for i in range(self.NIonsTypes):floatArray_setitem(m_C,i,C)
    	self.cxxSetBulkParam(iEps,m_iD,m_C)
    	delete_intArray(m_iD)
    	delete_floatArray(m_C)
    def setIonsRadii(self, m_R):
    	"""
    	set parameters for bulk
    	Input Parameters:
    		m_R = [float]*NIonsTypes
    	"""
    	if len(m_R)!=self.NIonsTypes:
    		print("Error: len(m_R)!=self.NIonsTypes")
    		return None
    	mm_R=new_floatArray(self.NIonsTypes)
    	for i in range(self.NIonsTypes):floatArray_setitem(mm_R,i,m_R[i])
    	self.cxxSetIonsRadii(iEps,mm_R)
    	delete_floatArray(mm_R)


    def cxxSetBulkParam(self, iEps: 'int', iD: 'int *', C: 'float *') -> "int":
        return _pnpsll.BuildWorldNI_cxxSetBulkParam(self, iEps, iD, C)

    def cxxSetIonsRadii(self, m_R: 'float *') -> "int":
        return _pnpsll.BuildWorldNI_cxxSetIonsRadii(self, m_R)

    def addGGO(self, ggo: 'GenericGeometricalObject') -> "int":
        return _pnpsll.BuildWorldNI_addGGO(self, ggo)
    __swig_setmethods__["Rwat"] = _pnpsll.BuildWorldNI_Rwat_set
    __swig_getmethods__["Rwat"] = _pnpsll.BuildWorldNI_Rwat_get
    if _newclass:
        Rwat = _swig_property(_pnpsll.BuildWorldNI_Rwat_get, _pnpsll.BuildWorldNI_Rwat_set)
    __swig_setmethods__["Rsmooth"] = _pnpsll.BuildWorldNI_Rsmooth_set
    __swig_getmethods__["Rsmooth"] = _pnpsll.BuildWorldNI_Rsmooth_get
    if _newclass:
        Rsmooth = _swig_property(_pnpsll.BuildWorldNI_Rsmooth_get, _pnpsll.BuildWorldNI_Rsmooth_set)
    __swig_setmethods__["BoundaryCondition"] = _pnpsll.BuildWorldNI_BoundaryCondition_set
    __swig_getmethods__["BoundaryCondition"] = _pnpsll.BuildWorldNI_BoundaryCondition_get
    if _newclass:
        BoundaryCondition = _swig_property(_pnpsll.BuildWorldNI_BoundaryCondition_get, _pnpsll.BuildWorldNI_BoundaryCondition_set)
    __swig_setmethods__["BldBCatPlane"] = _pnpsll.BuildWorldNI_BldBCatPlane_set
    __swig_getmethods__["BldBCatPlane"] = _pnpsll.BuildWorldNI_BldBCatPlane_get
    if _newclass:
        BldBCatPlane = _swig_property(_pnpsll.BuildWorldNI_BldBCatPlane_get, _pnpsll.BuildWorldNI_BldBCatPlane_set)
    __swig_setmethods__["NIonsTypes"] = _pnpsll.BuildWorldNI_NIonsTypes_set
    __swig_getmethods__["NIonsTypes"] = _pnpsll.BuildWorldNI_NIonsTypes_get
    if _newclass:
        NIonsTypes = _swig_property(_pnpsll.BuildWorldNI_NIonsTypes_get, _pnpsll.BuildWorldNI_NIonsTypes_set)
    __swig_setmethods__["IonsR"] = _pnpsll.BuildWorldNI_IonsR_set
    __swig_getmethods__["IonsR"] = _pnpsll.BuildWorldNI_IonsR_get
    if _newclass:
        IonsR = _swig_property(_pnpsll.BuildWorldNI_IonsR_get, _pnpsll.BuildWorldNI_IonsR_set)
    __swig_setmethods__["IonsHalfSigma"] = _pnpsll.BuildWorldNI_IonsHalfSigma_set
    __swig_getmethods__["IonsHalfSigma"] = _pnpsll.BuildWorldNI_IonsHalfSigma_get
    if _newclass:
        IonsHalfSigma = _swig_property(_pnpsll.BuildWorldNI_IonsHalfSigma_get, _pnpsll.BuildWorldNI_IonsHalfSigma_set)
    __swig_setmethods__["IonsFourEpsilon"] = _pnpsll.BuildWorldNI_IonsFourEpsilon_set
    __swig_getmethods__["IonsFourEpsilon"] = _pnpsll.BuildWorldNI_IonsFourEpsilon_get
    if _newclass:
        IonsFourEpsilon = _swig_property(_pnpsll.BuildWorldNI_IonsFourEpsilon_get, _pnpsll.BuildWorldNI_IonsFourEpsilon_set)
    __swig_setmethods__["IonsLJA"] = _pnpsll.BuildWorldNI_IonsLJA_set
    __swig_getmethods__["IonsLJA"] = _pnpsll.BuildWorldNI_IonsLJA_get
    if _newclass:
        IonsLJA = _swig_property(_pnpsll.BuildWorldNI_IonsLJA_get, _pnpsll.BuildWorldNI_IonsLJA_set)
    __swig_setmethods__["IonsLJB"] = _pnpsll.BuildWorldNI_IonsLJB_set
    __swig_getmethods__["IonsLJB"] = _pnpsll.BuildWorldNI_IonsLJB_get
    if _newclass:
        IonsLJB = _swig_property(_pnpsll.BuildWorldNI_IonsLJB_get, _pnpsll.BuildWorldNI_IonsLJB_set)
    __swig_setmethods__["DielNum"] = _pnpsll.BuildWorldNI_DielNum_set
    __swig_getmethods__["DielNum"] = _pnpsll.BuildWorldNI_DielNum_get
    if _newclass:
        DielNum = _swig_property(_pnpsll.BuildWorldNI_DielNum_get, _pnpsll.BuildWorldNI_DielNum_set)
    __swig_setmethods__["DielConst"] = _pnpsll.BuildWorldNI_DielConst_set
    __swig_getmethods__["DielConst"] = _pnpsll.BuildWorldNI_DielConst_get
    if _newclass:
        DielConst = _swig_property(_pnpsll.BuildWorldNI_DielConst_get, _pnpsll.BuildWorldNI_DielConst_set)
    __swig_setmethods__["DiffusionNum"] = _pnpsll.BuildWorldNI_DiffusionNum_set
    __swig_getmethods__["DiffusionNum"] = _pnpsll.BuildWorldNI_DiffusionNum_get
    if _newclass:
        DiffusionNum = _swig_property(_pnpsll.BuildWorldNI_DiffusionNum_get, _pnpsll.BuildWorldNI_DiffusionNum_set)
    __swig_setmethods__["DiffusionConst"] = _pnpsll.BuildWorldNI_DiffusionConst_set
    __swig_getmethods__["DiffusionConst"] = _pnpsll.BuildWorldNI_DiffusionConst_get
    if _newclass:
        DiffusionConst = _swig_property(_pnpsll.BuildWorldNI_DiffusionConst_get, _pnpsll.BuildWorldNI_DiffusionConst_set)
    __swig_setmethods__["DiffusionMode"] = _pnpsll.BuildWorldNI_DiffusionMode_set
    __swig_getmethods__["DiffusionMode"] = _pnpsll.BuildWorldNI_DiffusionMode_get
    if _newclass:
        DiffusionMode = _swig_property(_pnpsll.BuildWorldNI_DiffusionMode_get, _pnpsll.BuildWorldNI_DiffusionMode_set)
    __swig_setmethods__["Kexpdiff"] = _pnpsll.BuildWorldNI_Kexpdiff_set
    __swig_getmethods__["Kexpdiff"] = _pnpsll.BuildWorldNI_Kexpdiff_get
    if _newclass:
        Kexpdiff = _swig_property(_pnpsll.BuildWorldNI_Kexpdiff_get, _pnpsll.BuildWorldNI_Kexpdiff_set)
    __swig_setmethods__["Rexpdiff"] = _pnpsll.BuildWorldNI_Rexpdiff_set
    __swig_getmethods__["Rexpdiff"] = _pnpsll.BuildWorldNI_Rexpdiff_get
    if _newclass:
        Rexpdiff = _swig_property(_pnpsll.BuildWorldNI_Rexpdiff_get, _pnpsll.BuildWorldNI_Rexpdiff_set)
    __swig_setmethods__["DiffRmaxAffect"] = _pnpsll.BuildWorldNI_DiffRmaxAffect_set
    __swig_getmethods__["DiffRmaxAffect"] = _pnpsll.BuildWorldNI_DiffRmaxAffect_get
    if _newclass:
        DiffRmaxAffect = _swig_property(_pnpsll.BuildWorldNI_DiffRmaxAffect_get, _pnpsll.BuildWorldNI_DiffRmaxAffect_set)
    __swig_setmethods__["iDzero"] = _pnpsll.BuildWorldNI_iDzero_set
    __swig_getmethods__["iDzero"] = _pnpsll.BuildWorldNI_iDzero_get
    if _newclass:
        iDzero = _swig_property(_pnpsll.BuildWorldNI_iDzero_get, _pnpsll.BuildWorldNI_iDzero_set)
    __swig_setmethods__["SaveDistMap"] = _pnpsll.BuildWorldNI_SaveDistMap_set
    __swig_getmethods__["SaveDistMap"] = _pnpsll.BuildWorldNI_SaveDistMap_get
    if _newclass:
        SaveDistMap = _swig_property(_pnpsll.BuildWorldNI_SaveDistMap_get, _pnpsll.BuildWorldNI_SaveDistMap_set)
    __swig_setmethods__["MakeDielectricMap"] = _pnpsll.BuildWorldNI_MakeDielectricMap_set
    __swig_getmethods__["MakeDielectricMap"] = _pnpsll.BuildWorldNI_MakeDielectricMap_get
    if _newclass:
        MakeDielectricMap = _swig_property(_pnpsll.BuildWorldNI_MakeDielectricMap_get, _pnpsll.BuildWorldNI_MakeDielectricMap_set)
    __swig_setmethods__["MakeDiffusionMap"] = _pnpsll.BuildWorldNI_MakeDiffusionMap_set
    __swig_getmethods__["MakeDiffusionMap"] = _pnpsll.BuildWorldNI_MakeDiffusionMap_get
    if _newclass:
        MakeDiffusionMap = _swig_property(_pnpsll.BuildWorldNI_MakeDiffusionMap_get, _pnpsll.BuildWorldNI_MakeDiffusionMap_set)
    __swig_setmethods__["MakeConcentrationMap"] = _pnpsll.BuildWorldNI_MakeConcentrationMap_set
    __swig_getmethods__["MakeConcentrationMap"] = _pnpsll.BuildWorldNI_MakeConcentrationMap_get
    if _newclass:
        MakeConcentrationMap = _swig_property(_pnpsll.BuildWorldNI_MakeConcentrationMap_get, _pnpsll.BuildWorldNI_MakeConcentrationMap_set)
    __swig_setmethods__["MakeChargeMap"] = _pnpsll.BuildWorldNI_MakeChargeMap_set
    __swig_getmethods__["MakeChargeMap"] = _pnpsll.BuildWorldNI_MakeChargeMap_get
    if _newclass:
        MakeChargeMap = _swig_property(_pnpsll.BuildWorldNI_MakeChargeMap_get, _pnpsll.BuildWorldNI_MakeChargeMap_set)
    __swig_setmethods__["MakeLJRepultion"] = _pnpsll.BuildWorldNI_MakeLJRepultion_set
    __swig_getmethods__["MakeLJRepultion"] = _pnpsll.BuildWorldNI_MakeLJRepultion_get
    if _newclass:
        MakeLJRepultion = _swig_property(_pnpsll.BuildWorldNI_MakeLJRepultion_get, _pnpsll.BuildWorldNI_MakeLJRepultion_set)
    __swig_setmethods__["AddElPotToPMF"] = _pnpsll.BuildWorldNI_AddElPotToPMF_set
    __swig_getmethods__["AddElPotToPMF"] = _pnpsll.BuildWorldNI_AddElPotToPMF_get
    if _newclass:
        AddElPotToPMF = _swig_property(_pnpsll.BuildWorldNI_AddElPotToPMF_get, _pnpsll.BuildWorldNI_AddElPotToPMF_set)
    __swig_setmethods__["RemovingCavities"] = _pnpsll.BuildWorldNI_RemovingCavities_set
    __swig_getmethods__["RemovingCavities"] = _pnpsll.BuildWorldNI_RemovingCavities_get
    if _newclass:
        RemovingCavities = _swig_property(_pnpsll.BuildWorldNI_RemovingCavities_get, _pnpsll.BuildWorldNI_RemovingCavities_set)
    __swig_setmethods__["RemovingCavitiesOnDielectricMap"] = _pnpsll.BuildWorldNI_RemovingCavitiesOnDielectricMap_set
    __swig_getmethods__["RemovingCavitiesOnDielectricMap"] = _pnpsll.BuildWorldNI_RemovingCavitiesOnDielectricMap_get
    if _newclass:
        RemovingCavitiesOnDielectricMap = _swig_property(_pnpsll.BuildWorldNI_RemovingCavitiesOnDielectricMap_get, _pnpsll.BuildWorldNI_RemovingCavitiesOnDielectricMap_set)
    __swig_setmethods__["RemCavOnDielFillWith"] = _pnpsll.BuildWorldNI_RemCavOnDielFillWith_set
    __swig_getmethods__["RemCavOnDielFillWith"] = _pnpsll.BuildWorldNI_RemCavOnDielFillWith_get
    if _newclass:
        RemCavOnDielFillWith = _swig_property(_pnpsll.BuildWorldNI_RemCavOnDielFillWith_get, _pnpsll.BuildWorldNI_RemCavOnDielFillWith_set)
    __swig_setmethods__["RemCavOnDielWhere2Look"] = _pnpsll.BuildWorldNI_RemCavOnDielWhere2Look_set
    __swig_getmethods__["RemCavOnDielWhere2Look"] = _pnpsll.BuildWorldNI_RemCavOnDielWhere2Look_get
    if _newclass:
        RemCavOnDielWhere2Look = _swig_property(_pnpsll.BuildWorldNI_RemCavOnDielWhere2Look_get, _pnpsll.BuildWorldNI_RemCavOnDielWhere2Look_set)
    __swig_setmethods__["LimitVlj"] = _pnpsll.BuildWorldNI_LimitVlj_set
    __swig_getmethods__["LimitVlj"] = _pnpsll.BuildWorldNI_LimitVlj_get
    if _newclass:
        LimitVlj = _swig_property(_pnpsll.BuildWorldNI_LimitVlj_get, _pnpsll.BuildWorldNI_LimitVlj_set)
    __swig_setmethods__["BoundaryStr"] = _pnpsll.BuildWorldNI_BoundaryStr_set
    __swig_getmethods__["BoundaryStr"] = _pnpsll.BuildWorldNI_BoundaryStr_get
    if _newclass:
        BoundaryStr = _swig_property(_pnpsll.BuildWorldNI_BoundaryStr_get, _pnpsll.BuildWorldNI_BoundaryStr_set)
    ZeroBC = _pnpsll.BuildWorldNI_ZeroBC
    CoulBC = _pnpsll.BuildWorldNI_CoulBC
    __swig_setmethods__["BuildUsingGPU"] = _pnpsll.BuildWorldNI_BuildUsingGPU_set
    __swig_getmethods__["BuildUsingGPU"] = _pnpsll.BuildWorldNI_BuildUsingGPU_get
    if _newclass:
        BuildUsingGPU = _swig_property(_pnpsll.BuildWorldNI_BuildUsingGPU_get, _pnpsll.BuildWorldNI_BuildUsingGPU_set)
    __swig_setmethods__["MemoryLimitOnOneArray"] = _pnpsll.BuildWorldNI_MemoryLimitOnOneArray_set
    __swig_getmethods__["MemoryLimitOnOneArray"] = _pnpsll.BuildWorldNI_MemoryLimitOnOneArray_get
    if _newclass:
        MemoryLimitOnOneArray = _swig_property(_pnpsll.BuildWorldNI_MemoryLimitOnOneArray_get, _pnpsll.BuildWorldNI_MemoryLimitOnOneArray_set)

    def ChangeUnits(self, world: 'ContWorld', ToInternal: 'bool') -> "int":
        return _pnpsll.BuildWorldNI_ChangeUnits(self, world, ToInternal)

    def BuildContWorld(self,world,Verbose=True):
    	"""Build continious world
    	Input Parameters:
    		world=ContWorld
    			instance of ContWorld
    		Verbose=bool, default=True
    			if set will print BuildWorld configuration
    	"""
    	if Verbose:
    		self.Print()
    	self.cxxBuildContWorld(world)


    def cxxBuildContWorld(self, world: 'ContWorld') -> "int":
        return _pnpsll.BuildWorldNI_cxxBuildContWorld(self, world)

    def BuildDielMapsOnCuda(self, world: 'ContWorld', NIndexingNew: 'NodeIndexing') -> "int":
        return _pnpsll.BuildWorldNI_BuildDielMapsOnCuda(self, world, NIndexingNew)

    def BuildDiffExp(self, world: 'ContWorld') -> "int":
        return _pnpsll.BuildWorldNI_BuildDiffExp(self, world)

    def BuildDiffExpOld(self, K0: 'float', world: 'ContWorld') -> "int":
        return _pnpsll.BuildWorldNI_BuildDiffExpOld(self, K0, world)

    def FinalazeSEV(self, world: 'ContWorld', Field: 'int *', iBulkValue: 'int', Rsmooth: 'float', Surf: 'float *') -> "int":
        return _pnpsll.BuildWorldNI_FinalazeSEV(self, world, Field, iBulkValue, Rsmooth, Surf)

    def FinalazeSEV2(self, world: 'ContWorld', Field: 'int *', iBulkValue: 'int', Rsmooth: 'float', surf_points: 'float3', Nsurf_points: 'int') -> "int":
        return _pnpsll.BuildWorldNI_FinalazeSEV2(self, world, Field, iBulkValue, Rsmooth, surf_points, Nsurf_points)

    def FinalazeSEVDiff(self, world: 'ContWorld', Field: 'int *', iBulkValue: 'int', Rsmooth: 'float', Surf: 'float *') -> "int":
        return _pnpsll.BuildWorldNI_FinalazeSEVDiff(self, world, Field, iBulkValue, Rsmooth, Surf)

    def RemovingCavitiesList(self, GSX: 'int', GSY: 'int', GSZ: 'int', Field: 'int *', iDzero: 'int') -> "int":
        return _pnpsll.BuildWorldNI_RemovingCavitiesList(self, GSX, GSY, GSZ, Field, iDzero)

    def RemovingCavitiesAtValues(self, GSX: 'int', GSY: 'int', GSZ: 'int', Field: 'int *', iWhereToLook: 'int', iFillWith: 'int') -> "int":
        return _pnpsll.BuildWorldNI_RemovingCavitiesAtValues(self, GSX, GSY, GSZ, Field, iWhereToLook, iFillWith)
    Plain = _pnpsll.BuildWorldNI_Plain
    Exp = _pnpsll.BuildWorldNI_Exp
    __swig_setmethods__["StdStrDiffusionModes"] = _pnpsll.BuildWorldNI_StdStrDiffusionModes_set
    __swig_getmethods__["StdStrDiffusionModes"] = _pnpsll.BuildWorldNI_StdStrDiffusionModes_get
    if _newclass:
        StdStrDiffusionModes = _swig_property(_pnpsll.BuildWorldNI_StdStrDiffusionModes_get, _pnpsll.BuildWorldNI_StdStrDiffusionModes_set)

    def setBulk(self,**kwargs):
    	iEps = kwargs.get("iDielConst")
    	if iEps==None:
    		print("Error: iDielConst must be defined")

    	iD = kwargs.get("iDiffCoef")
    	if iD==None:
    		print("Error: iDiffCoef must be defined")
    	if len(iD)!=2:
    		print("Error: iDiffCoef must have two values")

    	C = kwargs.get("C",0.1)
    	self.setBulkPar(iEps, iD[0], iD[1], C)

    def addAtoms(self,
    		iDielConst=None,
    		DielConst=2.0,
    		MolSet=None,
    		PQR=None,
    	    PAN=None,
    		AtomsPQR=None,
    	    AtomicParam=None,
    		**kwargs):
    	"""
    	add atoms to the system
    	Input Parameters:
    		DielConst=float, default=2.0
    			dielectric constant
    		MolSet=MolSet, default None
    			Load coordinates, charges and radii from Harlem MolSet
    			Note that if MolSet.p_save_opt_default.save_selected is set to 1
    			only selected atoms will be loaded
    		PQR=string, default None
    			Load coordinates, charges and radii from PQR file
    		PAN = string, default None
    			Load coordinates, charges and radii and SR parameters from PAN file
    		AtomicParam = string, default None
    			Load coordinates, charges and radii and SR parameters from AtomicParam file
    		AtomsPQR=list of list with x,y,z,q and r, default=None
    			Load coordinates, charges and radii from list of values.
    			For example:
    				AtomsPQR=[[0.0,0.0,-1.0,-1.0,2.0],[0.0,0.0,1.0,1.0,2.0]]

    	Returned value:
    		GOAtoms - atoms container
    	"""
    #print("BuildWorldNI::addAtoms()")

    	if iDielConst==None:
    		iDielConst=self.getEpsilonValueIndex(DielConst)
    	if iDielConst==None:
    		print("Error: iDielConst must be defined")

    	a=GOAtoms()
    	a.setParam(iDielConst, self.iDzero,0.0,NIonsTypes=self.NIonsTypes)

    	a.ChargeDist=a.Linear;
    	a.ChargeDistN=1;

    	atomsLoaded=False

    	if PQR!=None:
    		a.LoadPQR(PQR)
    		atomsLoaded=True
    	if PAN is not None:
    		a.LoadPAN(PAN)
    		atomsLoaded=True
    	if AtomicParam is not None:
    		a.LoadAtomicParam(AtomicParam)
    		atomsLoaded=True
    	if MolSet!=None:
    		a.LoadHaMolSet(MolSet)
    		atomsLoaded=True
    	if AtomsPQR!=None:
    		for atom in AtomsPQR:
    			x,y,z,q,r=atom
    			a.r_x.push_back(x)
    			a.r_y.push_back(y)
    			a.r_z.push_back(z)
    			a.q.push_back(q)
    			a.R.push_back(r)
    		a.NAtoms=a.R.size();
    		atomsLoaded=True
    	if atomsLoaded==False:
    		print("Error: Can not load atoms parameters!")
    	a.MakePreRoll=True
    #for key in kwargs:
    #	print("keyword arg: %s: %s" % (key, kwargs[key]))
    	self.addGGO(a)
    	a.thisown = 0
    	return a

    def addTube(self,
    		iDielConst=None,
    		DielConst=2.0,
    		x=0.0,
    		y=0.0,
    		z=[-12.0,12.0],
    		R=[4.0,1000.0]):
    	"""
    	add tube or membrane with cyllindric hole to the system
    	Input Parameters:
    		DielConst=float, default=2.0
    			dielectric constant
    		x=float, default=0.0
    		y=float, default=0.0
    			x,y - coordinate of central symmetry axle of tube
    		z=[float,float], default=[-12.0,12.0]
    			beginning and end of tube
    		R=float or [float,float], default=4.0
    			internal radius of cillindric hole in the membrane or internal and external radii of the tube
    	Returned value:
    		GOTube - tube container
    	"""
    # print("BuildWorldNI::addTube()")

    	if iDielConst==None:
    		iDielConst=self.getEpsilonValueIndex(DielConst)
    	if iDielConst==None:
    		print("Error: iDielConst must be defined")

    	t=GOTube()
    	t.setParam(iDielConst, self.iDzero,0.0,NIonsTypes=self.NIonsTypes)

    	if type(R) is list or type(R) is tuple:
    		m_R=R
    	else:
    		m_R=[R,1000.0]

    	t.setTubeParam(x,y,z[0],z[1],m_R[0],m_R[1]);
    	self.addGGO(t)
    	t.thisown = 0
    	return t
    def addMembraneZ(self,
    		iDielConst=None,
    		DielConst=2.0,
    		z=[-12.0,12.0]):
    	"""
    	add membrane slab
    	Input Parameters:
    		DielConst=float, default=2.0
    			dielectric constant
    		z=[float,float], default=[-12.0,12.0]
    			beginning and end of tube
    	Returned value:
    		GOMembraneZ- tube container
    	"""
    #print("BuildWorldNI::addTube()")

    	if iDielConst==None:
    		iDielConst=self.getEpsilonValueIndex(DielConst)
    	if iDielConst==None:
    		print("Error: iDielConst must be defined")

    	mz=GOMembraneZ()
    	mz.setParam(iDielConst, self.iDzero,0.0,NIonsTypes=self.NIonsTypes)

    	if not (type(z) is list or type(z) is tuple):
    		print("Error: z must be type of two values")

    	floatArray_setitem(mz.Z,0,z[0])
    	floatArray_setitem(mz.Z,1,z[1])

    	self.addGGO(mz)
    	mz.thisown = 0
    	return mz

BuildWorldNI_swigregister = _pnpsll.BuildWorldNI_swigregister
BuildWorldNI_swigregister(BuildWorldNI)


def GetBuilderForPNPSR(**kwargs):
	"""
		depreciated
	GetBuilderForPNPSR - get system continuum representation builder

	Parameters
		MakeDielectricMap=Bool, default=True
			Create dielectric constant distribution map
		MakeChargeMap=Bool, default=True
			Create static charge distribution map
		MakeDiffusionMap=Bool, default=True
			Create diffusion coefficient distribution map
		MakeConcentrationMap=Bool, default=True
			Create mobile ions concentration distribution map
		MakeSoftRepultionMap=Bool, default=True
			Create soft repultion potential between static atoms and mobile ions
	DielConstValues = None
	DiffusionValues = None

	iDielConst=None #Example: 1 , i.e. DielConstValues[1]
	iDiffCoef=None #Example:[2,3]
	C=0.1,

	RprobeDiel = 1.4
	RprobeDiff = 0.5
	Rions      = [2.0,2.0]

	DiffusionModel = "Plane"  |"MD"
	Kexpdiff=0.62 #options for MD diffusion
	DiffRmaxAffect=10.0 #options for MD diffusion


	"""
	print(kwargs)
	DielConstValues = kwargs.get("DielConstValues",None)
	print(DielConstValues)
	if DielConstValues==None:
		print("Error: DielConstValues must be defined")
		return None
	DiffusionValues = kwargs.get("DiffusionValues",None)
	if DiffusionValues==None:
		print("Error: DiffusionValues must be defined")
		return None

	bld=BuildWorldNI()
#Set epsilon values which will be used in ContWorld
#In objects instead of real dielectric constant is used index to the element of this array
	a=[0.0]*15
	for i in xrange(0,len(DielConstValues)):
		a[i]=float(DielConstValues[i])
	bld.setEpsilonValues(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14]);
#Set diffusion values (Bulk + Zero) which will be used in ContWorld
#In objects instead of real diffusion constant is used index to the element of this array
	a=[0.0]*7
	for i in xrange(0,len(DiffusionValues)):
		a[i]=float(DiffusionValues[i])
	bld.setDiffusionValues(a[0], a[1], a[2], a[3], a[4], a[5], a[6])



#Rprobe for creation of dielectric maps
	RprobeDiel = kwargs.get("RprobeDiel",1.4)
	bld.setRwat(RprobeDiel)
#Rsmoth for smothing IAV; since we use PNP-SR our initial guess will molecular surphace

	RprobeDiff = kwargs.get("RprobeDiff",0.5)
	bld.setRsmooth(RprobeDiff)
#Radii of mobile ion, for creation of IAV; now we will use explicit IER
	Rions = kwargs.get("Rions",[2.0,2.0])
	bld.setIonsR(Rions[0],Rions[1]) # R0, R1

#Type of distance depentend diffusion:
# BuildWorldNI.Plain - Bulk diffusion throughout IAV
# BuildWorldNI.Exp - Diffusion which exponentially decay upon aproatching protein atoms
	DiffusionModel = kwargs.get("DiffusionModel","Plane")
	if DiffusionModel=="Plane":
		bld.setDiffusionMode(BuildWorldNI.Plain)
	else:
		bld.setDiffusionMode(BuildWorldNI.Exp)
# Parameters for exponential decay
	Kexpdiff = kwargs.get("Kexpdiff",0.62)
	Rexpdiff = kwargs.get("Rexpdiff",2.2)
	DiffRmaxAffect = getattr(kwargs,"DiffRmaxAffect",10.0)
	bld.setExpDifPar(Kexpdiff,Rexpdiff,DiffRmaxAffect)

#following flags describe what maps to calculate
	MakeDielectricMap=kwargs.get("MakeDielectricMap",True)
	MakeChargeMap=kwargs.get("MakeChargeMap",True)
	MakeDiffusionMap=kwargs.get("MakeDiffusionMap",True)
	MakeConcentrationMap=kwargs.get("MakeConcentrationMap",True)
	MakeSoftRepultionMap=kwargs.get("MakeSoftRepultionMap",True)

	if MakeDielectricMap : MakeDielectricMap=1
	else : MakeDielectricMap=0

	if MakeChargeMap : MakeChargeMap=1
	else : MakeChargeMap=0

	if MakeDiffusionMap : MakeDiffusionMap=1
	else : MakeDiffusionMap=0

	if MakeConcentrationMap : MakeConcentrationMap=1
	else : MakeConcentrationMap=0

	if MakeSoftRepultionMap : MakeSoftRepultionMap=1
	else : MakeSoftRepultionMap=0

	bld.setMakeDielectricMap(MakeDielectricMap)
	bld.setMakeChargeMap(MakeChargeMap)
	bld.setMakeDiffusionMap(MakeDiffusionMap)
	bld.setMakeConcentrationMap(MakeConcentrationMap)
	bld.setMakeSoftRepultionMap(MakeSoftRepultionMap)

	iEps = kwargs.get("iDielConst",None)
	if iEps==None:
		print("Error: iDielConst must be defined")

	iD = kwargs.get("iDiffCoef",None)
	if iD==None:
		print("Error: iDiffCoef must be defined")
	if len(iD)!=2:
		print("Error: iDiffCoef must have two values")

	C = kwargs.get("C",0.1)
	bld.setBulkPar(iEps, iD[0], iD[1], C)

#Why?
	bld.thisown = 0
	return bld
def GetWorldBuilder(
		DielConstBulk=80.0,
		DiffCoefBulk=[19.57,20.32],
		Cbulk=1.0,
		RprobeDiel = 1.4,
		RprobeDiff = 0.5,
		Rions      = [2.0,2.0],
		DiffusionModel = "Plane",
		KexpDiff=0.62,
		RexpDiff=2.2,
		DiffRmaxAffect=10.0,
		BoundaryCondition="ZeroBC",
		RemoveIonsCavities=True,
		MakeDielectricMap=True,
		MakeChargeMap=True,
		MakeDiffusionMap=True,
		MakeConcentrationMap=True,
		MakeSoftRepultionMap=False):
	"""

	GetBuilderForPNPSR - get system continuum representation builder

	Input Parameters:
		Bulk properties setup:
			DielConstBulk=float, default=80.0,
				Dielectric constant of a bulk
			DiffCoefBulk=[float, float], dim=Number of mobile ions, default=[19.57,20.32], Units:[1E-6 cm^2/s]
				Diffusion coefficient of mobile ions in bulk. Units:[1E-6 cm^2/s].
				Default values corresponds for KCl
			Cbulk=float or [float, float], dim=Number of mobile ions,default=1.0, Units:[M]
				Concentration of mobile ions in bulk
			BoundaryCondition=string, "ZeroBC" or "CoulBC", default="ZeroBC"
				Boundary conditions
		Solvent and mobile ions radii:
			RprobeDiel=float, default=1.4, Units:[Angstrom]
				Solvent molecule radius for solvent accessible volume calculation,
				used in dielectic constant distribution calculation.
			RprobeDiff=float, default=0.5, Units:[Angstrom]
				Smoothing probe radius for smoothing ions accessible volume
			Rions=[float, float], dim=Number of mobile ions,default=[2.0,2.0], Units:[Angstrom]
				Mobile ions radii for ion accessible volume calculation
		Diffusion model and its parameters:
			DiffusionModel = "Plane" or "MD", default="Plane"
				Diffusion model
			Kexpdiff=float, default=0.62
				option for MD diffusion
			Rexpdiff=float, default=2.2, Units:[Angstrom]
				option for MD diffusion
			DiffRmaxAffect=float, default=10.0, Units:[Angstrom]
				option for MD diffusion
		Distribution map to building flags:
			MakeDielectricMap=Bool, default=True
				Create dielectric constant distribution map
			MakeChargeMap=Bool, default=True
				Create static charge distribution map
			MakeDiffusionMap=Bool, default=True
				Create diffusion coefficient distribution map
			MakeConcentrationMap=Bool, default=True
				Create mobile ions concentration distribution map
			MakeSoftRepultionMap=Bool, default=False
				Create soft repultion potential between static atoms and mobile ions
	    Other options:
	        RemoveIonsCavities=Bool, default=True remove mobile ions cavities
	Returned value:
			In case of successfull execution return BuildWorldNI instance, otherwise None

	"""
	bld=BuildWorldNI()

#get number of mobile ions types
	if not (type(DiffCoefBulk) is list or type(DiffCoefBulk) is tuple):
		print("Error: DiffCoefBulk should be list or tuple!")
		return None

	NIonsTypes=len(DiffCoefBulk)
	if len(DiffCoefBulk)!=len(Rions):
		print("Error: Different number of mobile ions types: len(DiffCoefBulk)!=len(Rions)")
		return None
	if type(Cbulk) is list or type(Cbulk) is tuple:
		if len(DiffCoefBulk)!=len(Cbulk):
			print("Error: Different number of mobile ions types: len(DiffCoefBulk)!=len(Cbulk)")
			return None
	bld.NIonsTypes=NIonsTypes

#Rprobe for creation of dielectric maps
	bld.setRwat(RprobeDiel)
#Rsmoth for smothing IAV; since we use PNP-SR our initial guess will molecular surphace
	bld.setRsmooth(RprobeDiff)
#Radii of mobile ion, for creation of IAV; now we will use explicit IER
	bld.setIonsR(Rions[0],Rions[1]) # R0, R1

#Type of distance depentend diffusion:
# BuildWorldNI.Plain - Bulk diffusion throughout IAV
# BuildWorldNI.Exp - Diffusion which exponentially decay upon aproatching protein atoms
	if DiffusionModel=="Plane":
		bld.setDiffusionMode(BuildWorldNI.Plain)
	elif DiffusionModel=="MD":
		bld.setDiffusionMode(BuildWorldNI.Exp)
	else:
		print("Error: Unknown Diffusion Model!")
		return None
# Parameters for exponential decay
	bld.setExpDifPar(KexpDiff,RexpDiff,DiffRmaxAffect)

#following flags describe what maps to calculate
	if MakeDielectricMap : MakeDielectricMap=1
	else : MakeDielectricMap=0

	if MakeChargeMap : MakeChargeMap=1
	else : MakeChargeMap=0

	if MakeDiffusionMap : MakeDiffusionMap=1
	else : MakeDiffusionMap=0

	if MakeConcentrationMap : MakeConcentrationMap=1
	else : MakeConcentrationMap=0

	if MakeSoftRepultionMap : MakeSoftRepultionMap=1
	else : MakeSoftRepultionMap=0

	bld.setMakeDielectricMap(MakeDielectricMap)
	bld.setMakeChargeMap(MakeChargeMap)
	bld.setMakeDiffusionMap(MakeDiffusionMap)
	bld.setMakeConcentrationMap(MakeConcentrationMap)
	bld.setMakeSoftRepultionMap(MakeSoftRepultionMap)

	iEps = bld.getEpsilonValueIndex(DielConstBulk)

	iD = []
	for iDiff in DiffCoefBulk:
		iD.append(bld.getDiffusionValueIndex(iDiff))

	bld.setBulkParam(iEps, iD, Cbulk)

	if BoundaryCondition=="ZeroBC":
		bld.BoundaryCondition=0
	elif BoundaryCondition=="CoulBC":
		bld.BoundaryCondition=1
	else:
		bld.BoundaryCondition=0
		print("Error: Unknown Boundary Condition! Should be ZeroBC or CoulBC")
		return None
	if RemoveIonsCavities:
		bld.RemovingCavities=True
	else:
		bld.RemovingCavities=False
#Why?
	bld.thisown = 0
	return bld

class BuildWorldEu(BuildWorldNI):
    __swig_setmethods__ = {}
    for _s in [BuildWorldNI]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BuildWorldEu, name, value)
    __swig_getmethods__ = {}
    for _s in [BuildWorldNI]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BuildWorldEu, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pnpsll.new_BuildWorldEu()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_BuildWorldEu
    __del__ = lambda self: None

    def InitZero(self) -> "int":
        return _pnpsll.BuildWorldEu_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.BuildWorldEu_Clear(self)

    def cxxBuildContWorld(self, world: 'ContWorld') -> "int":
        return _pnpsll.BuildWorldEu_cxxBuildContWorld(self, world)

    def BuildPreMapsAtoms(self, goatoms: 'GOAtoms', world: 'ContWorld', iEpsilon: 'int **', Rpr: 'float') -> "int":
        return _pnpsll.BuildWorldEu_BuildPreMapsAtoms(self, goatoms, world, iEpsilon, Rpr)

    def BuildPreMapsTube(self, gotube: 'GOTube', world: 'ContWorld', iEpsilon: 'int **', Rpr: 'float') -> "int":
        return _pnpsll.BuildWorldEu_BuildPreMapsTube(self, gotube, world, iEpsilon, Rpr)

    def FinalazeSEV(self, world: 'ContWorld', iEpsilon: 'int **') -> "int":
        return _pnpsll.BuildWorldEu_FinalazeSEV(self, world, iEpsilon)

    def FinalazeSEV2(self, world: 'ContWorld', iEpsilon: 'int **') -> "int":
        return _pnpsll.BuildWorldEu_FinalazeSEV2(self, world, iEpsilon)
BuildWorldEu_swigregister = _pnpsll.BuildWorldEu_swigregister
BuildWorldEu_swigregister(BuildWorldEu)

class BuildWorldCmp(BuildWorldNI):
    __swig_setmethods__ = {}
    for _s in [BuildWorldNI]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BuildWorldCmp, name, value)
    __swig_getmethods__ = {}
    for _s in [BuildWorldNI]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BuildWorldCmp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pnpsll.new_BuildWorldCmp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_BuildWorldCmp
    __del__ = lambda self: None

    def InitZero(self) -> "int":
        return _pnpsll.BuildWorldCmp_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.BuildWorldCmp_Clear(self)

    def cxxBuildContWorld(self, world: 'ContWorld') -> "int":
        return _pnpsll.BuildWorldCmp_cxxBuildContWorld(self, world)

    def BuildPreMapsAtoms(self, goatoms: 'GOAtoms', world: 'ContWorld', iEpsilon: 'int **', Rpr: 'float') -> "int":
        return _pnpsll.BuildWorldCmp_BuildPreMapsAtoms(self, goatoms, world, iEpsilon, Rpr)

    def FinalazeSEV(self, world: 'ContWorld', iEpsilon: 'int **') -> "int":
        return _pnpsll.BuildWorldCmp_FinalazeSEV(self, world, iEpsilon)
BuildWorldCmp_swigregister = _pnpsll.BuildWorldCmp_swigregister
BuildWorldCmp_swigregister(BuildWorldCmp)

class BuildWorldScaled(PnpsObject):
    __swig_setmethods__ = {}
    for _s in [PnpsObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BuildWorldScaled, name, value)
    __swig_getmethods__ = {}
    for _s in [PnpsObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BuildWorldScaled, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pnpsll.new_BuildWorldScaled()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_BuildWorldScaled
    __del__ = lambda self: None

    def InitZero(self) -> "int":
        return _pnpsll.BuildWorldScaled_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.BuildWorldScaled_Clear(self)

    def BuildContWorld(self, world: 'ContWorld') -> "int":
        return _pnpsll.BuildWorldScaled_BuildContWorld(self, world)

    def BuildContWorldCharges(self, world: 'ContWorld', NIndexingNew: 'NodeIndexing') -> "int":
        return _pnpsll.BuildWorldScaled_BuildContWorldCharges(self, world, NIndexingNew)

    def BuildContWorldDielMaps(self, world: 'ContWorld', NIndexingNew: 'NodeIndexing') -> "int":
        return _pnpsll.BuildWorldScaled_BuildContWorldDielMaps(self, world, NIndexingNew)
    __swig_setmethods__["Rwat"] = _pnpsll.BuildWorldScaled_Rwat_set
    __swig_getmethods__["Rwat"] = _pnpsll.BuildWorldScaled_Rwat_get
    if _newclass:
        Rwat = _swig_property(_pnpsll.BuildWorldScaled_Rwat_get, _pnpsll.BuildWorldScaled_Rwat_set)
    __swig_setmethods__["DielNum"] = _pnpsll.BuildWorldScaled_DielNum_set
    __swig_getmethods__["DielNum"] = _pnpsll.BuildWorldScaled_DielNum_get
    if _newclass:
        DielNum = _swig_property(_pnpsll.BuildWorldScaled_DielNum_get, _pnpsll.BuildWorldScaled_DielNum_set)
    __swig_setmethods__["DielConst"] = _pnpsll.BuildWorldScaled_DielConst_set
    __swig_getmethods__["DielConst"] = _pnpsll.BuildWorldScaled_DielConst_get
    if _newclass:
        DielConst = _swig_property(_pnpsll.BuildWorldScaled_DielConst_get, _pnpsll.BuildWorldScaled_DielConst_set)
    __swig_setmethods__["BoundaryCondition"] = _pnpsll.BuildWorldScaled_BoundaryCondition_set
    __swig_getmethods__["BoundaryCondition"] = _pnpsll.BuildWorldScaled_BoundaryCondition_get
    if _newclass:
        BoundaryCondition = _swig_property(_pnpsll.BuildWorldScaled_BoundaryCondition_get, _pnpsll.BuildWorldScaled_BoundaryCondition_set)
    __swig_setmethods__["BulkParam"] = _pnpsll.BuildWorldScaled_BulkParam_set
    __swig_getmethods__["BulkParam"] = _pnpsll.BuildWorldScaled_BulkParam_get
    if _newclass:
        BulkParam = _swig_property(_pnpsll.BuildWorldScaled_BulkParam_get, _pnpsll.BuildWorldScaled_BulkParam_set)
    __swig_setmethods__["GOElms"] = _pnpsll.BuildWorldScaled_GOElms_set
    __swig_getmethods__["GOElms"] = _pnpsll.BuildWorldScaled_GOElms_get
    if _newclass:
        GOElms = _swig_property(_pnpsll.BuildWorldScaled_GOElms_get, _pnpsll.BuildWorldScaled_GOElms_set)
BuildWorldScaled_swigregister = _pnpsll.BuildWorldScaled_swigregister
BuildWorldScaled_swigregister(BuildWorldScaled)

class DielDiffMapsPatcher(PnpsObject):
    __swig_setmethods__ = {}
    for _s in [PnpsObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielDiffMapsPatcher, name, value)
    __swig_getmethods__ = {}
    for _s in [PnpsObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielDiffMapsPatcher, name)
    __repr__ = _swig_repr

    def __init__(self, world: 'ContWorld'):
        this = _pnpsll.new_DielDiffMapsPatcher(world)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_DielDiffMapsPatcher
    __del__ = lambda self: None
    __swig_setmethods__["m_ContWorld"] = _pnpsll.DielDiffMapsPatcher_m_ContWorld_set
    __swig_getmethods__["m_ContWorld"] = _pnpsll.DielDiffMapsPatcher_m_ContWorld_get
    if _newclass:
        m_ContWorld = _swig_property(_pnpsll.DielDiffMapsPatcher_m_ContWorld_get, _pnpsll.DielDiffMapsPatcher_m_ContWorld_set)
    __swig_setmethods__["eps"] = _pnpsll.DielDiffMapsPatcher_eps_set
    __swig_getmethods__["eps"] = _pnpsll.DielDiffMapsPatcher_eps_get
    if _newclass:
        eps = _swig_property(_pnpsll.DielDiffMapsPatcher_eps_get, _pnpsll.DielDiffMapsPatcher_eps_set)

    def GetIntDielMaps(self) -> "void":
        return _pnpsll.DielDiffMapsPatcher_GetIntDielMaps(self)

    def PushIntDielMaps(self) -> "void":
        return _pnpsll.DielDiffMapsPatcher_PushIntDielMaps(self)

    def PatchDielMaps(self, epsToOver: 'int', epsNew: 'int', x: 'float', y: 'float', z1: 'float', z2: 'float', R: 'float') -> "void":
        return _pnpsll.DielDiffMapsPatcher_PatchDielMaps(self, epsToOver, epsNew, x, y, z1, z2, R)
    __swig_setmethods__["refDiff"] = _pnpsll.DielDiffMapsPatcher_refDiff_set
    __swig_getmethods__["refDiff"] = _pnpsll.DielDiffMapsPatcher_refDiff_get
    if _newclass:
        refDiff = _swig_property(_pnpsll.DielDiffMapsPatcher_refDiff_get, _pnpsll.DielDiffMapsPatcher_refDiff_set)

    def InitNewDiff(self) -> "void":
        return _pnpsll.DielDiffMapsPatcher_InitNewDiff(self)

    def DelRefDiff(self) -> "void":
        return _pnpsll.DielDiffMapsPatcher_DelRefDiff(self)

    def PatchDiffMaps(self, Dscale1K: 'float', Dscale2K: 'float', Dscale1Cl: 'float', Dscale2Cl: 'float', x: 'float', y: 'float', z1: 'float', z2: 'float', R: 'float') -> "void":
        return _pnpsll.DielDiffMapsPatcher_PatchDiffMaps(self, Dscale1K, Dscale2K, Dscale1Cl, Dscale2Cl, x, y, z1, z2, R)

    def setDielConstInUse(self,DielConstInUse):
    	for i in range(14):
    		self.m_ContWorld.NIndexing.SetDielConstInUse(i,DielConstInUse[i])

DielDiffMapsPatcher_swigregister = _pnpsll.DielDiffMapsPatcher_swigregister
DielDiffMapsPatcher_swigregister(DielDiffMapsPatcher)

class PBwithLJSolver(GenericSolver, PnpsObject):
    __swig_setmethods__ = {}
    for _s in [GenericSolver, PnpsObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PBwithLJSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericSolver, PnpsObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PBwithLJSolver, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pnpsll.new_PBwithLJSolver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pnpsll.delete_PBwithLJSolver
    __del__ = lambda self: None

    def InitZero(self) -> "int":
        return _pnpsll.PBwithLJSolver_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.PBwithLJSolver_Clear(self)
    Auto = _pnpsll.PBwithLJSolver_Auto
    NodeIndexBased = _pnpsll.PBwithLJSolver_NodeIndexBased
    ArrayDirect = _pnpsll.PBwithLJSolver_ArrayDirect
    __swig_setmethods__["solver"] = _pnpsll.PBwithLJSolver_solver_set
    __swig_getmethods__["solver"] = _pnpsll.PBwithLJSolver_solver_get
    if _newclass:
        solver = _swig_property(_pnpsll.PBwithLJSolver_solver_get, _pnpsll.PBwithLJSolver_solver_set)
    __swig_setmethods__["MaxIterations"] = _pnpsll.PBwithLJSolver_MaxIterations_set
    __swig_getmethods__["MaxIterations"] = _pnpsll.PBwithLJSolver_MaxIterations_get
    if _newclass:
        MaxIterations = _swig_property(_pnpsll.PBwithLJSolver_MaxIterations_get, _pnpsll.PBwithLJSolver_MaxIterations_set)
    __swig_setmethods__["ConvergenceCheck"] = _pnpsll.PBwithLJSolver_ConvergenceCheck_set
    __swig_getmethods__["ConvergenceCheck"] = _pnpsll.PBwithLJSolver_ConvergenceCheck_get
    if _newclass:
        ConvergenceCheck = _swig_property(_pnpsll.PBwithLJSolver_ConvergenceCheck_get, _pnpsll.PBwithLJSolver_ConvergenceCheck_set)
    __swig_setmethods__["Convergence"] = _pnpsll.PBwithLJSolver_Convergence_set
    __swig_getmethods__["Convergence"] = _pnpsll.PBwithLJSolver_Convergence_get
    if _newclass:
        Convergence = _swig_property(_pnpsll.PBwithLJSolver_Convergence_get, _pnpsll.PBwithLJSolver_Convergence_set)
    __swig_setmethods__["Relaxation"] = _pnpsll.PBwithLJSolver_Relaxation_set
    __swig_getmethods__["Relaxation"] = _pnpsll.PBwithLJSolver_Relaxation_get
    if _newclass:
        Relaxation = _swig_property(_pnpsll.PBwithLJSolver_Relaxation_get, _pnpsll.PBwithLJSolver_Relaxation_set)
    __swig_setmethods__["verbose"] = _pnpsll.PBwithLJSolver_verbose_set
    __swig_getmethods__["verbose"] = _pnpsll.PBwithLJSolver_verbose_get
    if _newclass:
        verbose = _swig_property(_pnpsll.PBwithLJSolver_verbose_get, _pnpsll.PBwithLJSolver_verbose_set)
    __swig_setmethods__["bPBExpAll"] = _pnpsll.PBwithLJSolver_bPBExpAll_set
    __swig_getmethods__["bPBExpAll"] = _pnpsll.PBwithLJSolver_bPBExpAll_get
    if _newclass:
        bPBExpAll = _swig_property(_pnpsll.PBwithLJSolver_bPBExpAll_get, _pnpsll.PBwithLJSolver_bPBExpAll_set)
    __swig_setmethods__["bAnalyseExplosion"] = _pnpsll.PBwithLJSolver_bAnalyseExplosion_set
    __swig_getmethods__["bAnalyseExplosion"] = _pnpsll.PBwithLJSolver_bAnalyseExplosion_get
    if _newclass:
        bAnalyseExplosion = _swig_property(_pnpsll.PBwithLJSolver_bAnalyseExplosion_get, _pnpsll.PBwithLJSolver_bAnalyseExplosion_set)
    __swig_setmethods__["totalChange"] = _pnpsll.PBwithLJSolver_totalChange_set
    __swig_getmethods__["totalChange"] = _pnpsll.PBwithLJSolver_totalChange_get
    if _newclass:
        totalChange = _swig_property(_pnpsll.PBwithLJSolver_totalChange_get, _pnpsll.PBwithLJSolver_totalChange_set)
    __swig_setmethods__["relativeChange"] = _pnpsll.PBwithLJSolver_relativeChange_set
    __swig_getmethods__["relativeChange"] = _pnpsll.PBwithLJSolver_relativeChange_get
    if _newclass:
        relativeChange = _swig_property(_pnpsll.PBwithLJSolver_relativeChange_get, _pnpsll.PBwithLJSolver_relativeChange_set)
    __swig_setmethods__["totalEnergy"] = _pnpsll.PBwithLJSolver_totalEnergy_set
    __swig_getmethods__["totalEnergy"] = _pnpsll.PBwithLJSolver_totalEnergy_get
    if _newclass:
        totalEnergy = _swig_property(_pnpsll.PBwithLJSolver_totalEnergy_get, _pnpsll.PBwithLJSolver_totalEnergy_set)
    __swig_setmethods__["totalEnergyInd"] = _pnpsll.PBwithLJSolver_totalEnergyInd_set
    __swig_getmethods__["totalEnergyInd"] = _pnpsll.PBwithLJSolver_totalEnergyInd_get
    if _newclass:
        totalEnergyInd = _swig_property(_pnpsll.PBwithLJSolver_totalEnergyInd_get, _pnpsll.PBwithLJSolver_totalEnergyInd_set)
    __swig_setmethods__["ConvFac"] = _pnpsll.PBwithLJSolver_ConvFac_set
    __swig_getmethods__["ConvFac"] = _pnpsll.PBwithLJSolver_ConvFac_get
    if _newclass:
        ConvFac = _swig_property(_pnpsll.PBwithLJSolver_ConvFac_get, _pnpsll.PBwithLJSolver_ConvFac_set)
    __swig_setmethods__["m_ContWorld"] = _pnpsll.PBwithLJSolver_m_ContWorld_set
    __swig_getmethods__["m_ContWorld"] = _pnpsll.PBwithLJSolver_m_ContWorld_get
    if _newclass:
        m_ContWorld = _swig_property(_pnpsll.PBwithLJSolver_m_ContWorld_get, _pnpsll.PBwithLJSolver_m_ContWorld_set)
    __swig_setmethods__["NoSingularNum"] = _pnpsll.PBwithLJSolver_NoSingularNum_set
    __swig_getmethods__["NoSingularNum"] = _pnpsll.PBwithLJSolver_NoSingularNum_get
    if _newclass:
        NoSingularNum = _swig_property(_pnpsll.PBwithLJSolver_NoSingularNum_get, _pnpsll.PBwithLJSolver_NoSingularNum_set)
    __swig_setmethods__["IndexNoSingular"] = _pnpsll.PBwithLJSolver_IndexNoSingular_set
    __swig_getmethods__["IndexNoSingular"] = _pnpsll.PBwithLJSolver_IndexNoSingular_get
    if _newclass:
        IndexNoSingular = _swig_property(_pnpsll.PBwithLJSolver_IndexNoSingular_get, _pnpsll.PBwithLJSolver_IndexNoSingular_set)
    __swig_setmethods__["SingularNum"] = _pnpsll.PBwithLJSolver_SingularNum_set
    __swig_getmethods__["SingularNum"] = _pnpsll.PBwithLJSolver_SingularNum_get
    if _newclass:
        SingularNum = _swig_property(_pnpsll.PBwithLJSolver_SingularNum_get, _pnpsll.PBwithLJSolver_SingularNum_set)
    __swig_setmethods__["IndexSingular"] = _pnpsll.PBwithLJSolver_IndexSingular_set
    __swig_getmethods__["IndexSingular"] = _pnpsll.PBwithLJSolver_IndexSingular_get
    if _newclass:
        IndexSingular = _swig_property(_pnpsll.PBwithLJSolver_IndexSingular_get, _pnpsll.PBwithLJSolver_IndexSingular_set)
    __swig_setmethods__["dielectricXS"] = _pnpsll.PBwithLJSolver_dielectricXS_set
    __swig_getmethods__["dielectricXS"] = _pnpsll.PBwithLJSolver_dielectricXS_get
    if _newclass:
        dielectricXS = _swig_property(_pnpsll.PBwithLJSolver_dielectricXS_get, _pnpsll.PBwithLJSolver_dielectricXS_set)
    __swig_setmethods__["dielectricYS"] = _pnpsll.PBwithLJSolver_dielectricYS_set
    __swig_getmethods__["dielectricYS"] = _pnpsll.PBwithLJSolver_dielectricYS_get
    if _newclass:
        dielectricYS = _swig_property(_pnpsll.PBwithLJSolver_dielectricYS_get, _pnpsll.PBwithLJSolver_dielectricYS_set)
    __swig_setmethods__["dielectricZS"] = _pnpsll.PBwithLJSolver_dielectricZS_set
    __swig_getmethods__["dielectricZS"] = _pnpsll.PBwithLJSolver_dielectricZS_get
    if _newclass:
        dielectricZS = _swig_property(_pnpsll.PBwithLJSolver_dielectricZS_get, _pnpsll.PBwithLJSolver_dielectricZS_set)
    __swig_setmethods__["dielectricZSSUM"] = _pnpsll.PBwithLJSolver_dielectricZSSUM_set
    __swig_getmethods__["dielectricZSSUM"] = _pnpsll.PBwithLJSolver_dielectricZSSUM_get
    if _newclass:
        dielectricZSSUM = _swig_property(_pnpsll.PBwithLJSolver_dielectricZSSUM_get, _pnpsll.PBwithLJSolver_dielectricZSSUM_set)
    __swig_setmethods__["dielectricXmS"] = _pnpsll.PBwithLJSolver_dielectricXmS_set
    __swig_getmethods__["dielectricXmS"] = _pnpsll.PBwithLJSolver_dielectricXmS_get
    if _newclass:
        dielectricXmS = _swig_property(_pnpsll.PBwithLJSolver_dielectricXmS_get, _pnpsll.PBwithLJSolver_dielectricXmS_set)
    __swig_setmethods__["dielectricYmS"] = _pnpsll.PBwithLJSolver_dielectricYmS_set
    __swig_getmethods__["dielectricYmS"] = _pnpsll.PBwithLJSolver_dielectricYmS_get
    if _newclass:
        dielectricYmS = _swig_property(_pnpsll.PBwithLJSolver_dielectricYmS_get, _pnpsll.PBwithLJSolver_dielectricYmS_set)
    __swig_setmethods__["dielectricZmS"] = _pnpsll.PBwithLJSolver_dielectricZmS_set
    __swig_getmethods__["dielectricZmS"] = _pnpsll.PBwithLJSolver_dielectricZmS_get
    if _newclass:
        dielectricZmS = _swig_property(_pnpsll.PBwithLJSolver_dielectricZmS_get, _pnpsll.PBwithLJSolver_dielectricZmS_set)
    __swig_setmethods__["QstS"] = _pnpsll.PBwithLJSolver_QstS_set
    __swig_getmethods__["QstS"] = _pnpsll.PBwithLJSolver_QstS_get
    if _newclass:
        QstS = _swig_property(_pnpsll.PBwithLJSolver_QstS_get, _pnpsll.PBwithLJSolver_QstS_set)
    __swig_setmethods__["PhiSingular"] = _pnpsll.PBwithLJSolver_PhiSingular_set
    __swig_getmethods__["PhiSingular"] = _pnpsll.PBwithLJSolver_PhiSingular_get
    if _newclass:
        PhiSingular = _swig_property(_pnpsll.PBwithLJSolver_PhiSingular_get, _pnpsll.PBwithLJSolver_PhiSingular_set)
    __swig_setmethods__["DielBoarderNum"] = _pnpsll.PBwithLJSolver_DielBoarderNum_set
    __swig_getmethods__["DielBoarderNum"] = _pnpsll.PBwithLJSolver_DielBoarderNum_get
    if _newclass:
        DielBoarderNum = _swig_property(_pnpsll.PBwithLJSolver_DielBoarderNum_get, _pnpsll.PBwithLJSolver_DielBoarderNum_set)
    __swig_setmethods__["IndexDielBoarder"] = _pnpsll.PBwithLJSolver_IndexDielBoarder_set
    __swig_getmethods__["IndexDielBoarder"] = _pnpsll.PBwithLJSolver_IndexDielBoarder_get
    if _newclass:
        IndexDielBoarder = _swig_property(_pnpsll.PBwithLJSolver_IndexDielBoarder_get, _pnpsll.PBwithLJSolver_IndexDielBoarder_set)
    __swig_setmethods__["dielectricXDB"] = _pnpsll.PBwithLJSolver_dielectricXDB_set
    __swig_getmethods__["dielectricXDB"] = _pnpsll.PBwithLJSolver_dielectricXDB_get
    if _newclass:
        dielectricXDB = _swig_property(_pnpsll.PBwithLJSolver_dielectricXDB_get, _pnpsll.PBwithLJSolver_dielectricXDB_set)
    __swig_setmethods__["dielectricYDB"] = _pnpsll.PBwithLJSolver_dielectricYDB_set
    __swig_getmethods__["dielectricYDB"] = _pnpsll.PBwithLJSolver_dielectricYDB_get
    if _newclass:
        dielectricYDB = _swig_property(_pnpsll.PBwithLJSolver_dielectricYDB_get, _pnpsll.PBwithLJSolver_dielectricYDB_set)
    __swig_setmethods__["dielectricZDB"] = _pnpsll.PBwithLJSolver_dielectricZDB_set
    __swig_getmethods__["dielectricZDB"] = _pnpsll.PBwithLJSolver_dielectricZDB_get
    if _newclass:
        dielectricZDB = _swig_property(_pnpsll.PBwithLJSolver_dielectricZDB_get, _pnpsll.PBwithLJSolver_dielectricZDB_set)
    __swig_setmethods__["dielectricZDBSUM"] = _pnpsll.PBwithLJSolver_dielectricZDBSUM_set
    __swig_getmethods__["dielectricZDBSUM"] = _pnpsll.PBwithLJSolver_dielectricZDBSUM_get
    if _newclass:
        dielectricZDBSUM = _swig_property(_pnpsll.PBwithLJSolver_dielectricZDBSUM_get, _pnpsll.PBwithLJSolver_dielectricZDBSUM_set)
    __swig_setmethods__["dielectricXmDB"] = _pnpsll.PBwithLJSolver_dielectricXmDB_set
    __swig_getmethods__["dielectricXmDB"] = _pnpsll.PBwithLJSolver_dielectricXmDB_get
    if _newclass:
        dielectricXmDB = _swig_property(_pnpsll.PBwithLJSolver_dielectricXmDB_get, _pnpsll.PBwithLJSolver_dielectricXmDB_set)
    __swig_setmethods__["dielectricYmDB"] = _pnpsll.PBwithLJSolver_dielectricYmDB_set
    __swig_getmethods__["dielectricYmDB"] = _pnpsll.PBwithLJSolver_dielectricYmDB_get
    if _newclass:
        dielectricYmDB = _swig_property(_pnpsll.PBwithLJSolver_dielectricYmDB_get, _pnpsll.PBwithLJSolver_dielectricYmDB_set)
    __swig_setmethods__["dielectricZmDB"] = _pnpsll.PBwithLJSolver_dielectricZmDB_set
    __swig_getmethods__["dielectricZmDB"] = _pnpsll.PBwithLJSolver_dielectricZmDB_get
    if _newclass:
        dielectricZmDB = _swig_property(_pnpsll.PBwithLJSolver_dielectricZmDB_get, _pnpsll.PBwithLJSolver_dielectricZmDB_set)
    __swig_setmethods__["ChargeNum"] = _pnpsll.PBwithLJSolver_ChargeNum_set
    __swig_getmethods__["ChargeNum"] = _pnpsll.PBwithLJSolver_ChargeNum_get
    if _newclass:
        ChargeNum = _swig_property(_pnpsll.PBwithLJSolver_ChargeNum_get, _pnpsll.PBwithLJSolver_ChargeNum_set)
    __swig_setmethods__["IndexCharge"] = _pnpsll.PBwithLJSolver_IndexCharge_set
    __swig_getmethods__["IndexCharge"] = _pnpsll.PBwithLJSolver_IndexCharge_get
    if _newclass:
        IndexCharge = _swig_property(_pnpsll.PBwithLJSolver_IndexCharge_get, _pnpsll.PBwithLJSolver_IndexCharge_set)
    __swig_setmethods__["dielectricCh"] = _pnpsll.PBwithLJSolver_dielectricCh_set
    __swig_getmethods__["dielectricCh"] = _pnpsll.PBwithLJSolver_dielectricCh_get
    if _newclass:
        dielectricCh = _swig_property(_pnpsll.PBwithLJSolver_dielectricCh_get, _pnpsll.PBwithLJSolver_dielectricCh_set)
    __swig_setmethods__["Qst"] = _pnpsll.PBwithLJSolver_Qst_set
    __swig_getmethods__["Qst"] = _pnpsll.PBwithLJSolver_Qst_get
    if _newclass:
        Qst = _swig_property(_pnpsll.PBwithLJSolver_Qst_get, _pnpsll.PBwithLJSolver_Qst_set)
    __swig_setmethods__["PhiCharge"] = _pnpsll.PBwithLJSolver_PhiCharge_set
    __swig_getmethods__["PhiCharge"] = _pnpsll.PBwithLJSolver_PhiCharge_get
    if _newclass:
        PhiCharge = _swig_property(_pnpsll.PBwithLJSolver_PhiCharge_get, _pnpsll.PBwithLJSolver_PhiCharge_set)
    __swig_setmethods__["PBZoneNum"] = _pnpsll.PBwithLJSolver_PBZoneNum_set
    __swig_getmethods__["PBZoneNum"] = _pnpsll.PBwithLJSolver_PBZoneNum_get
    if _newclass:
        PBZoneNum = _swig_property(_pnpsll.PBwithLJSolver_PBZoneNum_get, _pnpsll.PBwithLJSolver_PBZoneNum_set)
    __swig_setmethods__["IndexPBZone"] = _pnpsll.PBwithLJSolver_IndexPBZone_set
    __swig_getmethods__["IndexPBZone"] = _pnpsll.PBwithLJSolver_IndexPBZone_get
    if _newclass:
        IndexPBZone = _swig_property(_pnpsll.PBwithLJSolver_IndexPBZone_get, _pnpsll.PBwithLJSolver_IndexPBZone_set)
    __swig_setmethods__["PBLJZoneNum"] = _pnpsll.PBwithLJSolver_PBLJZoneNum_set
    __swig_getmethods__["PBLJZoneNum"] = _pnpsll.PBwithLJSolver_PBLJZoneNum_get
    if _newclass:
        PBLJZoneNum = _swig_property(_pnpsll.PBwithLJSolver_PBLJZoneNum_get, _pnpsll.PBwithLJSolver_PBLJZoneNum_set)
    __swig_setmethods__["IndexPBLJZone"] = _pnpsll.PBwithLJSolver_IndexPBLJZone_set
    __swig_getmethods__["IndexPBLJZone"] = _pnpsll.PBwithLJSolver_IndexPBLJZone_get
    if _newclass:
        IndexPBLJZone = _swig_property(_pnpsll.PBwithLJSolver_IndexPBLJZone_get, _pnpsll.PBwithLJSolver_IndexPBLJZone_set)
    __swig_setmethods__["PBLJQstZoneNum"] = _pnpsll.PBwithLJSolver_PBLJQstZoneNum_set
    __swig_getmethods__["PBLJQstZoneNum"] = _pnpsll.PBwithLJSolver_PBLJQstZoneNum_get
    if _newclass:
        PBLJQstZoneNum = _swig_property(_pnpsll.PBwithLJSolver_PBLJQstZoneNum_get, _pnpsll.PBwithLJSolver_PBLJQstZoneNum_set)
    __swig_setmethods__["IndexPBLJQstZone"] = _pnpsll.PBwithLJSolver_IndexPBLJQstZone_set
    __swig_getmethods__["IndexPBLJQstZone"] = _pnpsll.PBwithLJSolver_IndexPBLJQstZone_get
    if _newclass:
        IndexPBLJQstZone = _swig_property(_pnpsll.PBwithLJSolver_IndexPBLJQstZone_get, _pnpsll.PBwithLJSolver_IndexPBLJQstZone_set)
    __swig_setmethods__["dielectricPBLJQst"] = _pnpsll.PBwithLJSolver_dielectricPBLJQst_set
    __swig_getmethods__["dielectricPBLJQst"] = _pnpsll.PBwithLJSolver_dielectricPBLJQst_get
    if _newclass:
        dielectricPBLJQst = _swig_property(_pnpsll.PBwithLJSolver_dielectricPBLJQst_get, _pnpsll.PBwithLJSolver_dielectricPBLJQst_set)
    __swig_setmethods__["QstPBLJ"] = _pnpsll.PBwithLJSolver_QstPBLJ_set
    __swig_getmethods__["QstPBLJ"] = _pnpsll.PBwithLJSolver_QstPBLJ_get
    if _newclass:
        QstPBLJ = _swig_property(_pnpsll.PBwithLJSolver_QstPBLJ_get, _pnpsll.PBwithLJSolver_QstPBLJ_set)
    __swig_setmethods__["PBLJDBZoneNum"] = _pnpsll.PBwithLJSolver_PBLJDBZoneNum_set
    __swig_getmethods__["PBLJDBZoneNum"] = _pnpsll.PBwithLJSolver_PBLJDBZoneNum_get
    if _newclass:
        PBLJDBZoneNum = _swig_property(_pnpsll.PBwithLJSolver_PBLJDBZoneNum_get, _pnpsll.PBwithLJSolver_PBLJDBZoneNum_set)
    __swig_setmethods__["IndexPBLJDBZone"] = _pnpsll.PBwithLJSolver_IndexPBLJDBZone_set
    __swig_getmethods__["IndexPBLJDBZone"] = _pnpsll.PBwithLJSolver_IndexPBLJDBZone_get
    if _newclass:
        IndexPBLJDBZone = _swig_property(_pnpsll.PBwithLJSolver_IndexPBLJDBZone_get, _pnpsll.PBwithLJSolver_IndexPBLJDBZone_set)
    __swig_setmethods__["dielectricXPBLJDB"] = _pnpsll.PBwithLJSolver_dielectricXPBLJDB_set
    __swig_getmethods__["dielectricXPBLJDB"] = _pnpsll.PBwithLJSolver_dielectricXPBLJDB_get
    if _newclass:
        dielectricXPBLJDB = _swig_property(_pnpsll.PBwithLJSolver_dielectricXPBLJDB_get, _pnpsll.PBwithLJSolver_dielectricXPBLJDB_set)
    __swig_setmethods__["dielectricYPBLJDB"] = _pnpsll.PBwithLJSolver_dielectricYPBLJDB_set
    __swig_getmethods__["dielectricYPBLJDB"] = _pnpsll.PBwithLJSolver_dielectricYPBLJDB_get
    if _newclass:
        dielectricYPBLJDB = _swig_property(_pnpsll.PBwithLJSolver_dielectricYPBLJDB_get, _pnpsll.PBwithLJSolver_dielectricYPBLJDB_set)
    __swig_setmethods__["dielectricZPBLJDB"] = _pnpsll.PBwithLJSolver_dielectricZPBLJDB_set
    __swig_getmethods__["dielectricZPBLJDB"] = _pnpsll.PBwithLJSolver_dielectricZPBLJDB_get
    if _newclass:
        dielectricZPBLJDB = _swig_property(_pnpsll.PBwithLJSolver_dielectricZPBLJDB_get, _pnpsll.PBwithLJSolver_dielectricZPBLJDB_set)
    __swig_setmethods__["dielectricZPBLJDBSUM"] = _pnpsll.PBwithLJSolver_dielectricZPBLJDBSUM_set
    __swig_getmethods__["dielectricZPBLJDBSUM"] = _pnpsll.PBwithLJSolver_dielectricZPBLJDBSUM_get
    if _newclass:
        dielectricZPBLJDBSUM = _swig_property(_pnpsll.PBwithLJSolver_dielectricZPBLJDBSUM_get, _pnpsll.PBwithLJSolver_dielectricZPBLJDBSUM_set)
    __swig_setmethods__["dielectricXmPBLJDB"] = _pnpsll.PBwithLJSolver_dielectricXmPBLJDB_set
    __swig_getmethods__["dielectricXmPBLJDB"] = _pnpsll.PBwithLJSolver_dielectricXmPBLJDB_get
    if _newclass:
        dielectricXmPBLJDB = _swig_property(_pnpsll.PBwithLJSolver_dielectricXmPBLJDB_get, _pnpsll.PBwithLJSolver_dielectricXmPBLJDB_set)
    __swig_setmethods__["dielectricYmPBLJDB"] = _pnpsll.PBwithLJSolver_dielectricYmPBLJDB_set
    __swig_getmethods__["dielectricYmPBLJDB"] = _pnpsll.PBwithLJSolver_dielectricYmPBLJDB_get
    if _newclass:
        dielectricYmPBLJDB = _swig_property(_pnpsll.PBwithLJSolver_dielectricYmPBLJDB_get, _pnpsll.PBwithLJSolver_dielectricYmPBLJDB_set)
    __swig_setmethods__["dielectricZmPBLJDB"] = _pnpsll.PBwithLJSolver_dielectricZmPBLJDB_set
    __swig_getmethods__["dielectricZmPBLJDB"] = _pnpsll.PBwithLJSolver_dielectricZmPBLJDB_get
    if _newclass:
        dielectricZmPBLJDB = _swig_property(_pnpsll.PBwithLJSolver_dielectricZmPBLJDB_get, _pnpsll.PBwithLJSolver_dielectricZmPBLJDB_set)
    __swig_setmethods__["PBLJDBQstZoneNum"] = _pnpsll.PBwithLJSolver_PBLJDBQstZoneNum_set
    __swig_getmethods__["PBLJDBQstZoneNum"] = _pnpsll.PBwithLJSolver_PBLJDBQstZoneNum_get
    if _newclass:
        PBLJDBQstZoneNum = _swig_property(_pnpsll.PBwithLJSolver_PBLJDBQstZoneNum_get, _pnpsll.PBwithLJSolver_PBLJDBQstZoneNum_set)
    __swig_setmethods__["IndexPBLJDBQstZone"] = _pnpsll.PBwithLJSolver_IndexPBLJDBQstZone_set
    __swig_getmethods__["IndexPBLJDBQstZone"] = _pnpsll.PBwithLJSolver_IndexPBLJDBQstZone_get
    if _newclass:
        IndexPBLJDBQstZone = _swig_property(_pnpsll.PBwithLJSolver_IndexPBLJDBQstZone_get, _pnpsll.PBwithLJSolver_IndexPBLJDBQstZone_set)
    __swig_setmethods__["dielectricXPBLJDBQst"] = _pnpsll.PBwithLJSolver_dielectricXPBLJDBQst_set
    __swig_getmethods__["dielectricXPBLJDBQst"] = _pnpsll.PBwithLJSolver_dielectricXPBLJDBQst_get
    if _newclass:
        dielectricXPBLJDBQst = _swig_property(_pnpsll.PBwithLJSolver_dielectricXPBLJDBQst_get, _pnpsll.PBwithLJSolver_dielectricXPBLJDBQst_set)
    __swig_setmethods__["dielectricYPBLJDBQst"] = _pnpsll.PBwithLJSolver_dielectricYPBLJDBQst_set
    __swig_getmethods__["dielectricYPBLJDBQst"] = _pnpsll.PBwithLJSolver_dielectricYPBLJDBQst_get
    if _newclass:
        dielectricYPBLJDBQst = _swig_property(_pnpsll.PBwithLJSolver_dielectricYPBLJDBQst_get, _pnpsll.PBwithLJSolver_dielectricYPBLJDBQst_set)
    __swig_setmethods__["dielectricZPBLJDBQst"] = _pnpsll.PBwithLJSolver_dielectricZPBLJDBQst_set
    __swig_getmethods__["dielectricZPBLJDBQst"] = _pnpsll.PBwithLJSolver_dielectricZPBLJDBQst_get
    if _newclass:
        dielectricZPBLJDBQst = _swig_property(_pnpsll.PBwithLJSolver_dielectricZPBLJDBQst_get, _pnpsll.PBwithLJSolver_dielectricZPBLJDBQst_set)
    __swig_setmethods__["dielectricZPBLJDBQstSUM"] = _pnpsll.PBwithLJSolver_dielectricZPBLJDBQstSUM_set
    __swig_getmethods__["dielectricZPBLJDBQstSUM"] = _pnpsll.PBwithLJSolver_dielectricZPBLJDBQstSUM_get
    if _newclass:
        dielectricZPBLJDBQstSUM = _swig_property(_pnpsll.PBwithLJSolver_dielectricZPBLJDBQstSUM_get, _pnpsll.PBwithLJSolver_dielectricZPBLJDBQstSUM_set)
    __swig_setmethods__["dielectricXmPBLJDBQst"] = _pnpsll.PBwithLJSolver_dielectricXmPBLJDBQst_set
    __swig_getmethods__["dielectricXmPBLJDBQst"] = _pnpsll.PBwithLJSolver_dielectricXmPBLJDBQst_get
    if _newclass:
        dielectricXmPBLJDBQst = _swig_property(_pnpsll.PBwithLJSolver_dielectricXmPBLJDBQst_get, _pnpsll.PBwithLJSolver_dielectricXmPBLJDBQst_set)
    __swig_setmethods__["dielectricYmPBLJDBQst"] = _pnpsll.PBwithLJSolver_dielectricYmPBLJDBQst_set
    __swig_getmethods__["dielectricYmPBLJDBQst"] = _pnpsll.PBwithLJSolver_dielectricYmPBLJDBQst_get
    if _newclass:
        dielectricYmPBLJDBQst = _swig_property(_pnpsll.PBwithLJSolver_dielectricYmPBLJDBQst_get, _pnpsll.PBwithLJSolver_dielectricYmPBLJDBQst_set)
    __swig_setmethods__["dielectricZmPBLJDBQst"] = _pnpsll.PBwithLJSolver_dielectricZmPBLJDBQst_set
    __swig_getmethods__["dielectricZmPBLJDBQst"] = _pnpsll.PBwithLJSolver_dielectricZmPBLJDBQst_get
    if _newclass:
        dielectricZmPBLJDBQst = _swig_property(_pnpsll.PBwithLJSolver_dielectricZmPBLJDBQst_get, _pnpsll.PBwithLJSolver_dielectricZmPBLJDBQst_set)
    __swig_setmethods__["QstPBLJDB"] = _pnpsll.PBwithLJSolver_QstPBLJDB_set
    __swig_getmethods__["QstPBLJDB"] = _pnpsll.PBwithLJSolver_QstPBLJDB_get
    if _newclass:
        QstPBLJDB = _swig_property(_pnpsll.PBwithLJSolver_QstPBLJDB_get, _pnpsll.PBwithLJSolver_QstPBLJDB_set)
    NoSingular = _pnpsll.PBwithLJSolver_NoSingular
    Boarder = _pnpsll.PBwithLJSolver_Boarder
    Charge = _pnpsll.PBwithLJSolver_Charge
    DielBoarder = _pnpsll.PBwithLJSolver_DielBoarder
    ChargeAndDielBoarder = _pnpsll.PBwithLJSolver_ChargeAndDielBoarder
    Singular = _pnpsll.PBwithLJSolver_Singular

    def LoadParamFromPyDict(self, dict: 'PyObject *') -> "int":
        return _pnpsll.PBwithLJSolver_LoadParamFromPyDict(self, dict)

    def SetContWorld(self, _world: 'ContWorld') -> "int":
        return _pnpsll.PBwithLJSolver_SetContWorld(self, _world)

    def InitSolver(self) -> "int":
        return _pnpsll.PBwithLJSolver_InitSolver(self)

    def InitSolverNIB(self) -> "int":
        return _pnpsll.PBwithLJSolver_InitSolverNIB(self)

    def Solve(self) -> "int":
        return _pnpsll.PBwithLJSolver_Solve(self)

    def AnalyseExplosion(self) -> "int":
        return _pnpsll.PBwithLJSolver_AnalyseExplosion(self)

    def CalcSystemEnergy(self, iteration: 'int') -> "int":
        return _pnpsll.PBwithLJSolver_CalcSystemEnergy(self, iteration)

    def CalcSystemEnergyStdDevPhi(self, iteration: 'int') -> "int":
        return _pnpsll.PBwithLJSolver_CalcSystemEnergyStdDevPhi(self, iteration)

    def ShowParameters(self) -> "int":
        return _pnpsll.PBwithLJSolver_ShowParameters(self)

    def ShowProperties(self) -> "int":
        return _pnpsll.PBwithLJSolver_ShowProperties(self)
PBwithLJSolver_swigregister = _pnpsll.PBwithLJSolver_swigregister
PBwithLJSolver_swigregister(PBwithLJSolver)
PBwithLJConvFacMaxHistory = cvar.PBwithLJConvFacMaxHistory


#pnpmod.SolvePBSR(contworld, MaxInterations=100, Tolerance=0.0, Relaxation=1.6)
def SolvePBSR(contworld,**kwargs):
	pbsr=PBwithLJSolver()

	pbsr.MaxIterations = kwargs.get("MaxIterations",200)
	pbsr.Convergence = kwargs.get("Tolerance",0.0)
	pbsr.Relaxation = kwargs.get("Relaxation",1.6)
	pbsr.ConvergenceCheck = kwargs.get("ConvergenceCheck",20)
	pbsr.solver = kwargs.get("solver",0)
	pbsr.verbose = kwargs.get("verbose",True)
	pbsr.bPBExpAll = kwargs.get("bPBExpAll",False)
	pbsr.bAnalyseExplosion = kwargs.get("bAnalyseExplosion",False)

	pbsr.ShowParameters()
#pbsr.SetRelaxation(pbsr.Relaxation)


	pbsr.SetContWorld(contworld)
	pbsr.InitSolver()
	pbsr.Solve()
	del pbsr




# This file is compatible with both classic and new-style classes.


