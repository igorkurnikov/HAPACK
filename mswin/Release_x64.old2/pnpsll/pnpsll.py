# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pnpsll
else:
    import _pnpsll

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pnpsll.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _pnpsll.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _pnpsll.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _pnpsll.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _pnpsll.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _pnpsll.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _pnpsll.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _pnpsll.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _pnpsll.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _pnpsll.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _pnpsll.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _pnpsll.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _pnpsll.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _pnpsll.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _pnpsll.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _pnpsll.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _pnpsll.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pnpsll:
_pnpsll.SwigPyIterator_swigregister(SwigPyIterator)

class intp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pnpsll.intp_swiginit(self, _pnpsll.new_intp())
    __swig_destroy__ = _pnpsll.delete_intp

    def assign(self, value: "int") -> "void":
        return _pnpsll.intp_assign(self, value)

    def value(self) -> "int":
        return _pnpsll.intp_value(self)

    def cast(self) -> "int *":
        return _pnpsll.intp_cast(self)

    @staticmethod
    def frompointer(t: "int *") -> "intp *":
        return _pnpsll.intp_frompointer(t)

# Register intp in _pnpsll:
_pnpsll.intp_swigregister(intp)

def intp_frompointer(t: "int *") -> "intp *":
    return _pnpsll.intp_frompointer(t)

class doublep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pnpsll.doublep_swiginit(self, _pnpsll.new_doublep())
    __swig_destroy__ = _pnpsll.delete_doublep

    def assign(self, value: "double") -> "void":
        return _pnpsll.doublep_assign(self, value)

    def value(self) -> "double":
        return _pnpsll.doublep_value(self)

    def cast(self) -> "double *":
        return _pnpsll.doublep_cast(self)

    @staticmethod
    def frompointer(t: "double *") -> "doublep *":
        return _pnpsll.doublep_frompointer(t)

# Register doublep in _pnpsll:
_pnpsll.doublep_swigregister(doublep)

def doublep_frompointer(t: "double *") -> "doublep *":
    return _pnpsll.doublep_frompointer(t)


def new_doublepf() -> "double *":
    return _pnpsll.new_doublepf()

def copy_doublepf(value: "double") -> "double *":
    return _pnpsll.copy_doublepf(value)

def delete_doublepf(obj: "double *") -> "void":
    return _pnpsll.delete_doublepf(obj)

def doublepf_assign(obj: "double *", value: "double") -> "void":
    return _pnpsll.doublepf_assign(obj, value)

def doublepf_value(obj: "double *") -> "double":
    return _pnpsll.doublepf_value(obj)

def new_intArray(nelements: "size_t") -> "int *":
    return _pnpsll.new_intArray(nelements)

def delete_intArray(ary: "int *") -> "void":
    return _pnpsll.delete_intArray(ary)

def intArray_getitem(ary: "int *", index: "size_t") -> "int":
    return _pnpsll.intArray_getitem(ary, index)

def intArray_setitem(ary: "int *", index: "size_t", value: "int") -> "void":
    return _pnpsll.intArray_setitem(ary, index, value)

def new_boolArray(nelements: "size_t") -> "bool *":
    return _pnpsll.new_boolArray(nelements)

def delete_boolArray(ary: "bool *") -> "void":
    return _pnpsll.delete_boolArray(ary)

def boolArray_getitem(ary: "bool *", index: "size_t") -> "bool":
    return _pnpsll.boolArray_getitem(ary, index)

def boolArray_setitem(ary: "bool *", index: "size_t", value: "bool") -> "void":
    return _pnpsll.boolArray_setitem(ary, index, value)

def new_floatArray(nelements: "size_t") -> "float *":
    return _pnpsll.new_floatArray(nelements)

def delete_floatArray(ary: "float *") -> "void":
    return _pnpsll.delete_floatArray(ary)

def floatArray_getitem(ary: "float *", index: "size_t") -> "float":
    return _pnpsll.floatArray_getitem(ary, index)

def floatArray_setitem(ary: "float *", index: "size_t", value: "float") -> "void":
    return _pnpsll.floatArray_setitem(ary, index, value)
class vectorf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pnpsll.vectorf_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pnpsll.vectorf___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pnpsll.vectorf___bool__(self)

    def __len__(self) -> "std::vector< float >::size_type":
        return _pnpsll.vectorf___len__(self)

    def __getslice__(self, i: "std::vector< float >::difference_type", j: "std::vector< float >::difference_type") -> "std::vector< float,std::allocator< float > > *":
        return _pnpsll.vectorf___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pnpsll.vectorf___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< float >::difference_type", j: "std::vector< float >::difference_type") -> "void":
        return _pnpsll.vectorf___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pnpsll.vectorf___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        return _pnpsll.vectorf___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pnpsll.vectorf___setitem__(self, *args)

    def pop(self) -> "std::vector< float >::value_type":
        return _pnpsll.vectorf_pop(self)

    def append(self, x: "std::vector< float >::value_type const &") -> "void":
        return _pnpsll.vectorf_append(self, x)

    def empty(self) -> "bool":
        return _pnpsll.vectorf_empty(self)

    def size(self) -> "std::vector< float >::size_type":
        return _pnpsll.vectorf_size(self)

    def swap(self, v: "vectorf") -> "void":
        return _pnpsll.vectorf_swap(self, v)

    def begin(self) -> "std::vector< float >::iterator":
        return _pnpsll.vectorf_begin(self)

    def end(self) -> "std::vector< float >::iterator":
        return _pnpsll.vectorf_end(self)

    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        return _pnpsll.vectorf_rbegin(self)

    def rend(self) -> "std::vector< float >::reverse_iterator":
        return _pnpsll.vectorf_rend(self)

    def clear(self) -> "void":
        return _pnpsll.vectorf_clear(self)

    def get_allocator(self) -> "std::vector< float >::allocator_type":
        return _pnpsll.vectorf_get_allocator(self)

    def pop_back(self) -> "void":
        return _pnpsll.vectorf_pop_back(self)

    def erase(self, *args) -> "std::vector< float >::iterator":
        return _pnpsll.vectorf_erase(self, *args)

    def __init__(self, *args):
        _pnpsll.vectorf_swiginit(self, _pnpsll.new_vectorf(*args))

    def push_back(self, x: "std::vector< float >::value_type const &") -> "void":
        return _pnpsll.vectorf_push_back(self, x)

    def front(self) -> "std::vector< float >::value_type const &":
        return _pnpsll.vectorf_front(self)

    def back(self) -> "std::vector< float >::value_type const &":
        return _pnpsll.vectorf_back(self)

    def assign(self, n: "std::vector< float >::size_type", x: "std::vector< float >::value_type const &") -> "void":
        return _pnpsll.vectorf_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pnpsll.vectorf_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pnpsll.vectorf_insert(self, *args)

    def reserve(self, n: "std::vector< float >::size_type") -> "void":
        return _pnpsll.vectorf_reserve(self, n)

    def capacity(self) -> "std::vector< float >::size_type":
        return _pnpsll.vectorf_capacity(self)
    __swig_destroy__ = _pnpsll.delete_vectorf

# Register vectorf in _pnpsll:
_pnpsll.vectorf_swigregister(vectorf)

PNPSVERSION = _pnpsll.PNPSVERSION
PNP_MAP_IO_STRING_LENGTH = _pnpsll.PNP_MAP_IO_STRING_LENGTH
class PnpsObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pnpsll.PnpsObject_swiginit(self, _pnpsll.new_PnpsObject())
    __swig_destroy__ = _pnpsll.delete_PnpsObject

    def Clear(self) -> "int":
        return _pnpsll.PnpsObject_Clear(self)

    def SetName(self, name_new: "std::string const &") -> "void":
        return _pnpsll.PnpsObject_SetName(self, name_new)

    def GetName(self) -> "char const *":
        return _pnpsll.PnpsObject_GetName(self)

    def GetCStrName(self) -> "char const *":
        return _pnpsll.PnpsObject_GetCStrName(self)

    def GetStdStrName(self) -> "std::string":
        return _pnpsll.PnpsObject_GetStdStrName(self)

# Register PnpsObject in _pnpsll:
_pnpsll.PnpsObject_swigregister(PnpsObject)

class PNPSApp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetMyAbsRank(self) -> "int":
        return _pnpsll.PNPSApp_GetMyAbsRank(self)

    def GetTotalProc(self) -> "int":
        return _pnpsll.PNPSApp_GetTotalProc(self)

    def GetMyGroupNumber(self) -> "int":
        return _pnpsll.PNPSApp_GetMyGroupNumber(self)

    def GetNumberOfGroups(self) -> "int":
        return _pnpsll.PNPSApp_GetNumberOfGroups(self)

    def GetMyRankInGroup(self) -> "int":
        return _pnpsll.PNPSApp_GetMyRankInGroup(self)

    def GetNumProcsInMyGroup(self) -> "int":
        return _pnpsll.PNPSApp_GetNumProcsInMyGroup(self)

    def GetMyGroupLeader(self) -> "int":
        return _pnpsll.PNPSApp_GetMyGroupLeader(self)

    def GetMaster(self) -> "int":
        return _pnpsll.PNPSApp_GetMaster(self)

    def GetNumProcsInGroup(self, GroupNumber: "int") -> "int":
        return _pnpsll.PNPSApp_GetNumProcsInGroup(self, GroupNumber)

    def AmIGroupLeader(self) -> "bool":
        return _pnpsll.PNPSApp_AmIGroupLeader(self)

    def AmIBigBrother(self) -> "bool":
        return _pnpsll.PNPSApp_AmIBigBrother(self)

    def GetMasterProc(self) -> "int":
        return _pnpsll.PNPSApp_GetMasterProc(self)

    def SendCStr(self, dest: "int", CStr: "char const *") -> "int":
        return _pnpsll.PNPSApp_SendCStr(self, dest, CStr)

    def RecvCStr(self, dest: "int", CStr: "char *") -> "int":
        return _pnpsll.PNPSApp_RecvCStr(self, dest, CStr)

    def BcastCStr(self, CStr: "char *", root: "int"=0) -> "int":
        return _pnpsll.PNPSApp_BcastCStr(self, CStr, root)

    def BcastTiXmlElement(self, Elt: "TiXmlElement *") -> "TiXmlElement *":
        return _pnpsll.PNPSApp_BcastTiXmlElement(self, Elt)

    def BcastTiXmlElementWithinGroup(self, Elt: "TiXmlElement *") -> "TiXmlElement *":
        return _pnpsll.PNPSApp_BcastTiXmlElementWithinGroup(self, Elt)

    def GetNumOfThreads(self) -> "int":
        return _pnpsll.PNPSApp_GetNumOfThreads(self)

    def SetNumOfThreads(self, m_NumOfThread: "int const") -> "int":
        return _pnpsll.PNPSApp_SetNumOfThreads(self, m_NumOfThread)

    @staticmethod
    def InitPNPSApp(*args) -> "int":
        return _pnpsll.PNPSApp_InitPNPSApp(*args)

    @staticmethod
    def DeletePNPSApp() -> "int":
        return _pnpsll.PNPSApp_DeletePNPSApp()

    @staticmethod
    def GetPNPSApp() -> "PNPSApp *":
        return _pnpsll.PNPSApp_GetPNPSApp()

    def DropArray(self, source: "Bytef *", sourceLen: "uLong") -> "int":
        return _pnpsll.PNPSApp_DropArray(self, source, sourceLen)

    def PullArray(self, Out: "Bytef *", id: "int") -> "int":
        return _pnpsll.PNPSApp_PullArray(self, Out, id)

    @staticmethod
    def compress3(dest: "Bytef **", destLen: "uLongf *", source: "Bytef const *", sourceLen: "uLong", level: "int") -> "int":
        return _pnpsll.PNPSApp_compress3(dest, destLen, source, sourceLen, level)

    @staticmethod
    def AddProcessNumberToFileName(out: "char *", _in: "char const *", pref: "char const *", pnum: "int", totnum: "int") -> "void":
        return _pnpsll.PNPSApp_AddProcessNumberToFileName(out, _in, pref, pnum, totnum)

    def AddMyAbsProcNumberToFileName(self, out: "char *", _in: "char const *") -> "void":
        return _pnpsll.PNPSApp_AddMyAbsProcNumberToFileName(self, out, _in)

    def AddMyGroupNumberToFileName(self, out: "char *", _in: "char const *") -> "void":
        return _pnpsll.PNPSApp_AddMyGroupNumberToFileName(self, out, _in)

    def AddMyGroupNumberToFileNameStdStr(self, filename: "std::string *") -> "void":
        return _pnpsll.PNPSApp_AddMyGroupNumberToFileNameStdStr(self, filename)

    def AddMyGroupStringNameToFileNameStdStr(self, filename: "std::string *") -> "void":
        return _pnpsll.PNPSApp_AddMyGroupStringNameToFileNameStdStr(self, filename)

    def AddGroupStringNameToFileNameStdStr(self, filename: "std::string *", GroupNumber: "int") -> "void":
        return _pnpsll.PNPSApp_AddGroupStringNameToFileNameStdStr(self, filename, GroupNumber)

    def AddGroupStringNameToFileNameCStr(self, filename: "char const *", GroupNumber: "int") -> "char *":
        return _pnpsll.PNPSApp_AddGroupStringNameToFileNameCStr(self, filename, GroupNumber)

    @staticmethod
    def RedirectOutputToFile(FileName: "char const *", AddGroupStringName: "bool") -> "int":
        return _pnpsll.PNPSApp_RedirectOutputToFile(FileName, AddGroupStringName)

    @staticmethod
    def RedirectOutputToStd() -> "int":
        return _pnpsll.PNPSApp_RedirectOutputToStd()

    def HaveTimeToRun(self) -> "bool":
        return _pnpsll.PNPSApp_HaveTimeToRun(self)
    bTimerOn = property(_pnpsll.PNPSApp_bTimerOn_get, _pnpsll.PNPSApp_bTimerOn_set)

    def SetWallTimeToRun(self, walltime: "char const *") -> "int":
        return _pnpsll.PNPSApp_SetWallTimeToRun(self, walltime)
    StartTime = property(_pnpsll.PNPSApp_StartTime_get, _pnpsll.PNPSApp_StartTime_set)
    SecondsToRun = property(_pnpsll.PNPSApp_SecondsToRun_get, _pnpsll.PNPSApp_SecondsToRun_set)

# Register PNPSApp in _pnpsll:
_pnpsll.PNPSApp_swigregister(PNPSApp)

def PNPSApp_InitPNPSApp(*args) -> "int":
    return _pnpsll.PNPSApp_InitPNPSApp(*args)

def PNPSApp_DeletePNPSApp() -> "int":
    return _pnpsll.PNPSApp_DeletePNPSApp()

def PNPSApp_GetPNPSApp() -> "PNPSApp *":
    return _pnpsll.PNPSApp_GetPNPSApp()

def PNPSApp_compress3(dest: "Bytef **", destLen: "uLongf *", source: "Bytef const *", sourceLen: "uLong", level: "int") -> "int":
    return _pnpsll.PNPSApp_compress3(dest, destLen, source, sourceLen, level)

def PNPSApp_AddProcessNumberToFileName(out: "char *", _in: "char const *", pref: "char const *", pnum: "int", totnum: "int") -> "void":
    return _pnpsll.PNPSApp_AddProcessNumberToFileName(out, _in, pref, pnum, totnum)

def PNPSApp_RedirectOutputToFile(FileName: "char const *", AddGroupStringName: "bool") -> "int":
    return _pnpsll.PNPSApp_RedirectOutputToFile(FileName, AddGroupStringName)

def PNPSApp_RedirectOutputToStd() -> "int":
    return _pnpsll.PNPSApp_RedirectOutputToStd()

class GenericSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pnpsll.delete_GenericSolver

    def InitZero(self) -> "int":
        return _pnpsll.GenericSolver_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.GenericSolver_Clear(self)

    def ShowParameters(self) -> "int":
        return _pnpsll.GenericSolver_ShowParameters(self)

    def ShowProperties(self) -> "int":
        return _pnpsll.GenericSolver_ShowProperties(self)

    def InitSolver(self) -> "int":
        return _pnpsll.GenericSolver_InitSolver(self)

    def Solve(self) -> "int":
        return _pnpsll.GenericSolver_Solve(self)

# Register GenericSolver in _pnpsll:
_pnpsll.GenericSolver_swigregister(GenericSolver)
cvar = _pnpsll.cvar
MaxNumOfParts = cvar.MaxNumOfParts
MaxNPartSize = cvar.MaxNPartSize

FILE_MAP_GZ = _pnpsll.FILE_MAP_GZ
FILE_MAP_MBN = _pnpsll.FILE_MAP_MBN
FILE_MAP_MB2 = _pnpsll.FILE_MAP_MB2
FILE_MAP_IGB = _pnpsll.FILE_MAP_IGB
FILE_MAP_DX = _pnpsll.FILE_MAP_DX

def TypeOfMapFile(filename: "char const *") -> "int":
    return _pnpsll.TypeOfMapFile(filename)

def WriteMapGZ(*args) -> "int":
    return _pnpsll.WriteMapGZ(*args)

def ReadMapGZ(*args) -> "int":
    return _pnpsll.ReadMapGZ(*args)

def WriteIndexGZinTwoColumns(file: "gzFile", nmap: "unsigned int *", GSXYZ: "unsigned int") -> "int":
    return _pnpsll.WriteIndexGZinTwoColumns(file, nmap, GSXYZ)

def ReadIndexGZfromTwoColumns(file: "gzFile", nmap: "unsigned int *", GSXYZ: "unsigned int") -> "int":
    return _pnpsll.ReadIndexGZfromTwoColumns(file, nmap, GSXYZ)

def WriteIndexGZTwoColumns(file: "gzFile", nmap: "int *", GSXYZ: "unsigned int") -> "int":
    return _pnpsll.WriteIndexGZTwoColumns(file, nmap, GSXYZ)

def ReadIndexGZTwoColumns(file: "gzFile", nmap: "int *", GSXYZ: "unsigned int") -> "int":
    return _pnpsll.ReadIndexGZTwoColumns(file, nmap, GSXYZ)

def WriteMapGZOneColumns(file: "gzFile", nmap: "float *", N: "unsigned int", coef: "float"=1.0) -> "int":
    return _pnpsll.WriteMapGZOneColumns(file, nmap, N, coef)

def ReadMapGZOneColumns(file: "gzFile", nmap: "float *", N: "unsigned int", coef: "float"=1.0) -> "int":
    return _pnpsll.ReadMapGZOneColumns(file, nmap, N, coef)

def WriteMapGZTwoColumns(file: "gzFile", nmap: "float *", N: "unsigned int", coef: "float"=1.0) -> "int":
    return _pnpsll.WriteMapGZTwoColumns(file, nmap, N, coef)

def ReadMapGZTwoColumns(file: "gzFile", nmap: "float *", N: "unsigned int", coef: "float"=1.0) -> "int":
    return _pnpsll.ReadMapGZTwoColumns(file, nmap, N, coef)

def ConvertToPBC(V: "float *", GS_X: "int", GS_Y: "int", GS_Z: "int", pbcX: "bool", pbcY: "bool", pbcZ: "bool") -> "int":
    return _pnpsll.ConvertToPBC(V, GS_X, GS_Y, GS_Z, pbcX, pbcY, pbcZ)

def RemovePBC(V: "float *", GS_X: "int", GS_Y: "int", GS_Z: "int", pbcX: "bool", pbcY: "bool", pbcZ: "bool") -> "int":
    return _pnpsll.RemovePBC(V, GS_X, GS_Y, GS_Z, pbcX, pbcY, pbcZ)
class VectorIntField3D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pnpsll.VectorIntField3D_swiginit(self, _pnpsll.new_VectorIntField3D(*args))
    __swig_destroy__ = _pnpsll.delete_VectorIntField3D
    INTERNAL_ALLOC = _pnpsll.VectorIntField3D_INTERNAL_ALLOC
    EXTERNAL_ALLOC = _pnpsll.VectorIntField3D_EXTERNAL_ALLOC
    amode = property(_pnpsll.VectorIntField3D_amode_get, _pnpsll.VectorIntField3D_amode_set)

    def InitZero(self) -> "int":
        return _pnpsll.VectorIntField3D_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.VectorIntField3D_Clear(self)
    GridSize = property(_pnpsll.VectorIntField3D_GridSize_get, _pnpsll.VectorIntField3D_GridSize_set)
    GridScale = property(_pnpsll.VectorIntField3D_GridScale_get, _pnpsll.VectorIntField3D_GridScale_set)
    Nelem = property(_pnpsll.VectorIntField3D_Nelem_get, _pnpsll.VectorIntField3D_Nelem_set)
    V = property(_pnpsll.VectorIntField3D_V_get, _pnpsll.VectorIntField3D_V_set)

    def SetVectorField3D(self, gridsize: "int *", gridscale: "float", nelem: "int") -> "int":
        return _pnpsll.VectorIntField3D_SetVectorField3D(self, gridsize, gridscale, nelem)

    def ReadFromFile(self, filename: "char const *") -> "int":
        return _pnpsll.VectorIntField3D_ReadFromFile(self, filename)

    def WriteToFile(self, filename: "char const *", Columns: "int"=2) -> "int":
        return _pnpsll.VectorIntField3D_WriteToFile(self, filename, Columns)

    def GetNelem(self) -> "int":
        return _pnpsll.VectorIntField3D_GetNelem(self)

    def GetNx(self) -> "int":
        return _pnpsll.VectorIntField3D_GetNx(self)

    def GetNy(self) -> "int":
        return _pnpsll.VectorIntField3D_GetNy(self)

    def GetNz(self) -> "int":
        return _pnpsll.VectorIntField3D_GetNz(self)

    def GetValue(self, _in: "int", ix: "int", iy: "int", iz: "int") -> "int":
        return _pnpsll.VectorIntField3D_GetValue(self, _in, ix, iy, iz)

    def SetValue(self, _in: "int", ix: "int", iy: "int", iz: "int", val: "int") -> "void":
        return _pnpsll.VectorIntField3D_SetValue(self, _in, ix, iy, iz, val)

    def GetValueByGrdNmb(self, _in: "int", igrd: "int") -> "int":
        return _pnpsll.VectorIntField3D_GetValueByGrdNmb(self, _in, igrd)

    def SetValueByGrdNmb(self, _in: "int", igrd: "int", val: "int") -> "void":
        return _pnpsll.VectorIntField3D_SetValueByGrdNmb(self, _in, igrd, val)

    def FillValue(self, val: "int") -> "void":
        return _pnpsll.VectorIntField3D_FillValue(self, val)

# Register VectorIntField3D in _pnpsll:
_pnpsll.VectorIntField3D_swigregister(VectorIntField3D)

class VectorField3D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pnpsll.VectorField3D_swiginit(self, _pnpsll.new_VectorField3D(*args))
    __swig_destroy__ = _pnpsll.delete_VectorField3D
    INTERNAL_ALLOC = _pnpsll.VectorField3D_INTERNAL_ALLOC
    EXTERNAL_ALLOC = _pnpsll.VectorField3D_EXTERNAL_ALLOC
    amode = property(_pnpsll.VectorField3D_amode_get, _pnpsll.VectorField3D_amode_set)

    def InitZero(self) -> "int":
        return _pnpsll.VectorField3D_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.VectorField3D_Clear(self)
    GridSize = property(_pnpsll.VectorField3D_GridSize_get, _pnpsll.VectorField3D_GridSize_set)
    GridScale = property(_pnpsll.VectorField3D_GridScale_get, _pnpsll.VectorField3D_GridScale_set)
    Nelem = property(_pnpsll.VectorField3D_Nelem_get, _pnpsll.VectorField3D_Nelem_set)
    V = property(_pnpsll.VectorField3D_V_get, _pnpsll.VectorField3D_V_set)

    def GetField(self, i: "int const") -> "float *":
        return _pnpsll.VectorField3D_GetField(self, i)

    def SetField(self, i: "int const", v: "float *") -> "void":
        return _pnpsll.VectorField3D_SetField(self, i, v)

    def SetVectorField3D(self, gridsize: "int *", gridscale: "float", nelem: "int") -> "int":
        return _pnpsll.VectorField3D_SetVectorField3D(self, gridsize, gridscale, nelem)

    def ReadFromFile(self, filename: "char const *", coef: "float"=1.0) -> "int":
        return _pnpsll.VectorField3D_ReadFromFile(self, filename, coef)

    def WriteToFile(self, filename: "char const *", coef: "float"=1.0, Columns: "int"=1) -> "int":
        return _pnpsll.VectorField3D_WriteToFile(self, filename, coef, Columns)

    def RMSD(self, vcomp: "VectorField3D") -> "float":
        return _pnpsll.VectorField3D_RMSD(self, vcomp)

    def RMSDInternal(self, vcomp: "VectorField3D") -> "float":
        return _pnpsll.VectorField3D_RMSDInternal(self, vcomp)

    def GetNelem(self) -> "int":
        return _pnpsll.VectorField3D_GetNelem(self)

    def GetNx(self) -> "int":
        return _pnpsll.VectorField3D_GetNx(self)

    def GetNy(self) -> "int":
        return _pnpsll.VectorField3D_GetNy(self)

    def GetNz(self) -> "int":
        return _pnpsll.VectorField3D_GetNz(self)

    def GetValue(self, _in: "int", ix: "int", iy: "int", iz: "int") -> "float":
        return _pnpsll.VectorField3D_GetValue(self, _in, ix, iy, iz)

    def GetInterpolatedValueGrid(self, _in: "int", fx: "float", fy: "float", fz: "float") -> "float":
        return _pnpsll.VectorField3D_GetInterpolatedValueGrid(self, _in, fx, fy, fz)

    def SetValue(self, _in: "int", ix: "int", iy: "int", iz: "int", val: "float") -> "void":
        return _pnpsll.VectorField3D_SetValue(self, _in, ix, iy, iz, val)

    def GetValueByGrdNmb(self, _in: "int", igrd: "int") -> "float":
        return _pnpsll.VectorField3D_GetValueByGrdNmb(self, _in, igrd)

    def SetValueByGrdNmb(self, _in: "int", igrd: "int", val: "float") -> "void":
        return _pnpsll.VectorField3D_SetValueByGrdNmb(self, _in, igrd, val)

    def FillValue(self, val: "float") -> "void":
        return _pnpsll.VectorField3D_FillValue(self, val)

    def MultiplyBy(self, coef: "float") -> "int":
        return _pnpsll.VectorField3D_MultiplyBy(self, coef)

    def MultiplyOneElementBy(self, coef: "float", Elm2set: "int") -> "int":
        return _pnpsll.VectorField3D_MultiplyOneElementBy(self, coef, Elm2set)

    def MaskWithVectorField3D(self, VExt: "VectorField3D", Value: "float", dvalue: "float", value2set: "float") -> "int":
        return _pnpsll.VectorField3D_MaskWithVectorField3D(self, VExt, Value, dvalue, value2set)

    def MaskWithVectorField3DUseOneElement(self, VExt: "VectorField3D", VExtElm: "int", Elm2set: "int", Value: "float", dvalue: "float", value2set: "float") -> "int":
        return _pnpsll.VectorField3D_MaskWithVectorField3DUseOneElement(self, VExt, VExtElm, Elm2set, Value, dvalue, value2set)

    def Copy(self, VExt: "VectorField3D") -> "int":
        return _pnpsll.VectorField3D_Copy(self, VExt)

    def CopyOneElement(self, VExt: "VectorField3D", VExtElm: "int", Elm2set: "int") -> "int":
        return _pnpsll.VectorField3D_CopyOneElement(self, VExt, VExtElm, Elm2set)

    def AddVectorField3D(self, VExt: "VectorField3D") -> "int":
        return _pnpsll.VectorField3D_AddVectorField3D(self, VExt)

    def AddOneElementOfVectorField3D(self, VExt: "VectorField3D", VExtElm: "int", Elm2set: "int") -> "int":
        return _pnpsll.VectorField3D_AddOneElementOfVectorField3D(self, VExt, VExtElm, Elm2set)

    def SubtractVectorField3D(self, VExt: "VectorField3D") -> "int":
        return _pnpsll.VectorField3D_SubtractVectorField3D(self, VExt)

    def SubtractOneElementOfVectorField3D(self, VExt: "VectorField3D", VExtElm: "int", Elm2set: "int") -> "int":
        return _pnpsll.VectorField3D_SubtractOneElementOfVectorField3D(self, VExt, VExtElm, Elm2set)

    def MinMax(self, Elem: "int", Min: "float *", Max: "float *", MinPnt: "int *", MaxPnt: "int *") -> "void":
        return _pnpsll.VectorField3D_MinMax(self, Elem, Min, Max, MinPnt, MaxPnt)

    def ReadFromFileAddPBC(self, filename: "char const *", coef: "float", pbcX: "bool", pbcY: "bool", pbcZ: "bool") -> "int":
        return _pnpsll.VectorField3D_ReadFromFileAddPBC(self, filename, coef, pbcX, pbcY, pbcZ)

    def ReadFromFileAddPBCandSplitSDMPI4FDaZ(self, filename: "char const *", coef: "float", pbc: "bool *", LocaliZ0: "int", LocaliZ1: "int") -> "int":
        return _pnpsll.VectorField3D_ReadFromFileAddPBCandSplitSDMPI4FDaZ(self, filename, coef, pbc, LocaliZ0, LocaliZ1)

    def SplitExtVF3DSDMPI4FDaZ(self, VExt: "VectorField3D", LocaliZ0: "int", LocaliZ1: "int") -> "int":
        return _pnpsll.VectorField3D_SplitExtVF3DSDMPI4FDaZ(self, VExt, LocaliZ0, LocaliZ1)

    def WriteToFileRemovePBC(self, filename: "char const *", coef: "float", Columns: "int", pbcX: "bool", pbcY: "bool", pbcZ: "bool") -> "int":
        return _pnpsll.VectorField3D_WriteToFileRemovePBC(self, filename, coef, Columns, pbcX, pbcY, pbcZ)

    def WriteToFileCombineSDMPIDistrRemovePBC(self, filename: "char const *", coef: "float", Columns: "int", GridSizeGlobal: "int *", pbc: "bool *", LocaliZ0: "int", LocaliZ1: "int") -> "int":
        return _pnpsll.VectorField3D_WriteToFileCombineSDMPIDistrRemovePBC(self, filename, coef, Columns, GridSizeGlobal, pbc, LocaliZ0, LocaliZ1)

    def CalcLinInterFloat(self, V0: "float", V1: "float", x: "float") -> "float":
        return _pnpsll.VectorField3D_CalcLinInterFloat(self, V0, V1, x)

    def InterpolateFromExt(self, VExt: "VectorField3D") -> "int":
        return _pnpsll.VectorField3D_InterpolateFromExt(self, VExt)

    def InterpolateBoarderFromExt(self, VExt: "VectorField3D") -> "int":
        return _pnpsll.VectorField3D_InterpolateBoarderFromExt(self, VExt)

    def InterpolateBoarderFromExtWithMultipl(self, VExt: "VectorField3D", Multipl: "float") -> "int":
        return _pnpsll.VectorField3D_InterpolateBoarderFromExtWithMultipl(self, VExt, Multipl)

    def InterpolateInternalBoarderFromExt(self, VExt: "VectorField3D", InternalBoarderMinGridLev0: "int *", InternalBoarderMaxGridLev0: "int *") -> "int":
        return _pnpsll.VectorField3D_InterpolateInternalBoarderFromExt(self, VExt, InternalBoarderMinGridLev0, InternalBoarderMaxGridLev0)

    def InterpolateInternalBoarderFromExtWithMultipl(self, VExt: "VectorField3D", InternalBoarderMinGridLev0: "int *", InternalBoarderMaxGridLev0: "int *", Multipl: "float") -> "int":
        return _pnpsll.VectorField3D_InterpolateInternalBoarderFromExtWithMultipl(self, VExt, InternalBoarderMinGridLev0, InternalBoarderMaxGridLev0, Multipl)

    def ConvFloatToIntUnitsX(self, Xext: "float") -> "float":
        return _pnpsll.VectorField3D_ConvFloatToIntUnitsX(self, Xext)

    def ConvFloatToIntUnitsY(self, Yext: "float") -> "float":
        return _pnpsll.VectorField3D_ConvFloatToIntUnitsY(self, Yext)

    def ConvFloatToIntUnitsZ(self, Zext: "float") -> "float":
        return _pnpsll.VectorField3D_ConvFloatToIntUnitsZ(self, Zext)

    def ConvIntXYZToGrdPnt(self, Xint: "float", Yint: "float", Zint: "float") -> "int":
        return _pnpsll.VectorField3D_ConvIntXYZToGrdPnt(self, Xint, Yint, Zint)

    def ConvExtXYZToGrdPnt(self, Xext: "float", Yext: "float", Zext: "float") -> "int":
        return _pnpsll.VectorField3D_ConvExtXYZToGrdPnt(self, Xext, Yext, Zext)

    def ConvIntToExtUnitsX(self, Xint: "float") -> "float":
        return _pnpsll.VectorField3D_ConvIntToExtUnitsX(self, Xint)

    def ConvIntToExtUnitsY(self, Yint: "float") -> "float":
        return _pnpsll.VectorField3D_ConvIntToExtUnitsY(self, Yint)

    def ConvIntToExtUnitsZ(self, Zint: "float") -> "float":
        return _pnpsll.VectorField3D_ConvIntToExtUnitsZ(self, Zint)

    def AverageThrLaplas(self, _Mask: "VectorIntField3D", iter: "int", MaskNotToDo: "int") -> "int":
        return _pnpsll.VectorField3D_AverageThrLaplas(self, _Mask, iter, MaskNotToDo)

# Register VectorField3D in _pnpsll:
_pnpsll.VectorField3D_swigregister(VectorField3D)

DO_ONE = _pnpsll.DO_ONE
DO_TWO = _pnpsll.DO_TWO
DO_THREE = _pnpsll.DO_THREE
DO_FOUR = _pnpsll.DO_FOUR
DO_FIVE = _pnpsll.DO_FIVE
DO_SIX = _pnpsll.DO_SIX
SEND_ENERGY = _pnpsll.SEND_ENERGY
class MapsIOData(PnpsObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pnpsll.MapsIOData_swiginit(self, _pnpsll.new_MapsIOData())
    __swig_destroy__ = _pnpsll.delete_MapsIOData
    DielectricConstantMap = property(_pnpsll.MapsIOData_DielectricConstantMap_get, _pnpsll.MapsIOData_DielectricConstantMap_set)
    DiffusionMapFile = property(_pnpsll.MapsIOData_DiffusionMapFile_get, _pnpsll.MapsIOData_DiffusionMapFile_set)
    DynamicChargeMapFile = property(_pnpsll.MapsIOData_DynamicChargeMapFile_get, _pnpsll.MapsIOData_DynamicChargeMapFile_set)
    StaticChargeMapFile = property(_pnpsll.MapsIOData_StaticChargeMapFile_get, _pnpsll.MapsIOData_StaticChargeMapFile_set)
    PotentialMapFile = property(_pnpsll.MapsIOData_PotentialMapFile_get, _pnpsll.MapsIOData_PotentialMapFile_set)
    PMFMapFile = property(_pnpsll.MapsIOData_PMFMapFile_get, _pnpsll.MapsIOData_PMFMapFile_set)
    PMFMapFile2 = property(_pnpsll.MapsIOData_PMFMapFile2_get, _pnpsll.MapsIOData_PMFMapFile2_set)
    NodeIndexingFile = property(_pnpsll.MapsIOData_NodeIndexingFile_get, _pnpsll.MapsIOData_NodeIndexingFile_set)
    Mode = property(_pnpsll.MapsIOData_Mode_get, _pnpsll.MapsIOData_Mode_set)
    Read = _pnpsll.MapsIOData_Read
    Write = _pnpsll.MapsIOData_Write
    Auto = _pnpsll.MapsIOData_Auto
    ModeStr = property(_pnpsll.MapsIOData_ModeStr_get, _pnpsll.MapsIOData_ModeStr_set)
    AddGroupStringSuffix = property(_pnpsll.MapsIOData_AddGroupStringSuffix_get, _pnpsll.MapsIOData_AddGroupStringSuffix_set)
    AddGroupNumberSuffix = property(_pnpsll.MapsIOData_AddGroupNumberSuffix_get, _pnpsll.MapsIOData_AddGroupNumberSuffix_set)

# Register MapsIOData in _pnpsll:
_pnpsll.MapsIOData_swigregister(MapsIOData)

class NodeIndexing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pnpsll.NodeIndexing_swiginit(self, _pnpsll.new_NodeIndexing())
    __swig_destroy__ = _pnpsll.delete_NodeIndexing

    def InitZero(self) -> "int":
        return _pnpsll.NodeIndexing_InitZero(self)
    Epsilon0 = _pnpsll.NodeIndexing_Epsilon0
    Epsilon1 = _pnpsll.NodeIndexing_Epsilon1
    Epsilon2 = _pnpsll.NodeIndexing_Epsilon2
    Ion0 = _pnpsll.NodeIndexing_Ion0
    Ion1 = _pnpsll.NodeIndexing_Ion1
    Ion2 = _pnpsll.NodeIndexing_Ion2
    Ion3 = _pnpsll.NodeIndexing_Ion3
    Epsilon0Sft = _pnpsll.NodeIndexing_Epsilon0Sft
    Epsilon1Sft = _pnpsll.NodeIndexing_Epsilon1Sft
    Epsilon2Sft = _pnpsll.NodeIndexing_Epsilon2Sft
    Ion0Sft = _pnpsll.NodeIndexing_Ion0Sft
    Ion1Sft = _pnpsll.NodeIndexing_Ion1Sft
    Ion2Sft = _pnpsll.NodeIndexing_Ion2Sft
    Ion3Sft = _pnpsll.NodeIndexing_Ion3Sft
    Flexible = _pnpsll.NodeIndexing_Flexible
    BlackAndWhiteMask = _pnpsll.NodeIndexing_BlackAndWhiteMask
    ChargeMask = _pnpsll.NodeIndexing_ChargeMask
    DielBoarderMask = _pnpsll.NodeIndexing_DielBoarderMask
    DiffIon0BoarderMask = _pnpsll.NodeIndexing_DiffIon0BoarderMask
    DiffIon1BoarderMask = _pnpsll.NodeIndexing_DiffIon1BoarderMask
    DiffIon2BoarderMask = _pnpsll.NodeIndexing_DiffIon2BoarderMask
    DiffIon3BoarderMask = _pnpsll.NodeIndexing_DiffIon3BoarderMask
    BlackAndWhiteMaskSft = _pnpsll.NodeIndexing_BlackAndWhiteMaskSft
    ChargeMaskSft = _pnpsll.NodeIndexing_ChargeMaskSft
    DielBoarderMaskSft = _pnpsll.NodeIndexing_DielBoarderMaskSft
    DiffIon0BoarderMaskSft = _pnpsll.NodeIndexing_DiffIon0BoarderMaskSft
    DiffIon1BoarderMaskSft = _pnpsll.NodeIndexing_DiffIon1BoarderMaskSft
    DiffIon2BoarderMaskSft = _pnpsll.NodeIndexing_DiffIon2BoarderMaskSft
    DiffIon3BoarderMaskSft = _pnpsll.NodeIndexing_DiffIon3BoarderMaskSft
    DielConst = _pnpsll.NodeIndexing_DielConst
    DiffConst = _pnpsll.NodeIndexing_DiffConst
    Conc = _pnpsll.NodeIndexing_Conc
    Charge = _pnpsll.NodeIndexing_Charge
    EpsilonField = property(_pnpsll.NodeIndexing_EpsilonField_get, _pnpsll.NodeIndexing_EpsilonField_set)
    EpsilonFieldSft = property(_pnpsll.NodeIndexing_EpsilonFieldSft_get, _pnpsll.NodeIndexing_EpsilonFieldSft_set)
    IonField = property(_pnpsll.NodeIndexing_IonField_get, _pnpsll.NodeIndexing_IonField_set)
    IonFieldSft = property(_pnpsll.NodeIndexing_IonFieldSft_get, _pnpsll.NodeIndexing_IonFieldSft_set)
    DiffBoarderMask = property(_pnpsll.NodeIndexing_DiffBoarderMask_get, _pnpsll.NodeIndexing_DiffBoarderMask_set)
    DiffBoarderMaskSft = property(_pnpsll.NodeIndexing_DiffBoarderMaskSft_get, _pnpsll.NodeIndexing_DiffBoarderMaskSft_set)
    GridSize = property(_pnpsll.NodeIndexing_GridSize_get, _pnpsll.NodeIndexing_GridSize_set)
    GridScale = property(_pnpsll.NodeIndexing_GridScale_get, _pnpsll.NodeIndexing_GridScale_set)
    Eps = property(_pnpsll.NodeIndexing_Eps_get, _pnpsll.NodeIndexing_Eps_set)
    D = property(_pnpsll.NodeIndexing_D_get, _pnpsll.NodeIndexing_D_set)
    C = property(_pnpsll.NodeIndexing_C_get, _pnpsll.NodeIndexing_C_set)
    NIonsTypes = property(_pnpsll.NodeIndexing_NIonsTypes_get, _pnpsll.NodeIndexing_NIonsTypes_set)
    IonsQ = property(_pnpsll.NodeIndexing_IonsQ_get, _pnpsll.NodeIndexing_IonsQ_set)
    NIndex = property(_pnpsll.NodeIndexing_NIndex_get, _pnpsll.NodeIndexing_NIndex_set)
    Q = property(_pnpsll.NodeIndexing_Q_get, _pnpsll.NodeIndexing_Q_set)
    PBC = property(_pnpsll.NodeIndexing_PBC_get, _pnpsll.NodeIndexing_PBC_set)

    def SetNoPBC(self) -> "int":
        return _pnpsll.NodeIndexing_SetNoPBC(self)

    def SetPBC(self, pbcX: "bool", pbcY: "bool", pbcZ: "bool") -> "int":
        return _pnpsll.NodeIndexing_SetPBC(self, pbcX, pbcY, pbcZ)
    QNum = property(_pnpsll.NodeIndexing_QNum_get, _pnpsll.NodeIndexing_QNum_set)

    def GetNx(self) -> "int":
        return _pnpsll.NodeIndexing_GetNx(self)

    def GetNy(self) -> "int":
        return _pnpsll.NodeIndexing_GetNy(self)

    def GetNz(self) -> "int":
        return _pnpsll.NodeIndexing_GetNz(self)

    def GetDielConstInUse(self, i: "int") -> "float":
        return _pnpsll.NodeIndexing_GetDielConstInUse(self, i)

    def SetDielConstInUse(self, i: "int", Val: "float") -> "void":
        return _pnpsll.NodeIndexing_SetDielConstInUse(self, i, Val)

    def SetNNodes(self, gridsize: "unsigned int *", gridscale: "float") -> "int":
        return _pnpsll.NodeIndexing_SetNNodes(self, gridsize, gridscale)

    def SetBlackAndWhiteNodes(self, FirstNode: "int"=0) -> "int":
        return _pnpsll.NodeIndexing_SetBlackAndWhiteNodes(self, FirstNode)

    def SetIndexFieldFromIntArray(self, arr: "int *", mask: "NodeIndexing::NodeIndexDescriptor", sft: "NodeIndexing::NodeIndexDescriptor") -> "int":
        return _pnpsll.NodeIndexing_SetIndexFieldFromIntArray(self, arr, mask, sft)

    def SetIonAccess(self, DiffusionsMaps: "float **") -> "int":
        return _pnpsll.NodeIndexing_SetIonAccess(self, DiffusionsMaps)

    def GetCMap(self, FieldType: "NodeIndexing::NodeIndexDescriptor", mask: "NodeIndex") -> "float *":
        return _pnpsll.NodeIndexing_GetCMap(self, FieldType, mask)

    def GetIntArrayFromIndexField(self, FieldType: "NodeIndexing::NodeIndexDescriptor", mask: "NodeIndex") -> "int *":
        return _pnpsll.NodeIndexing_GetIntArrayFromIndexField(self, FieldType, mask)

    def GetField(self, FieldType: "NodeIndexing::NodeIndexDescriptor", mask: "NodeIndexing::NodeIndexDescriptor", Map: "float *"=None) -> "float *":
        return _pnpsll.NodeIndexing_GetField(self, FieldType, mask, Map)

    def CalcDielBoarder(self) -> "int":
        return _pnpsll.NodeIndexing_CalcDielBoarder(self)

    def CalcDiffBoarder(self) -> "int":
        return _pnpsll.NodeIndexing_CalcDiffBoarder(self)

    def InsertSphereInDielMap(self, r: "float *", R: "float", Value: "int") -> "int":
        return _pnpsll.NodeIndexing_InsertSphereInDielMap(self, r, R, Value)

    def CheckBoarder4Q(self) -> "int":
        return _pnpsll.NodeIndexing_CheckBoarder4Q(self)

    def CheckNodeIndex(self) -> "int":
        return _pnpsll.NodeIndexing_CheckNodeIndex(self)

    def RemoveBadDiffusionPoints(self) -> "int":
        return _pnpsll.NodeIndexing_RemoveBadDiffusionPoints(self)

    def SetChargeMapFromArray(self, q: "float *") -> "int":
        return _pnpsll.NodeIndexing_SetChargeMapFromArray(self, q)

    def SetChargeMapFromArrayNoQonBoarder(self, q: "float *") -> "int":
        return _pnpsll.NodeIndexing_SetChargeMapFromArrayNoQonBoarder(self, q)

    def SetChargeMapToZero(self) -> "int":
        return _pnpsll.NodeIndexing_SetChargeMapToZero(self)

    def GetChargeArray(self) -> "float *":
        return _pnpsll.NodeIndexing_GetChargeArray(self)

    def GetChargeIndex(self) -> "int *":
        return _pnpsll.NodeIndexing_GetChargeIndex(self)

    def ReadFromFile(self, filename: "char const *") -> "int":
        return _pnpsll.NodeIndexing_ReadFromFile(self, filename)

    def ConvertToPBC(self, V: "NodeIndex *", GS_X: "int", GS_Y: "int", GS_Z: "int", pbcX: "bool", pbcY: "bool", pbcZ: "bool") -> "int":
        return _pnpsll.NodeIndexing_ConvertToPBC(self, V, GS_X, GS_Y, GS_Z, pbcX, pbcY, pbcZ)

    def ReadFromFileAddPBC(self, filename: "char const *", pbcX: "bool", pbcY: "bool", pbcZ: "bool") -> "int":
        return _pnpsll.NodeIndexing_ReadFromFileAddPBC(self, filename, pbcX, pbcY, pbcZ)

    def ReadFromFile4SDMPI(self, filename: "char const *", World: "ContWorld") -> "int":
        return _pnpsll.NodeIndexing_ReadFromFile4SDMPI(self, filename, World)

    def WriteToFile(self, filename: "char const *") -> "int":
        return _pnpsll.NodeIndexing_WriteToFile(self, filename)

    def GetMyPart4MPI(self, World: "ContWorld", NIndexGlobal: "NodeIndexing"=None) -> "int":
        return _pnpsll.NodeIndexing_GetMyPart4MPI(self, World, NIndexGlobal)

    def GetCentralPartFromNIExtMyPart4MPI(self, NIExt: "NodeIndexing") -> "int":
        return _pnpsll.NodeIndexing_GetCentralPartFromNIExtMyPart4MPI(self, NIExt)

    def GetDiel(self, i: "int", node: "int") -> "int":
        return _pnpsll.NodeIndexing_GetDiel(self, i, node)

    def GetDielFloat(self, i: "int", node: "int") -> "float":
        return _pnpsll.NodeIndexing_GetDielFloat(self, i, node)

    def SetSCharDielMapForGAPS(self, CDiel: "signed char **", gapsEps: "float *") -> "int":
        return _pnpsll.NodeIndexing_SetSCharDielMapForGAPS(self, CDiel, gapsEps)

    def SetDiel(self, i: "int", node: "int", Val: "int") -> "void":
        return _pnpsll.NodeIndexing_SetDiel(self, i, node, Val)

    def GetIonField(self, i: "int", node: "int") -> "int":
        return _pnpsll.NodeIndexing_GetIonField(self, i, node)

    def GetDiffFloat(self, i: "int", node: "int") -> "float":
        return _pnpsll.NodeIndexing_GetDiffFloat(self, i, node)

    def GetDiffDouble(self, i: "int", node: "int") -> "double":
        return _pnpsll.NodeIndexing_GetDiffDouble(self, i, node)

    def GetConcFloat(self, i: "int", node: "int") -> "float":
        return _pnpsll.NodeIndexing_GetConcFloat(self, i, node)

    def SetIonField(self, i: "int", node: "int", Val: "int") -> "void":
        return _pnpsll.NodeIndexing_SetIonField(self, i, node, Val)

    def GetDiffZeroInd(self) -> "int":
        return _pnpsll.NodeIndexing_GetDiffZeroInd(self)

    def SetDiffToZero(self, ion: "int", node: "int") -> "void":
        return _pnpsll.NodeIndexing_SetDiffToZero(self, ion, node)

# Register NodeIndexing in _pnpsll:
_pnpsll.NodeIndexing_swigregister(NodeIndexing)
NodeIndexMaxValues = cvar.NodeIndexMaxValues
MaxIonTypes = cvar.MaxIonTypes

class ContWorld(PnpsObject):
    r"""Class for continuum representation of system"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""Class for continuum representation of system"""
        _pnpsll.ContWorld_swiginit(self, _pnpsll.new_ContWorld(*args))

    def __init__(self,
    		GridSize=[65,65,65],
    		GridScale=2.0,
    		PBC=[False,False,False],
    		Qions=None,
    		Verbose=True):
    	"""ContWorld constructor
    	Input Parameters:
    		GridSize=[int,int,int], default=[65,65,65]
    			System grid size
    		GridScale=float, default=2.0
    			Grid scale in grids/Angstroms
    		PBC=[Bool, Bool, Bool], default=[False,False,False]
    			Set periodicity in X,Y,Z dimentions
    		Qions=None|[float, float], default=None
    			charges of mobile ions
    			Examples:
    				None for no module charges
    				[1.0,-1.0] for 2 types of mobile ions with unit charges +1 and -1
    		Verbose=bool, default=True
    			Print world parameters
    	Returned value:
    		ContWorld - instance of ContWorld

    	Example:
    		contworld=pnpmod.ContWorld(
    			GridSize=[65,65,65],
    			GridScale=1.0,
    			PBC=[True,True,False],
    			Qions=[1.0,-1.0]
    			)
    	"""
    #validate input
    #GridSize
    	if not (type(GridSize) is list or type(GridSize) is tuple):
    		raise TypeError("ContWorld.__init__: GridSize must be list of three integers")
    	if len(GridSize)!=3:
    		raise TypeError("ContWorld.__init__:GridSize must be list of three integers")
    	for i in range(3):
    		if not isinstance( GridSize[i], int ):
    			raise TypeError("ContWorld.__init__: GridSize must be list of three integers")

    #GridScale
    	if isinstance(GridScale, int):
    		GridScale=float(GridScale)
    	if not isinstance(GridScale,  float):
    		raise TypeError("ContWorld.__init__: GridScale must be float")
    	if GridScale<=0.0:
    		raise ValueError("ContWorld.__init__: GridScale must be positive")

    #PBC
    	if not (type(PBC) is list or type(PBC) is tuple):
    		raise TypeError("ContWorld.__init__: PBC must be list of three bools (True|False)")
    	if len(PBC)!=3:
    		raise TypeError("ContWorld.__init__: PBC must be list of three bools (True|False)")
    	for i in range(3):
    		if isinstance( PBC[i], int):
    			PBC[i]=bool(PBC[i])
    		if not isinstance( PBC[i], bool):
    			raise TypeError("ContWorld.__init__: PBC must be list of three bools (True|False)")

    #Qions
    	if Qions!=None:
    		if not (type(Qions) is list or type(Qions) is tuple):
    			raise TypeError("ContWorld.__init__: Qions must be list of floats")
    		for i in range(len(Qions)):
    			if isinstance( Qions[i], int):
    				Qions[i]=float(Qions[i])
    			if not isinstance(Qions[i], float):
    				raise TypeError("ContWorld.__init__: Qions must be list of floats")
    		Qtot=0.0
    		for i in range(len(Qions)):
    			Qtot+=Qions[i]
    		if Qtot>0.0001 or Qtot < -0.0001:
    			raise ValueError("ContWorld.__init__: sum of Qions must be zero")
    #Verbose
    	if isinstance(Verbose, int):
    		Verbose=bool(Verbose)
    	if not isinstance( Verbose, ( bool ) ):
    		raise TypeError("ContWorld.__init__: Verbose must be bools (True|False)")


    #Convert python to c++/c
    	m_GridSize=new_intArray(3)
    	for i in range(3):intArray_setitem(m_GridSize,i,GridSize[i])
    	m_PBC=new_boolArray(3)

    	for i in range(3):
    		boolArray_setitem(m_PBC,i,PBC[i])
    #add padding for periodicity
    #rem if PBC[i]:
    #	intArray_setitem(m_GridSize,i,intArray_getitem(m_GridSize,i)+2)
    	m_NIonsTypes=0
    	m_Qions=None
    	if Qions!=None and len(Qions)>0:
    		m_NIonsTypes=len(Qions)
    		m_Qions=new_floatArray(3)
    		for i in range(m_NIonsTypes):floatArray_setitem(m_Qions,i,Qions[i])
    #swig auto generated stuff
    	this = _pnpsll.new_ContWorld(m_GridSize, GridScale, m_PBC, m_NIonsTypes, m_Qions)
    	try: self.this.append(this)
    	except: self.this = this
    #delete temporary arrays
    	if m_NIonsTypes!=0:delete_floatArray(m_Qions)
    	delete_boolArray(m_PBC)
    	delete_intArray(m_GridSize)

    	if Verbose:
    		self.Print()

    __swig_destroy__ = _pnpsll.delete_ContWorld

    def InitZero(self) -> "int":
        return _pnpsll.ContWorld_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.ContWorld_Clear(self)
    MyRank = property(_pnpsll.ContWorld_MyRank_get, _pnpsll.ContWorld_MyRank_set)
    NProcs = property(_pnpsll.ContWorld_NProcs_get, _pnpsll.ContWorld_NProcs_set)
    MyGlobalZ0 = property(_pnpsll.ContWorld_MyGlobalZ0_get, _pnpsll.ContWorld_MyGlobalZ0_set)
    MyGlobalZ1 = property(_pnpsll.ContWorld_MyGlobalZ1_get, _pnpsll.ContWorld_MyGlobalZ1_set)
    MPISpreadWorld = property(_pnpsll.ContWorld_MPISpreadWorld_get, _pnpsll.ContWorld_MPISpreadWorld_set)
    NIonsTypes = property(_pnpsll.ContWorld_NIonsTypes_get, _pnpsll.ContWorld_NIonsTypes_set)
    IonsQ = property(_pnpsll.ContWorld_IonsQ_get, _pnpsll.ContWorld_IonsQ_set)
    GridSize = property(_pnpsll.ContWorld_GridSize_get, _pnpsll.ContWorld_GridSize_set)
    GridSizeGlobal = property(_pnpsll.ContWorld_GridSizeGlobal_get, _pnpsll.ContWorld_GridSizeGlobal_set)
    GridSizeOriginal = property(_pnpsll.ContWorld_GridSizeOriginal_get, _pnpsll.ContWorld_GridSizeOriginal_set)
    GS_XYZ = property(_pnpsll.ContWorld_GS_XYZ_get, _pnpsll.ContWorld_GS_XYZ_set)
    GS_XY = property(_pnpsll.ContWorld_GS_XY_get, _pnpsll.ContWorld_GS_XY_set)
    GS_X = property(_pnpsll.ContWorld_GS_X_get, _pnpsll.ContWorld_GS_X_set)
    GS_Y = property(_pnpsll.ContWorld_GS_Y_get, _pnpsll.ContWorld_GS_Y_set)
    GS_Z = property(_pnpsll.ContWorld_GS_Z_get, _pnpsll.ContWorld_GS_Z_set)
    GridSizeXYZGlobal = property(_pnpsll.ContWorld_GridSizeXYZGlobal_get, _pnpsll.ContWorld_GridSizeXYZGlobal_set)
    GridSizeXYZOriginal = property(_pnpsll.ContWorld_GridSizeXYZOriginal_get, _pnpsll.ContWorld_GridSizeXYZOriginal_set)
    startBlackAndWhite = property(_pnpsll.ContWorld_startBlackAndWhite_get, _pnpsll.ContWorld_startBlackAndWhite_set)
    GridScale = property(_pnpsll.ContWorld_GridScale_get, _pnpsll.ContWorld_GridScale_set)
    NIndexing = property(_pnpsll.ContWorld_NIndexing_get, _pnpsll.ContWorld_NIndexing_set)
    Epsilon = property(_pnpsll.ContWorld_Epsilon_get, _pnpsll.ContWorld_Epsilon_set)
    Qstat = property(_pnpsll.ContWorld_Qstat_get, _pnpsll.ContWorld_Qstat_set)
    C = property(_pnpsll.ContWorld_C_get, _pnpsll.ContWorld_C_set)
    CDouble = property(_pnpsll.ContWorld_CDouble_get, _pnpsll.ContWorld_CDouble_set)
    D = property(_pnpsll.ContWorld_D_get, _pnpsll.ContWorld_D_set)
    PMF = property(_pnpsll.ContWorld_PMF_get, _pnpsll.ContWorld_PMF_set)
    Potential = property(_pnpsll.ContWorld_Potential_get, _pnpsll.ContWorld_Potential_set)
    PotentialDouble = property(_pnpsll.ContWorld_PotentialDouble_get, _pnpsll.ContWorld_PotentialDouble_set)
    PBC = property(_pnpsll.ContWorld_PBC_get, _pnpsll.ContWorld_PBC_set)
    BoundaryCondition = property(_pnpsll.ContWorld_BoundaryCondition_get, _pnpsll.ContWorld_BoundaryCondition_set)
    SystemEnergy = property(_pnpsll.ContWorld_SystemEnergy_get, _pnpsll.ContWorld_SystemEnergy_set)

    def SetContWorld(self, m_GridSize: "int *", m_GridScale: "float", m_PBC: "bool *", m_NIonsTypes: "int", m_Qions: "float *") -> "int":
        return _pnpsll.ContWorld_SetContWorld(self, m_GridSize, m_GridScale, m_PBC, m_NIonsTypes, m_Qions)

    def SetContWorldNoMobIons(self, _GridSizeX: "int", _GridSizeY: "int", _GridSizeZ: "int", _GridScale: "float", PBCX: "bool", PBCY: "bool", PBCZ: "bool") -> "int":
        return _pnpsll.ContWorld_SetContWorldNoMobIons(self, _GridSizeX, _GridSizeY, _GridSizeZ, _GridScale, PBCX, PBCY, PBCZ)

    def SetContWorldTwoMobIons(self, _GridSizeX: "int", _GridSizeY: "int", _GridSizeZ: "int", _GridScale: "float", PBCX: "bool", PBCY: "bool", PBCZ: "bool", q1: "float", q2: "float") -> "int":
        return _pnpsll.ContWorld_SetContWorldTwoMobIons(self, _GridSizeX, _GridSizeY, _GridSizeZ, _GridScale, PBCX, PBCY, PBCZ, q1, q2)

    def Print(self) -> "int":
        return _pnpsll.ContWorld_Print(self)

    def ReadMaps(self, Dt: "MapsIOData") -> "int":
        return _pnpsll.ContWorld_ReadMaps(self, Dt)

    def WriteMaps(self, Dt: "MapsIOData") -> "int":
        return _pnpsll.ContWorld_WriteMaps(self, Dt)

    def CheckGridOfVectorField3D(self, VF3D: "VectorField3D", deleteOldVF3DifNotSame: "bool", VF3DDescription: "char const *", ReadFromFile: "char const *") -> "VectorField3D *":
        return _pnpsll.ContWorld_CheckGridOfVectorField3D(self, VF3D, deleteOldVF3DifNotSame, VF3DDescription, ReadFromFile)

    def SaveQstPhi(self, filename: "char const *") -> "int":
        return _pnpsll.ContWorld_SaveQstPhi(self, filename)

    def ReadPotential(self, filename: "char const *") -> "int":
        return _pnpsll.ContWorld_ReadPotential(self, filename)

    def ReadPotentialChargeZRange(self, filename: "char const *", Z0: "float", Z1: "float") -> "int":
        return _pnpsll.ContWorld_ReadPotentialChargeZRange(self, filename, Z0, Z1)

    def WritePotential(self, filename: "char const *", opt: "int"=1) -> "int":
        return _pnpsll.ContWorld_WritePotential(self, filename, opt)

    def ReadPMF(self, filename: "char const *", filename2: "char const *") -> "int":
        return _pnpsll.ContWorld_ReadPMF(self, filename, filename2)

    def WritePMF(self, filename: "char const *", opt: "int"=1) -> "int":
        return _pnpsll.ContWorld_WritePMF(self, filename, opt)

    def ReadNodeIndexing(self, filename: "char const *") -> "int":
        return _pnpsll.ContWorld_ReadNodeIndexing(self, filename)

    def WriteNodeIndexing(self, filename: "char const *", opt: "int"=1) -> "int":
        return _pnpsll.ContWorld_WriteNodeIndexing(self, filename, opt)

    def WriteContTop(self, filename: "char const *", opt: "int"=1) -> "int":
        return _pnpsll.ContWorld_WriteContTop(self, filename, opt)

    def ReadDynamicCharge(self, filename: "char const *") -> "int":
        return _pnpsll.ContWorld_ReadDynamicCharge(self, filename)

    def ReadDynamicChargeZRange(self, filename: "char const *", Z0: "float", Z1: "float") -> "int":
        return _pnpsll.ContWorld_ReadDynamicChargeZRange(self, filename, Z0, Z1)

    def WriteDynamicCharge(self, filename: "char const *", opt: "int"=1) -> "int":
        return _pnpsll.ContWorld_WriteDynamicCharge(self, filename, opt)

    def ReadDiffusion(self, filename: "char const *") -> "int":
        return _pnpsll.ContWorld_ReadDiffusion(self, filename)

    def WriteDiffusion(self, filename: "char const *", opt: "int"=1) -> "int":
        return _pnpsll.ContWorld_WriteDiffusion(self, filename, opt)

    def ReadVectorField3D(self, filename: "char const *", coef: "float") -> "VectorField3D *":
        return _pnpsll.ContWorld_ReadVectorField3D(self, filename, coef)

    def BorderExchange(self, ArrayToExchange: "float *") -> "int":
        return _pnpsll.ContWorld_BorderExchange(self, ArrayToExchange)

    def BorderExchangeInt(self, ArrayToExchange: "int *") -> "int":
        return _pnpsll.ContWorld_BorderExchangeInt(self, ArrayToExchange)

    def BorderExchangeDouble(self, ArrayToExchange: "double *") -> "int":
        return _pnpsll.ContWorld_BorderExchangeDouble(self, ArrayToExchange)

    def CheckArrays(self, ArSet: "char const *", BuildIfNI: "bool") -> "int":
        return _pnpsll.ContWorld_CheckArrays(self, ArSet, BuildIfNI)

    def CheckSystem(self) -> "int":
        return _pnpsll.ContWorld_CheckSystem(self)

    def SetInitConcentrationFromNIndexing(self) -> "int":
        return _pnpsll.ContWorld_SetInitConcentrationFromNIndexing(self)

    def convertRealToOriginalGrid(self, mapIn: "float *", mapOut: "float *") -> "int":
        return _pnpsll.ContWorld_convertRealToOriginalGrid(self, mapIn, mapOut)

    def convertOriginalToRealGrid(self, *args) -> "int":
        return _pnpsll.ContWorld_convertOriginalToRealGrid(self, *args)

    def ConvFloatToGlobIntUnitsX(self, Xext: "float") -> "float":
        return _pnpsll.ContWorld_ConvFloatToGlobIntUnitsX(self, Xext)

    def ConvFloatToLocIntUnitsX(self, Xext: "float") -> "float":
        return _pnpsll.ContWorld_ConvFloatToLocIntUnitsX(self, Xext)

    def ConvFloatToGlobIntUnitsY(self, Yext: "float") -> "float":
        return _pnpsll.ContWorld_ConvFloatToGlobIntUnitsY(self, Yext)

    def ConvFloatToLocIntUnitsY(self, Yext: "float") -> "float":
        return _pnpsll.ContWorld_ConvFloatToLocIntUnitsY(self, Yext)

    def ConvFloatToGlobIntUnitsZ(self, Zext: "float") -> "float":
        return _pnpsll.ContWorld_ConvFloatToGlobIntUnitsZ(self, Zext)

    def ConvFloatToLocIntUnitsZ(self, Zext: "float") -> "float":
        return _pnpsll.ContWorld_ConvFloatToLocIntUnitsZ(self, Zext)

    def ConvGlobalIntenalXYZToGrdPnt(self, Xint: "float", Yint: "float", Zint: "float") -> "int":
        return _pnpsll.ContWorld_ConvGlobalIntenalXYZToGrdPnt(self, Xint, Yint, Zint)

    def ConvGlobalExternalXYZToGrdPnt(self, Xext: "float", Yext: "float", Zext: "float") -> "int":
        return _pnpsll.ContWorld_ConvGlobalExternalXYZToGrdPnt(self, Xext, Yext, Zext)

    def ConvGlobIntToGlobExtUnitsX(self, Xint: "float") -> "float":
        return _pnpsll.ContWorld_ConvGlobIntToGlobExtUnitsX(self, Xint)

    def ConvGlobIntToGlobExtUnitsY(self, Yint: "float") -> "float":
        return _pnpsll.ContWorld_ConvGlobIntToGlobExtUnitsY(self, Yint)

    def ConvGlobIntToGlobExtUnitsZ(self, Zint: "float") -> "float":
        return _pnpsll.ContWorld_ConvGlobIntToGlobExtUnitsZ(self, Zint)

    def GetBorder(self, z1: "int *", z2: "int *", ProcRank: "int") -> "int":
        return _pnpsll.ContWorld_GetBorder(self, z1, z2, ProcRank)

    def AddPotential(self, Z0: "float", Z1: "float", Phi0: "float", Phi1: "float") -> "int":
        return _pnpsll.ContWorld_AddPotential(self, Z0, Z1, Phi0, Phi1)

    def ApplyAsymConc(self,z,C0,C1):
    	"""ApplyAsymConc - Set diffrent concentration of mobile ions below and above coordinate z
    		Parameters:
    			z=float
    				coordinate for concentration switching, usually middle of membrane is a good choice
    			C0=float|[float,float] - single float number or list of floats
    				concentration of mobile ions below z, if single float value is given will use that concentration for all ions
    				otherwise will use specific concentration for each ion
    			C1=float|[float,float] - single float number or list of floats
    				concentration of mobile ions above z, if single float value is given will use that concentration for all ions
    				otherwise will use specific concentration for each ion
    	"""
    #convert python to c++/c
    	Cz0 = new_floatArray(self.NIonsTypes)
    	if type(C0) is list or type(C0) is tuple:
    		for i in range(self.NIonsTypes):floatArray_setitem(Cz0,i,C0[i])
    	else:
    		for i in range(self.NIonsTypes):floatArray_setitem(Cz0,i,C0)
    	Cz1 = new_floatArray(self.NIonsTypes)
    	if type(C1) is list or type(C1) is tuple:
    		for i in range(self.NIonsTypes):floatArray_setitem(Cz1,i,C1[i])
    	else:
    		for i in range(self.NIonsTypes):floatArray_setitem(Cz1,i,C1)

    	self.cxxApplyAsymConc(z,Cz0,Cz1)

    #clean-up
    	delete_floatArray(Cz1)
    	delete_floatArray(Cz0)


    def cxxApplyAsymConc(self, z: "float", Cz0: "float *", Cz1: "float *") -> "int":
        return _pnpsll.ContWorld_cxxApplyAsymConc(self, z, Cz0, Cz1)

    def ApplyAsymConcByScaling(self, z: "float", Cz0: "float *", Cz1: "float *") -> "int":
        return _pnpsll.ContWorld_ApplyAsymConcByScaling(self, z, Cz0, Cz1)

    def ConvertIonStrengthToDynamicCharge(self) -> "int":
        return _pnpsll.ContWorld_ConvertIonStrengthToDynamicCharge(self)

    def RemoveDiffusionPointsAtNegativeC(self) -> "int":
        return _pnpsll.ContWorld_RemoveDiffusionPointsAtNegativeC(self)

    def RemoveDiffusionPoints(self, IType: "int", pnts: "int *", n: "int") -> "int":
        return _pnpsll.ContWorld_RemoveDiffusionPoints(self, IType, pnts, n)

    def FindImplicitMembranePosition(self, z0: "double *", z1: "double *") -> "bool":
        return _pnpsll.ContWorld_FindImplicitMembranePosition(self, z0, z1)

    def AddPotentialAuto(self, PotDiff):
    	z0=new_doublepf()
    	z1=new_doublepf()
    	if not self.FindImplicitMembranePosition(z0,z1):
    		return None
    	LimitCurrentCalcZ0=doublepf_value(z0)
    	LimitCurrentCalcZ1=doublepf_value(z1)
    	self.AddPotential(LimitCurrentCalcZ0,LimitCurrentCalcZ1,PotDiff,0.0)
    	return [LimitCurrentCalcZ0,LimitCurrentCalcZ1]


# Register ContWorld in _pnpsll:
_pnpsll.ContWorld_swigregister(ContWorld)


def ReadContWorldFromNodeIndexing(node_indexing_filename: "char const *") -> "ContWorld *":
    return _pnpsll.ReadContWorldFromNodeIndexing(node_indexing_filename)

def GetContWorld(**kwargs):
	"""depriciated"""
	GridSize = kwargs.get("GridSize")
	if GridSize==None:
		print("Error: GridSize must be defined")
		return None
	GridScale = kwargs.get("GridScale")
	if GridScale==None:
		print("Error: GridScale must be defined")
		return None

	PBC = kwargs.get("PBC",[0,0,0])
	Qions = kwargs.get("Qions",[1.0,-1.0])

	w=ContWorld(GridSize[0],GridSize[1],GridSize[2],
		GridScale,
		PBC[0],PBC[1],PBC[2],
		Qions[0],Qions[1])
	w.thisown = 0
	return w

def LoadContWorld(**kwargs):
	"""
	Options:
	SysTop - filename of continious topology
	Potential     - potential
	Concentration    - concentration
	Diffusion - Diffusion
	PMF     - filename for PMF of SR
	"""
	SysTop=kwargs.get("SysTop",None)



	if SysTop == None:
		print("Error: ContTop must be specified")
		return None
	w=ReadContWorldFromNodeIndexing(str(SysTop))

	Potential=kwargs.get("Potential",None)
	if Potential != None:
		w.ReadPotential(str(Potential))

	Concentration=kwargs.get("Concentration",None)
	if Concentration != None:
		w.ReadDynamicCharge(str(Concentration))

	Diffusion=kwargs.get("Diffusion",None)
	if Diffusion != None:
		w.ReadDiffusion(str(Diffusion))

	PMF=kwargs.get("PMF",None)
	if PMF != None:
		w.ReadPMF(str(PMF),"")

	return w

AligneSize = _pnpsll.AligneSize
class FieldBW(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pnpsll.FieldBW_swiginit(self, _pnpsll.new_FieldBW())
    __swig_destroy__ = _pnpsll.delete_FieldBW
    B = property(_pnpsll.FieldBW_B_get, _pnpsll.FieldBW_B_set)
    W = property(_pnpsll.FieldBW_W_get, _pnpsll.FieldBW_W_set)
    Borg = property(_pnpsll.FieldBW_Borg_get, _pnpsll.FieldBW_Borg_set)
    Worg = property(_pnpsll.FieldBW_Worg_get, _pnpsll.FieldBW_Worg_set)
    GS_X = property(_pnpsll.FieldBW_GS_X_get, _pnpsll.FieldBW_GS_X_set)
    GS_Y = property(_pnpsll.FieldBW_GS_Y_get, _pnpsll.FieldBW_GS_Y_set)
    GS_Z = property(_pnpsll.FieldBW_GS_Z_get, _pnpsll.FieldBW_GS_Z_set)
    StrideX = property(_pnpsll.FieldBW_StrideX_get, _pnpsll.FieldBW_StrideX_set)
    StrideXY = property(_pnpsll.FieldBW_StrideXY_get, _pnpsll.FieldBW_StrideXY_set)
    Bsize = property(_pnpsll.FieldBW_Bsize_get, _pnpsll.FieldBW_Bsize_set)
    Wsize = property(_pnpsll.FieldBW_Wsize_get, _pnpsll.FieldBW_Wsize_set)

    def Init(self, GridSize: "int *") -> "void":
        return _pnpsll.FieldBW_Init(self, GridSize)

    def SameSize(self, GridSize: "int *") -> "bool":
        return _pnpsll.FieldBW_SameSize(self, GridSize)

    def SetFromField(self, F: "float const *") -> "void":
        return _pnpsll.FieldBW_SetFromField(self, F)

    def SetField(self, F: "float *") -> "void":
        return _pnpsll.FieldBW_SetField(self, F)

    def BorderExchange(self, PBC: "bool const *") -> "void":
        return _pnpsll.FieldBW_BorderExchange(self, PBC)

# Register FieldBW in _pnpsll:
_pnpsll.FieldBW_swigregister(FieldBW)

PlusX = _pnpsll.PlusX
MinusX = _pnpsll.MinusX
PlusY = _pnpsll.PlusY
MinusY = _pnpsll.MinusY
PlusZ = _pnpsll.PlusZ
MinusZ = _pnpsll.MinusZ
CUDAXTRAX = _pnpsll.CUDAXTRAX
class float4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pnpsll.float4_x_get, _pnpsll.float4_x_set)
    y = property(_pnpsll.float4_y_get, _pnpsll.float4_y_set)
    z = property(_pnpsll.float4_z_get, _pnpsll.float4_z_set)
    w = property(_pnpsll.float4_w_get, _pnpsll.float4_w_set)

    def __init__(self):
        _pnpsll.float4_swiginit(self, _pnpsll.new_float4())
    __swig_destroy__ = _pnpsll.delete_float4

# Register float4 in _pnpsll:
_pnpsll.float4_swigregister(float4)

class float3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pnpsll.float3_x_get, _pnpsll.float3_x_set)
    y = property(_pnpsll.float3_y_get, _pnpsll.float3_y_set)
    z = property(_pnpsll.float3_z_get, _pnpsll.float3_z_set)

    def __init__(self):
        _pnpsll.float3_swiginit(self, _pnpsll.new_float3())
    __swig_destroy__ = _pnpsll.delete_float3

# Register float3 in _pnpsll:
_pnpsll.float3_swigregister(float3)

class int3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pnpsll.int3_x_get, _pnpsll.int3_x_set)
    y = property(_pnpsll.int3_y_get, _pnpsll.int3_y_set)
    z = property(_pnpsll.int3_z_get, _pnpsll.int3_z_set)

    def __init__(self):
        _pnpsll.int3_swiginit(self, _pnpsll.new_int3())
    __swig_destroy__ = _pnpsll.delete_int3

# Register int3 in _pnpsll:
_pnpsll.int3_swigregister(int3)

class int4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pnpsll.int4_x_get, _pnpsll.int4_x_set)
    y = property(_pnpsll.int4_y_get, _pnpsll.int4_y_set)
    z = property(_pnpsll.int4_z_get, _pnpsll.int4_z_set)
    w = property(_pnpsll.int4_w_get, _pnpsll.int4_w_set)

    def __init__(self):
        _pnpsll.int4_swiginit(self, _pnpsll.new_int4())
    __swig_destroy__ = _pnpsll.delete_int4

# Register int4 in _pnpsll:
_pnpsll.int4_swigregister(int4)

class PoissonSolverOnCudaStruct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GS = property(_pnpsll.PoissonSolverOnCudaStruct_GS_get, _pnpsll.PoissonSolverOnCudaStruct_GS_set)
    GridScale = property(_pnpsll.PoissonSolverOnCudaStruct_GridScale_get, _pnpsll.PoissonSolverOnCudaStruct_GridScale_set)
    spltGSWBC = property(_pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_get, _pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_set)
    spltGSWBC_X = property(_pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_X_get, _pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_X_set)
    spltGSWBC_XY = property(_pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_XY_get, _pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_XY_set)
    spltGSWBC_XYZ = property(_pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_XYZ_get, _pnpsll.PoissonSolverOnCudaStruct_spltGSWBC_XYZ_set)
    P = property(_pnpsll.PoissonSolverOnCudaStruct_P_get, _pnpsll.PoissonSolverOnCudaStruct_P_set)
    MaxIterations = property(_pnpsll.PoissonSolverOnCudaStruct_MaxIterations_get, _pnpsll.PoissonSolverOnCudaStruct_MaxIterations_set)
    Relaxation = property(_pnpsll.PoissonSolverOnCudaStruct_Relaxation_get, _pnpsll.PoissonSolverOnCudaStruct_Relaxation_set)
    Qnum = property(_pnpsll.PoissonSolverOnCudaStruct_Qnum_get, _pnpsll.PoissonSolverOnCudaStruct_Qnum_set)
    Q = property(_pnpsll.PoissonSolverOnCudaStruct_Q_get, _pnpsll.PoissonSolverOnCudaStruct_Q_set)
    Qmult = property(_pnpsll.PoissonSolverOnCudaStruct_Qmult_get, _pnpsll.PoissonSolverOnCudaStruct_Qmult_set)
    Qpos = property(_pnpsll.PoissonSolverOnCudaStruct_Qpos_get, _pnpsll.PoissonSolverOnCudaStruct_Qpos_set)
    DielBordNum = property(_pnpsll.PoissonSolverOnCudaStruct_DielBordNum_get, _pnpsll.PoissonSolverOnCudaStruct_DielBordNum_set)
    DielMult = property(_pnpsll.PoissonSolverOnCudaStruct_DielMult_get, _pnpsll.PoissonSolverOnCudaStruct_DielMult_set)
    DielBordPos = property(_pnpsll.PoissonSolverOnCudaStruct_DielBordPos_get, _pnpsll.PoissonSolverOnCudaStruct_DielBordPos_set)
    ConvergenceCheck = property(_pnpsll.PoissonSolverOnCudaStruct_ConvergenceCheck_get, _pnpsll.PoissonSolverOnCudaStruct_ConvergenceCheck_set)
    Tolerance = property(_pnpsll.PoissonSolverOnCudaStruct_Tolerance_get, _pnpsll.PoissonSolverOnCudaStruct_Tolerance_set)
    TotalEnergy = property(_pnpsll.PoissonSolverOnCudaStruct_TotalEnergy_get, _pnpsll.PoissonSolverOnCudaStruct_TotalEnergy_set)
    AvrOverChecks = property(_pnpsll.PoissonSolverOnCudaStruct_AvrOverChecks_get, _pnpsll.PoissonSolverOnCudaStruct_AvrOverChecks_set)
    TEavr = property(_pnpsll.PoissonSolverOnCudaStruct_TEavr_get, _pnpsll.PoissonSolverOnCudaStruct_TEavr_set)
    stdevTE = property(_pnpsll.PoissonSolverOnCudaStruct_stdevTE_get, _pnpsll.PoissonSolverOnCudaStruct_stdevTE_set)

    def __init__(self):
        _pnpsll.PoissonSolverOnCudaStruct_swiginit(self, _pnpsll.new_PoissonSolverOnCudaStruct())
    __swig_destroy__ = _pnpsll.delete_PoissonSolverOnCudaStruct

# Register PoissonSolverOnCudaStruct in _pnpsll:
_pnpsll.PoissonSolverOnCudaStruct_swigregister(PoissonSolverOnCudaStruct)

class PSolverOnCudaStructDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GS = property(_pnpsll.PSolverOnCudaStructDouble_GS_get, _pnpsll.PSolverOnCudaStructDouble_GS_set)
    GridScale = property(_pnpsll.PSolverOnCudaStructDouble_GridScale_get, _pnpsll.PSolverOnCudaStructDouble_GridScale_set)
    spltGSWBC = property(_pnpsll.PSolverOnCudaStructDouble_spltGSWBC_get, _pnpsll.PSolverOnCudaStructDouble_spltGSWBC_set)
    spltGSWBC_X = property(_pnpsll.PSolverOnCudaStructDouble_spltGSWBC_X_get, _pnpsll.PSolverOnCudaStructDouble_spltGSWBC_X_set)
    spltGSWBC_XY = property(_pnpsll.PSolverOnCudaStructDouble_spltGSWBC_XY_get, _pnpsll.PSolverOnCudaStructDouble_spltGSWBC_XY_set)
    spltGSWBC_XYZ = property(_pnpsll.PSolverOnCudaStructDouble_spltGSWBC_XYZ_get, _pnpsll.PSolverOnCudaStructDouble_spltGSWBC_XYZ_set)
    P = property(_pnpsll.PSolverOnCudaStructDouble_P_get, _pnpsll.PSolverOnCudaStructDouble_P_set)
    MaxIterations = property(_pnpsll.PSolverOnCudaStructDouble_MaxIterations_get, _pnpsll.PSolverOnCudaStructDouble_MaxIterations_set)
    Relaxation = property(_pnpsll.PSolverOnCudaStructDouble_Relaxation_get, _pnpsll.PSolverOnCudaStructDouble_Relaxation_set)
    Qnum = property(_pnpsll.PSolverOnCudaStructDouble_Qnum_get, _pnpsll.PSolverOnCudaStructDouble_Qnum_set)
    Q = property(_pnpsll.PSolverOnCudaStructDouble_Q_get, _pnpsll.PSolverOnCudaStructDouble_Q_set)
    Qmult = property(_pnpsll.PSolverOnCudaStructDouble_Qmult_get, _pnpsll.PSolverOnCudaStructDouble_Qmult_set)
    Qpos = property(_pnpsll.PSolverOnCudaStructDouble_Qpos_get, _pnpsll.PSolverOnCudaStructDouble_Qpos_set)
    DielBordNum = property(_pnpsll.PSolverOnCudaStructDouble_DielBordNum_get, _pnpsll.PSolverOnCudaStructDouble_DielBordNum_set)
    DielMult = property(_pnpsll.PSolverOnCudaStructDouble_DielMult_get, _pnpsll.PSolverOnCudaStructDouble_DielMult_set)
    DielBordPos = property(_pnpsll.PSolverOnCudaStructDouble_DielBordPos_get, _pnpsll.PSolverOnCudaStructDouble_DielBordPos_set)
    ConvergenceCheck = property(_pnpsll.PSolverOnCudaStructDouble_ConvergenceCheck_get, _pnpsll.PSolverOnCudaStructDouble_ConvergenceCheck_set)
    Tolerance = property(_pnpsll.PSolverOnCudaStructDouble_Tolerance_get, _pnpsll.PSolverOnCudaStructDouble_Tolerance_set)
    TotalEnergy = property(_pnpsll.PSolverOnCudaStructDouble_TotalEnergy_get, _pnpsll.PSolverOnCudaStructDouble_TotalEnergy_set)
    AvrOverChecks = property(_pnpsll.PSolverOnCudaStructDouble_AvrOverChecks_get, _pnpsll.PSolverOnCudaStructDouble_AvrOverChecks_set)
    TEavr = property(_pnpsll.PSolverOnCudaStructDouble_TEavr_get, _pnpsll.PSolverOnCudaStructDouble_TEavr_set)
    stdevTE = property(_pnpsll.PSolverOnCudaStructDouble_stdevTE_get, _pnpsll.PSolverOnCudaStructDouble_stdevTE_set)

    def __init__(self):
        _pnpsll.PSolverOnCudaStructDouble_swiginit(self, _pnpsll.new_PSolverOnCudaStructDouble())
    __swig_destroy__ = _pnpsll.delete_PSolverOnCudaStructDouble

# Register PSolverOnCudaStructDouble in _pnpsll:
_pnpsll.PSolverOnCudaStructDouble_swigregister(PSolverOnCudaStructDouble)

class PoissonSolverOnCuda4Struct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GS = property(_pnpsll.PoissonSolverOnCuda4Struct_GS_get, _pnpsll.PoissonSolverOnCuda4Struct_GS_set)
    ps4GS = property(_pnpsll.PoissonSolverOnCuda4Struct_ps4GS_get, _pnpsll.PoissonSolverOnCuda4Struct_ps4GS_set)
    GridScale = property(_pnpsll.PoissonSolverOnCuda4Struct_GridScale_get, _pnpsll.PoissonSolverOnCuda4Struct_GridScale_set)
    Pot = property(_pnpsll.PoissonSolverOnCuda4Struct_Pot_get, _pnpsll.PoissonSolverOnCuda4Struct_Pot_set)
    P000 = property(_pnpsll.PoissonSolverOnCuda4Struct_P000_get, _pnpsll.PoissonSolverOnCuda4Struct_P000_set)
    P100 = property(_pnpsll.PoissonSolverOnCuda4Struct_P100_get, _pnpsll.PoissonSolverOnCuda4Struct_P100_set)
    P200 = property(_pnpsll.PoissonSolverOnCuda4Struct_P200_get, _pnpsll.PoissonSolverOnCuda4Struct_P200_set)
    P300 = property(_pnpsll.PoissonSolverOnCuda4Struct_P300_get, _pnpsll.PoissonSolverOnCuda4Struct_P300_set)
    P010 = property(_pnpsll.PoissonSolverOnCuda4Struct_P010_get, _pnpsll.PoissonSolverOnCuda4Struct_P010_set)
    P110 = property(_pnpsll.PoissonSolverOnCuda4Struct_P110_get, _pnpsll.PoissonSolverOnCuda4Struct_P110_set)
    P210 = property(_pnpsll.PoissonSolverOnCuda4Struct_P210_get, _pnpsll.PoissonSolverOnCuda4Struct_P210_set)
    P310 = property(_pnpsll.PoissonSolverOnCuda4Struct_P310_get, _pnpsll.PoissonSolverOnCuda4Struct_P310_set)
    P020 = property(_pnpsll.PoissonSolverOnCuda4Struct_P020_get, _pnpsll.PoissonSolverOnCuda4Struct_P020_set)
    P120 = property(_pnpsll.PoissonSolverOnCuda4Struct_P120_get, _pnpsll.PoissonSolverOnCuda4Struct_P120_set)
    P220 = property(_pnpsll.PoissonSolverOnCuda4Struct_P220_get, _pnpsll.PoissonSolverOnCuda4Struct_P220_set)
    P320 = property(_pnpsll.PoissonSolverOnCuda4Struct_P320_get, _pnpsll.PoissonSolverOnCuda4Struct_P320_set)
    P030 = property(_pnpsll.PoissonSolverOnCuda4Struct_P030_get, _pnpsll.PoissonSolverOnCuda4Struct_P030_set)
    P130 = property(_pnpsll.PoissonSolverOnCuda4Struct_P130_get, _pnpsll.PoissonSolverOnCuda4Struct_P130_set)
    P230 = property(_pnpsll.PoissonSolverOnCuda4Struct_P230_get, _pnpsll.PoissonSolverOnCuda4Struct_P230_set)
    P330 = property(_pnpsll.PoissonSolverOnCuda4Struct_P330_get, _pnpsll.PoissonSolverOnCuda4Struct_P330_set)
    P001 = property(_pnpsll.PoissonSolverOnCuda4Struct_P001_get, _pnpsll.PoissonSolverOnCuda4Struct_P001_set)
    P101 = property(_pnpsll.PoissonSolverOnCuda4Struct_P101_get, _pnpsll.PoissonSolverOnCuda4Struct_P101_set)
    P201 = property(_pnpsll.PoissonSolverOnCuda4Struct_P201_get, _pnpsll.PoissonSolverOnCuda4Struct_P201_set)
    P301 = property(_pnpsll.PoissonSolverOnCuda4Struct_P301_get, _pnpsll.PoissonSolverOnCuda4Struct_P301_set)
    P011 = property(_pnpsll.PoissonSolverOnCuda4Struct_P011_get, _pnpsll.PoissonSolverOnCuda4Struct_P011_set)
    P111 = property(_pnpsll.PoissonSolverOnCuda4Struct_P111_get, _pnpsll.PoissonSolverOnCuda4Struct_P111_set)
    P211 = property(_pnpsll.PoissonSolverOnCuda4Struct_P211_get, _pnpsll.PoissonSolverOnCuda4Struct_P211_set)
    P311 = property(_pnpsll.PoissonSolverOnCuda4Struct_P311_get, _pnpsll.PoissonSolverOnCuda4Struct_P311_set)
    P021 = property(_pnpsll.PoissonSolverOnCuda4Struct_P021_get, _pnpsll.PoissonSolverOnCuda4Struct_P021_set)
    P121 = property(_pnpsll.PoissonSolverOnCuda4Struct_P121_get, _pnpsll.PoissonSolverOnCuda4Struct_P121_set)
    P221 = property(_pnpsll.PoissonSolverOnCuda4Struct_P221_get, _pnpsll.PoissonSolverOnCuda4Struct_P221_set)
    P321 = property(_pnpsll.PoissonSolverOnCuda4Struct_P321_get, _pnpsll.PoissonSolverOnCuda4Struct_P321_set)
    P031 = property(_pnpsll.PoissonSolverOnCuda4Struct_P031_get, _pnpsll.PoissonSolverOnCuda4Struct_P031_set)
    P131 = property(_pnpsll.PoissonSolverOnCuda4Struct_P131_get, _pnpsll.PoissonSolverOnCuda4Struct_P131_set)
    P231 = property(_pnpsll.PoissonSolverOnCuda4Struct_P231_get, _pnpsll.PoissonSolverOnCuda4Struct_P231_set)
    P331 = property(_pnpsll.PoissonSolverOnCuda4Struct_P331_get, _pnpsll.PoissonSolverOnCuda4Struct_P331_set)
    P002 = property(_pnpsll.PoissonSolverOnCuda4Struct_P002_get, _pnpsll.PoissonSolverOnCuda4Struct_P002_set)
    P102 = property(_pnpsll.PoissonSolverOnCuda4Struct_P102_get, _pnpsll.PoissonSolverOnCuda4Struct_P102_set)
    P202 = property(_pnpsll.PoissonSolverOnCuda4Struct_P202_get, _pnpsll.PoissonSolverOnCuda4Struct_P202_set)
    P302 = property(_pnpsll.PoissonSolverOnCuda4Struct_P302_get, _pnpsll.PoissonSolverOnCuda4Struct_P302_set)
    P012 = property(_pnpsll.PoissonSolverOnCuda4Struct_P012_get, _pnpsll.PoissonSolverOnCuda4Struct_P012_set)
    P112 = property(_pnpsll.PoissonSolverOnCuda4Struct_P112_get, _pnpsll.PoissonSolverOnCuda4Struct_P112_set)
    P212 = property(_pnpsll.PoissonSolverOnCuda4Struct_P212_get, _pnpsll.PoissonSolverOnCuda4Struct_P212_set)
    P312 = property(_pnpsll.PoissonSolverOnCuda4Struct_P312_get, _pnpsll.PoissonSolverOnCuda4Struct_P312_set)
    P022 = property(_pnpsll.PoissonSolverOnCuda4Struct_P022_get, _pnpsll.PoissonSolverOnCuda4Struct_P022_set)
    P122 = property(_pnpsll.PoissonSolverOnCuda4Struct_P122_get, _pnpsll.PoissonSolverOnCuda4Struct_P122_set)
    P222 = property(_pnpsll.PoissonSolverOnCuda4Struct_P222_get, _pnpsll.PoissonSolverOnCuda4Struct_P222_set)
    P322 = property(_pnpsll.PoissonSolverOnCuda4Struct_P322_get, _pnpsll.PoissonSolverOnCuda4Struct_P322_set)
    P032 = property(_pnpsll.PoissonSolverOnCuda4Struct_P032_get, _pnpsll.PoissonSolverOnCuda4Struct_P032_set)
    P132 = property(_pnpsll.PoissonSolverOnCuda4Struct_P132_get, _pnpsll.PoissonSolverOnCuda4Struct_P132_set)
    P232 = property(_pnpsll.PoissonSolverOnCuda4Struct_P232_get, _pnpsll.PoissonSolverOnCuda4Struct_P232_set)
    P332 = property(_pnpsll.PoissonSolverOnCuda4Struct_P332_get, _pnpsll.PoissonSolverOnCuda4Struct_P332_set)
    P003 = property(_pnpsll.PoissonSolverOnCuda4Struct_P003_get, _pnpsll.PoissonSolverOnCuda4Struct_P003_set)
    P103 = property(_pnpsll.PoissonSolverOnCuda4Struct_P103_get, _pnpsll.PoissonSolverOnCuda4Struct_P103_set)
    P203 = property(_pnpsll.PoissonSolverOnCuda4Struct_P203_get, _pnpsll.PoissonSolverOnCuda4Struct_P203_set)
    P303 = property(_pnpsll.PoissonSolverOnCuda4Struct_P303_get, _pnpsll.PoissonSolverOnCuda4Struct_P303_set)
    P013 = property(_pnpsll.PoissonSolverOnCuda4Struct_P013_get, _pnpsll.PoissonSolverOnCuda4Struct_P013_set)
    P113 = property(_pnpsll.PoissonSolverOnCuda4Struct_P113_get, _pnpsll.PoissonSolverOnCuda4Struct_P113_set)
    P213 = property(_pnpsll.PoissonSolverOnCuda4Struct_P213_get, _pnpsll.PoissonSolverOnCuda4Struct_P213_set)
    P313 = property(_pnpsll.PoissonSolverOnCuda4Struct_P313_get, _pnpsll.PoissonSolverOnCuda4Struct_P313_set)
    P023 = property(_pnpsll.PoissonSolverOnCuda4Struct_P023_get, _pnpsll.PoissonSolverOnCuda4Struct_P023_set)
    P123 = property(_pnpsll.PoissonSolverOnCuda4Struct_P123_get, _pnpsll.PoissonSolverOnCuda4Struct_P123_set)
    P223 = property(_pnpsll.PoissonSolverOnCuda4Struct_P223_get, _pnpsll.PoissonSolverOnCuda4Struct_P223_set)
    P323 = property(_pnpsll.PoissonSolverOnCuda4Struct_P323_get, _pnpsll.PoissonSolverOnCuda4Struct_P323_set)
    P033 = property(_pnpsll.PoissonSolverOnCuda4Struct_P033_get, _pnpsll.PoissonSolverOnCuda4Struct_P033_set)
    P133 = property(_pnpsll.PoissonSolverOnCuda4Struct_P133_get, _pnpsll.PoissonSolverOnCuda4Struct_P133_set)
    P233 = property(_pnpsll.PoissonSolverOnCuda4Struct_P233_get, _pnpsll.PoissonSolverOnCuda4Struct_P233_set)
    P333 = property(_pnpsll.PoissonSolverOnCuda4Struct_P333_get, _pnpsll.PoissonSolverOnCuda4Struct_P333_set)
    spltGSWBC = property(_pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_get, _pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_set)
    spltGSWBC_X = property(_pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_X_get, _pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_X_set)
    spltGSWBC_XY = property(_pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_XY_get, _pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_XY_set)
    spltGSWBC_XYZ = property(_pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_XYZ_get, _pnpsll.PoissonSolverOnCuda4Struct_spltGSWBC_XYZ_set)
    MaxIter = property(_pnpsll.PoissonSolverOnCuda4Struct_MaxIter_get, _pnpsll.PoissonSolverOnCuda4Struct_MaxIter_set)
    Rel = property(_pnpsll.PoissonSolverOnCuda4Struct_Rel_get, _pnpsll.PoissonSolverOnCuda4Struct_Rel_set)
    Tol = property(_pnpsll.PoissonSolverOnCuda4Struct_Tol_get, _pnpsll.PoissonSolverOnCuda4Struct_Tol_set)
    Qnum = property(_pnpsll.PoissonSolverOnCuda4Struct_Qnum_get, _pnpsll.PoissonSolverOnCuda4Struct_Qnum_set)
    Q = property(_pnpsll.PoissonSolverOnCuda4Struct_Q_get, _pnpsll.PoissonSolverOnCuda4Struct_Q_set)
    Qmult = property(_pnpsll.PoissonSolverOnCuda4Struct_Qmult_get, _pnpsll.PoissonSolverOnCuda4Struct_Qmult_set)
    Qpos = property(_pnpsll.PoissonSolverOnCuda4Struct_Qpos_get, _pnpsll.PoissonSolverOnCuda4Struct_Qpos_set)
    DielBordNum = property(_pnpsll.PoissonSolverOnCuda4Struct_DielBordNum_get, _pnpsll.PoissonSolverOnCuda4Struct_DielBordNum_set)
    DielMult = property(_pnpsll.PoissonSolverOnCuda4Struct_DielMult_get, _pnpsll.PoissonSolverOnCuda4Struct_DielMult_set)
    DielBordPos = property(_pnpsll.PoissonSolverOnCuda4Struct_DielBordPos_get, _pnpsll.PoissonSolverOnCuda4Struct_DielBordPos_set)
    ConvergenceCheck = property(_pnpsll.PoissonSolverOnCuda4Struct_ConvergenceCheck_get, _pnpsll.PoissonSolverOnCuda4Struct_ConvergenceCheck_set)
    TotalEnergy = property(_pnpsll.PoissonSolverOnCuda4Struct_TotalEnergy_get, _pnpsll.PoissonSolverOnCuda4Struct_TotalEnergy_set)
    AvrOverChecks = property(_pnpsll.PoissonSolverOnCuda4Struct_AvrOverChecks_get, _pnpsll.PoissonSolverOnCuda4Struct_AvrOverChecks_set)
    TEavr = property(_pnpsll.PoissonSolverOnCuda4Struct_TEavr_get, _pnpsll.PoissonSolverOnCuda4Struct_TEavr_set)
    stdevTE = property(_pnpsll.PoissonSolverOnCuda4Struct_stdevTE_get, _pnpsll.PoissonSolverOnCuda4Struct_stdevTE_set)
    om1 = property(_pnpsll.PoissonSolverOnCuda4Struct_om1_get, _pnpsll.PoissonSolverOnCuda4Struct_om1_set)
    om2d6 = property(_pnpsll.PoissonSolverOnCuda4Struct_om2d6_get, _pnpsll.PoissonSolverOnCuda4Struct_om2d6_set)

    def __init__(self):
        _pnpsll.PoissonSolverOnCuda4Struct_swiginit(self, _pnpsll.new_PoissonSolverOnCuda4Struct())
    __swig_destroy__ = _pnpsll.delete_PoissonSolverOnCuda4Struct

# Register PoissonSolverOnCuda4Struct in _pnpsll:
_pnpsll.PoissonSolverOnCuda4Struct_swigregister(PoissonSolverOnCuda4Struct)

class PoissonSolverOnCuda1Struct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GS = property(_pnpsll.PoissonSolverOnCuda1Struct_GS_get, _pnpsll.PoissonSolverOnCuda1Struct_GS_set)
    GridScale = property(_pnpsll.PoissonSolverOnCuda1Struct_GridScale_get, _pnpsll.PoissonSolverOnCuda1Struct_GridScale_set)
    Pot = property(_pnpsll.PoissonSolverOnCuda1Struct_Pot_get, _pnpsll.PoissonSolverOnCuda1Struct_Pot_set)
    PotCu = property(_pnpsll.PoissonSolverOnCuda1Struct_PotCu_get, _pnpsll.PoissonSolverOnCuda1Struct_PotCu_set)
    spltGSWBC = property(_pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_get, _pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_set)
    spltGSWBC_X = property(_pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_X_get, _pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_X_set)
    spltGSWBC_XY = property(_pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_XY_get, _pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_XY_set)
    spltGSWBC_XYZ = property(_pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_XYZ_get, _pnpsll.PoissonSolverOnCuda1Struct_spltGSWBC_XYZ_set)
    MaxIter = property(_pnpsll.PoissonSolverOnCuda1Struct_MaxIter_get, _pnpsll.PoissonSolverOnCuda1Struct_MaxIter_set)
    Rel = property(_pnpsll.PoissonSolverOnCuda1Struct_Rel_get, _pnpsll.PoissonSolverOnCuda1Struct_Rel_set)
    Tol = property(_pnpsll.PoissonSolverOnCuda1Struct_Tol_get, _pnpsll.PoissonSolverOnCuda1Struct_Tol_set)
    om1 = property(_pnpsll.PoissonSolverOnCuda1Struct_om1_get, _pnpsll.PoissonSolverOnCuda1Struct_om1_set)
    om2d6 = property(_pnpsll.PoissonSolverOnCuda1Struct_om2d6_get, _pnpsll.PoissonSolverOnCuda1Struct_om2d6_set)

    def __init__(self):
        _pnpsll.PoissonSolverOnCuda1Struct_swiginit(self, _pnpsll.new_PoissonSolverOnCuda1Struct())
    __swig_destroy__ = _pnpsll.delete_PoissonSolverOnCuda1Struct

# Register PoissonSolverOnCuda1Struct in _pnpsll:
_pnpsll.PoissonSolverOnCuda1Struct_swigregister(PoissonSolverOnCuda1Struct)

class PoissonSolverOnCudaParamStruct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BS_X = property(_pnpsll.PoissonSolverOnCudaParamStruct_BS_X_get, _pnpsll.PoissonSolverOnCudaParamStruct_BS_X_set)
    BS_Y = property(_pnpsll.PoissonSolverOnCudaParamStruct_BS_Y_get, _pnpsll.PoissonSolverOnCudaParamStruct_BS_Y_set)
    BS_Z = property(_pnpsll.PoissonSolverOnCudaParamStruct_BS_Z_get, _pnpsll.PoissonSolverOnCudaParamStruct_BS_Z_set)
    BS_XY = property(_pnpsll.PoissonSolverOnCudaParamStruct_BS_XY_get, _pnpsll.PoissonSolverOnCudaParamStruct_BS_XY_set)
    BS_XYZ = property(_pnpsll.PoissonSolverOnCudaParamStruct_BS_XYZ_get, _pnpsll.PoissonSolverOnCudaParamStruct_BS_XYZ_set)
    Qblock = property(_pnpsll.PoissonSolverOnCudaParamStruct_Qblock_get, _pnpsll.PoissonSolverOnCudaParamStruct_Qblock_set)
    DBblock = property(_pnpsll.PoissonSolverOnCudaParamStruct_DBblock_get, _pnpsll.PoissonSolverOnCudaParamStruct_DBblock_set)

    def __init__(self):
        _pnpsll.PoissonSolverOnCudaParamStruct_swiginit(self, _pnpsll.new_PoissonSolverOnCudaParamStruct())
    __swig_destroy__ = _pnpsll.delete_PoissonSolverOnCudaParamStruct

# Register PoissonSolverOnCudaParamStruct in _pnpsll:
_pnpsll.PoissonSolverOnCudaParamStruct_swigregister(PoissonSolverOnCudaParamStruct)

class GOAtomsStruct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GS_X = property(_pnpsll.GOAtomsStruct_GS_X_get, _pnpsll.GOAtomsStruct_GS_X_set)
    GS_Y = property(_pnpsll.GOAtomsStruct_GS_Y_get, _pnpsll.GOAtomsStruct_GS_Y_set)
    GS_Z = property(_pnpsll.GOAtomsStruct_GS_Z_get, _pnpsll.GOAtomsStruct_GS_Z_set)
    Natoms = property(_pnpsll.GOAtomsStruct_Natoms_get, _pnpsll.GOAtomsStruct_Natoms_set)
    r = property(_pnpsll.GOAtomsStruct_r_get, _pnpsll.GOAtomsStruct_r_set)
    R = property(_pnpsll.GOAtomsStruct_R_get, _pnpsll.GOAtomsStruct_R_set)
    q = property(_pnpsll.GOAtomsStruct_q_get, _pnpsll.GOAtomsStruct_q_set)
    Rsmoth = property(_pnpsll.GOAtomsStruct_Rsmoth_get, _pnpsll.GOAtomsStruct_Rsmoth_set)
    iDiel = property(_pnpsll.GOAtomsStruct_iDiel_get, _pnpsll.GOAtomsStruct_iDiel_set)
    iDielBulk = property(_pnpsll.GOAtomsStruct_iDielBulk_get, _pnpsll.GOAtomsStruct_iDielBulk_set)
    Surf = property(_pnpsll.GOAtomsStruct_Surf_get, _pnpsll.GOAtomsStruct_Surf_set)
    iVtmp = property(_pnpsll.GOAtomsStruct_iVtmp_get, _pnpsll.GOAtomsStruct_iVtmp_set)

    def __init__(self):
        _pnpsll.GOAtomsStruct_swiginit(self, _pnpsll.new_GOAtomsStruct())
    __swig_destroy__ = _pnpsll.delete_GOAtomsStruct

# Register GOAtomsStruct in _pnpsll:
_pnpsll.GOAtomsStruct_swigregister(GOAtomsStruct)


def GOAtomsStruct_Create(GS_X: "int", GS_Y: "int", GS_Z: "int", Natoms: "int", Rsmoth: "float") -> "GOAtomsStruct *":
    return _pnpsll.GOAtomsStruct_Create(GS_X, GS_Y, GS_Z, Natoms, Rsmoth)

def GOAtomsStruct_Delete(goatoms: "GOAtomsStruct") -> "GOAtomsStruct *":
    return _pnpsll.GOAtomsStruct_Delete(goatoms)
POISSON_SOLVER_CONVERGENCE_CHECK = _pnpsll.POISSON_SOLVER_CONVERGENCE_CHECK
POISSON_SOLVER_CHARGED_POINT = _pnpsll.POISSON_SOLVER_CHARGED_POINT
POISSON_SOLVER_UNCOMMON_DIELECTRIC_POINT = _pnpsll.POISSON_SOLVER_UNCOMMON_DIELECTRIC_POINT
POISSON_SOLVER_CHARGED_UNCOMMON_DIELECTRIC_POINT = _pnpsll.POISSON_SOLVER_CHARGED_UNCOMMON_DIELECTRIC_POINT
class PoissonSolverDataW(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    borderPoints = property(_pnpsll.PoissonSolverDataW_borderPoints_get, _pnpsll.PoissonSolverDataW_borderPoints_set)
    om2InverseDielectricSum = property(_pnpsll.PoissonSolverDataW_om2InverseDielectricSum_get, _pnpsll.PoissonSolverDataW_om2InverseDielectricSum_set)
    typeOfBorderPoint = property(_pnpsll.PoissonSolverDataW_typeOfBorderPoint_get, _pnpsll.PoissonSolverDataW_typeOfBorderPoint_set)
    maxIterations = property(_pnpsll.PoissonSolverDataW_maxIterations_get, _pnpsll.PoissonSolverDataW_maxIterations_set)
    convergence = property(_pnpsll.PoissonSolverDataW_convergence_get, _pnpsll.PoissonSolverDataW_convergence_set)
    relaxation = property(_pnpsll.PoissonSolverDataW_relaxation_get, _pnpsll.PoissonSolverDataW_relaxation_set)
    hasDynamicCharges = property(_pnpsll.PoissonSolverDataW_hasDynamicCharges_get, _pnpsll.PoissonSolverDataW_hasDynamicCharges_set)

    def __init__(self):
        _pnpsll.PoissonSolverDataW_swiginit(self, _pnpsll.new_PoissonSolverDataW())
    __swig_destroy__ = _pnpsll.delete_PoissonSolverDataW

# Register PoissonSolverDataW in _pnpsll:
_pnpsll.PoissonSolverDataW_swigregister(PoissonSolverDataW)

class PoissonSolver(GenericSolver, PnpsObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pnpsll.PoissonSolver_swiginit(self, _pnpsll.new_PoissonSolver())
    __swig_destroy__ = _pnpsll.delete_PoissonSolver

    def InitZero(self) -> "int":
        return _pnpsll.PoissonSolver_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.PoissonSolver_Clear(self)
    Auto = _pnpsll.PoissonSolver_Auto
    NodeIndexBased = _pnpsll.PoissonSolver_NodeIndexBased
    ArrayDirect = _pnpsll.PoissonSolver_ArrayDirect
    PNPC = _pnpsll.PoissonSolver_PNPC
    solver = property(_pnpsll.PoissonSolver_solver_get, _pnpsll.PoissonSolver_solver_set)
    MaxIterations = property(_pnpsll.PoissonSolver_MaxIterations_get, _pnpsll.PoissonSolver_MaxIterations_set)
    MinIterations = property(_pnpsll.PoissonSolver_MinIterations_get, _pnpsll.PoissonSolver_MinIterations_set)
    ConvergenceCheck = property(_pnpsll.PoissonSolver_ConvergenceCheck_get, _pnpsll.PoissonSolver_ConvergenceCheck_set)
    Convergence = property(_pnpsll.PoissonSolver_Convergence_get, _pnpsll.PoissonSolver_Convergence_set)
    Relaxation = property(_pnpsll.PoissonSolver_Relaxation_get, _pnpsll.PoissonSolver_Relaxation_set)
    QmobMod = property(_pnpsll.PoissonSolver_QmobMod_get, _pnpsll.PoissonSolver_QmobMod_set)
    verbose = property(_pnpsll.PoissonSolver_verbose_get, _pnpsll.PoissonSolver_verbose_set)
    totalChange = property(_pnpsll.PoissonSolver_totalChange_get, _pnpsll.PoissonSolver_totalChange_set)
    relativeChange = property(_pnpsll.PoissonSolver_relativeChange_get, _pnpsll.PoissonSolver_relativeChange_set)
    totalEnergy = property(_pnpsll.PoissonSolver_totalEnergy_get, _pnpsll.PoissonSolver_totalEnergy_set)
    totalEnergyInd = property(_pnpsll.PoissonSolver_totalEnergyInd_get, _pnpsll.PoissonSolver_totalEnergyInd_set)
    ConvFac = property(_pnpsll.PoissonSolver_ConvFac_get, _pnpsll.PoissonSolver_ConvFac_set)
    WayToCalcSystemEnergy = property(_pnpsll.PoissonSolver_WayToCalcSystemEnergy_get, _pnpsll.PoissonSolver_WayToCalcSystemEnergy_set)
    ConvFacMaxHistory = property(_pnpsll.PoissonSolver_ConvFacMaxHistory_get, _pnpsll.PoissonSolver_ConvFacMaxHistory_set)
    World = property(_pnpsll.PoissonSolver_World_get, _pnpsll.PoissonSolver_World_set)
    NoSingularNum = property(_pnpsll.PoissonSolver_NoSingularNum_get, _pnpsll.PoissonSolver_NoSingularNum_set)
    IndexNoSingular = property(_pnpsll.PoissonSolver_IndexNoSingular_get, _pnpsll.PoissonSolver_IndexNoSingular_set)
    SingularNum = property(_pnpsll.PoissonSolver_SingularNum_get, _pnpsll.PoissonSolver_SingularNum_set)
    IndexSingular = property(_pnpsll.PoissonSolver_IndexSingular_get, _pnpsll.PoissonSolver_IndexSingular_set)
    dielectricXS = property(_pnpsll.PoissonSolver_dielectricXS_get, _pnpsll.PoissonSolver_dielectricXS_set)
    dielectricYS = property(_pnpsll.PoissonSolver_dielectricYS_get, _pnpsll.PoissonSolver_dielectricYS_set)
    dielectricZS = property(_pnpsll.PoissonSolver_dielectricZS_get, _pnpsll.PoissonSolver_dielectricZS_set)
    dielectricZSSUM = property(_pnpsll.PoissonSolver_dielectricZSSUM_get, _pnpsll.PoissonSolver_dielectricZSSUM_set)
    dielectricXmS = property(_pnpsll.PoissonSolver_dielectricXmS_get, _pnpsll.PoissonSolver_dielectricXmS_set)
    dielectricYmS = property(_pnpsll.PoissonSolver_dielectricYmS_get, _pnpsll.PoissonSolver_dielectricYmS_set)
    dielectricZmS = property(_pnpsll.PoissonSolver_dielectricZmS_get, _pnpsll.PoissonSolver_dielectricZmS_set)
    QstS = property(_pnpsll.PoissonSolver_QstS_get, _pnpsll.PoissonSolver_QstS_set)
    PhiSingular = property(_pnpsll.PoissonSolver_PhiSingular_get, _pnpsll.PoissonSolver_PhiSingular_set)
    DielBoarderNum = property(_pnpsll.PoissonSolver_DielBoarderNum_get, _pnpsll.PoissonSolver_DielBoarderNum_set)
    IndexDielBoarder = property(_pnpsll.PoissonSolver_IndexDielBoarder_get, _pnpsll.PoissonSolver_IndexDielBoarder_set)
    dielectricXDB = property(_pnpsll.PoissonSolver_dielectricXDB_get, _pnpsll.PoissonSolver_dielectricXDB_set)
    dielectricYDB = property(_pnpsll.PoissonSolver_dielectricYDB_get, _pnpsll.PoissonSolver_dielectricYDB_set)
    dielectricZDB = property(_pnpsll.PoissonSolver_dielectricZDB_get, _pnpsll.PoissonSolver_dielectricZDB_set)
    dielectricZDBSUM = property(_pnpsll.PoissonSolver_dielectricZDBSUM_get, _pnpsll.PoissonSolver_dielectricZDBSUM_set)
    dielectricXmDB = property(_pnpsll.PoissonSolver_dielectricXmDB_get, _pnpsll.PoissonSolver_dielectricXmDB_set)
    dielectricYmDB = property(_pnpsll.PoissonSolver_dielectricYmDB_get, _pnpsll.PoissonSolver_dielectricYmDB_set)
    dielectricZmDB = property(_pnpsll.PoissonSolver_dielectricZmDB_get, _pnpsll.PoissonSolver_dielectricZmDB_set)
    ChargeNum = property(_pnpsll.PoissonSolver_ChargeNum_get, _pnpsll.PoissonSolver_ChargeNum_set)
    IndexCharge = property(_pnpsll.PoissonSolver_IndexCharge_get, _pnpsll.PoissonSolver_IndexCharge_set)
    dielectricCh = property(_pnpsll.PoissonSolver_dielectricCh_get, _pnpsll.PoissonSolver_dielectricCh_set)
    Qst = property(_pnpsll.PoissonSolver_Qst_get, _pnpsll.PoissonSolver_Qst_set)
    PhiCharge = property(_pnpsll.PoissonSolver_PhiCharge_get, _pnpsll.PoissonSolver_PhiCharge_set)
    ChargeSum = property(_pnpsll.PoissonSolver_ChargeSum_get, _pnpsll.PoissonSolver_ChargeSum_set)
    NoSingular = _pnpsll.PoissonSolver_NoSingular
    Boarder = _pnpsll.PoissonSolver_Boarder
    Charge = _pnpsll.PoissonSolver_Charge
    DielBoarder = _pnpsll.PoissonSolver_DielBoarder
    ChargeAndDielBoarder = _pnpsll.PoissonSolver_ChargeAndDielBoarder
    Singular = _pnpsll.PoissonSolver_Singular
    QmobNum = property(_pnpsll.PoissonSolver_QmobNum_get, _pnpsll.PoissonSolver_QmobNum_set)
    IndexQmob = property(_pnpsll.PoissonSolver_IndexQmob_get, _pnpsll.PoissonSolver_IndexQmob_set)
    Qmob = property(_pnpsll.PoissonSolver_Qmob_get, _pnpsll.PoissonSolver_Qmob_set)
    dielectricChMob = property(_pnpsll.PoissonSolver_dielectricChMob_get, _pnpsll.PoissonSolver_dielectricChMob_set)
    CalcVolume = property(_pnpsll.PoissonSolver_CalcVolume_get, _pnpsll.PoissonSolver_CalcVolume_set)
    QmobDielBoarderNum = property(_pnpsll.PoissonSolver_QmobDielBoarderNum_get, _pnpsll.PoissonSolver_QmobDielBoarderNum_set)
    IndexQmobDielBoarder = property(_pnpsll.PoissonSolver_IndexQmobDielBoarder_get, _pnpsll.PoissonSolver_IndexQmobDielBoarder_set)
    QmobDielBoarder = property(_pnpsll.PoissonSolver_QmobDielBoarder_get, _pnpsll.PoissonSolver_QmobDielBoarder_set)
    dielectricXQmobDB = property(_pnpsll.PoissonSolver_dielectricXQmobDB_get, _pnpsll.PoissonSolver_dielectricXQmobDB_set)
    dielectricYQmobDB = property(_pnpsll.PoissonSolver_dielectricYQmobDB_get, _pnpsll.PoissonSolver_dielectricYQmobDB_set)
    dielectricZQmobDB = property(_pnpsll.PoissonSolver_dielectricZQmobDB_get, _pnpsll.PoissonSolver_dielectricZQmobDB_set)
    dielectricXmQmobDB = property(_pnpsll.PoissonSolver_dielectricXmQmobDB_get, _pnpsll.PoissonSolver_dielectricXmQmobDB_set)
    dielectricYmQmobDB = property(_pnpsll.PoissonSolver_dielectricYmQmobDB_get, _pnpsll.PoissonSolver_dielectricYmQmobDB_set)
    dielectricZmQmobDB = property(_pnpsll.PoissonSolver_dielectricZmQmobDB_get, _pnpsll.PoissonSolver_dielectricZmQmobDB_set)
    dielectricZQmobDBSUM = property(_pnpsll.PoissonSolver_dielectricZQmobDBSUM_get, _pnpsll.PoissonSolver_dielectricZQmobDBSUM_set)
    QmobDielBoarderQstNum = property(_pnpsll.PoissonSolver_QmobDielBoarderQstNum_get, _pnpsll.PoissonSolver_QmobDielBoarderQstNum_set)
    IndexQmobDielBoarderQst = property(_pnpsll.PoissonSolver_IndexQmobDielBoarderQst_get, _pnpsll.PoissonSolver_IndexQmobDielBoarderQst_set)
    QmobDielBoarderQst = property(_pnpsll.PoissonSolver_QmobDielBoarderQst_get, _pnpsll.PoissonSolver_QmobDielBoarderQst_set)
    QstQmobDielBoarderQst = property(_pnpsll.PoissonSolver_QstQmobDielBoarderQst_get, _pnpsll.PoissonSolver_QstQmobDielBoarderQst_set)
    dielectricXQmobDBQst = property(_pnpsll.PoissonSolver_dielectricXQmobDBQst_get, _pnpsll.PoissonSolver_dielectricXQmobDBQst_set)
    dielectricYQmobDBQst = property(_pnpsll.PoissonSolver_dielectricYQmobDBQst_get, _pnpsll.PoissonSolver_dielectricYQmobDBQst_set)
    dielectricZQmobDBQst = property(_pnpsll.PoissonSolver_dielectricZQmobDBQst_get, _pnpsll.PoissonSolver_dielectricZQmobDBQst_set)
    dielectricXmQmobDBQst = property(_pnpsll.PoissonSolver_dielectricXmQmobDBQst_get, _pnpsll.PoissonSolver_dielectricXmQmobDBQst_set)
    dielectricYmQmobDBQst = property(_pnpsll.PoissonSolver_dielectricYmQmobDBQst_get, _pnpsll.PoissonSolver_dielectricYmQmobDBQst_set)
    dielectricZmQmobDBQst = property(_pnpsll.PoissonSolver_dielectricZmQmobDBQst_get, _pnpsll.PoissonSolver_dielectricZmQmobDBQst_set)
    dielectricZQmobDBSUMQst = property(_pnpsll.PoissonSolver_dielectricZQmobDBSUMQst_get, _pnpsll.PoissonSolver_dielectricZQmobDBSUMQst_set)
    poissonSolverData = property(_pnpsll.PoissonSolver_poissonSolverData_get, _pnpsll.PoissonSolver_poissonSolverData_set)

    def LoadParamFromPyDict(self, dict: "PyObject *") -> "int":
        return _pnpsll.PoissonSolver_LoadParamFromPyDict(self, dict)

    def SetContWorld(self, _world: "ContWorld") -> "int":
        return _pnpsll.PoissonSolver_SetContWorld(self, _world)

    def InitSolver(self) -> "int":
        return _pnpsll.PoissonSolver_InitSolver(self)

    def InitSolverNIB(self) -> "int":
        return _pnpsll.PoissonSolver_InitSolverNIB(self)

    def InitSolverW(self) -> "int":
        return _pnpsll.PoissonSolver_InitSolverW(self)

    def InitSolverAD(self) -> "int":
        return _pnpsll.PoissonSolver_InitSolverAD(self)

    def SetQmobForPNP(self) -> "int":
        return _pnpsll.PoissonSolver_SetQmobForPNP(self)

    def SetQmobFromConcentration(self) -> "int":
        return _pnpsll.PoissonSolver_SetQmobFromConcentration(self)

    def SetQmobFromConcentrationDouble(self) -> "int":
        return _pnpsll.PoissonSolver_SetQmobFromConcentrationDouble(self)

    def Solve(self) -> "int":
        return _pnpsll.PoissonSolver_Solve(self)

    def PoissonSolverNIB(self, ckenergy: "bool"=True) -> "int":
        return _pnpsll.PoissonSolver_PoissonSolverNIB(self, ckenergy)

    def PoissonSolverAD(self) -> "int":
        return _pnpsll.PoissonSolver_PoissonSolverAD(self)

    def PoissonSolverW(self) -> "int":
        return _pnpsll.PoissonSolver_PoissonSolverW(self)

    def CalcSystemEnergy(self, iteration: "int") -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergy(self, iteration)

    def CalcSystemEnergyFloat(self, iteration: "int") -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergyFloat(self, iteration)

    def CalcSystemEnergyDouble(self, iteration: "int") -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergyDouble(self, iteration)

    def CalcSystemEnergyLongDouble(self, iteration: "int") -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergyLongDouble(self, iteration)

    def CalcSystemEnergyAnalizer(self, iteration: "int") -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergyAnalizer(self, iteration)

    def CalcSystemEnergy0(self, iteration: "int") -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergy0(self, iteration)

    def CalcSystemEnergy1(self, iteration: "int") -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergy1(self, iteration)

    def CalcSystemEnergy3(self, iteration: "int") -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergy3(self, iteration)

    def CalcSystemEnergyMaxPhiChange(self, iteration: "int") -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergyMaxPhiChange(self, iteration)

    def CalcSystemEnergyStdDevPhi(self, iteration: "int") -> "int":
        return _pnpsll.PoissonSolver_CalcSystemEnergyStdDevPhi(self, iteration)

    def CalculateEnergyPAD(self, fpoh: "float", Potential: "float *", StaticCharge: "float *", Epsilon: "float *", IndexCharge: "int *", IndexSingular: "int *", ChargeNum: "int", SingularNum: "int") -> "float":
        return _pnpsll.PoissonSolver_CalculateEnergyPAD(self, fpoh, Potential, StaticCharge, Epsilon, IndexCharge, IndexSingular, ChargeNum, SingularNum)

    def ShowParameters(self) -> "int":
        return _pnpsll.PoissonSolver_ShowParameters(self)

    def ShowProperties(self) -> "int":
        return _pnpsll.PoissonSolver_ShowProperties(self)

# Register PoissonSolver in _pnpsll:
_pnpsll.PoissonSolver_swigregister(PoissonSolver)

class PoissonBoltzmannSolver(GenericSolver, PnpsObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pnpsll.PoissonBoltzmannSolver_swiginit(self, _pnpsll.new_PoissonBoltzmannSolver())
    __swig_destroy__ = _pnpsll.delete_PoissonBoltzmannSolver

    def InitZero(self) -> "int":
        return _pnpsll.PoissonBoltzmannSolver_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.PoissonBoltzmannSolver_Clear(self)
    Auto = _pnpsll.PoissonBoltzmannSolver_Auto
    NodeIndexBased = _pnpsll.PoissonBoltzmannSolver_NodeIndexBased
    ArrayDirect = _pnpsll.PoissonBoltzmannSolver_ArrayDirect
    solver = property(_pnpsll.PoissonBoltzmannSolver_solver_get, _pnpsll.PoissonBoltzmannSolver_solver_set)
    MaxIterationsLPB = property(_pnpsll.PoissonBoltzmannSolver_MaxIterationsLPB_get, _pnpsll.PoissonBoltzmannSolver_MaxIterationsLPB_set)
    MaxIterationsNPB = property(_pnpsll.PoissonBoltzmannSolver_MaxIterationsNPB_get, _pnpsll.PoissonBoltzmannSolver_MaxIterationsNPB_set)
    ConvergenceCheck = property(_pnpsll.PoissonBoltzmannSolver_ConvergenceCheck_get, _pnpsll.PoissonBoltzmannSolver_ConvergenceCheck_set)
    Convergence = property(_pnpsll.PoissonBoltzmannSolver_Convergence_get, _pnpsll.PoissonBoltzmannSolver_Convergence_set)
    Relaxation = property(_pnpsll.PoissonBoltzmannSolver_Relaxation_get, _pnpsll.PoissonBoltzmannSolver_Relaxation_set)
    verbose = property(_pnpsll.PoissonBoltzmannSolver_verbose_get, _pnpsll.PoissonBoltzmannSolver_verbose_set)
    totalChange = property(_pnpsll.PoissonBoltzmannSolver_totalChange_get, _pnpsll.PoissonBoltzmannSolver_totalChange_set)
    relativeChange = property(_pnpsll.PoissonBoltzmannSolver_relativeChange_get, _pnpsll.PoissonBoltzmannSolver_relativeChange_set)
    totalEnergy = property(_pnpsll.PoissonBoltzmannSolver_totalEnergy_get, _pnpsll.PoissonBoltzmannSolver_totalEnergy_set)
    totalEnergyInd = property(_pnpsll.PoissonBoltzmannSolver_totalEnergyInd_get, _pnpsll.PoissonBoltzmannSolver_totalEnergyInd_set)
    ConvFac = property(_pnpsll.PoissonBoltzmannSolver_ConvFac_get, _pnpsll.PoissonBoltzmannSolver_ConvFac_set)
    m_ContWorld = property(_pnpsll.PoissonBoltzmannSolver_m_ContWorld_get, _pnpsll.PoissonBoltzmannSolver_m_ContWorld_set)
    NoSingularNum = property(_pnpsll.PoissonBoltzmannSolver_NoSingularNum_get, _pnpsll.PoissonBoltzmannSolver_NoSingularNum_set)
    IndexNoSingular = property(_pnpsll.PoissonBoltzmannSolver_IndexNoSingular_get, _pnpsll.PoissonBoltzmannSolver_IndexNoSingular_set)
    SingularNum = property(_pnpsll.PoissonBoltzmannSolver_SingularNum_get, _pnpsll.PoissonBoltzmannSolver_SingularNum_set)
    IndexSingular = property(_pnpsll.PoissonBoltzmannSolver_IndexSingular_get, _pnpsll.PoissonBoltzmannSolver_IndexSingular_set)
    dielectricXS = property(_pnpsll.PoissonBoltzmannSolver_dielectricXS_get, _pnpsll.PoissonBoltzmannSolver_dielectricXS_set)
    dielectricYS = property(_pnpsll.PoissonBoltzmannSolver_dielectricYS_get, _pnpsll.PoissonBoltzmannSolver_dielectricYS_set)
    dielectricZS = property(_pnpsll.PoissonBoltzmannSolver_dielectricZS_get, _pnpsll.PoissonBoltzmannSolver_dielectricZS_set)
    dielectricZSSUM = property(_pnpsll.PoissonBoltzmannSolver_dielectricZSSUM_get, _pnpsll.PoissonBoltzmannSolver_dielectricZSSUM_set)
    dielectricXmS = property(_pnpsll.PoissonBoltzmannSolver_dielectricXmS_get, _pnpsll.PoissonBoltzmannSolver_dielectricXmS_set)
    dielectricYmS = property(_pnpsll.PoissonBoltzmannSolver_dielectricYmS_get, _pnpsll.PoissonBoltzmannSolver_dielectricYmS_set)
    dielectricZmS = property(_pnpsll.PoissonBoltzmannSolver_dielectricZmS_get, _pnpsll.PoissonBoltzmannSolver_dielectricZmS_set)
    QstS = property(_pnpsll.PoissonBoltzmannSolver_QstS_get, _pnpsll.PoissonBoltzmannSolver_QstS_set)
    PhiSingular = property(_pnpsll.PoissonBoltzmannSolver_PhiSingular_get, _pnpsll.PoissonBoltzmannSolver_PhiSingular_set)
    DielBoarderNum = property(_pnpsll.PoissonBoltzmannSolver_DielBoarderNum_get, _pnpsll.PoissonBoltzmannSolver_DielBoarderNum_set)
    IndexDielBoarder = property(_pnpsll.PoissonBoltzmannSolver_IndexDielBoarder_get, _pnpsll.PoissonBoltzmannSolver_IndexDielBoarder_set)
    dielectricXDB = property(_pnpsll.PoissonBoltzmannSolver_dielectricXDB_get, _pnpsll.PoissonBoltzmannSolver_dielectricXDB_set)
    dielectricYDB = property(_pnpsll.PoissonBoltzmannSolver_dielectricYDB_get, _pnpsll.PoissonBoltzmannSolver_dielectricYDB_set)
    dielectricZDB = property(_pnpsll.PoissonBoltzmannSolver_dielectricZDB_get, _pnpsll.PoissonBoltzmannSolver_dielectricZDB_set)
    dielectricZDBSUM = property(_pnpsll.PoissonBoltzmannSolver_dielectricZDBSUM_get, _pnpsll.PoissonBoltzmannSolver_dielectricZDBSUM_set)
    dielectricXmDB = property(_pnpsll.PoissonBoltzmannSolver_dielectricXmDB_get, _pnpsll.PoissonBoltzmannSolver_dielectricXmDB_set)
    dielectricYmDB = property(_pnpsll.PoissonBoltzmannSolver_dielectricYmDB_get, _pnpsll.PoissonBoltzmannSolver_dielectricYmDB_set)
    dielectricZmDB = property(_pnpsll.PoissonBoltzmannSolver_dielectricZmDB_get, _pnpsll.PoissonBoltzmannSolver_dielectricZmDB_set)
    ChargeNum = property(_pnpsll.PoissonBoltzmannSolver_ChargeNum_get, _pnpsll.PoissonBoltzmannSolver_ChargeNum_set)
    IndexCharge = property(_pnpsll.PoissonBoltzmannSolver_IndexCharge_get, _pnpsll.PoissonBoltzmannSolver_IndexCharge_set)
    dielectricCh = property(_pnpsll.PoissonBoltzmannSolver_dielectricCh_get, _pnpsll.PoissonBoltzmannSolver_dielectricCh_set)
    Qst = property(_pnpsll.PoissonBoltzmannSolver_Qst_get, _pnpsll.PoissonBoltzmannSolver_Qst_set)
    PhiCharge = property(_pnpsll.PoissonBoltzmannSolver_PhiCharge_get, _pnpsll.PoissonBoltzmannSolver_PhiCharge_set)
    PBZoneNum = property(_pnpsll.PoissonBoltzmannSolver_PBZoneNum_get, _pnpsll.PoissonBoltzmannSolver_PBZoneNum_set)
    IndexPBZone = property(_pnpsll.PoissonBoltzmannSolver_IndexPBZone_get, _pnpsll.PoissonBoltzmannSolver_IndexPBZone_set)
    om2d6LPB = property(_pnpsll.PoissonBoltzmannSolver_om2d6LPB_get, _pnpsll.PoissonBoltzmannSolver_om2d6LPB_set)
    IonicStrength = property(_pnpsll.PoissonBoltzmannSolver_IonicStrength_get, _pnpsll.PoissonBoltzmannSolver_IonicStrength_set)
    NoSingular = _pnpsll.PoissonBoltzmannSolver_NoSingular
    Boarder = _pnpsll.PoissonBoltzmannSolver_Boarder
    Charge = _pnpsll.PoissonBoltzmannSolver_Charge
    DielBoarder = _pnpsll.PoissonBoltzmannSolver_DielBoarder
    ChargeAndDielBoarder = _pnpsll.PoissonBoltzmannSolver_ChargeAndDielBoarder
    Singular = _pnpsll.PoissonBoltzmannSolver_Singular
    GS_X = property(_pnpsll.PoissonBoltzmannSolver_GS_X_get, _pnpsll.PoissonBoltzmannSolver_GS_X_set)
    GS_Y = property(_pnpsll.PoissonBoltzmannSolver_GS_Y_get, _pnpsll.PoissonBoltzmannSolver_GS_Y_set)
    GS_Z = property(_pnpsll.PoissonBoltzmannSolver_GS_Z_get, _pnpsll.PoissonBoltzmannSolver_GS_Z_set)
    GS_XY = property(_pnpsll.PoissonBoltzmannSolver_GS_XY_get, _pnpsll.PoissonBoltzmannSolver_GS_XY_set)
    GS_XYZ = property(_pnpsll.PoissonBoltzmannSolver_GS_XYZ_get, _pnpsll.PoissonBoltzmannSolver_GS_XYZ_set)
    GridScale = property(_pnpsll.PoissonBoltzmannSolver_GridScale_get, _pnpsll.PoissonBoltzmannSolver_GridScale_set)
    potential = property(_pnpsll.PoissonBoltzmannSolver_potential_get, _pnpsll.PoissonBoltzmannSolver_potential_set)
    om2 = property(_pnpsll.PoissonBoltzmannSolver_om2_get, _pnpsll.PoissonBoltzmannSolver_om2_set)
    om1 = property(_pnpsll.PoissonBoltzmannSolver_om1_get, _pnpsll.PoissonBoltzmannSolver_om1_set)
    om2d6 = property(_pnpsll.PoissonBoltzmannSolver_om2d6_get, _pnpsll.PoissonBoltzmannSolver_om2d6_set)

    def GuessNumberOfIteration(self) -> "int":
        return _pnpsll.PoissonBoltzmannSolver_GuessNumberOfIteration(self)

    def SetRelaxation(self, _Relaxation: "float") -> "int":
        return _pnpsll.PoissonBoltzmannSolver_SetRelaxation(self, _Relaxation)

    def SetContWorld(self, _world: "ContWorld") -> "int":
        return _pnpsll.PoissonBoltzmannSolver_SetContWorld(self, _world)

    def InitSolver(self) -> "int":
        return _pnpsll.PoissonBoltzmannSolver_InitSolver(self)

    def InitSolverNIB(self) -> "int":
        return _pnpsll.PoissonBoltzmannSolver_InitSolverNIB(self)

    def Solve(self) -> "int":
        return _pnpsll.PoissonBoltzmannSolver_Solve(self)

    def LinearPBSolverNIB(self, Niter: "int") -> "int":
        return _pnpsll.PoissonBoltzmannSolver_LinearPBSolverNIB(self, Niter)

    def NonlinearPBSolverNIB(self, Niter: "int") -> "int":
        return _pnpsll.PoissonBoltzmannSolver_NonlinearPBSolverNIB(self, Niter)

    def CalcSystemEnergy(self, iteration: "int") -> "int":
        return _pnpsll.PoissonBoltzmannSolver_CalcSystemEnergy(self, iteration)

    def CalcSystemEnergyStdDevPhi(self, iteration: "int") -> "int":
        return _pnpsll.PoissonBoltzmannSolver_CalcSystemEnergyStdDevPhi(self, iteration)

    def ShowParameters(self) -> "int":
        return _pnpsll.PoissonBoltzmannSolver_ShowParameters(self)

    def ShowProperties(self) -> "int":
        return _pnpsll.PoissonBoltzmannSolver_ShowProperties(self)

# Register PoissonBoltzmannSolver in _pnpsll:
_pnpsll.PoissonBoltzmannSolver_swigregister(PoissonBoltzmannSolver)

class PoissonNernstPlanckSolver(PnpsObject, GenericSolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pnpsll.PoissonNernstPlanckSolver_swiginit(self, _pnpsll.new_PoissonNernstPlanckSolver())
    __swig_destroy__ = _pnpsll.delete_PoissonNernstPlanckSolver

    def InitZero(self) -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_Clear(self)
    MaxIterations = property(_pnpsll.PoissonNernstPlanckSolver_MaxIterations_get, _pnpsll.PoissonNernstPlanckSolver_MaxIterations_set)
    ConvergenceCheck = property(_pnpsll.PoissonNernstPlanckSolver_ConvergenceCheck_get, _pnpsll.PoissonNernstPlanckSolver_ConvergenceCheck_set)
    tolerance = property(_pnpsll.PoissonNernstPlanckSolver_tolerance_get, _pnpsll.PoissonNernstPlanckSolver_tolerance_set)
    currentDimension = property(_pnpsll.PoissonNernstPlanckSolver_currentDimension_get, _pnpsll.PoissonNernstPlanckSolver_currentDimension_set)
    verbose = property(_pnpsll.PoissonNernstPlanckSolver_verbose_get, _pnpsll.PoissonNernstPlanckSolver_verbose_set)
    PMFWeightMode = property(_pnpsll.PoissonNernstPlanckSolver_PMFWeightMode_get, _pnpsll.PoissonNernstPlanckSolver_PMFWeightMode_set)
    PMFWeightModeStr = property(_pnpsll.PoissonNernstPlanckSolver_PMFWeightModeStr_get, _pnpsll.PoissonNernstPlanckSolver_PMFWeightModeStr_set)
    Itot = property(_pnpsll.PoissonNernstPlanckSolver_Itot_get, _pnpsll.PoissonNernstPlanckSolver_Itot_set)
    Ipos = property(_pnpsll.PoissonNernstPlanckSolver_Ipos_get, _pnpsll.PoissonNernstPlanckSolver_Ipos_set)
    Ineg = property(_pnpsll.PoissonNernstPlanckSolver_Ineg_get, _pnpsll.PoissonNernstPlanckSolver_Ineg_set)
    ItotErr = property(_pnpsll.PoissonNernstPlanckSolver_ItotErr_get, _pnpsll.PoissonNernstPlanckSolver_ItotErr_set)
    IposErr = property(_pnpsll.PoissonNernstPlanckSolver_IposErr_get, _pnpsll.PoissonNernstPlanckSolver_IposErr_set)
    InegErr = property(_pnpsll.PoissonNernstPlanckSolver_InegErr_get, _pnpsll.PoissonNernstPlanckSolver_InegErr_set)
    positiveCurrentProfile = property(_pnpsll.PoissonNernstPlanckSolver_positiveCurrentProfile_get, _pnpsll.PoissonNernstPlanckSolver_positiveCurrentProfile_set)
    negativeCurrentProfile = property(_pnpsll.PoissonNernstPlanckSolver_negativeCurrentProfile_get, _pnpsll.PoissonNernstPlanckSolver_negativeCurrentProfile_set)
    bLimitCurrentCalc = property(_pnpsll.PoissonNernstPlanckSolver_bLimitCurrentCalc_get, _pnpsll.PoissonNernstPlanckSolver_bLimitCurrentCalc_set)
    LimitCurrentCalcZ = property(_pnpsll.PoissonNernstPlanckSolver_LimitCurrentCalcZ_get, _pnpsll.PoissonNernstPlanckSolver_LimitCurrentCalcZ_set)
    SaveMemory = property(_pnpsll.PoissonNernstPlanckSolver_SaveMemory_get, _pnpsll.PoissonNernstPlanckSolver_SaveMemory_set)
    bDouble = property(_pnpsll.PoissonNernstPlanckSolver_bDouble_get, _pnpsll.PoissonNernstPlanckSolver_bDouble_set)
    World = property(_pnpsll.PoissonNernstPlanckSolver_World_get, _pnpsll.PoissonNernstPlanckSolver_World_set)
    Poisson = property(_pnpsll.PoissonNernstPlanckSolver_Poisson_get, _pnpsll.PoissonNernstPlanckSolver_Poisson_set)
    NernstPlank = property(_pnpsll.PoissonNernstPlanckSolver_NernstPlank_get, _pnpsll.PoissonNernstPlanckSolver_NernstPlank_set)

    def LoadParamFromPyDict(self, dict: "PyObject *") -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_LoadParamFromPyDict(self, dict)

    def SetContWorld(self, _world: "ContWorld") -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_SetContWorld(self, _world)

    def ShowParameters(self) -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_ShowParameters(self)

    def ShowProperties(self) -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_ShowProperties(self)

    def InitSolver(self) -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_InitSolver(self)

    def Solve(self) -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_Solve(self)

    def SolveSingle(self) -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_SolveSingle(self)

    def SolveDouble(self) -> "int":
        return _pnpsll.PoissonNernstPlanckSolver_SolveDouble(self)

    def CalcCartI(self, ion: "int") -> "VectorField3D *":
        return _pnpsll.PoissonNernstPlanckSolver_CalcCartI(self, ion)

    def CalcIinout(self, CartI: "VectorField3D") -> "VectorField3D *":
        return _pnpsll.PoissonNernstPlanckSolver_CalcIinout(self, CartI)

    def CalcAvrI(self, I: "VectorField3D", iavr: "int") -> "VectorField3D *":
        return _pnpsll.PoissonNernstPlanckSolver_CalcAvrI(self, I, iavr)

# Register PoissonNernstPlanckSolver in _pnpsll:
_pnpsll.PoissonNernstPlanckSolver_swigregister(PoissonNernstPlanckSolver)


def SolvePNPSR(contworld,**kwargs):
	pnps=PoissonNernstPlanckSolver()
	pnps.LoadParamFromPyDict(kwargs);
	pnps.SetContWorld(contworld)
	pnps.InitSolver()
	pnps.Solve()

class PNPUtil(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pnpsll.PNPUtil_swiginit(self, _pnpsll.new_PNPUtil())
    __swig_destroy__ = _pnpsll.delete_PNPUtil

    @staticmethod
    def RemoveLargePMFfromPNP(world: "ContWorld", LargePMF: "float") -> "int":
        return _pnpsll.PNPUtil_RemoveLargePMFfromPNP(world, LargePMF)

    @staticmethod
    def RemoveSmallCfromPNP(world: "ContWorld", SmallC: "float") -> "int":
        return _pnpsll.PNPUtil_RemoveSmallCfromPNP(world, SmallC)

    @staticmethod
    def RemoveSmallCfromPNPNearDiffBoarder(world: "ContWorld", SmallC: "float") -> "int":
        return _pnpsll.PNPUtil_RemoveSmallCfromPNPNearDiffBoarder(world, SmallC)

    @staticmethod
    def RemoveLargedPMFfromPNP(m_ContWorld: "ContWorld", dPMF: "float") -> "int":
        return _pnpsll.PNPUtil_RemoveLargedPMFfromPNP(m_ContWorld, dPMF)

    @staticmethod
    def RemoveLargedPMFandLargePMFfromPNP(m_ContWorld: "ContWorld", dPMF: "float", PMF: "float") -> "int":
        return _pnpsll.PNPUtil_RemoveLargedPMFandLargePMFfromPNP(m_ContWorld, dPMF, PMF)

    @staticmethod
    def RemoveLargedPMFandLargePMFfromPNPOld(m_ContWorld: "ContWorld", dPMF: "float", PMF: "float") -> "int":
        return _pnpsll.PNPUtil_RemoveLargedPMFandLargePMFfromPNPOld(m_ContWorld, dPMF, PMF)

    @staticmethod
    def RemoveCavitiesAtDiffusionMap(m_ContWorld: "ContWorld") -> "int":
        return _pnpsll.PNPUtil_RemoveCavitiesAtDiffusionMap(m_ContWorld)

    @staticmethod
    def ScaleDiffusionInTheChannel(*args) -> "int":
        return _pnpsll.PNPUtil_ScaleDiffusionInTheChannel(*args)

    @staticmethod
    def ConvertPBLJresultsToDynamicCharge(m_ContWorld: "ContWorld") -> "int":
        return _pnpsll.PNPUtil_ConvertPBLJresultsToDynamicCharge(m_ContWorld)

    @staticmethod
    def SetInternalCtoZero(m_ContWorld: "ContWorld") -> "int":
        return _pnpsll.PNPUtil_SetInternalCtoZero(m_ContWorld)

    @staticmethod
    def SetCtoZeroWhereDZero(m_ContWorld: "ContWorld") -> "int":
        return _pnpsll.PNPUtil_SetCtoZeroWhereDZero(m_ContWorld)

    @staticmethod
    def SetDzeroAtEps(m_ContWorld: "ContWorld", iEps: "int") -> "int":
        return _pnpsll.PNPUtil_SetDzeroAtEps(m_ContWorld, iEps)

    @staticmethod
    def SetDZeroWithIndex(_ContWorld: "ContWorld") -> "int":
        return _pnpsll.PNPUtil_SetDZeroWithIndex(_ContWorld)

    @staticmethod
    def RemoveQfromNI(m_ContWorld: "ContWorld") -> "int":
        return _pnpsll.PNPUtil_RemoveQfromNI(m_ContWorld)

    @staticmethod
    def RemoveNodesFromPNPBasedOnNPCriteria(m_ContWorld: "ContWorld", Relaxation: "float", MaxCycles: "int", MaxdC: "float", RemoveNegC: "bool") -> "int":
        return _pnpsll.PNPUtil_RemoveNodesFromPNPBasedOnNPCriteria(m_ContWorld, Relaxation, MaxCycles, MaxdC, RemoveNegC)

# Register PNPUtil in _pnpsll:
_pnpsll.PNPUtil_swigregister(PNPUtil)

def PNPUtil_RemoveLargePMFfromPNP(world: "ContWorld", LargePMF: "float") -> "int":
    return _pnpsll.PNPUtil_RemoveLargePMFfromPNP(world, LargePMF)

def PNPUtil_RemoveSmallCfromPNP(world: "ContWorld", SmallC: "float") -> "int":
    return _pnpsll.PNPUtil_RemoveSmallCfromPNP(world, SmallC)

def PNPUtil_RemoveSmallCfromPNPNearDiffBoarder(world: "ContWorld", SmallC: "float") -> "int":
    return _pnpsll.PNPUtil_RemoveSmallCfromPNPNearDiffBoarder(world, SmallC)

def PNPUtil_RemoveLargedPMFfromPNP(m_ContWorld: "ContWorld", dPMF: "float") -> "int":
    return _pnpsll.PNPUtil_RemoveLargedPMFfromPNP(m_ContWorld, dPMF)

def PNPUtil_RemoveLargedPMFandLargePMFfromPNP(m_ContWorld: "ContWorld", dPMF: "float", PMF: "float") -> "int":
    return _pnpsll.PNPUtil_RemoveLargedPMFandLargePMFfromPNP(m_ContWorld, dPMF, PMF)

def PNPUtil_RemoveLargedPMFandLargePMFfromPNPOld(m_ContWorld: "ContWorld", dPMF: "float", PMF: "float") -> "int":
    return _pnpsll.PNPUtil_RemoveLargedPMFandLargePMFfromPNPOld(m_ContWorld, dPMF, PMF)

def PNPUtil_RemoveCavitiesAtDiffusionMap(m_ContWorld: "ContWorld") -> "int":
    return _pnpsll.PNPUtil_RemoveCavitiesAtDiffusionMap(m_ContWorld)

def PNPUtil_ScaleDiffusionInTheChannel(*args) -> "int":
    return _pnpsll.PNPUtil_ScaleDiffusionInTheChannel(*args)

def PNPUtil_ConvertPBLJresultsToDynamicCharge(m_ContWorld: "ContWorld") -> "int":
    return _pnpsll.PNPUtil_ConvertPBLJresultsToDynamicCharge(m_ContWorld)

def PNPUtil_SetInternalCtoZero(m_ContWorld: "ContWorld") -> "int":
    return _pnpsll.PNPUtil_SetInternalCtoZero(m_ContWorld)

def PNPUtil_SetCtoZeroWhereDZero(m_ContWorld: "ContWorld") -> "int":
    return _pnpsll.PNPUtil_SetCtoZeroWhereDZero(m_ContWorld)

def PNPUtil_SetDzeroAtEps(m_ContWorld: "ContWorld", iEps: "int") -> "int":
    return _pnpsll.PNPUtil_SetDzeroAtEps(m_ContWorld, iEps)

def PNPUtil_SetDZeroWithIndex(_ContWorld: "ContWorld") -> "int":
    return _pnpsll.PNPUtil_SetDZeroWithIndex(_ContWorld)

def PNPUtil_RemoveQfromNI(m_ContWorld: "ContWorld") -> "int":
    return _pnpsll.PNPUtil_RemoveQfromNI(m_ContWorld)

def PNPUtil_RemoveNodesFromPNPBasedOnNPCriteria(m_ContWorld: "ContWorld", Relaxation: "float", MaxCycles: "int", MaxdC: "float", RemoveNegC: "bool") -> "int":
    return _pnpsll.PNPUtil_RemoveNodesFromPNPBasedOnNPCriteria(m_ContWorld, Relaxation, MaxCycles, MaxdC, RemoveNegC)

class NPMaskBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, world: "ContWorld"):
        _pnpsll.NPMaskBuilder_swiginit(self, _pnpsll.new_NPMaskBuilder(world))
    __swig_destroy__ = _pnpsll.delete_NPMaskBuilder

    def CmdNPMaskBuilder(self, Elt: "TiXmlElement const *") -> "int":
        return _pnpsll.NPMaskBuilder_CmdNPMaskBuilder(self, Elt)

    def InitNPMask(self) -> "int":
        return _pnpsll.NPMaskBuilder_InitNPMask(self)

    def SetToNIDiffusion(self) -> "int":
        return _pnpsll.NPMaskBuilder_SetToNIDiffusion(self)

    def RemoveTubeRegion(self, ion: "int", X: "float", Y: "float", Z0: "float", Z1: "float", R0: "float", R2: "float") -> "int":
        return _pnpsll.NPMaskBuilder_RemoveTubeRegion(self, ion, X, Y, Z0, Z1, R0, R2)

    def RemoveHighC(self, HighC: "float") -> "int":
        return _pnpsll.NPMaskBuilder_RemoveHighC(self, HighC)

    def ReadNPMask(self, filename: "char const *") -> "int":
        return _pnpsll.NPMaskBuilder_ReadNPMask(self, filename)

    def WriteNPMask(self, filename: "char const *") -> "int":
        return _pnpsll.NPMaskBuilder_WriteNPMask(self, filename)
    m_ContWorld = property(_pnpsll.NPMaskBuilder_m_ContWorld_get, _pnpsll.NPMaskBuilder_m_ContWorld_set)
    NPMask = property(_pnpsll.NPMaskBuilder_NPMask_get, _pnpsll.NPMaskBuilder_NPMask_set)

# Register NPMaskBuilder in _pnpsll:
_pnpsll.NPMaskBuilder_swigregister(NPMaskBuilder)

class IAVCalc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, world: "ContWorld"):
        _pnpsll.IAVCalc_swiginit(self, _pnpsll.new_IAVCalc(world))
    __swig_destroy__ = _pnpsll.delete_IAVCalc

    def CmdIAVCalcDict(self, dict: "PyObject *") -> "int":
        return _pnpsll.IAVCalc_CmdIAVCalcDict(self, dict)

# Register IAVCalc in _pnpsll:
_pnpsll.IAVCalc_swigregister(IAVCalc)


def RefineIAV(contworld,**kwarg):
	"""
            MaxdC=0.05,
            MaxCycle=100000,
            PBSR_Param={"MaxIterations":100, "Tolerance":2.0e-06, "Relaxation":1.6},
            NP_Param={"Relaxation":1.0}
	"""
	iavcalc=IAVCalc(contworld)
	iavcalc.CmdIAVCalcDict(kwarg)
	del iavcalc
	print("RefineIAV")

BIGDISTANSE = _pnpsll.BIGDISTANSE
class PartialWorldForSAS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GS_X = property(_pnpsll.PartialWorldForSAS_GS_X_get, _pnpsll.PartialWorldForSAS_GS_X_set)
    GS_Y = property(_pnpsll.PartialWorldForSAS_GS_Y_get, _pnpsll.PartialWorldForSAS_GS_Y_set)
    GS_Z = property(_pnpsll.PartialWorldForSAS_GS_Z_get, _pnpsll.PartialWorldForSAS_GS_Z_set)
    GS_XY = property(_pnpsll.PartialWorldForSAS_GS_XY_get, _pnpsll.PartialWorldForSAS_GS_XY_set)
    locGS_Z = property(_pnpsll.PartialWorldForSAS_locGS_Z_get, _pnpsll.PartialWorldForSAS_locGS_Z_set)
    locR0_Z = property(_pnpsll.PartialWorldForSAS_locR0_Z_get, _pnpsll.PartialWorldForSAS_locR0_Z_set)
    Surf = property(_pnpsll.PartialWorldForSAS_Surf_get, _pnpsll.PartialWorldForSAS_Surf_set)
    Field = property(_pnpsll.PartialWorldForSAS_Field_get, _pnpsll.PartialWorldForSAS_Field_set)
    surf_points = property(_pnpsll.PartialWorldForSAS_surf_points_get, _pnpsll.PartialWorldForSAS_surf_points_set)
    Nsurf_points = property(_pnpsll.PartialWorldForSAS_Nsurf_points_get, _pnpsll.PartialWorldForSAS_Nsurf_points_set)

    def __init__(self):
        _pnpsll.PartialWorldForSAS_swiginit(self, _pnpsll.new_PartialWorldForSAS())
    __swig_destroy__ = _pnpsll.delete_PartialWorldForSAS

# Register PartialWorldForSAS in _pnpsll:
_pnpsll.PartialWorldForSAS_swigregister(PartialWorldForSAS)

class GenericGeometricalObject(PnpsObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pnpsll.GenericGeometricalObject_swiginit(self, _pnpsll.new_GenericGeometricalObject(*args))
    __swig_destroy__ = _pnpsll.delete_GenericGeometricalObject

    def Copy(self, GGO: "GenericGeometricalObject") -> "int":
        return _pnpsll.GenericGeometricalObject_Copy(self, GGO)

    def InitZero(self) -> "int":
        return _pnpsll.GenericGeometricalObject_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.GenericGeometricalObject_Clear(self)
    Epsilon = property(_pnpsll.GenericGeometricalObject_Epsilon_get, _pnpsll.GenericGeometricalObject_Epsilon_set)
    NIonsTypes = property(_pnpsll.GenericGeometricalObject_NIonsTypes_get, _pnpsll.GenericGeometricalObject_NIonsTypes_set)
    IonsD = property(_pnpsll.GenericGeometricalObject_IonsD_get, _pnpsll.GenericGeometricalObject_IonsD_set)
    C = property(_pnpsll.GenericGeometricalObject_C_get, _pnpsll.GenericGeometricalObject_C_set)

    def setPar(self, iEps: "int", iD0: "int", iD1: "int", C0: "float", C1: "float"=-1.0) -> "int":
        return _pnpsll.GenericGeometricalObject_setPar(self, iEps, iD0, iD1, C0, C1)

    def Print(self, buildWorld: "BuildWorldNI"=None) -> "int":
        return _pnpsll.GenericGeometricalObject_Print(self, buildWorld)

    def setParam(self,iEps, iD, C, NIonsTypes=None):
    	"""
    	set parameters
    	Input Parameters:
    		iEps = int
    		iD = [float]*NIonsTypes
    		C = float or [float]*NIonsTypes
    	"""
    	m_NIonsTypes=NIonsTypes
    	if m_NIonsTypes!=None:
    		self.NIonsTypes=m_NIonsTypes
    	if m_NIonsTypes==None:
    		if not (type(iD) is list or type(iD) is tuple):
    			print("Error: iD should be list or tuple")
    			return None
    		m_NIonsTypes=len(iD)

    	m_iD=new_intArray(self.NIonsTypes)
    	if type(iD) is list or type(iD) is tuple:
    		for i in range(self.NIonsTypes):intArray_setitem(m_iD,i,iD[i])
    	else:
    		for i in range(self.NIonsTypes):intArray_setitem(m_iD,i,iD)
    	m_C = new_floatArray(self.NIonsTypes)
    	if type(C) is list or type(C) is tuple:
    		for i in range(self.NIonsTypes):floatArray_setitem(m_C,i,C[i])
    	else:
    		for i in range(self.NIonsTypes):floatArray_setitem(m_C,i,C)
    	self.cxxSetParam(iEps,m_NIonsTypes,m_iD,m_C)
    	delete_intArray(m_iD)
    	delete_floatArray(m_C)


    def cxxSetParam(self, iEps: "int", m_NIonsTypes: "int", iD: "int *", m_C: "float *") -> "int":
        return _pnpsll.GenericGeometricalObject_cxxSetParam(self, iEps, m_NIonsTypes, iD, m_C)

    def ChangeUnits(self, world: "ContWorld", ToInternal: "bool") -> "int":
        return _pnpsll.GenericGeometricalObject_ChangeUnits(self, world, ToInternal)

    def BuildPreMaps(self, Builder: "BuildWorldNI", world: "ContWorld", Field: "int *", iValue: "int", iBulkValue: "int", Displ: "float *", Rion: "float", Rsmoth: "float", Surf: "float *", ParmMask: "int") -> "int":
        return _pnpsll.GenericGeometricalObject_BuildPreMaps(self, Builder, world, Field, iValue, iBulkValue, Displ, Rion, Rsmoth, Surf, ParmMask)

    def BuildDistMapsFromAtomsCenter(self, Builder: "BuildWorldNI", world: "ContWorld", Dist: "float *", Rmax: "float", DoNotConsiderAtomsSmallerThen: "float") -> "int":
        return _pnpsll.GenericGeometricalObject_BuildDistMapsFromAtomsCenter(self, Builder, world, Dist, Rmax, DoNotConsiderAtomsSmallerThen)

    def BuildDistMaps(self, Builder: "BuildWorldNI", world: "ContWorld", Field: "int *", iValue: "int", iBulkValue: "int", Displ: "float *", Rion: "float", Rsmoth: "float", Surf: "float *") -> "int":
        return _pnpsll.GenericGeometricalObject_BuildDistMaps(self, Builder, world, Field, iValue, iBulkValue, Displ, Rion, Rsmoth, Surf)

    def BuildPreMapsMemLim(self, pw: "PartialWorldForSAS", iValue: "int", iBulkValue: "int", Displ: "float *", Rion: "float", Rsmoth: "float") -> "int":
        return _pnpsll.GenericGeometricalObject_BuildPreMapsMemLim(self, pw, iValue, iBulkValue, Displ, Rion, Rsmoth)

    def BuildPreMapsCharges(self, Builder: "BuildWorldNI", world: "ContWorld", Field: "float *") -> "int":
        return _pnpsll.GenericGeometricalObject_BuildPreMapsCharges(self, Builder, world, Field)

    def BuildLJRepultionMap(self, Builder: "BuildWorldNI", world: "ContWorld", Ion: "int", V: "float *", LimitVlj: "float") -> "int":
        return _pnpsll.GenericGeometricalObject_BuildLJRepultionMap(self, Builder, world, Ion, V, LimitVlj)

    def SetBoundaryCondition(self, Builder: "BuildWorldNI", world: "ContWorld") -> "int":
        return _pnpsll.GenericGeometricalObject_SetBoundaryCondition(self, Builder, world)

    def RotateGGO(self, n: "double *", cosa: "double", sina: "double") -> "int":
        return _pnpsll.GenericGeometricalObject_RotateGGO(self, n, cosa, sina)

    def RotateVecDouble(self, Rext: "double *", n: "double *", cosa: "double", sina: "double") -> "void":
        return _pnpsll.GenericGeometricalObject_RotateVecDouble(self, Rext, n, cosa, sina)

    def RotateVecFloat(self, Rext: "float *", n: "float *", cosa: "float", sina: "float") -> "void":
        return _pnpsll.GenericGeometricalObject_RotateVecFloat(self, Rext, n, cosa, sina)
    ID_GridBegin = property(_pnpsll.GenericGeometricalObject_ID_GridBegin_get, _pnpsll.GenericGeometricalObject_ID_GridBegin_set)
    ID_GridEnd = property(_pnpsll.GenericGeometricalObject_ID_GridEnd_get, _pnpsll.GenericGeometricalObject_ID_GridEnd_set)

    def SetGridIDs(self, startIDfrom: "int") -> "int":
        return _pnpsll.GenericGeometricalObject_SetGridIDs(self, startIDfrom)

    def GetDistToSurf(self, fx: "float", fy: "float", fz: "float", Ri: "float", Rpr: "float", GridID: "int") -> "float":
        return _pnpsll.GenericGeometricalObject_GetDistToSurf(self, fx, fy, fz, Ri, Rpr, GridID)

    def GetDistSQToUnitCenter(self, fx: "float", fy: "float", fz: "float", Ri: "float", Rpr: "float", GridID: "int") -> "float":
        return _pnpsll.GenericGeometricalObject_GetDistSQToUnitCenter(self, fx, fy, fz, Ri, Rpr, GridID)

    def GetClosestSurfPoint(self, fx: "float *", fy: "float *", fz: "float *", Ri: "float", Rpr: "float", GridID: "int") -> "void":
        return _pnpsll.GenericGeometricalObject_GetClosestSurfPoint(self, fx, fy, fz, Ri, Rpr, GridID)

# Register GenericGeometricalObject in _pnpsll:
_pnpsll.GenericGeometricalObject_swigregister(GenericGeometricalObject)

class GOAtoms(GenericGeometricalObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pnpsll.GOAtoms_swiginit(self, _pnpsll.new_GOAtoms(*args))
    __swig_destroy__ = _pnpsll.delete_GOAtoms

    def Copy(self, goAtoms: "GOAtoms") -> "int":
        return _pnpsll.GOAtoms_Copy(self, goAtoms)

    def InitZero(self) -> "int":
        return _pnpsll.GOAtoms_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.GOAtoms_Clear(self)

    def Print(self, buildWorld: "BuildWorldNI"=None) -> "int":
        return _pnpsll.GOAtoms_Print(self, buildWorld)
    ClosestNode = _pnpsll.GOAtoms_ClosestNode
    Linear = _pnpsll.GOAtoms_Linear
    Cone = _pnpsll.GOAtoms_Cone
    NAtoms = property(_pnpsll.GOAtoms_NAtoms_get, _pnpsll.GOAtoms_NAtoms_set)
    r_x = property(_pnpsll.GOAtoms_r_x_get, _pnpsll.GOAtoms_r_x_set)
    r_y = property(_pnpsll.GOAtoms_r_y_get, _pnpsll.GOAtoms_r_y_set)
    r_z = property(_pnpsll.GOAtoms_r_z_get, _pnpsll.GOAtoms_r_z_set)
    r = property(_pnpsll.GOAtoms_r_get, _pnpsll.GOAtoms_r_set)
    R = property(_pnpsll.GOAtoms_R_get, _pnpsll.GOAtoms_R_set)
    q = property(_pnpsll.GOAtoms_q_get, _pnpsll.GOAtoms_q_set)
    HalfSigma = property(_pnpsll.GOAtoms_HalfSigma_get, _pnpsll.GOAtoms_HalfSigma_set)
    FourEpsilon = property(_pnpsll.GOAtoms_FourEpsilon_get, _pnpsll.GOAtoms_FourEpsilon_set)
    LJA = property(_pnpsll.GOAtoms_LJA_get, _pnpsll.GOAtoms_LJA_set)
    LJB = property(_pnpsll.GOAtoms_LJB_get, _pnpsll.GOAtoms_LJB_set)
    SRA = property(_pnpsll.GOAtoms_SRA_get, _pnpsll.GOAtoms_SRA_set)
    SRN = property(_pnpsll.GOAtoms_SRN_get, _pnpsll.GOAtoms_SRN_set)
    IER = property(_pnpsll.GOAtoms_IER_get, _pnpsll.GOAtoms_IER_set)

    def DefineChargeDist(self, str: "char const *") -> "int":
        return _pnpsll.GOAtoms_DefineChargeDist(self, str)
    ChargeDist = property(_pnpsll.GOAtoms_ChargeDist_get, _pnpsll.GOAtoms_ChargeDist_set)
    ChargeDistN = property(_pnpsll.GOAtoms_ChargeDistN_get, _pnpsll.GOAtoms_ChargeDistN_set)
    Offset = property(_pnpsll.GOAtoms_Offset_get, _pnpsll.GOAtoms_Offset_set)
    MakePreRoll = property(_pnpsll.GOAtoms_MakePreRoll_get, _pnpsll.GOAtoms_MakePreRoll_set)

    def setPar(self, iEps: "int", iD0: "int", iD1: "int", C0: "float", C1: "float"=-1.0) -> "int":
        return _pnpsll.GOAtoms_setPar(self, iEps, iD0, iD1, C0, C1)

    def SavePQR(self, filename: "char const *") -> "int":
        return _pnpsll.GOAtoms_SavePQR(self, filename)

    def LoadPQR(self, filename: "char const *") -> "int":
        return _pnpsll.GOAtoms_LoadPQR(self, filename)

    def LoadPQRonlyQR(self, filename: "char const *") -> "int":
        return _pnpsll.GOAtoms_LoadPQRonlyQR(self, filename)

    def LoadPRQ(self, filename: "char const *") -> "int":
        return _pnpsll.GOAtoms_LoadPRQ(self, filename)

    def LoadDelphiStyle(self, PDB: "char const *", CRG: "char const *", SIZ: "char const *", center: "bool") -> "int":
        return _pnpsll.GOAtoms_LoadDelphiStyle(self, PDB, CRG, SIZ, center)

    def LoadPRE(self, filename: "char const *") -> "int":
        return _pnpsll.GOAtoms_LoadPRE(self, filename)

    def LoadPAB(self, filename: "char const *") -> "int":
        return _pnpsll.GOAtoms_LoadPAB(self, filename)

    def LoadIER(self, filename: "char const *") -> "int":
        return _pnpsll.GOAtoms_LoadIER(self, filename)

    def LoadPAN(self, filename: "char const *") -> "int":
        return _pnpsll.GOAtoms_LoadPAN(self, filename)

    def LoadAtomicParam(self, filename: "char const *") -> "int":
        return _pnpsll.GOAtoms_LoadAtomicParam(self, filename)
    IAVMethod = property(_pnpsll.GOAtoms_IAVMethod_get, _pnpsll.GOAtoms_IAVMethod_set)

    def SetCenterToOrigin(self) -> "int":
        return _pnpsll.GOAtoms_SetCenterToOrigin(self)

    def SetCenterToOriginWithRad(self) -> "int":
        return _pnpsll.GOAtoms_SetCenterToOriginWithRad(self)

    def ChangeUnits(self, world: "ContWorld", ToInternal: "bool") -> "int":
        return _pnpsll.GOAtoms_ChangeUnits(self, world, ToInternal)

    def BuildPreMaps(self, Builder: "BuildWorldNI", world: "ContWorld", Field: "int *", iValue: "int", iBulkValue: "int", Displ: "float *", Rion: "float", Rsmoth: "float", Surf: "float *", ParmMask: "int") -> "int":
        return _pnpsll.GOAtoms_BuildPreMaps(self, Builder, world, Field, iValue, iBulkValue, Displ, Rion, Rsmoth, Surf, ParmMask)

    def BuildPreMapsMemLim(self, pw: "PartialWorldForSAS", iValue: "int", iBulkValue: "int", Displ: "float *", Rion: "float", Rsmoth: "float") -> "int":
        return _pnpsll.GOAtoms_BuildPreMapsMemLim(self, pw, iValue, iBulkValue, Displ, Rion, Rsmoth)

    def BuildDistMapsFromAtomsCenter(self, Builder: "BuildWorldNI", world: "ContWorld", Dist: "float *", Rmax: "float", DoNotConsiderAtomsSmallerThen: "float") -> "int":
        return _pnpsll.GOAtoms_BuildDistMapsFromAtomsCenter(self, Builder, world, Dist, Rmax, DoNotConsiderAtomsSmallerThen)

    def BuildPreMapsCharges(self, Builder: "BuildWorldNI", world: "ContWorld", Field: "float *") -> "int":
        return _pnpsll.GOAtoms_BuildPreMapsCharges(self, Builder, world, Field)

    def BuildLJRepultionMap(self, Builder: "BuildWorldNI", world: "ContWorld", Ion: "int", V: "float *", LimitVlj: "float") -> "int":
        return _pnpsll.GOAtoms_BuildLJRepultionMap(self, Builder, world, Ion, V, LimitVlj)

    def SetBoundaryCondition(self, Builder: "BuildWorldNI", world: "ContWorld") -> "int":
        return _pnpsll.GOAtoms_SetBoundaryCondition(self, Builder, world)

    def SetBoundaryConditionOnCuda(self, Builder: "BuildWorldNI", world: "ContWorld") -> "int":
        return _pnpsll.GOAtoms_SetBoundaryConditionOnCuda(self, Builder, world)

    def RotateGGO(self, n: "double *", cosa: "double", sina: "double") -> "int":
        return _pnpsll.GOAtoms_RotateGGO(self, n, cosa, sina)

    def SetGridIDs(self, startIDfrom: "int") -> "int":
        return _pnpsll.GOAtoms_SetGridIDs(self, startIDfrom)

    def GetDistToSurf(self, fx: "float", fy: "float", fz: "float", Ri: "float", Rpr: "float", GridID: "int") -> "float":
        return _pnpsll.GOAtoms_GetDistToSurf(self, fx, fy, fz, Ri, Rpr, GridID)

    def GetDistSQToUnitCenter(self, fx: "float", fy: "float", fz: "float", Ri: "float", Rpr: "float", GridID: "int") -> "float":
        return _pnpsll.GOAtoms_GetDistSQToUnitCenter(self, fx, fy, fz, Ri, Rpr, GridID)

    def GetClosestSurfPoint(self, fx: "float *", fy: "float *", fz: "float *", Ri: "float", Rpr: "float", GridID: "int") -> "void":
        return _pnpsll.GOAtoms_GetClosestSurfPoint(self, fx, fy, fz, Ri, Rpr, GridID)
    ChargeDistStrs = property(_pnpsll.GOAtoms_ChargeDistStrs_get, _pnpsll.GOAtoms_ChargeDistStrs_set)

# Register GOAtoms in _pnpsll:
_pnpsll.GOAtoms_swigregister(GOAtoms)

class GOTube(GenericGeometricalObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pnpsll.GOTube_swiginit(self, _pnpsll.new_GOTube())
    __swig_destroy__ = _pnpsll.delete_GOTube

    def InitZero(self) -> "int":
        return _pnpsll.GOTube_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.GOTube_Clear(self)

    def Print(self, buildWorld: "BuildWorldNI"=None) -> "int":
        return _pnpsll.GOTube_Print(self, buildWorld)
    XY = property(_pnpsll.GOTube_XY_get, _pnpsll.GOTube_XY_set)
    Z = property(_pnpsll.GOTube_Z_get, _pnpsll.GOTube_Z_set)
    R = property(_pnpsll.GOTube_R_get, _pnpsll.GOTube_R_set)
    HalfSigma = property(_pnpsll.GOTube_HalfSigma_get, _pnpsll.GOTube_HalfSigma_set)
    FourEpsilon = property(_pnpsll.GOTube_FourEpsilon_get, _pnpsll.GOTube_FourEpsilon_set)

    def setTubeParam(self, X: "float", Y: "float", Z0: "float", Z1: "float", R0: "float", R1: "float") -> "int":
        return _pnpsll.GOTube_setTubeParam(self, X, Y, Z0, Z1, R0, R1)

    def ChangeUnits(self, world: "ContWorld", ToInternal: "bool") -> "int":
        return _pnpsll.GOTube_ChangeUnits(self, world, ToInternal)

    def BuildPreMaps(self, Builder: "BuildWorldNI", world: "ContWorld", Field: "int *", iValue: "int", iBulkValue: "int", Displ: "float *", Rion: "float", Rsmoth: "float", Surf: "float *", ParmMask: "int") -> "int":
        return _pnpsll.GOTube_BuildPreMaps(self, Builder, world, Field, iValue, iBulkValue, Displ, Rion, Rsmoth, Surf, ParmMask)

    def BuildPreMapsMemLim(self, pw: "PartialWorldForSAS", iValue: "int", iBulkValue: "int", Displ: "float *", Rion: "float", Rsmoth: "float") -> "int":
        return _pnpsll.GOTube_BuildPreMapsMemLim(self, pw, iValue, iBulkValue, Displ, Rion, Rsmoth)

    def BuildDistMapsFromAtomsCenter(self, Builder: "BuildWorldNI", world: "ContWorld", Dist: "float *", Rmax: "float", DoNotConsiderAtomsSmallerThen: "float") -> "int":
        return _pnpsll.GOTube_BuildDistMapsFromAtomsCenter(self, Builder, world, Dist, Rmax, DoNotConsiderAtomsSmallerThen)

    def BuildLJRepultionMap(self, Builder: "BuildWorldNI", world: "ContWorld", Ion: "int", V: "float *", LimitVlj: "float") -> "int":
        return _pnpsll.GOTube_BuildLJRepultionMap(self, Builder, world, Ion, V, LimitVlj)

    def RotateGGO(self, n: "double *", cosa: "double", sina: "double") -> "int":
        return _pnpsll.GOTube_RotateGGO(self, n, cosa, sina)

    def GetDistToSurf(self, fx: "float", fy: "float", fz: "float", Ri: "float", Rpr: "float", GridID: "int") -> "float":
        return _pnpsll.GOTube_GetDistToSurf(self, fx, fy, fz, Ri, Rpr, GridID)

    def GetClosestSurfPoint(self, fx: "float *", fy: "float *", fz: "float *", Ri: "float", Rpr: "float", GridID: "int") -> "void":
        return _pnpsll.GOTube_GetClosestSurfPoint(self, fx, fy, fz, Ri, Rpr, GridID)

# Register GOTube in _pnpsll:
_pnpsll.GOTube_swigregister(GOTube)

class GODonut(GenericGeometricalObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pnpsll.GODonut_swiginit(self, _pnpsll.new_GODonut(*args))
    __swig_destroy__ = _pnpsll.delete_GODonut

    def InitZero(self) -> "int":
        return _pnpsll.GODonut_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.GODonut_Clear(self)
    R = property(_pnpsll.GODonut_R_get, _pnpsll.GODonut_R_set)
    r = property(_pnpsll.GODonut_r_get, _pnpsll.GODonut_r_set)
    X = property(_pnpsll.GODonut_X_get, _pnpsll.GODonut_X_set)
    Y = property(_pnpsll.GODonut_Y_get, _pnpsll.GODonut_Y_set)
    Z = property(_pnpsll.GODonut_Z_get, _pnpsll.GODonut_Z_set)

    def ChangeUnits(self, world: "ContWorld", ToInternal: "bool") -> "int":
        return _pnpsll.GODonut_ChangeUnits(self, world, ToInternal)

    def BuildPreMaps(self, Builder: "BuildWorldNI", world: "ContWorld", Field: "int *", iValue: "int", iBulkValue: "int", Displ: "float *", Rion: "float", Rsmoth: "float", Surf: "float *", ParmMask: "int") -> "int":
        return _pnpsll.GODonut_BuildPreMaps(self, Builder, world, Field, iValue, iBulkValue, Displ, Rion, Rsmoth, Surf, ParmMask)

    def BuildPreMapsMemLim(self, pw: "PartialWorldForSAS", iValue: "int", iBulkValue: "int", Displ: "float *", Rion: "float", Rsmoth: "float") -> "int":
        return _pnpsll.GODonut_BuildPreMapsMemLim(self, pw, iValue, iBulkValue, Displ, Rion, Rsmoth)

# Register GODonut in _pnpsll:
_pnpsll.GODonut_swigregister(GODonut)

class GOMembraneZ(GenericGeometricalObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pnpsll.GOMembraneZ_swiginit(self, _pnpsll.new_GOMembraneZ())
    __swig_destroy__ = _pnpsll.delete_GOMembraneZ

    def InitZero(self) -> "int":
        return _pnpsll.GOMembraneZ_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.GOMembraneZ_Clear(self)

    def Print(self, buildWorld: "BuildWorldNI"=None) -> "int":
        return _pnpsll.GOMembraneZ_Print(self, buildWorld)
    Z = property(_pnpsll.GOMembraneZ_Z_get, _pnpsll.GOMembraneZ_Z_set)

    def ChangeUnits(self, world: "ContWorld", ToInternal: "bool") -> "int":
        return _pnpsll.GOMembraneZ_ChangeUnits(self, world, ToInternal)

    def BuildPreMaps(self, Builder: "BuildWorldNI", world: "ContWorld", Field: "int *", iValue: "int", iBulkValue: "int", Displ: "float *", Rion: "float", Rsmoth: "float", Surf: "float *", ParmMask: "int") -> "int":
        return _pnpsll.GOMembraneZ_BuildPreMaps(self, Builder, world, Field, iValue, iBulkValue, Displ, Rion, Rsmoth, Surf, ParmMask)

    def BuildPreMapsMemLim(self, pw: "PartialWorldForSAS", iValue: "int", iBulkValue: "int", Displ: "float *", Rion: "float", Rsmoth: "float") -> "int":
        return _pnpsll.GOMembraneZ_BuildPreMapsMemLim(self, pw, iValue, iBulkValue, Displ, Rion, Rsmoth)

# Register GOMembraneZ in _pnpsll:
_pnpsll.GOMembraneZ_swigregister(GOMembraneZ)

class BuildWorldNI(PnpsObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pnpsll.BuildWorldNI_swiginit(self, _pnpsll.new_BuildWorldNI())
    __swig_destroy__ = _pnpsll.delete_BuildWorldNI

    def InitZero(self) -> "int":
        return _pnpsll.BuildWorldNI_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.BuildWorldNI_Clear(self)

    def Print(self) -> "int":
        return _pnpsll.BuildWorldNI_Print(self)

    def setEpsilonValues(self, e0: "float"=0.0, e1: "float"=0.0, e2: "float"=0.0, e3: "float"=0.0, e4: "float"=0.0, e5: "float"=0.0, e6: "float"=0.0, e7: "float"=0.0, e8: "float"=0.0, e9: "float"=0.0, e10: "float"=0.0, e11: "float"=0.0, e12: "float"=0.0, e13: "float"=0.0, e14: "float"=0.0) -> "int":
        return _pnpsll.BuildWorldNI_setEpsilonValues(self, e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14)

    def setDiffusionValues(self, D0: "float"=0.0, D1: "float"=0.0, D2: "float"=0.0, D3: "float"=0.0, D4: "float"=0.0, D5: "float"=0.0, D6: "float"=0.0) -> "int":
        return _pnpsll.BuildWorldNI_setDiffusionValues(self, D0, D1, D2, D3, D4, D5, D6)

    def getEpsilonValueIndex(self, epsilon: "float") -> "int":
        return _pnpsll.BuildWorldNI_getEpsilonValueIndex(self, epsilon)

    def getDiffusionValueIndex(self, D0: "float") -> "int":
        return _pnpsll.BuildWorldNI_getDiffusionValueIndex(self, D0)

    def setIonsR(self, R0: "float", R1: "float") -> "int":
        return _pnpsll.BuildWorldNI_setIonsR(self, R0, R1)

    def setRwat(self, m_Rwat: "float") -> "int":
        return _pnpsll.BuildWorldNI_setRwat(self, m_Rwat)

    def setRsmooth(self, m_Rsmooth: "float") -> "int":
        return _pnpsll.BuildWorldNI_setRsmooth(self, m_Rsmooth)

    def setDiffusionMode(self, DiffMode: "int") -> "int":
        return _pnpsll.BuildWorldNI_setDiffusionMode(self, DiffMode)

    def setExpDifPar(self, m_Kexpdiff: "float", m_Rexpdiff: "float", m_DiffRmaxAffect: "float") -> "int":
        return _pnpsll.BuildWorldNI_setExpDifPar(self, m_Kexpdiff, m_Rexpdiff, m_DiffRmaxAffect)

    def setMakeDielectricMap(self, bVal: "int") -> "int":
        return _pnpsll.BuildWorldNI_setMakeDielectricMap(self, bVal)

    def setMakeChargeMap(self, bVal: "int") -> "int":
        return _pnpsll.BuildWorldNI_setMakeChargeMap(self, bVal)

    def setMakeDiffusionMap(self, bVal: "int") -> "int":
        return _pnpsll.BuildWorldNI_setMakeDiffusionMap(self, bVal)

    def setMakeConcentrationMap(self, bVal: "int") -> "int":
        return _pnpsll.BuildWorldNI_setMakeConcentrationMap(self, bVal)

    def setMakeSoftRepultionMap(self, bVal: "int") -> "int":
        return _pnpsll.BuildWorldNI_setMakeSoftRepultionMap(self, bVal)

    def setBulkPar(self, iEps: "int", iD0: "int", iD1: "int", C0: "float", C1: "float"=-1.0) -> "int":
        return _pnpsll.BuildWorldNI_setBulkPar(self, iEps, iD0, iD1, C0, C1)

    def setBulkParam(self, iEps, iD, C):
    	"""
    	set parameters for bulk
    	Input Parameters:
    		iEps = int
    		iD = [float]*NIonsTypes
    		C = float or [float]*NIonsTypes
    	"""
    	if not (type(iD) is list or type(iD) is tuple):
    		print("Error: iD should be list or tuple")
    		return None
    	if len(iD)!=self.NIonsTypes:
    		print("Error: len(iD)!=self.NIonsTypes")
    		return None
    	m_iD=new_intArray(self.NIonsTypes)
    	for i in range(self.NIonsTypes):intArray_setitem(m_iD,i,iD[i])
    	m_C = new_floatArray(self.NIonsTypes)
    	if type(C) is list or type(C) is tuple:
    		for i in range(self.NIonsTypes):floatArray_setitem(m_C,i,C[i])
    	else:
    		for i in range(self.NIonsTypes):floatArray_setitem(m_C,i,C)
    	self.cxxSetBulkParam(iEps,m_iD,m_C)
    	delete_intArray(m_iD)
    	delete_floatArray(m_C)
    def setIonsRadii(self, m_R):
    	"""
    	set parameters for bulk
    	Input Parameters:
    		m_R = [float]*NIonsTypes
    	"""
    	if len(m_R)!=self.NIonsTypes:
    		print("Error: len(m_R)!=self.NIonsTypes")
    		return None
    	mm_R=new_floatArray(self.NIonsTypes)
    	for i in range(self.NIonsTypes):floatArray_setitem(mm_R,i,m_R[i])
    	self.cxxSetIonsRadii(iEps,mm_R)
    	delete_floatArray(mm_R)


    def cxxSetBulkParam(self, iEps: "int", iD: "int *", C: "float *") -> "int":
        return _pnpsll.BuildWorldNI_cxxSetBulkParam(self, iEps, iD, C)

    def cxxSetIonsRadii(self, m_R: "float *") -> "int":
        return _pnpsll.BuildWorldNI_cxxSetIonsRadii(self, m_R)

    def addGGO(self, ggo: "GenericGeometricalObject") -> "int":
        return _pnpsll.BuildWorldNI_addGGO(self, ggo)
    Rwat = property(_pnpsll.BuildWorldNI_Rwat_get, _pnpsll.BuildWorldNI_Rwat_set)
    Rsmooth = property(_pnpsll.BuildWorldNI_Rsmooth_get, _pnpsll.BuildWorldNI_Rsmooth_set)
    BoundaryCondition = property(_pnpsll.BuildWorldNI_BoundaryCondition_get, _pnpsll.BuildWorldNI_BoundaryCondition_set)
    BldBCatPlane = property(_pnpsll.BuildWorldNI_BldBCatPlane_get, _pnpsll.BuildWorldNI_BldBCatPlane_set)
    NIonsTypes = property(_pnpsll.BuildWorldNI_NIonsTypes_get, _pnpsll.BuildWorldNI_NIonsTypes_set)
    IonsR = property(_pnpsll.BuildWorldNI_IonsR_get, _pnpsll.BuildWorldNI_IonsR_set)
    IonsHalfSigma = property(_pnpsll.BuildWorldNI_IonsHalfSigma_get, _pnpsll.BuildWorldNI_IonsHalfSigma_set)
    IonsFourEpsilon = property(_pnpsll.BuildWorldNI_IonsFourEpsilon_get, _pnpsll.BuildWorldNI_IonsFourEpsilon_set)
    IonsLJA = property(_pnpsll.BuildWorldNI_IonsLJA_get, _pnpsll.BuildWorldNI_IonsLJA_set)
    IonsLJB = property(_pnpsll.BuildWorldNI_IonsLJB_get, _pnpsll.BuildWorldNI_IonsLJB_set)
    DielNum = property(_pnpsll.BuildWorldNI_DielNum_get, _pnpsll.BuildWorldNI_DielNum_set)
    DielConst = property(_pnpsll.BuildWorldNI_DielConst_get, _pnpsll.BuildWorldNI_DielConst_set)
    DiffusionNum = property(_pnpsll.BuildWorldNI_DiffusionNum_get, _pnpsll.BuildWorldNI_DiffusionNum_set)
    DiffusionConst = property(_pnpsll.BuildWorldNI_DiffusionConst_get, _pnpsll.BuildWorldNI_DiffusionConst_set)
    DiffusionMode = property(_pnpsll.BuildWorldNI_DiffusionMode_get, _pnpsll.BuildWorldNI_DiffusionMode_set)
    Kexpdiff = property(_pnpsll.BuildWorldNI_Kexpdiff_get, _pnpsll.BuildWorldNI_Kexpdiff_set)
    Rexpdiff = property(_pnpsll.BuildWorldNI_Rexpdiff_get, _pnpsll.BuildWorldNI_Rexpdiff_set)
    DiffRmaxAffect = property(_pnpsll.BuildWorldNI_DiffRmaxAffect_get, _pnpsll.BuildWorldNI_DiffRmaxAffect_set)
    iDzero = property(_pnpsll.BuildWorldNI_iDzero_get, _pnpsll.BuildWorldNI_iDzero_set)
    SaveDistMap = property(_pnpsll.BuildWorldNI_SaveDistMap_get, _pnpsll.BuildWorldNI_SaveDistMap_set)
    MakeDielectricMap = property(_pnpsll.BuildWorldNI_MakeDielectricMap_get, _pnpsll.BuildWorldNI_MakeDielectricMap_set)
    MakeDiffusionMap = property(_pnpsll.BuildWorldNI_MakeDiffusionMap_get, _pnpsll.BuildWorldNI_MakeDiffusionMap_set)
    MakeConcentrationMap = property(_pnpsll.BuildWorldNI_MakeConcentrationMap_get, _pnpsll.BuildWorldNI_MakeConcentrationMap_set)
    MakeChargeMap = property(_pnpsll.BuildWorldNI_MakeChargeMap_get, _pnpsll.BuildWorldNI_MakeChargeMap_set)
    MakeLJRepultion = property(_pnpsll.BuildWorldNI_MakeLJRepultion_get, _pnpsll.BuildWorldNI_MakeLJRepultion_set)
    AddElPotToPMF = property(_pnpsll.BuildWorldNI_AddElPotToPMF_get, _pnpsll.BuildWorldNI_AddElPotToPMF_set)
    RemovingCavities = property(_pnpsll.BuildWorldNI_RemovingCavities_get, _pnpsll.BuildWorldNI_RemovingCavities_set)
    RemovingCavitiesOnDielectricMap = property(_pnpsll.BuildWorldNI_RemovingCavitiesOnDielectricMap_get, _pnpsll.BuildWorldNI_RemovingCavitiesOnDielectricMap_set)
    RemCavOnDielFillWith = property(_pnpsll.BuildWorldNI_RemCavOnDielFillWith_get, _pnpsll.BuildWorldNI_RemCavOnDielFillWith_set)
    RemCavOnDielWhere2Look = property(_pnpsll.BuildWorldNI_RemCavOnDielWhere2Look_get, _pnpsll.BuildWorldNI_RemCavOnDielWhere2Look_set)
    LimitVlj = property(_pnpsll.BuildWorldNI_LimitVlj_get, _pnpsll.BuildWorldNI_LimitVlj_set)
    BoundaryStr = property(_pnpsll.BuildWorldNI_BoundaryStr_get, _pnpsll.BuildWorldNI_BoundaryStr_set)
    ZeroBC = _pnpsll.BuildWorldNI_ZeroBC
    CoulBC = _pnpsll.BuildWorldNI_CoulBC
    BuildUsingGPU = property(_pnpsll.BuildWorldNI_BuildUsingGPU_get, _pnpsll.BuildWorldNI_BuildUsingGPU_set)
    MemoryLimitOnOneArray = property(_pnpsll.BuildWorldNI_MemoryLimitOnOneArray_get, _pnpsll.BuildWorldNI_MemoryLimitOnOneArray_set)

    def ChangeUnits(self, world: "ContWorld", ToInternal: "bool") -> "int":
        return _pnpsll.BuildWorldNI_ChangeUnits(self, world, ToInternal)

    def BuildContWorld(self,world,Verbose=True):
    	"""Build continious world
    	Input Parameters:
    		world=ContWorld
    			instance of ContWorld
    		Verbose=bool, default=True
    			if set will print BuildWorld configuration
    	"""
    	if Verbose:
    		self.Print()
    	self.cxxBuildContWorld(world)


    def cxxBuildContWorld(self, world: "ContWorld") -> "int":
        return _pnpsll.BuildWorldNI_cxxBuildContWorld(self, world)

    def BuildDielMapsOnCuda(self, world: "ContWorld", NIndexingNew: "NodeIndexing") -> "int":
        return _pnpsll.BuildWorldNI_BuildDielMapsOnCuda(self, world, NIndexingNew)

    def BuildDiffExp(self, world: "ContWorld") -> "int":
        return _pnpsll.BuildWorldNI_BuildDiffExp(self, world)

    def BuildDiffExpOld(self, K0: "float", world: "ContWorld") -> "int":
        return _pnpsll.BuildWorldNI_BuildDiffExpOld(self, K0, world)

    def FinalazeSEV(self, world: "ContWorld", Field: "int *", iBulkValue: "int", Rsmooth: "float", Surf: "float *") -> "int":
        return _pnpsll.BuildWorldNI_FinalazeSEV(self, world, Field, iBulkValue, Rsmooth, Surf)

    def FinalazeSEV2(self, world: "ContWorld", Field: "int *", iBulkValue: "int", Rsmooth: "float", surf_points: "float3", Nsurf_points: "int") -> "int":
        return _pnpsll.BuildWorldNI_FinalazeSEV2(self, world, Field, iBulkValue, Rsmooth, surf_points, Nsurf_points)

    def FinalazeSEVDiff(self, world: "ContWorld", Field: "int *", iBulkValue: "int", Rsmooth: "float", Surf: "float *") -> "int":
        return _pnpsll.BuildWorldNI_FinalazeSEVDiff(self, world, Field, iBulkValue, Rsmooth, Surf)

    def RemovingCavitiesList(self, GSX: "int", GSY: "int", GSZ: "int", Field: "int *", iDzero: "int") -> "int":
        return _pnpsll.BuildWorldNI_RemovingCavitiesList(self, GSX, GSY, GSZ, Field, iDzero)

    def RemovingCavitiesAtValues(self, GSX: "int", GSY: "int", GSZ: "int", Field: "int *", iWhereToLook: "int", iFillWith: "int") -> "int":
        return _pnpsll.BuildWorldNI_RemovingCavitiesAtValues(self, GSX, GSY, GSZ, Field, iWhereToLook, iFillWith)
    Plain = _pnpsll.BuildWorldNI_Plain
    Exp = _pnpsll.BuildWorldNI_Exp
    StdStrDiffusionModes = property(_pnpsll.BuildWorldNI_StdStrDiffusionModes_get, _pnpsll.BuildWorldNI_StdStrDiffusionModes_set)

    def setBulk(self,**kwargs):
    	iEps = kwargs.get("iDielConst")
    	if iEps==None:
    		print("Error: iDielConst must be defined")

    	iD = kwargs.get("iDiffCoef")
    	if iD==None:
    		print("Error: iDiffCoef must be defined")
    	if len(iD)!=2:
    		print("Error: iDiffCoef must have two values")

    	C = kwargs.get("C",0.1)
    	self.setBulkPar(iEps, iD[0], iD[1], C)

    def addAtoms(self,
    		iDielConst=None,
    		DielConst=2.0,
    		MolSet=None,
    		PQR=None,
    	    PAN=None,
    		AtomsPQR=None,
    	    AtomicParam=None,
    		**kwargs):
    	"""
    	add atoms to the system
    	Input Parameters:
    		DielConst=float, default=2.0
    			dielectric constant
    		MolSet=MolSet, default None
    			Load coordinates, charges and radii from Harlem MolSet
    			Note that if MolSet.p_save_opt_default.save_selected is set to 1
    			only selected atoms will be loaded
    		PQR=string, default None
    			Load coordinates, charges and radii from PQR file
    		PAN = string, default None
    			Load coordinates, charges and radii and SR parameters from PAN file
    		AtomicParam = string, default None
    			Load coordinates, charges and radii and SR parameters from AtomicParam file
    		AtomsPQR=list of list with x,y,z,q and r, default=None
    			Load coordinates, charges and radii from list of values.
    			For example:
    				AtomsPQR=[[0.0,0.0,-1.0,-1.0,2.0],[0.0,0.0,1.0,1.0,2.0]]

    	Returned value:
    		GOAtoms - atoms container
    	"""
    #print("BuildWorldNI::addAtoms()")

    	if iDielConst==None:
    		iDielConst=self.getEpsilonValueIndex(DielConst)
    	if iDielConst==None:
    		print("Error: iDielConst must be defined")

    	a=GOAtoms()
    	a.setParam(iDielConst, self.iDzero,0.0,NIonsTypes=self.NIonsTypes)

    	a.ChargeDist=a.Linear;
    	a.ChargeDistN=1;

    	atomsLoaded=False

    	if PQR!=None:
    		a.LoadPQR(PQR)
    		atomsLoaded=True
    	if PAN is not None:
    		a.LoadPAN(PAN)
    		atomsLoaded=True
    	if AtomicParam is not None:
    		a.LoadAtomicParam(AtomicParam)
    		atomsLoaded=True
    	if MolSet!=None:
    		a.LoadHaMolSet(MolSet)
    		atomsLoaded=True
    	if AtomsPQR!=None:
    		for atom in AtomsPQR:
    			x,y,z,q,r=atom
    			a.r_x.push_back(x)
    			a.r_y.push_back(y)
    			a.r_z.push_back(z)
    			a.q.push_back(q)
    			a.R.push_back(r)
    		a.NAtoms=a.R.size();
    		atomsLoaded=True
    	if atomsLoaded==False:
    		print("Error: Can not load atoms parameters!")
    	a.MakePreRoll=True
    #for key in kwargs:
    #	print("keyword arg: %s: %s" % (key, kwargs[key]))
    	self.addGGO(a)
    	a.thisown = 0
    	return a

    def addTube(self,
    		iDielConst=None,
    		DielConst=2.0,
    		x=0.0,
    		y=0.0,
    		z=[-12.0,12.0],
    		R=[4.0,1000.0]):
    	"""
    	add tube or membrane with cyllindric hole to the system
    	Input Parameters:
    		DielConst=float, default=2.0
    			dielectric constant
    		x=float, default=0.0
    		y=float, default=0.0
    			x,y - coordinate of central symmetry axle of tube
    		z=[float,float], default=[-12.0,12.0]
    			beginning and end of tube
    		R=float or [float,float], default=4.0
    			internal radius of cillindric hole in the membrane or internal and external radii of the tube
    	Returned value:
    		GOTube - tube container
    	"""
    # print("BuildWorldNI::addTube()")

    	if iDielConst==None:
    		iDielConst=self.getEpsilonValueIndex(DielConst)
    	if iDielConst==None:
    		print("Error: iDielConst must be defined")

    	t=GOTube()
    	t.setParam(iDielConst, self.iDzero,0.0,NIonsTypes=self.NIonsTypes)

    	if type(R) is list or type(R) is tuple:
    		m_R=R
    	else:
    		m_R=[R,1000.0]

    	t.setTubeParam(x,y,z[0],z[1],m_R[0],m_R[1]);
    	self.addGGO(t)
    	t.thisown = 0
    	return t
    def addMembraneZ(self,
    		iDielConst=None,
    		DielConst=2.0,
    		z=[-12.0,12.0]):
    	"""
    	add membrane slab
    	Input Parameters:
    		DielConst=float, default=2.0
    			dielectric constant
    		z=[float,float], default=[-12.0,12.0]
    			beginning and end of tube
    	Returned value:
    		GOMembraneZ- tube container
    	"""
    #print("BuildWorldNI::addTube()")

    	if iDielConst==None:
    		iDielConst=self.getEpsilonValueIndex(DielConst)
    	if iDielConst==None:
    		print("Error: iDielConst must be defined")

    	mz=GOMembraneZ()
    	mz.setParam(iDielConst, self.iDzero,0.0,NIonsTypes=self.NIonsTypes)

    	if not (type(z) is list or type(z) is tuple):
    		print("Error: z must be type of two values")

    	floatArray_setitem(mz.Z,0,z[0])
    	floatArray_setitem(mz.Z,1,z[1])

    	self.addGGO(mz)
    	mz.thisown = 0
    	return mz


# Register BuildWorldNI in _pnpsll:
_pnpsll.BuildWorldNI_swigregister(BuildWorldNI)


def GetBuilderForPNPSR(**kwargs):
	"""
		depreciated
	GetBuilderForPNPSR - get system continuum representation builder

	Parameters
		MakeDielectricMap=Bool, default=True
			Create dielectric constant distribution map
		MakeChargeMap=Bool, default=True
			Create static charge distribution map
		MakeDiffusionMap=Bool, default=True
			Create diffusion coefficient distribution map
		MakeConcentrationMap=Bool, default=True
			Create mobile ions concentration distribution map
		MakeSoftRepultionMap=Bool, default=True
			Create soft repultion potential between static atoms and mobile ions
	DielConstValues = None
	DiffusionValues = None

	iDielConst=None #Example: 1 , i.e. DielConstValues[1]
	iDiffCoef=None #Example:[2,3]
	C=0.1,

	RprobeDiel = 1.4
	RprobeDiff = 0.5
	Rions      = [2.0,2.0]

	DiffusionModel = "Plane"  |"MD"
	Kexpdiff=0.62 #options for MD diffusion
	DiffRmaxAffect=10.0 #options for MD diffusion


	"""
	print(kwargs)
	DielConstValues = kwargs.get("DielConstValues",None)
	print(DielConstValues)
	if DielConstValues==None:
		print("Error: DielConstValues must be defined")
		return None
	DiffusionValues = kwargs.get("DiffusionValues",None)
	if DiffusionValues==None:
		print("Error: DiffusionValues must be defined")
		return None

	bld=BuildWorldNI()
#Set epsilon values which will be used in ContWorld
#In objects instead of real dielectric constant is used index to the element of this array
	a=[0.0]*15
	for i in xrange(0,len(DielConstValues)):
		a[i]=float(DielConstValues[i])
	bld.setEpsilonValues(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14]);
#Set diffusion values (Bulk + Zero) which will be used in ContWorld
#In objects instead of real diffusion constant is used index to the element of this array
	a=[0.0]*7
	for i in xrange(0,len(DiffusionValues)):
		a[i]=float(DiffusionValues[i])
	bld.setDiffusionValues(a[0], a[1], a[2], a[3], a[4], a[5], a[6])



#Rprobe for creation of dielectric maps
	RprobeDiel = kwargs.get("RprobeDiel",1.4)
	bld.setRwat(RprobeDiel)
#Rsmoth for smothing IAV; since we use PNP-SR our initial guess will molecular surphace

	RprobeDiff = kwargs.get("RprobeDiff",0.5)
	bld.setRsmooth(RprobeDiff)
#Radii of mobile ion, for creation of IAV; now we will use explicit IER
	Rions = kwargs.get("Rions",[2.0,2.0])
	bld.setIonsR(Rions[0],Rions[1]) # R0, R1

#Type of distance depentend diffusion:
# BuildWorldNI.Plain - Bulk diffusion throughout IAV
# BuildWorldNI.Exp - Diffusion which exponentially decay upon aproatching protein atoms
	DiffusionModel = kwargs.get("DiffusionModel","Plane")
	if DiffusionModel=="Plane":
		bld.setDiffusionMode(BuildWorldNI.Plain)
	else:
		bld.setDiffusionMode(BuildWorldNI.Exp)
# Parameters for exponential decay
	Kexpdiff = kwargs.get("Kexpdiff",0.62)
	Rexpdiff = kwargs.get("Rexpdiff",2.2)
	DiffRmaxAffect = getattr(kwargs,"DiffRmaxAffect",10.0)
	bld.setExpDifPar(Kexpdiff,Rexpdiff,DiffRmaxAffect)

#following flags describe what maps to calculate
	MakeDielectricMap=kwargs.get("MakeDielectricMap",True)
	MakeChargeMap=kwargs.get("MakeChargeMap",True)
	MakeDiffusionMap=kwargs.get("MakeDiffusionMap",True)
	MakeConcentrationMap=kwargs.get("MakeConcentrationMap",True)
	MakeSoftRepultionMap=kwargs.get("MakeSoftRepultionMap",True)

	if MakeDielectricMap : MakeDielectricMap=1
	else : MakeDielectricMap=0

	if MakeChargeMap : MakeChargeMap=1
	else : MakeChargeMap=0

	if MakeDiffusionMap : MakeDiffusionMap=1
	else : MakeDiffusionMap=0

	if MakeConcentrationMap : MakeConcentrationMap=1
	else : MakeConcentrationMap=0

	if MakeSoftRepultionMap : MakeSoftRepultionMap=1
	else : MakeSoftRepultionMap=0

	bld.setMakeDielectricMap(MakeDielectricMap)
	bld.setMakeChargeMap(MakeChargeMap)
	bld.setMakeDiffusionMap(MakeDiffusionMap)
	bld.setMakeConcentrationMap(MakeConcentrationMap)
	bld.setMakeSoftRepultionMap(MakeSoftRepultionMap)

	iEps = kwargs.get("iDielConst",None)
	if iEps==None:
		print("Error: iDielConst must be defined")

	iD = kwargs.get("iDiffCoef",None)
	if iD==None:
		print("Error: iDiffCoef must be defined")
	if len(iD)!=2:
		print("Error: iDiffCoef must have two values")

	C = kwargs.get("C",0.1)
	bld.setBulkPar(iEps, iD[0], iD[1], C)

#Why?
	bld.thisown = 0
	return bld
def GetWorldBuilder(
		DielConstBulk=80.0,
		DiffCoefBulk=[19.57,20.32],
		Cbulk=1.0,
		RprobeDiel = 1.4,
		RprobeDiff = 0.5,
		Rions      = [2.0,2.0],
		DiffusionModel = "Plane",
		KexpDiff=0.62,
		RexpDiff=2.2,
		DiffRmaxAffect=10.0,
		BoundaryCondition="ZeroBC",
		RemoveIonsCavities=True,
		MakeDielectricMap=True,
		MakeChargeMap=True,
		MakeDiffusionMap=True,
		MakeConcentrationMap=True,
		MakeSoftRepultionMap=False):
	"""

	GetBuilderForPNPSR - get system continuum representation builder

	Input Parameters:
		Bulk properties setup:
			DielConstBulk=float, default=80.0,
				Dielectric constant of a bulk
			DiffCoefBulk=[float, float], dim=Number of mobile ions, default=[19.57,20.32], Units:[1E-6 cm^2/s]
				Diffusion coefficient of mobile ions in bulk. Units:[1E-6 cm^2/s].
				Default values corresponds for KCl
			Cbulk=float or [float, float], dim=Number of mobile ions,default=1.0, Units:[M]
				Concentration of mobile ions in bulk
			BoundaryCondition=string, "ZeroBC" or "CoulBC", default="ZeroBC"
				Boundary conditions
		Solvent and mobile ions radii:
			RprobeDiel=float, default=1.4, Units:[Angstrom]
				Solvent molecule radius for solvent accessible volume calculation,
				used in dielectic constant distribution calculation.
			RprobeDiff=float, default=0.5, Units:[Angstrom]
				Smoothing probe radius for smoothing ions accessible volume
			Rions=[float, float], dim=Number of mobile ions,default=[2.0,2.0], Units:[Angstrom]
				Mobile ions radii for ion accessible volume calculation
		Diffusion model and its parameters:
			DiffusionModel = "Plane" or "MD", default="Plane"
				Diffusion model
			Kexpdiff=float, default=0.62
				option for MD diffusion
			Rexpdiff=float, default=2.2, Units:[Angstrom]
				option for MD diffusion
			DiffRmaxAffect=float, default=10.0, Units:[Angstrom]
				option for MD diffusion
		Distribution map to building flags:
			MakeDielectricMap=Bool, default=True
				Create dielectric constant distribution map
			MakeChargeMap=Bool, default=True
				Create static charge distribution map
			MakeDiffusionMap=Bool, default=True
				Create diffusion coefficient distribution map
			MakeConcentrationMap=Bool, default=True
				Create mobile ions concentration distribution map
			MakeSoftRepultionMap=Bool, default=False
				Create soft repultion potential between static atoms and mobile ions
	    Other options:
	        RemoveIonsCavities=Bool, default=True remove mobile ions cavities
	Returned value:
			In case of successfull execution return BuildWorldNI instance, otherwise None

	"""
	bld=BuildWorldNI()

#get number of mobile ions types
	if not (type(DiffCoefBulk) is list or type(DiffCoefBulk) is tuple):
		print("Error: DiffCoefBulk should be list or tuple!")
		return None

	NIonsTypes=len(DiffCoefBulk)
	if len(DiffCoefBulk)!=len(Rions):
		print("Error: Different number of mobile ions types: len(DiffCoefBulk)!=len(Rions)")
		return None
	if type(Cbulk) is list or type(Cbulk) is tuple:
		if len(DiffCoefBulk)!=len(Cbulk):
			print("Error: Different number of mobile ions types: len(DiffCoefBulk)!=len(Cbulk)")
			return None
	bld.NIonsTypes=NIonsTypes

#Rprobe for creation of dielectric maps
	bld.setRwat(RprobeDiel)
#Rsmoth for smothing IAV; since we use PNP-SR our initial guess will molecular surphace
	bld.setRsmooth(RprobeDiff)
#Radii of mobile ion, for creation of IAV; now we will use explicit IER
	bld.setIonsR(Rions[0],Rions[1]) # R0, R1

#Type of distance depentend diffusion:
# BuildWorldNI.Plain - Bulk diffusion throughout IAV
# BuildWorldNI.Exp - Diffusion which exponentially decay upon aproatching protein atoms
	if DiffusionModel=="Plane":
		bld.setDiffusionMode(BuildWorldNI.Plain)
	elif DiffusionModel=="MD":
		bld.setDiffusionMode(BuildWorldNI.Exp)
	else:
		print("Error: Unknown Diffusion Model!")
		return None
# Parameters for exponential decay
	bld.setExpDifPar(KexpDiff,RexpDiff,DiffRmaxAffect)

#following flags describe what maps to calculate
	if MakeDielectricMap : MakeDielectricMap=1
	else : MakeDielectricMap=0

	if MakeChargeMap : MakeChargeMap=1
	else : MakeChargeMap=0

	if MakeDiffusionMap : MakeDiffusionMap=1
	else : MakeDiffusionMap=0

	if MakeConcentrationMap : MakeConcentrationMap=1
	else : MakeConcentrationMap=0

	if MakeSoftRepultionMap : MakeSoftRepultionMap=1
	else : MakeSoftRepultionMap=0

	bld.setMakeDielectricMap(MakeDielectricMap)
	bld.setMakeChargeMap(MakeChargeMap)
	bld.setMakeDiffusionMap(MakeDiffusionMap)
	bld.setMakeConcentrationMap(MakeConcentrationMap)
	bld.setMakeSoftRepultionMap(MakeSoftRepultionMap)

	iEps = bld.getEpsilonValueIndex(DielConstBulk)

	iD = []
	for iDiff in DiffCoefBulk:
		iD.append(bld.getDiffusionValueIndex(iDiff))

	bld.setBulkParam(iEps, iD, Cbulk)

	if BoundaryCondition=="ZeroBC":
		bld.BoundaryCondition=0
	elif BoundaryCondition=="CoulBC":
		bld.BoundaryCondition=1
	else:
		bld.BoundaryCondition=0
		print("Error: Unknown Boundary Condition! Should be ZeroBC or CoulBC")
		return None
	if RemoveIonsCavities:
		bld.RemovingCavities=True
	else:
		bld.RemovingCavities=False
#Why?
	bld.thisown = 0
	return bld

class BuildWorldEu(BuildWorldNI):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pnpsll.BuildWorldEu_swiginit(self, _pnpsll.new_BuildWorldEu())
    __swig_destroy__ = _pnpsll.delete_BuildWorldEu

    def InitZero(self) -> "int":
        return _pnpsll.BuildWorldEu_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.BuildWorldEu_Clear(self)

    def cxxBuildContWorld(self, world: "ContWorld") -> "int":
        return _pnpsll.BuildWorldEu_cxxBuildContWorld(self, world)

    def BuildPreMapsAtoms(self, goatoms: "GOAtoms", world: "ContWorld", iEpsilon: "int **", Rpr: "float") -> "int":
        return _pnpsll.BuildWorldEu_BuildPreMapsAtoms(self, goatoms, world, iEpsilon, Rpr)

    def BuildPreMapsTube(self, gotube: "GOTube", world: "ContWorld", iEpsilon: "int **", Rpr: "float") -> "int":
        return _pnpsll.BuildWorldEu_BuildPreMapsTube(self, gotube, world, iEpsilon, Rpr)

    def FinalazeSEV(self, world: "ContWorld", iEpsilon: "int **") -> "int":
        return _pnpsll.BuildWorldEu_FinalazeSEV(self, world, iEpsilon)

    def FinalazeSEV2(self, world: "ContWorld", iEpsilon: "int **") -> "int":
        return _pnpsll.BuildWorldEu_FinalazeSEV2(self, world, iEpsilon)

# Register BuildWorldEu in _pnpsll:
_pnpsll.BuildWorldEu_swigregister(BuildWorldEu)

class BuildWorldCmp(BuildWorldNI):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pnpsll.BuildWorldCmp_swiginit(self, _pnpsll.new_BuildWorldCmp())
    __swig_destroy__ = _pnpsll.delete_BuildWorldCmp

    def InitZero(self) -> "int":
        return _pnpsll.BuildWorldCmp_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.BuildWorldCmp_Clear(self)

    def cxxBuildContWorld(self, world: "ContWorld") -> "int":
        return _pnpsll.BuildWorldCmp_cxxBuildContWorld(self, world)

    def BuildPreMapsAtoms(self, goatoms: "GOAtoms", world: "ContWorld", iEpsilon: "int **", Rpr: "float") -> "int":
        return _pnpsll.BuildWorldCmp_BuildPreMapsAtoms(self, goatoms, world, iEpsilon, Rpr)

    def FinalazeSEV(self, world: "ContWorld", iEpsilon: "int **") -> "int":
        return _pnpsll.BuildWorldCmp_FinalazeSEV(self, world, iEpsilon)

# Register BuildWorldCmp in _pnpsll:
_pnpsll.BuildWorldCmp_swigregister(BuildWorldCmp)

class BuildWorldScaled(PnpsObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pnpsll.BuildWorldScaled_swiginit(self, _pnpsll.new_BuildWorldScaled())
    __swig_destroy__ = _pnpsll.delete_BuildWorldScaled

    def InitZero(self) -> "int":
        return _pnpsll.BuildWorldScaled_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.BuildWorldScaled_Clear(self)

    def BuildContWorld(self, world: "ContWorld") -> "int":
        return _pnpsll.BuildWorldScaled_BuildContWorld(self, world)

    def BuildContWorldCharges(self, world: "ContWorld", NIndexingNew: "NodeIndexing") -> "int":
        return _pnpsll.BuildWorldScaled_BuildContWorldCharges(self, world, NIndexingNew)

    def BuildContWorldDielMaps(self, world: "ContWorld", NIndexingNew: "NodeIndexing") -> "int":
        return _pnpsll.BuildWorldScaled_BuildContWorldDielMaps(self, world, NIndexingNew)
    Rwat = property(_pnpsll.BuildWorldScaled_Rwat_get, _pnpsll.BuildWorldScaled_Rwat_set)
    DielNum = property(_pnpsll.BuildWorldScaled_DielNum_get, _pnpsll.BuildWorldScaled_DielNum_set)
    DielConst = property(_pnpsll.BuildWorldScaled_DielConst_get, _pnpsll.BuildWorldScaled_DielConst_set)
    BoundaryCondition = property(_pnpsll.BuildWorldScaled_BoundaryCondition_get, _pnpsll.BuildWorldScaled_BoundaryCondition_set)
    BulkParam = property(_pnpsll.BuildWorldScaled_BulkParam_get, _pnpsll.BuildWorldScaled_BulkParam_set)
    GOElms = property(_pnpsll.BuildWorldScaled_GOElms_get, _pnpsll.BuildWorldScaled_GOElms_set)

# Register BuildWorldScaled in _pnpsll:
_pnpsll.BuildWorldScaled_swigregister(BuildWorldScaled)

class DielDiffMapsPatcher(PnpsObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, world: "ContWorld"):
        _pnpsll.DielDiffMapsPatcher_swiginit(self, _pnpsll.new_DielDiffMapsPatcher(world))
    __swig_destroy__ = _pnpsll.delete_DielDiffMapsPatcher
    m_ContWorld = property(_pnpsll.DielDiffMapsPatcher_m_ContWorld_get, _pnpsll.DielDiffMapsPatcher_m_ContWorld_set)
    eps = property(_pnpsll.DielDiffMapsPatcher_eps_get, _pnpsll.DielDiffMapsPatcher_eps_set)

    def GetIntDielMaps(self) -> "void":
        return _pnpsll.DielDiffMapsPatcher_GetIntDielMaps(self)

    def PushIntDielMaps(self) -> "void":
        return _pnpsll.DielDiffMapsPatcher_PushIntDielMaps(self)

    def PatchDielMaps(self, epsToOver: "int", epsNew: "int", x: "float", y: "float", z1: "float", z2: "float", R: "float") -> "void":
        return _pnpsll.DielDiffMapsPatcher_PatchDielMaps(self, epsToOver, epsNew, x, y, z1, z2, R)
    refDiff = property(_pnpsll.DielDiffMapsPatcher_refDiff_get, _pnpsll.DielDiffMapsPatcher_refDiff_set)

    def InitNewDiff(self) -> "void":
        return _pnpsll.DielDiffMapsPatcher_InitNewDiff(self)

    def DelRefDiff(self) -> "void":
        return _pnpsll.DielDiffMapsPatcher_DelRefDiff(self)

    def PatchDiffMaps(self, Dscale1K: "float", Dscale2K: "float", Dscale1Cl: "float", Dscale2Cl: "float", x: "float", y: "float", z1: "float", z2: "float", R: "float") -> "void":
        return _pnpsll.DielDiffMapsPatcher_PatchDiffMaps(self, Dscale1K, Dscale2K, Dscale1Cl, Dscale2Cl, x, y, z1, z2, R)

    def setDielConstInUse(self,DielConstInUse):
    	for i in range(14):
    		self.m_ContWorld.NIndexing.SetDielConstInUse(i,DielConstInUse[i])


# Register DielDiffMapsPatcher in _pnpsll:
_pnpsll.DielDiffMapsPatcher_swigregister(DielDiffMapsPatcher)

class PBwithLJSolver(GenericSolver, PnpsObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pnpsll.PBwithLJSolver_swiginit(self, _pnpsll.new_PBwithLJSolver())
    __swig_destroy__ = _pnpsll.delete_PBwithLJSolver

    def InitZero(self) -> "int":
        return _pnpsll.PBwithLJSolver_InitZero(self)

    def Clear(self) -> "int":
        return _pnpsll.PBwithLJSolver_Clear(self)
    Auto = _pnpsll.PBwithLJSolver_Auto
    NodeIndexBased = _pnpsll.PBwithLJSolver_NodeIndexBased
    ArrayDirect = _pnpsll.PBwithLJSolver_ArrayDirect
    solver = property(_pnpsll.PBwithLJSolver_solver_get, _pnpsll.PBwithLJSolver_solver_set)
    MaxIterations = property(_pnpsll.PBwithLJSolver_MaxIterations_get, _pnpsll.PBwithLJSolver_MaxIterations_set)
    ConvergenceCheck = property(_pnpsll.PBwithLJSolver_ConvergenceCheck_get, _pnpsll.PBwithLJSolver_ConvergenceCheck_set)
    Convergence = property(_pnpsll.PBwithLJSolver_Convergence_get, _pnpsll.PBwithLJSolver_Convergence_set)
    Relaxation = property(_pnpsll.PBwithLJSolver_Relaxation_get, _pnpsll.PBwithLJSolver_Relaxation_set)
    verbose = property(_pnpsll.PBwithLJSolver_verbose_get, _pnpsll.PBwithLJSolver_verbose_set)
    bPBExpAll = property(_pnpsll.PBwithLJSolver_bPBExpAll_get, _pnpsll.PBwithLJSolver_bPBExpAll_set)
    bAnalyseExplosion = property(_pnpsll.PBwithLJSolver_bAnalyseExplosion_get, _pnpsll.PBwithLJSolver_bAnalyseExplosion_set)
    totalChange = property(_pnpsll.PBwithLJSolver_totalChange_get, _pnpsll.PBwithLJSolver_totalChange_set)
    relativeChange = property(_pnpsll.PBwithLJSolver_relativeChange_get, _pnpsll.PBwithLJSolver_relativeChange_set)
    totalEnergy = property(_pnpsll.PBwithLJSolver_totalEnergy_get, _pnpsll.PBwithLJSolver_totalEnergy_set)
    totalEnergyInd = property(_pnpsll.PBwithLJSolver_totalEnergyInd_get, _pnpsll.PBwithLJSolver_totalEnergyInd_set)
    ConvFac = property(_pnpsll.PBwithLJSolver_ConvFac_get, _pnpsll.PBwithLJSolver_ConvFac_set)
    m_ContWorld = property(_pnpsll.PBwithLJSolver_m_ContWorld_get, _pnpsll.PBwithLJSolver_m_ContWorld_set)
    NoSingularNum = property(_pnpsll.PBwithLJSolver_NoSingularNum_get, _pnpsll.PBwithLJSolver_NoSingularNum_set)
    IndexNoSingular = property(_pnpsll.PBwithLJSolver_IndexNoSingular_get, _pnpsll.PBwithLJSolver_IndexNoSingular_set)
    SingularNum = property(_pnpsll.PBwithLJSolver_SingularNum_get, _pnpsll.PBwithLJSolver_SingularNum_set)
    IndexSingular = property(_pnpsll.PBwithLJSolver_IndexSingular_get, _pnpsll.PBwithLJSolver_IndexSingular_set)
    dielectricXS = property(_pnpsll.PBwithLJSolver_dielectricXS_get, _pnpsll.PBwithLJSolver_dielectricXS_set)
    dielectricYS = property(_pnpsll.PBwithLJSolver_dielectricYS_get, _pnpsll.PBwithLJSolver_dielectricYS_set)
    dielectricZS = property(_pnpsll.PBwithLJSolver_dielectricZS_get, _pnpsll.PBwithLJSolver_dielectricZS_set)
    dielectricZSSUM = property(_pnpsll.PBwithLJSolver_dielectricZSSUM_get, _pnpsll.PBwithLJSolver_dielectricZSSUM_set)
    dielectricXmS = property(_pnpsll.PBwithLJSolver_dielectricXmS_get, _pnpsll.PBwithLJSolver_dielectricXmS_set)
    dielectricYmS = property(_pnpsll.PBwithLJSolver_dielectricYmS_get, _pnpsll.PBwithLJSolver_dielectricYmS_set)
    dielectricZmS = property(_pnpsll.PBwithLJSolver_dielectricZmS_get, _pnpsll.PBwithLJSolver_dielectricZmS_set)
    QstS = property(_pnpsll.PBwithLJSolver_QstS_get, _pnpsll.PBwithLJSolver_QstS_set)
    PhiSingular = property(_pnpsll.PBwithLJSolver_PhiSingular_get, _pnpsll.PBwithLJSolver_PhiSingular_set)
    DielBoarderNum = property(_pnpsll.PBwithLJSolver_DielBoarderNum_get, _pnpsll.PBwithLJSolver_DielBoarderNum_set)
    IndexDielBoarder = property(_pnpsll.PBwithLJSolver_IndexDielBoarder_get, _pnpsll.PBwithLJSolver_IndexDielBoarder_set)
    dielectricXDB = property(_pnpsll.PBwithLJSolver_dielectricXDB_get, _pnpsll.PBwithLJSolver_dielectricXDB_set)
    dielectricYDB = property(_pnpsll.PBwithLJSolver_dielectricYDB_get, _pnpsll.PBwithLJSolver_dielectricYDB_set)
    dielectricZDB = property(_pnpsll.PBwithLJSolver_dielectricZDB_get, _pnpsll.PBwithLJSolver_dielectricZDB_set)
    dielectricZDBSUM = property(_pnpsll.PBwithLJSolver_dielectricZDBSUM_get, _pnpsll.PBwithLJSolver_dielectricZDBSUM_set)
    dielectricXmDB = property(_pnpsll.PBwithLJSolver_dielectricXmDB_get, _pnpsll.PBwithLJSolver_dielectricXmDB_set)
    dielectricYmDB = property(_pnpsll.PBwithLJSolver_dielectricYmDB_get, _pnpsll.PBwithLJSolver_dielectricYmDB_set)
    dielectricZmDB = property(_pnpsll.PBwithLJSolver_dielectricZmDB_get, _pnpsll.PBwithLJSolver_dielectricZmDB_set)
    ChargeNum = property(_pnpsll.PBwithLJSolver_ChargeNum_get, _pnpsll.PBwithLJSolver_ChargeNum_set)
    IndexCharge = property(_pnpsll.PBwithLJSolver_IndexCharge_get, _pnpsll.PBwithLJSolver_IndexCharge_set)
    dielectricCh = property(_pnpsll.PBwithLJSolver_dielectricCh_get, _pnpsll.PBwithLJSolver_dielectricCh_set)
    Qst = property(_pnpsll.PBwithLJSolver_Qst_get, _pnpsll.PBwithLJSolver_Qst_set)
    PhiCharge = property(_pnpsll.PBwithLJSolver_PhiCharge_get, _pnpsll.PBwithLJSolver_PhiCharge_set)
    PBZoneNum = property(_pnpsll.PBwithLJSolver_PBZoneNum_get, _pnpsll.PBwithLJSolver_PBZoneNum_set)
    IndexPBZone = property(_pnpsll.PBwithLJSolver_IndexPBZone_get, _pnpsll.PBwithLJSolver_IndexPBZone_set)
    PBLJZoneNum = property(_pnpsll.PBwithLJSolver_PBLJZoneNum_get, _pnpsll.PBwithLJSolver_PBLJZoneNum_set)
    IndexPBLJZone = property(_pnpsll.PBwithLJSolver_IndexPBLJZone_get, _pnpsll.PBwithLJSolver_IndexPBLJZone_set)
    PBLJQstZoneNum = property(_pnpsll.PBwithLJSolver_PBLJQstZoneNum_get, _pnpsll.PBwithLJSolver_PBLJQstZoneNum_set)
    IndexPBLJQstZone = property(_pnpsll.PBwithLJSolver_IndexPBLJQstZone_get, _pnpsll.PBwithLJSolver_IndexPBLJQstZone_set)
    dielectricPBLJQst = property(_pnpsll.PBwithLJSolver_dielectricPBLJQst_get, _pnpsll.PBwithLJSolver_dielectricPBLJQst_set)
    QstPBLJ = property(_pnpsll.PBwithLJSolver_QstPBLJ_get, _pnpsll.PBwithLJSolver_QstPBLJ_set)
    PBLJDBZoneNum = property(_pnpsll.PBwithLJSolver_PBLJDBZoneNum_get, _pnpsll.PBwithLJSolver_PBLJDBZoneNum_set)
    IndexPBLJDBZone = property(_pnpsll.PBwithLJSolver_IndexPBLJDBZone_get, _pnpsll.PBwithLJSolver_IndexPBLJDBZone_set)
    dielectricXPBLJDB = property(_pnpsll.PBwithLJSolver_dielectricXPBLJDB_get, _pnpsll.PBwithLJSolver_dielectricXPBLJDB_set)
    dielectricYPBLJDB = property(_pnpsll.PBwithLJSolver_dielectricYPBLJDB_get, _pnpsll.PBwithLJSolver_dielectricYPBLJDB_set)
    dielectricZPBLJDB = property(_pnpsll.PBwithLJSolver_dielectricZPBLJDB_get, _pnpsll.PBwithLJSolver_dielectricZPBLJDB_set)
    dielectricZPBLJDBSUM = property(_pnpsll.PBwithLJSolver_dielectricZPBLJDBSUM_get, _pnpsll.PBwithLJSolver_dielectricZPBLJDBSUM_set)
    dielectricXmPBLJDB = property(_pnpsll.PBwithLJSolver_dielectricXmPBLJDB_get, _pnpsll.PBwithLJSolver_dielectricXmPBLJDB_set)
    dielectricYmPBLJDB = property(_pnpsll.PBwithLJSolver_dielectricYmPBLJDB_get, _pnpsll.PBwithLJSolver_dielectricYmPBLJDB_set)
    dielectricZmPBLJDB = property(_pnpsll.PBwithLJSolver_dielectricZmPBLJDB_get, _pnpsll.PBwithLJSolver_dielectricZmPBLJDB_set)
    PBLJDBQstZoneNum = property(_pnpsll.PBwithLJSolver_PBLJDBQstZoneNum_get, _pnpsll.PBwithLJSolver_PBLJDBQstZoneNum_set)
    IndexPBLJDBQstZone = property(_pnpsll.PBwithLJSolver_IndexPBLJDBQstZone_get, _pnpsll.PBwithLJSolver_IndexPBLJDBQstZone_set)
    dielectricXPBLJDBQst = property(_pnpsll.PBwithLJSolver_dielectricXPBLJDBQst_get, _pnpsll.PBwithLJSolver_dielectricXPBLJDBQst_set)
    dielectricYPBLJDBQst = property(_pnpsll.PBwithLJSolver_dielectricYPBLJDBQst_get, _pnpsll.PBwithLJSolver_dielectricYPBLJDBQst_set)
    dielectricZPBLJDBQst = property(_pnpsll.PBwithLJSolver_dielectricZPBLJDBQst_get, _pnpsll.PBwithLJSolver_dielectricZPBLJDBQst_set)
    dielectricZPBLJDBQstSUM = property(_pnpsll.PBwithLJSolver_dielectricZPBLJDBQstSUM_get, _pnpsll.PBwithLJSolver_dielectricZPBLJDBQstSUM_set)
    dielectricXmPBLJDBQst = property(_pnpsll.PBwithLJSolver_dielectricXmPBLJDBQst_get, _pnpsll.PBwithLJSolver_dielectricXmPBLJDBQst_set)
    dielectricYmPBLJDBQst = property(_pnpsll.PBwithLJSolver_dielectricYmPBLJDBQst_get, _pnpsll.PBwithLJSolver_dielectricYmPBLJDBQst_set)
    dielectricZmPBLJDBQst = property(_pnpsll.PBwithLJSolver_dielectricZmPBLJDBQst_get, _pnpsll.PBwithLJSolver_dielectricZmPBLJDBQst_set)
    QstPBLJDB = property(_pnpsll.PBwithLJSolver_QstPBLJDB_get, _pnpsll.PBwithLJSolver_QstPBLJDB_set)
    NoSingular = _pnpsll.PBwithLJSolver_NoSingular
    Boarder = _pnpsll.PBwithLJSolver_Boarder
    Charge = _pnpsll.PBwithLJSolver_Charge
    DielBoarder = _pnpsll.PBwithLJSolver_DielBoarder
    ChargeAndDielBoarder = _pnpsll.PBwithLJSolver_ChargeAndDielBoarder
    Singular = _pnpsll.PBwithLJSolver_Singular

    def LoadParamFromPyDict(self, dict: "PyObject *") -> "int":
        return _pnpsll.PBwithLJSolver_LoadParamFromPyDict(self, dict)

    def SetContWorld(self, _world: "ContWorld") -> "int":
        return _pnpsll.PBwithLJSolver_SetContWorld(self, _world)

    def InitSolver(self) -> "int":
        return _pnpsll.PBwithLJSolver_InitSolver(self)

    def InitSolverNIB(self) -> "int":
        return _pnpsll.PBwithLJSolver_InitSolverNIB(self)

    def Solve(self) -> "int":
        return _pnpsll.PBwithLJSolver_Solve(self)

    def AnalyseExplosion(self) -> "int":
        return _pnpsll.PBwithLJSolver_AnalyseExplosion(self)

    def CalcSystemEnergy(self, iteration: "int") -> "int":
        return _pnpsll.PBwithLJSolver_CalcSystemEnergy(self, iteration)

    def CalcSystemEnergyStdDevPhi(self, iteration: "int") -> "int":
        return _pnpsll.PBwithLJSolver_CalcSystemEnergyStdDevPhi(self, iteration)

    def ShowParameters(self) -> "int":
        return _pnpsll.PBwithLJSolver_ShowParameters(self)

    def ShowProperties(self) -> "int":
        return _pnpsll.PBwithLJSolver_ShowProperties(self)

# Register PBwithLJSolver in _pnpsll:
_pnpsll.PBwithLJSolver_swigregister(PBwithLJSolver)
PBwithLJConvFacMaxHistory = cvar.PBwithLJConvFacMaxHistory


#pnpmod.SolvePBSR(contworld, MaxInterations=100, Tolerance=0.0, Relaxation=1.6)
def SolvePBSR(contworld,**kwargs):
	pbsr=PBwithLJSolver()

	pbsr.MaxIterations = kwargs.get("MaxIterations",200)
	pbsr.Convergence = kwargs.get("Tolerance",0.0)
	pbsr.Relaxation = kwargs.get("Relaxation",1.6)
	pbsr.ConvergenceCheck = kwargs.get("ConvergenceCheck",20)
	pbsr.solver = kwargs.get("solver",0)
	pbsr.verbose = kwargs.get("verbose",True)
	pbsr.bPBExpAll = kwargs.get("bPBExpAll",False)
	pbsr.bAnalyseExplosion = kwargs.get("bAnalyseExplosion",False)

	pbsr.ShowParameters()
#pbsr.SetRelaxation(pbsr.Relaxation)


	pbsr.SetContWorld(contworld)
	pbsr.InitSolver()
	pbsr.Solve()
	del pbsr






