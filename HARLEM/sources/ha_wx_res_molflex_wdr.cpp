//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: ha_wx_res_molflex.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "ha_wx_res_molflex_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "ha_wx_res_molflex_wdr.h"


// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Implement window functions

wxSizer *molFlexDlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item2 = new wxStaticText( parent, IDMF_TEXT, wxT("Hydrogen Bond (HB) parameters:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, wxT("D-A cutoff Distance (Ang)"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, ID_HBOND_CUTOFF_DIST, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item3->Add( item5, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item7 = new wxStaticText( parent, IDMF_TEXT, wxT("Max H-D-A Angle (deg)"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_HB_MAX_ANGLE, wxT(""), wxDefaultPosition, wxSize(110,-1), 0 );
    item6->Add( item8, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item9 = new wxStaticText( parent, IDMF_TEXT, wxT("Hydrophobic Tethers built parameters:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item9, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, 
        wxT("Hydrophobic Tethers\n")
        wxT("Cutoff Distance (Ang)"),
        wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, ID_PH_CUTOFF_DIST, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item10->Add( item12, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item14 = new wxButton( parent, ID_FIND_HBOND_AND_PH, 
        wxT("Find H-Bonds and \n")
        wxT("Hydrophobic Tethers"),
        wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item15 = new wxButton( parent, ID_COMPUTE_DUTY_CYCLE, 
        wxT("Compute Contacts Duty Cycle\n")
        wxT("Along MD trajectory:"),
        wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item13, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item16 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item17 = new wxButton( parent, ID_CHOOSE_MD_TRAJ, wxT("Choose MD trajectory:"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item18 = new wxTextCtrl( parent, ID_MD_TRAJ_NAME, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item16->Add( item18, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item16, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item19 = new wxStaticText( parent, IDMF_TEXT, wxT("Additional Contact Selection Criteria to Run FIRST:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item19, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item21 = new wxStaticText( parent, IDMF_TEXT, wxT("HB Duty Cycle Cutoff (%)   "), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item21, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item22 = new wxTextCtrl( parent, ID_HB_DUTY_CYCLE_CUTOFF, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item20->Add( item22, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item20, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item23 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item24 = new wxStaticText( parent, IDMF_TEXT, 
        wxT("H-Bond Energy \n")
        wxT("Cutoff (kcal/mol)   "),
        wxDefaultPosition, wxDefaultSize, 0 );
    item23->Add( item24, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item25 = new wxTextCtrl( parent, ID_HB_ENERGY_CUTOFF, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item23->Add( item25, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item23, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item26 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item27 = new wxStaticText( parent, IDMF_TEXT, 
        wxT("Hydrophobic Tethers \n")
        wxT("Duty Cycle Cutoff (%)   "),
        wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item27, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item28 = new wxTextCtrl( parent, ID_HPT_DUTY_CYCLE_CUTOFF, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item26->Add( item28, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item26, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item29 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item30 = new wxButton( parent, ID_SAVE_FIRST_INPUT_FILES, wxT("Save FIRST Input Files"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item30, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item31 = new wxButton( parent, ID_RUN_FIRST, wxT("Run FIRST"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item31, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item1->Add( item29, 0, wxFIXED_MINSIZE|wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item32 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item33 = new wxStaticText( parent, IDMF_TEXT, 
        wxT("Select \n")
        wxT("Atom Groups    "),
        wxDefaultPosition, wxDefaultSize, 0 );
    item32->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString strs34[] = 
    {
        wxT("ChoiceItem")
    };
    wxChoice *item34 = new wxChoice( parent, ID_ATMGRP1_SELECT, wxDefaultPosition, wxDefaultSize, 1, strs34, 0 );
    item32->Add( item34, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item32, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item35 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item36 = new wxStaticText( parent, IDMF_TEXT, 
        wxT("Select \n")
        wxT("Atom Group B   "),
        wxDefaultPosition, wxDefaultSize, 0 );
    item35->Add( item36, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString strs37[] = 
    {
        wxT("ChoiceItem")
    };
    wxChoice *item37 = new wxChoice( parent, ID_ATMGRP2_SELECT, wxDefaultPosition, wxDefaultSize, 1, strs37, 0 );
    item35->Add( item37, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item35, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item38 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item39 = new wxButton( parent, ID_UPDATE_CHART, wxT("Update Table"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item39, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item40 = new wxButton( parent, ID_EDIT_GRPS, wxT("Edit Groups"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item41 = new wxButton( parent, ID_MD_STATS, wxT("MD Statistics"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item41, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item42 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item43 = new wxStaticText( parent, IDMF_TEXT, wxT("Hydrogen Bond (HB) Selection:"), wxDefaultPosition, wxDefaultSize, 0 );
    item42->Add( item43, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxListCtrl *item44 = new wxListCtrl( parent, ID_HB_LIST, wxDefaultPosition, wxSize(400,120), wxLC_REPORT|wxSUNKEN_BORDER );
    item42->Add( item44, 1, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item45 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item46 = new wxButton( parent, ID_DEL_SELECT_HB, wxT("Delete Selected H-Bonds"), wxDefaultPosition, wxDefaultSize, 0 );
    item45->Add( item46, 0, wxALIGN_CENTER|wxALL, 5 );

    item42->Add( item45, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item47 = new wxStaticText( parent, IDMF_TEXT, wxT("Hydrophobic Tethers (PH) Selection:"), wxDefaultPosition, wxDefaultSize, 0 );
    item42->Add( item47, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxListCtrl *item48 = new wxListCtrl( parent, ID_PH_LIST, wxDefaultPosition, wxSize(400,120), wxLC_REPORT|wxSUNKEN_BORDER );
    item42->Add( item48, 1, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item49 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item50 = new wxButton( parent, ID_DEL_SELECT_PH, wxT("Delete Selected Hydrophobic Tethers"), wxDefaultPosition, wxDefaultSize, 0 );
    item49->Add( item50, 0, wxALIGN_CENTER|wxALL, 5 );

    item42->Add( item49, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item42, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

// Implement toolbar functions

// Implement bitmap functions


// End of generated file
