//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: ha_wx_ed.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "ha_wx_ed_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "ha_wx_ed_wdr.h"


// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Implement window functions

wxSizer *EssentialDynamicsDlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, wxT("Enter Topology File (PDB)"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item4 = new wxTextCtrl( parent, ID_PDB_TEXTCTRL, wxT(""), wxDefaultPosition, wxSize(210,-1), 0 );
    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item5 = new wxButton( parent, ID_BROWSE_PDB, wxT("Browse"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, wxT("Enter EigenVector File      "), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_EV_TEXTCTRL, wxT(""), wxDefaultPosition, wxSize(210,-1), 0 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item9 = new wxButton( parent, ID_BROWSE_EV, wxT("Browse"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, wxT("Enter Projection File         "), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, ID_PPJ_TEXTCTRL, wxT(""), wxDefaultPosition, wxSize(210,-1), 0 );
    item10->Add( item12, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item13 = new wxButton( parent, ID_BROWSE_PROJ, wxT("Browse"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item15 = new wxButton( parent, ID_BACK_BUTTON, wxT("Back"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Enable( false );
    item14->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    item14->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item16 = new wxButton( parent, ID_BUTTON_NEXT, wxT("Next"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item14, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *cluster_anal_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxNotebook *item2 = new wxNotebook( parent, IDD_CLUSTER_ANAL, wxDefaultPosition, wxSize(500,500), 0 );
#if !wxCHECK_VERSION(2,5,2)
    wxNotebookSizer *item1 = new wxNotebookSizer( item2 );
#else
    wxWindow *item1 = item2;
#endif

    wxPanel *item3 = new wxPanel( item2, -1 );
    PlatoAnalysisPage( item3, FALSE );
    item2->AddPage( item3, wxT("Plato Clustering Analysis") );

    wxPanel *item4 = new wxPanel( item2, -1 );
    EssentialDynamicsDlg( item4, FALSE );
    item2->AddPage( item4, wxT("Essential Dynamics PTraj") );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *PlatoAnalysisPage( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item3 = new wxButton( parent, IDC_ED_CHOOSE_MD_TRAJ, wxT("MD Trajectory File:"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item4 = new wxTextCtrl( parent, IDC_ED_MD_TRAJ_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item2->Add( item4, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item6 = new wxButton( parent, IDC_ED_CHOOSE_ATGRP, wxT("Atom Group to Analyze:"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, IDC_ED_ATGRP_TO_ANAL, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item5->Add( item7, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item9 = new wxButton( parent, IDC_ED_CHOOSE_PLATO_TRAJ, wxT("Trajectory in PLATO format:"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, IDC_ED_TRAJ_FILE_PLATO, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item8->Add( item10, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item11 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item12 = new wxButton( parent, IDC_ED_GEN_PLATO_TRAJ, wxT("Convert MD trajectory to PLATO format"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item11, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, wxT("Analysis Type:"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs15 = (wxString*) NULL;
    wxChoice *item15 = new wxChoice( parent, IDC_ED_PLATO_ANAL_TYPE, wxDefaultPosition, wxSize(100,-1), 0, strs15, 0 );
    item13->Add( item15, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item13, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item16 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, wxT("N Clusters:"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item18 = new wxTextCtrl( parent, IDC_ED_N_CLUST, wxT(""), wxDefaultPosition, wxSize(30,-1), 0 );
    item16->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT, wxT("N Eigen Vectors:"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item20 = new wxTextCtrl( parent, IDC_ED_N_EIG_VEC, wxT(""), wxDefaultPosition, wxSize(30,-1), 0 );
    item16->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item16, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item21 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item22 = new wxStaticText( parent, ID_TEXT, wxT("N Time Projections:"), wxDefaultPosition, wxDefaultSize, 0 );
    item21->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item23 = new wxTextCtrl( parent, IDC_ED_N_TIME_PROJ, wxT(""), wxDefaultPosition, wxSize(30,-1), 0 );
    item21->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item24 = new wxCheckBox( parent, IDC_ED_COMP_SIM_MATRIX, wxT("Compute Similarity Matrix"), wxDefaultPosition, wxDefaultSize, 0 );
    item21->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item21, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item25 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item26 = new wxStaticText( parent, ID_TEXT, wxT("PLATO input file:"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item27 = new wxTextCtrl( parent, IDC_ED_PLATO_INPUT_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item25->Add( item27, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item25, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item28 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item29 = new wxStaticText( parent, ID_TEXT, wxT("PLATO run file:"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item30 = new wxTextCtrl( parent, IDC_ED_PLATO_RUN_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item28->Add( item30, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item28, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item31 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item32 = new wxButton( parent, IDC_ED_SAVE_PLATO_INPUT, wxT("Save PLATO Input File"), wxDefaultPosition, wxDefaultSize, 0 );
    item31->Add( item32, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item33 = new wxButton( parent, IDC_ED_RUN_PLATO, wxT("Run PLATO"), wxDefaultPosition, wxDefaultSize, 0 );
    item31->Add( item33, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item31, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item34 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item35 = new wxButton( parent, IDC_ED_CHOOSE_PLATO_OUTPUT, wxT("PLATO output file"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item35, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item36 = new wxTextCtrl( parent, IDC_ED_PLATO_OUTPUT_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item34->Add( item36, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item34, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item37 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item38 = new wxButton( parent, IDC_ED_LOAD_PLATO_OUTPUT, wxT("Load PLATO Output File"), wxDefaultPosition, wxDefaultSize, 0 );
    item37->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item37, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 3, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item39 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item40 = new wxStaticText( parent, ID_TEXT, wxT("Eigen Vectors:"), wxDefaultPosition, wxDefaultSize, 0 );
    item39->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString strs41[] = 
    {
        wxT("ListItem")
    };
    wxListBox *item41 = new wxListBox( parent, IDC_ED_EIGVEC_LIST, wxDefaultPosition, wxSize(80,100), 1, strs41, wxLB_SINGLE );
    item39->Add( item41, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item42 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item43 = new wxButton( parent, IDC_ED_RUN_VEC_ANIMATION, wxT("Run Animation"), wxDefaultPosition, wxDefaultSize, 0 );
    item42->Add( item43, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item44 = new wxButton( parent, IDC_ED_STOP_VEC_ANIMATION, wxT("Stop Animation"), wxDefaultPosition, wxDefaultSize, 0 );
    item42->Add( item44, 1, wxALIGN_CENTER|wxALL, 5 );

    item39->Add( item42, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item45 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item46 = new wxButton( parent, IDC_ED_SHIFT_ALONG_VEC, wxT("Shift Along Selected Vector by:"), wxDefaultPosition, wxDefaultSize, 0 );
    item45->Add( item46, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item47 = new wxTextCtrl( parent, IDC_ED_SHIFT_VAL, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item45->Add( item47, 0, wxALIGN_CENTER|wxALL, 5 );

    item39->Add( item45, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item48 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item49 = new wxButton( parent, IDC_ED_PROJ_TRAJ, wxT("Project Trajectory to Eigen Vectors"), wxDefaultPosition, wxDefaultSize, 0 );
    item48->Add( item49, 0, wxALIGN_CENTER|wxALL, 5 );

    item39->Add( item48, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item50 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item51 = new wxStaticText( parent, ID_TEXT, wxT("Time Projections File:"), wxDefaultPosition, wxDefaultSize, 0 );
    item50->Add( item51, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item52 = new wxTextCtrl( parent, IDC_ED_TIME_PROJ_FILE, wxT(""), wxDefaultPosition, wxSize(120,-1), 0 );
    item50->Add( item52, 0, wxALIGN_CENTER|wxALL, 5 );

    item39->Add( item50, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item53 = new wxStaticText( parent, ID_TEXT, wxT("Time Projections:"), wxDefaultPosition, wxDefaultSize, 0 );
    item39->Add( item53, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs54 = (wxString*) NULL;
    wxListBox *item54 = new wxListBox( parent, IDC_ED_TIME_PROJ_LIST, wxDefaultPosition, wxSize(80,100), 0, strs54, wxLB_MULTIPLE );
    item39->Add( item54, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item55 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item56 = new wxButton( parent, IDC_ED_PLOT_TIME_PROJ, wxT("Plot Selected Time Proj"), wxDefaultPosition, wxDefaultSize, 0 );
    item55->Add( item56, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item57 = new wxButton( parent, IDC_ED_PLOT_PROJ_2_VS_1, wxT("Plot Proj 2 Vs Proj 1"), wxDefaultPosition, wxDefaultSize, 0 );
    item55->Add( item57, 0, wxALIGN_CENTER|wxALL, 5 );

    item39->Add( item55, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item39, 2, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

wxMenuBar *collect_crd_menu()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( IDM_ED_TEST_GRAPH, wxT("Test 2D Graph"), wxT("") );
    item0->Append( item1, wxT("PLATO") );
    
    return item0;
}

// Implement toolbar functions

// Implement bitmap functions


// End of generated file
