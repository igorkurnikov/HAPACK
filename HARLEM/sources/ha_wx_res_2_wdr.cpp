//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: ha_wx_res_2.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "ha_wx_res_2_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "ha_wx_res_2_wdr.h"


// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Custom source
#include "ctrl_wx.h"

// Implement window functions

wxSizer *inter_mol_setup_page( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxButton *item3 = new wxButton( parent, IDC_INTERMOL_EL_STAT, wxT("Calculate Electrostatic Interactions"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, IDC_INTERMOL_TOT_ENE, wxT("Calculate Total Interaction Energy"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item6 = new wxCheckBox( parent, IDC_MC_DOCK_ET_RATE2, wxT("Calculate Intermolecular ET Rate"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT_ELECTROSTATIC_MODEL, wxT("Electrostatics model: "), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString strs8[] = 
    {
        wxT("NO ELECTROSTATIC INTERACTIONS"), 
        wxT("CONTINUUM MODEL FOR ELECTROSTATICS"), 
        wxT("COULOMB LAW ELECTROSTATICS"), 
        wxT("CHARGES IN THE FIELD ELECTROSTATIC MODEL")
    };
    wxChoice *item8 = new wxChoice( parent, IDC_MC_DOCK_ELECTR_MODEL, wxDefaultPosition, wxSize(200,-1), 4, strs8, 0 );
    item5->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item9 = new wxCheckBox( parent, IDC_INTERMOL_CHANGES_PK, wxT("Compute pK Changes"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT_MOL_1, wxT("Mol 1:"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, IDC_INTERMOL_INT_COORD_1, wxT(""), wxDefaultPosition, wxSize(400,-1), 0 );
    item10->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT_MOL_2, wxT("Mol 2:"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, IDC_INTERMOL_INT_COORD_2, wxT(""), wxDefaultPosition, wxSize(400,-1), 0 );
    item13->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item16 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item17 = new wxButton( parent, IDC_INTERMOL_SET_INT_COORD, wxT("Set Internal Coordinates"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item18 = new wxButton( parent, IDC_INTERMOL_COMP_INT_COORD, wxT("Compute Current Internal Coordinates"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *inter_mol_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxNotebook *item2 = new wxNotebook( parent, ID_NOTEBOOK, wxDefaultPosition, wxDefaultSize, 0 );
#if !wxCHECK_VERSION(2,5,2)
    wxNotebookSizer *item1 = new wxNotebookSizer( item2 );
#else
    wxWindow *item1 = item2;
#endif

    wxPanel *item3 = new wxPanel( item2, -1 );
    inter_mol_setup_page( item3, FALSE );
    item2->AddPage( item3, wxT("InterMol Setup") );

    wxPanel *item4 = new wxPanel( item2, -1 );
    inter_mol_mc_dock_page( item4, FALSE );
    item2->AddPage( item4, wxT("MC Docking") );

    wxPanel *item5 = new wxPanel( item2, -1 );
    simulate_anneal_dlg( item5, FALSE );
    item2->AddPage( item5, wxT("Simulate Annealing") );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *simulate_anneal_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT_DEV_IN_CONSTR, wxT("Deviation in constrains distance, A"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, IDC_DEV_CONST_DIST, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item4 = new wxStaticText( parent, IDC_TEXT_WEIGHT_1, wxT("Weight"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, IDC_WEIGHT_CONST_DIST, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item5, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT_PACK_DIST, wxT("Packing distance (COM) "), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, IDC_PACK_DIST, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT_STD_DEV_1, wxT("St.dev."), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, IDC_STDEV_PACK_DIST, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item6->Add( item10, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT_WEIGHT_2, wxT("Weight"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, IDC_WEIGHT_PACK_DIST, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item6->Add( item12, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT_PACK_ANGLE, wxT("Packing angle"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, IDC_PACK_ANGLE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item13->Add( item15, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item16 = new wxStaticText( parent, ID_TEXT_STD_DEV_2, wxT("St.dev."), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item17 = new wxTextCtrl( parent, IDC_STDEV_PACK_ANGLE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item13->Add( item17, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item18 = new wxStaticText( parent, ID_TEXT_WEIGHT_3, wxT("Weight"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item19 = new wxTextCtrl( parent, IDC_WEIGHT_PACK_ANGLE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item13->Add( item19, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item21 = new wxStaticText( parent, ID_TEXT_DIST_HELIX_CONT, wxT("Distance in helix contact"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item22 = new wxTextCtrl( parent, IDC_HEL_CONT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item20->Add( item22, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item23 = new wxStaticText( parent, ID_TEXT_STD_DEV_3, wxT("St.dev."), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item24 = new wxTextCtrl( parent, IDC_STDEV_HEL_CONT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item20->Add( item24, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item25 = new wxStaticText( parent, ID_TEXT_WEIGHT_4, wxT("Weight"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item26 = new wxTextCtrl( parent, IDC_WEIGHT_HEL_CONT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item20->Add( item26, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item20, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item27 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item28 = new wxStaticText( parent, ID_TEXT_PACKING_DENSITY, wxT("Packing density"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item28, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item29 = new wxTextCtrl( parent, IDC_PACK_DEN, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item27->Add( item29, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item30 = new wxStaticText( parent, ID_TEXT_STD_DEV_4, wxT("St.dev"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item31 = new wxTextCtrl( parent, IDC_STDEV_PACK_DEN, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item27->Add( item31, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item32 = new wxStaticText( parent, ID_TEXT_WEIGHT_5, wxT("Weight"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item33 = new wxTextCtrl( parent, IDC_WEIGHT_PACK_DEN, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item27->Add( item33, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item27, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item34 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item35 = new wxStaticText( parent, ID_TEXT_DEVIATION_OF_SYMM, wxT("Deviation of symmetry"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item35, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item36 = new wxTextCtrl( parent, IDC_SYM, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item34->Add( item36, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item37 = new wxStaticText( parent, ID_TEXT_WEIGHT_6, wxT("Weight"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item37, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item38 = new wxTextCtrl( parent, IDC_WEIGHT_SYM, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item34->Add( item38, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item34, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item39 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item40 = new wxStaticText( parent, ID_TEXT_ANGLE_SA_HELIX, wxT("Angle of SA helix face"), wxDefaultPosition, wxDefaultSize, 0 );
    item39->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item41 = new wxTextCtrl( parent, IDC_ANG_SA_FACE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item39->Add( item41, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item42 = new wxStaticText( parent, ID_TEXT_WEIGHT_7, wxT("Weight"), wxDefaultPosition, wxDefaultSize, 0 );
    item39->Add( item42, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item43 = new wxTextCtrl( parent, IDC_WEIGHT_SA_FACE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item39->Add( item43, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item39, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item44 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item45 = new wxStaticText( parent, ID_TEXT_WEIGHT_VDW, wxT("Weight of vdW repulsion"), wxDefaultPosition, wxDefaultSize, 0 );
    item44->Add( item45, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item46 = new wxTextCtrl( parent, IDC_WEIGHT_VDW, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item44->Add( item46, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item47 = new wxStaticText( parent, ID_TEXT_VDW_CUTOFF, wxT("vdW cutoff"), wxDefaultPosition, wxDefaultSize, 0 );
    item44->Add( item47, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item48 = new wxTextCtrl( parent, IDC_CUTOFF_VDW, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item44->Add( item48, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item44, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxCheckBox *item49 = new wxCheckBox( parent, IDC_SCORE, wxT("Use score function"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item49, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item50 = new wxCheckBox( parent, IDC_RUN_REM, wxT("Run replica exchange"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item50, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item51 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item52 = new wxStaticText( parent, ID_TEXT_NUM_REPLICAS, wxT("Number of replicas"), wxDefaultPosition, wxDefaultSize, 0 );
    item51->Add( item52, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item53 = new wxTextCtrl( parent, IDC_NUM_REPLICAS, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item51->Add( item53, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item54 = new wxStaticText( parent, ID_TEXT_NUM_REM, wxT("Number of REM steps"), wxDefaultPosition, wxDefaultSize, 0 );
    item51->Add( item54, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item55 = new wxTextCtrl( parent, IDC_REM_STEPS, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item51->Add( item55, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item51, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item56 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item57 = new wxStaticText( parent, ID_TEXT_HIGH_TEMP, wxT("High temperature"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item57, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item58 = new wxTextCtrl( parent, IDC_HI_TEMP, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item56->Add( item58, 0, wxALIGN_CENTER|wxALL, 0 );

    wxCheckBox *item59 = new wxCheckBox( parent, IDC_VAR_TEMP, wxT("Adjust temperature"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item59, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item56, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *inter_mol_mc_dock_page( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT_MC_TRAJ_FILE, wxT("MC Trajectory file:"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item4 = new wxTextCtrl( parent, IDC_MC_DOCK_TRAJ_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item2->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item5 = new wxButton( parent, IDC_MC_DOCK_RUN, wxT("Run MC Dock"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item6 = new wxButton( parent, IDC_MC_DOCK_PLAYBACK_TRAJ, wxT("Playback Trajectory"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item7 = new wxCheckBox( parent, IDC_OPTIM_MD, wxT("Optimize structure with MD"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item8 = new wxCheckBox( parent, IDC_MC_DOCK_DONT_CALC_ENE, wxT("Do not calculate energies"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item9 = new wxCheckBox( parent, IDC_MC_DOCK_SAVE_GIF, wxT("Save snapshots as GIF files"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item10 = new wxCheckBox( parent, IDC_MC_DOCK_SAVE_PICT, wxT("Save snapshots as PICT files"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item11 = new wxButton( parent, IDC_MC_DOCK_PAUSE, wxT("Pause "), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item11, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item12 = new wxButton( parent, IDC_MC_DOCK_RESUME, wxT("Resume "), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item12, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item13 = new wxButton( parent, IDC_MC_DOCK_STOP, wxT("Stop "), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item13, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 0 );

    item1->Add( item2, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM|wxSHAPED, 20 );

    wxBoxSizer *item14 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item16 = new wxStaticText( parent, ID_TEXT_MC_TEMP, wxT("MC temperature (K)"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item17 = new wxTextCtrl( parent, IDC_MC_DOCK_TEMP, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item15->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item14->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item18 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT_NUM_STEPS, wxT("Number of steps:"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item20 = new wxTextCtrl( parent, IDC_MC_DOCK_NUM_STEPS, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item18->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    item14->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item21 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item22 = new wxStaticText( parent, ID_TEXT_ROT_SCALE_FACTOR, wxT("Rotation scale  factor:"), wxDefaultPosition, wxDefaultSize, 0 );
    item21->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item23 = new wxTextCtrl( parent, IDC_MC_DOCK_ANG_SCALE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item21->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    item14->Add( item21, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item24 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item25 = new wxStaticText( parent, ID_TEXT_TRANSL_SCALE_FACTOR, wxT("Translation scale factor:"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item26 = new wxTextCtrl( parent, IDC_MC_DOCK_TR_SCALE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item24->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    item14->Add( item24, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item27 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item28 = new wxStaticText( parent, ID_TEXT_DELAY_TIME, wxT("Delay time (ms)"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item29 = new wxTextCtrl( parent, IDC_MC_DOCK_DELAY, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item27->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    item14->Add( item27, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxCheckBox *item30 = new wxCheckBox( parent, IDC_MC_DOCK_DISCR_MOVES, wxT("Discrete Moves"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item30, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item31 = new wxStaticText( parent, ID_TEXT_SKIP_POINTS, wxT("Skip points:"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item31, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item32 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item33 = new wxStaticText( parent, ID_TEXT_AT_THE_START, wxT("At the start:"), wxDefaultPosition, wxDefaultSize, 0 );
    item32->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item34 = new wxTextCtrl( parent, IDC_MC_DOCK_SKIP_INIT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item32->Add( item34, 0, wxALIGN_CENTER|wxALL, 5 );

    item14->Add( item32, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item35 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item36 = new wxStaticText( parent, ID_TEXT_BETWEEN, wxT("between:"), wxDefaultPosition, wxDefaultSize, 0 );
    item35->Add( item36, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item37 = new wxTextCtrl( parent, IDC_MC_DOCK_SKIP_BETWEEN, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item35->Add( item37, 0, wxALIGN_CENTER|wxALL, 5 );

    item14->Add( item35, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item38 = new wxStaticText( parent, ID_TEXT_ATOMS_TO_TRACE, wxT("Atoms to trace:"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item38, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item39 = new wxTextCtrl( parent, IDC_MC_DOCK_TRACE_AT_REF, wxT(""), wxDefaultPosition, wxSize(250,-1), 0 );
    item14->Add( item39, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item40 = new wxCheckBox( parent, IDC_MC_DOCK_TRACE_ATOMS, wxT("Trace Atoms"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item40, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

// Implement toolbar functions

// Implement bitmap functions


// End of generated file
