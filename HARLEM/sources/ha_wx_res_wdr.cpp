//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: ha_wx_res.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "ha_wx_res_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "ha_wx_res_wdr.h"


// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Custom source
#include "ctrl_wx.h"

// Implement window functions

wxSizer *edit_ham_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxGrid *item1 = new wxGrid( parent, ID_HUCK_HAM_GRID, wxDefaultPosition, wxSize(400,200), wxWANTS_CHARS );
    item1->CreateGrid( 10, 1, wxGrid::wxGridSelectCells );
    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item2 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item3 = new wxButton( parent, ID_EDH_REFRESH_GRID, wxT("Refresh View"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, ID_BUTTON, wxT("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *bot_bar_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item2 = new wxButton( parent, IDC_CMD_EXEC, wxT("Execute Command:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    CmdTextCtrl *item3 = new CmdTextCtrl( parent, IDC_CMD_TXT, wxT(""), wxDefaultPosition, wxSize(580,-1), wxTE_PROCESS_ENTER );
    item1->Add( item3, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item1, 2, wxGROW|wxALIGN_CENTER_VERTICAL, 0 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, wxT("Log:"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, IDC_LOG_WIN, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY );
    item6->SetFont( wxFont( 8, wxROMAN, wxNORMAL, wxNORMAL ) );
    item4->Add( item6, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item4, 3, wxGROW|wxALIGN_CENTER_VERTICAL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *save_mol_file_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, wxT("Directory:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, IDC_DIR_NAME, wxT(""), wxDefaultPosition, wxSize(250,-1), 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, IDC_CHOOSE_DIR, wxT("Choose Dir"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxListCtrl *item5 = new wxListCtrl( parent, IDC_FILE_LIST, wxDefaultPosition, wxSize(400,120), wxLC_LIST|wxLC_NO_HEADER|wxSUNKEN_BORDER|wxLC_SORT_ASCENDING );
    item0->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, wxT("File Name"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, IDC_FILE_NAME, wxT(""), wxDefaultPosition, wxSize(250,-1), 0 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item9 = new wxButton( parent, IDC_SAVE_FILE, wxT("Save File"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, wxT("File Type"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs12 = (wxString*) NULL;
    wxChoice *item12 = new wxChoice( parent, IDC_FILE_TYPE, wxDefaultPosition, wxDefaultSize, 0, strs12, 0 );
    item10->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item14 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item15 = new wxCheckBox( parent, IDC_SAVE_TRANSFORMED, wxT("Save Transformed"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item16 = new wxCheckBox( parent, IDC_SAVE_CONNECT, wxT("Save Connectivity"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item16, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item17 = new wxCheckBox( parent, IDC_SAVE_FRAGMENTS, wxT("Save Fragments"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->SetValue( TRUE );
    item14->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item13->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item18 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item19 = new wxCheckBox( parent, IDC_SAVE_AMBER_PDB, wxT("Save AMBER PDB"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item19, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item20 = new wxCheckBox( parent, IDC_SAVE_SEP_WAT_MOL, wxT("Save Separate Water Molecules"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item20, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item13->Add( item18, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item13, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *save_image_file_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, wxT("Directory:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, IDC_DIR_NAME, wxT(""), wxDefaultPosition, wxSize(250,-1), 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, IDC_CHOOSE_DIR, wxT("Choose Dir"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxListCtrl *item5 = new wxListCtrl( parent, IDC_FILE_LIST, wxDefaultPosition, wxSize(400,120), wxLC_LIST|wxLC_NO_HEADER|wxSUNKEN_BORDER );
    item0->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, wxT("File Name"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, IDC_FILE_NAME, wxT(""), wxDefaultPosition, wxSize(250,-1), 0 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item9 = new wxButton( parent, IDC_SAVE_FILE, wxT("Save File"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, wxT("File Type"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs12 = (wxString*) NULL;
    wxChoice *item12 = new wxChoice( parent, IDC_FILE_TYPE, wxDefaultPosition, wxSize(250,-1), 0, strs12, 0 );
    item10->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *load_script_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, wxT("Directory:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, IDC_DIR_NAME, wxT(""), wxDefaultPosition, wxSize(250,-1), 0 );
    item1->Add( item3, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, IDC_CHOOSE_DIR, wxT("Choose Dir"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item6 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, wxT("Script Text"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item9 = new wxButton( parent, IDC_EXEC_SCRIPT_WIN, wxT("Execute Script"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item9, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxButton *item10 = new wxButton( parent, IDC_SAVE_SCRIPT_TO_FILE, wxT("Save Script To File"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    item6->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxTextCtrl *item11 = new wxTextCtrl( parent, IDC_SCRIPT_TEXT, wxT(""), wxDefaultPosition, wxSize(400,200), wxTE_MULTILINE|wxVSCROLL|wxHSCROLL );
    item6->Add( item11, 0, wxGROW|wxALL, 5 );

    item5->Add( item6, 3, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item12 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, wxT("Scripts in the directory:"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    item12->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxListCtrl *item15 = new wxListCtrl( parent, IDC_FILE_LIST, wxDefaultPosition, wxSize(200,200), wxLC_LIST|wxLC_NO_HEADER|wxSUNKEN_BORDER );
    item12->Add( item15, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item5->Add( item12, 2, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item16 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, wxT("File Name"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item18 = new wxTextCtrl( parent, IDC_FILE_NAME, wxT(""), wxDefaultPosition, wxSize(250,-1), 0 );
    item16->Add( item18, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item19 = new wxButton( parent, IDC_EXEC_SCRIPT_FILE, wxT("Execute Script From File"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item16, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item21 = new wxStaticText( parent, ID_TEXT, wxT("File Type"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString strs22[] = 
    {
        wxT("ChoiceItem")
    };
    wxChoice *item22 = new wxChoice( parent, IDC_FILE_TYPE, wxDefaultPosition, wxSize(250,-1), 1, strs22, 0 );
    item20->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item20, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *object3d_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, wxT("List of Objects:"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString strs4[] = 
    {
        wxT("ListItem")
    };
    wxListBox *item4 = new wxListBox( parent, IDC_OBJ3D_OBJ_LIST, wxDefaultPosition, wxSize(160,120), 1, strs4, wxLB_MULTIPLE );
    item2->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, IDC_OBJ3D_NAME, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item2->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item6 = new wxBoxSizer( wxVERTICAL );

    wxButton *item7 = new wxButton( parent, IDC_OBJ3D_DELETE, wxT("Delete"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item8 = new wxButton( parent, IDC_OBJ3D_DISPLAY, wxT("Display"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item9 = new wxButton( parent, IDC_OBJ3D_UNDISPLAY, wxT("Undisplay"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item10 = new wxButton( parent, IDC_OBJ3D_SET_TRANSP, wxT("Set Transparency"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, wxT("Transparency:"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, IDC_OBJ3D_TRANSP, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item6->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item13 = new wxButton( parent, IDC_OBJ3D_UPDATE, wxT("Update Object List"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *mol_mech_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxNotebook *item3 = new wxNotebook( parent, ID_MM_DLG, wxDefaultPosition, wxDefaultSize, 0 );
#if !wxCHECK_VERSION(2,5,2)
    wxNotebookSizer *item2 = new wxNotebookSizer( item3 );
#else
    wxWindow *item2 = item3;
#endif

    wxPanel *item4 = new wxPanel( item3, -1 );
    mm_run_param_page( item4, FALSE );
    item3->AddPage( item4, wxT("MM Run parameters") );

    wxPanel *item5 = new wxPanel( item3, -1 );
    mm_par_setup_page( item5, FALSE );
    item3->AddPage( item5, wxT("Force Field Parameters") );

    wxPanel *item6 = new wxPanel( item3, -1 );
    mm_edit_model_page( item6, FALSE );
    item3->AddPage( item6, wxT("Edit MM Model") );

    wxPanel *item7 = new wxPanel( item3, -1 );
    mm_md_anal_page( item7, FALSE );
    item3->AddPage( item7, wxT("MD analysis") );

    item1->Add( item2, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *mm_edit_model_page( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, wxT("Molecular Mechanics Model Element List(Atoms, Bonds, Angles ):"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL|wxSHAPED, 5 );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, wxT("Default Force Field Type:"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs5 = (wxString*) NULL;
    wxComboBox *item5 = new wxComboBox( parent, IDC_MM_FF_TYPE_DEFAULT, wxT(""), wxDefaultPosition, wxSize(200,-1), 0, strs5, wxCB_DROPDOWN );
    item3->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, wxT("Current Force Field of the model:"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, IDC_MM_FF_TYPE, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item3->Add( item7, 1, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item9 = new wxBoxSizer( wxVERTICAL );

    wxString strs10[] = 
    {
        wxT("Valence Bonds"), 
        wxT("Valence Angles"), 
        wxT("Dihedrals"), 
        wxT("Improper Dihedrals"), 
        wxT("Atoms")
    };
    wxRadioBox *item10 = new wxRadioBox( parent, IDC_RADIO_ELEMENTS, wxT("Elements type"), wxDefaultPosition, wxDefaultSize, 5, strs10, 1, wxRA_SPECIFY_COLS );
    item9->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    item8->Add( item9, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxString *strs11 = (wxString*) NULL;
    wxListBox *item11 = new wxListBox( parent, IDC_MM_ELEM_LIST, wxDefaultPosition, wxSize(400,150), 0, strs11, wxLB_SINGLE );
    item8->Add( item11, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item8, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item12 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item13 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, wxT("Atoms of the selected element"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item16 = new wxStaticText( parent, ID_TEXT, wxT("ATOM 1:"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item17 = new wxTextCtrl( parent, IDC_AT1, wxT(""), wxDefaultPosition, wxSize(160,-1), 0 );
    item15->Add( item17, 1, wxALIGN_CENTER|wxALL, 5 );

    item13->Add( item15, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item18 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT, wxT("ATOM 2:"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item20 = new wxTextCtrl( parent, IDC_AT2, wxT(""), wxDefaultPosition, wxSize(160,-1), 0 );
    item18->Add( item20, 1, wxALIGN_CENTER|wxALL, 5 );

    item13->Add( item18, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item21 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item22 = new wxStaticText( parent, ID_TEXT, wxT("ATOM 3:"), wxDefaultPosition, wxDefaultSize, 0 );
    item21->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item23 = new wxTextCtrl( parent, IDC_AT3, wxT(""), wxDefaultPosition, wxSize(160,-1), 0 );
    item21->Add( item23, 1, wxALIGN_CENTER|wxALL, 5 );

    item13->Add( item21, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item24 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item25 = new wxStaticText( parent, ID_TEXT, wxT("ATOM 4:"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item26 = new wxTextCtrl( parent, IDC_AT4, wxT(""), wxDefaultPosition, wxSize(160,-1), 0 );
    item24->Add( item26, 1, wxALIGN_CENTER|wxALL, 5 );

    item13->Add( item24, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item12->Add( item13, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item27 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item28 = new wxStaticText( parent, ID_TEXT, wxT("Element FF params:"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item29 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item30 = new wxStaticText( parent, ID_TEXT, wxT("force constant:"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item31 = new wxTextCtrl( parent, IDC_MM_FCONST, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item32 = new wxStaticText( parent, IDC_FF_UNIT_LABEL, wxT("(kcal/A^2)"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    item27->Add( item29, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item33 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item34 = new wxStaticText( parent, ID_TEXT, wxT("Eq dist (angle)"), wxDefaultPosition, wxDefaultSize, 0 );
    item33->Add( item34, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item35 = new wxTextCtrl( parent, IDC_MM_EQ_DIST, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item33->Add( item35, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item36 = new wxStaticText( parent, ID_TEXT, wxT("Ang"), wxDefaultPosition, wxDefaultSize, 0 );
    item33->Add( item36, 0, wxALIGN_CENTER|wxALL, 5 );

    item27->Add( item33, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item37 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item38 = new wxStaticText( parent, ID_TEXT, wxT("Curr Dist(Angle):"), wxDefaultPosition, wxDefaultSize, 0 );
    item37->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item39 = new wxTextCtrl( parent, IDC_MM_CUR_DIST, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item37->Add( item39, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item40 = new wxStaticText( parent, ID_TEXT, wxT("Ang"), wxDefaultPosition, wxDefaultSize, 0 );
    item37->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    item27->Add( item37, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item41 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item42 = new wxStaticText( parent, ID_TEXT, wxT("Param Set Type:"), wxDefaultPosition, wxDefaultSize, 0 );
    item41->Add( item42, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString strs43[] = 
    {
        wxT("NOT_SET"), 
        wxT("DEFAULT VAL"), 
        wxT("FROM FF FIELD"), 
        wxT("FROM RES TEMPL"), 
        wxT("SPECIAL VALUE")
    };
    wxComboBox *item43 = new wxComboBox( parent, IDC_MM_SET_TYPE, wxT(""), wxDefaultPosition, wxDefaultSize, 5, strs43, wxCB_DROPDOWN );
    item41->Add( item43, 0, wxALIGN_CENTER|wxALL, 5 );

    item27->Add( item41, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item12->Add( item27, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL|wxSHAPED, 5 );

    wxBoxSizer *item44 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item45 = new wxStaticText( parent, ID_TEXT, 
        wxT("FF Symbols of\n")
        wxT("atoms of the element:"),
        wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE );
    item44->Add( item45, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item46 = new wxTextCtrl( parent, IDC_MM_AT_SYMBOL_1, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item44->Add( item46, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item47 = new wxTextCtrl( parent, IDC_MM_AT_SYMBOL_2, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item44->Add( item47, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item48 = new wxTextCtrl( parent, IDC_MM_AT_SYMBOL_3, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item44->Add( item48, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item49 = new wxTextCtrl( parent, IDC_MM_AT_SYMBOL_4, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item44->Add( item49, 0, wxALIGN_CENTER|wxALL, 5 );

    item12->Add( item44, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL|wxSHAPED, 5 );

    item0->Add( item12, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item50 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item51 = new wxButton( parent, IDC_FFPAR_INIT_MOLMECH, wxT("Init MM Model"), wxDefaultPosition, wxDefaultSize, 0 );
    item50->Add( item51, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item52 = new wxStaticLine( parent, ID_LINE_MM_1, wxDefaultPosition, wxSize(-1,20), wxLI_VERTICAL );
    item50->Add( item52, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item53 = new wxButton( parent, IDC_MM_UPDATE_ELEM_LIST, wxT("Update Model Elements List"), wxDefaultPosition, wxDefaultSize, 0 );
    item50->Add( item53, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item54 = new wxButton( parent, IDC_RESPAR_SET_NEW_PAR, wxT("Set New Params"), wxDefaultPosition, wxDefaultSize, 0 );
    item50->Add( item54, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item55 = new wxStaticLine( parent, ID_LINE_SP_DNA, wxDefaultPosition, wxSize(-1,20), wxLI_VERTICAL );
    item50->Add( item55, 0, wxALIGN_CENTER|wxALL, 5 );

    item50->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    item50->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item56 = new wxButton( parent, IDC_SET_DNA_CS_PARS, wxT("Set DNA CG Pars"), wxDefaultPosition, wxDefaultSize, 0 );
    item50->Add( item56, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item50, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item57 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item58 = new wxButton( parent, IDC_DEL_IMPROPER_ANG, wxT("Delete Improper Angles"), wxDefaultPosition, wxDefaultSize, 0 );
    item57->Add( item58, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item59 = new wxCheckBox( parent, IDC_MM_USE_MORT, wxT("use MORT to set MM Model"), wxDefaultPosition, wxDefaultSize, 0 );
    item57->Add( item59, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item57, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *mm_par_setup_page( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, wxT("Electrostatics:"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString *strs4 = (wxString*) NULL;
    wxChoice *item4 = new wxChoice( parent, IDC_MM_ELECTR_MODEL, wxDefaultPosition, wxSize(200,-1), 0, strs4, 0 );
    item2->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, wxT("Dielectric Constant:"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, IDC_MM_DIEL_CONST, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item5->Add( item7, 1, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, wxT("Non-Bond Cutoff (Ang):"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, IDC_MM_NONB_CUTOFF_DIST, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item8->Add( item10, 1, wxALIGN_CENTER|wxALL, 0 );

    item2->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item11 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item12 = new wxStaticText( parent, ID_TEXT, wxT("Ionic Strength (M):"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item13 = new wxTextCtrl( parent, IDC_MM_ION_STRENGTH, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item11->Add( item13, 1, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item11, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item15 = new wxStaticText( parent, ID_TEXT, wxT("Scale 1-4 Electr:"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item16 = new wxTextCtrl( parent, IDC_MM_SCALE_14_ELECTR, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item14->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item14, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item17 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item18 = new wxStaticText( parent, ID_TEXT, wxT("Scale 1-4 VdW:"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item19 = new wxTextCtrl( parent, IDC_MM_SCALE_14_VDW, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item17->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item17, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item21 = new wxStaticText( parent, ID_TEXT, wxT("AMOEBA params:"), wxDefaultPosition, wxDefaultSize, 0 );
    item21->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item20->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item20, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item22 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item23 = new wxStaticText( parent, ID_TEXT, wxT("Thole's dumping const:"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item24 = new wxTextCtrl( parent, IDC_MM_THOLE_DUMP_CONST, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item22->Add( item24, 1, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item22, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item2, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item25 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item26 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item27 = new wxStaticText( parent, ID_TEXT, wxT("Atom Position Restraints:"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item26->Add( item27, 1, wxALIGN_CENTER|wxALL, 5 );

    item25->Add( item26, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item28 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item29 = new wxButton( parent, IDC_MM_CHOOSE_MOVING_ATOMS, wxT("Moving Atoms:"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item30 = new wxTextCtrl( parent, IDC_MM_MOVING_ATOMS, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item28->Add( item30, 1, wxALIGN_CENTER|wxALL, 5 );

    item25->Add( item28, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item31 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item32 = new wxButton( parent, IDC_MM_CHOOSE_RESTRAINED_ATOMS, wxT("Restrained Atoms:"), wxDefaultPosition, wxDefaultSize, 0 );
    item31->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item33 = new wxTextCtrl( parent, IDC_RESTRAINED_ATOMS, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item31->Add( item33, 1, wxALIGN_CENTER|wxALL, 5 );

    item25->Add( item31, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item34 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item35 = new wxButton( parent, IDC_MM_CHOOSE_RESTR_REF_CRD, wxT("Restrained Atoms Coordinates:"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item35, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs36 = (wxString*) NULL;
    wxComboBox *item36 = new wxComboBox( parent, IDC_MM_RESTR_REF_CRD_TYPE, wxT(""), wxDefaultPosition, wxSize(100,-1), 0, strs36, wxCB_DROPDOWN );
    item34->Add( item36, 1, wxALIGN_CENTER|wxALL, 5 );

    item25->Add( item34, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item37 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item38 = new wxStaticText( parent, ID_TEXT, wxT("Restraints Force Constant:"), wxDefaultPosition, wxDefaultSize, 0 );
    item37->Add( item38, 0, wxALIGN_CENTER|wxALL, 10 );

    wxTextCtrl *item39 = new wxTextCtrl( parent, IDC_MM_RESTR_FRC_CONST, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item37->Add( item39, 0, wxALIGN_CENTER|wxALL, 0 );

    item25->Add( item37, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item40 = new wxStaticText( parent, ID_TEXT, wxT("Atom-Atom Distance Restraints:"), wxDefaultPosition, wxDefaultSize, 0 );
    item40->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item25->Add( item40, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item41 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item42 = new wxButton( parent, IDC_MM_LOAD_HARM_CONSTR_FILE, wxT("Load Distance Restraints File"), wxDefaultPosition, wxDefaultSize, 0 );
    item41->Add( item42, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item43 = new wxStaticText( parent, ID_TEXT, wxT("Num Restriants:"), wxDefaultPosition, wxDefaultSize, 0 );
    item41->Add( item43, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item44 = new wxTextCtrl( parent, IDC_MM_NUM_HARM_CONSTR, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item41->Add( item44, 0, wxALIGN_CENTER|wxALL, 5 );

    item25->Add( item41, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item45 = new wxButton( parent, IDC_CONSTRAIN_SETHBOND, wxT("Set H-Bonds of Selected Atoms as Restriants"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item45, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item46 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item47 = new wxStaticText( parent, ID_TEXT, wxT("Restraints Force Constant:"), wxDefaultPosition, wxDefaultSize, 0 );
    item46->Add( item47, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item48 = new wxTextCtrl( parent, IDC_CONSTRAIN_FRCCONST, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item46->Add( item48, 0, wxALIGN_CENTER|wxALL, 5 );

    item25->Add( item46, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item49 = new wxStaticText( parent, ID_TEXT, wxT("Valence Bonds Constraints:"), wxDefaultPosition, wxDefaultSize, 0 );
    item49->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item25->Add( item49, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item50 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item51 = new wxStaticText( parent, ID_TEXT, wxT("SHAKE Bond Constraints:"), wxDefaultPosition, wxDefaultSize, 0 );
    item50->Add( item51, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString *strs52 = (wxString*) NULL;
    wxComboBox *item52 = new wxComboBox( parent, IDC_MM_SHAKE_METHOD, wxT(""), wxDefaultPosition, wxDefaultSize, 0, strs52, wxCB_DROPDOWN );
    item50->Add( item52, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item25->Add( item50, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item1->Add( item25, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item1, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *mm_run_param_page( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, wxT("Type of Calculations"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs5 = (wxString*) NULL;
    wxChoice *item5 = new wxChoice( parent, IDC_MM_RUN_TYPE, wxDefaultPosition, wxDefaultSize, 0, strs5, 0 );
    item3->Add( item5, 1, wxALIGN_CENTER|wxALL, 0 );

    item2->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item6 = new wxButton( parent, IDC_MM_CALC_SP_ENE, wxT("Calculate Single Point Energy"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item8 = new wxButton( parent, IDC_MM_RUN_CALC, wxT("Run MM Calculations"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item9 = new wxCheckBox( parent, IDC_MM_RUN_INT, wxT("Run Internally"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item2->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, wxT("External Program:"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs12 = (wxString*) NULL;
    wxChoice *item12 = new wxChoice( parent, IDC_MM_EXT_PROG, wxDefaultPosition, wxSize(100,-1), 0, strs12, 0 );
    item10->Add( item12, 1, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxButton *item13 = new wxButton( parent, IDC_SAVE_EXT_PROG_INP, wxT("Save Input Files For External Program"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item13, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item14 = new wxCheckBox( parent, IDC_MM_RESTART_FLAG, wxT("Restart Job"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item16 = new wxButton( parent, IDC_MM_STOP, wxT("Stop Calculations"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item17 = new wxButton( parent, IDC_MM_SHOW_INFO, wxT("Show MM Info"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item1->Add( item2, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item18 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT_PARAM_MIN, wxT("Parameters for Minimization:"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item18->Add( item19, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item21 = new wxStaticText( parent, ID_TEXT_MIN_TYPE, wxT("Minimization Type:"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs22 = (wxString*) NULL;
    wxChoice *item22 = new wxChoice( parent, IDC_MM_MIN_TYPE, wxDefaultPosition, wxDefaultSize, 0, strs22, 0 );
    item20->Add( item22, 0, wxALIGN_CENTER|wxALL, 0 );

    item18->Add( item20, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item23 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item24 = new wxStaticText( parent, ID_TEXT_NUM_MIN_STEPS, wxT("Number of Minimization Steps:"), wxDefaultPosition, wxDefaultSize, 0 );
    item23->Add( item24, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item25 = new wxTextCtrl( parent, IDC_MM_MAX_COMP_CYCLES, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item23->Add( item25, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item26 = new wxStaticText( parent, ID_TEXT_NUM_STEEP_DEC_STEPS, wxT("Number of Steepest Descent Steps:"), wxDefaultPosition, wxDefaultSize, 0 );
    item23->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item27 = new wxTextCtrl( parent, IDC_MM_NUM_STEP_STEEP_DESCENT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item23->Add( item27, 0, wxALIGN_CENTER|wxALL, 0 );

    item18->Add( item23, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item28 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item29 = new wxStaticText( parent, ID_TEXT_CONV_CRT, wxT("Convergence Criterion:"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item30 = new wxTextCtrl( parent, IDC_MM_MIN_CNVRG_CRITERIUM, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item28->Add( item30, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item31 = new wxStaticText( parent, ID_TEXT_KCAL_MOL_A, wxT("kcal/mole A"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item32 = new wxStaticText( parent, ID_TEXT_INIT_STEP, wxT("  Initial Step:"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item33 = new wxTextCtrl( parent, IDC_MM_INIT_MIN_STEP, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item28->Add( item33, 0, wxALIGN_CENTER|wxALL, 0 );

    item18->Add( item28, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item34 = new wxStaticText( parent, ID_TEXT_MD_PARAMS, wxT("Molecular Dynamics parameters:"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item18->Add( item34, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item35 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item36 = new wxStaticText( parent, ID_TEXT_MD_STEPS_NUM, wxT("MD steps number "), wxDefaultPosition, wxDefaultSize, 0 );
    item35->Add( item36, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item37 = new wxTextCtrl( parent, IDC_MM_LENGTH_MD_RUN, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item35->Add( item37, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item38 = new wxStaticText( parent, ID_TEXT_MD_TIME_STEP, wxT("MD time step (ps):"), wxDefaultPosition, wxDefaultSize, 0 );
    item35->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item39 = new wxTextCtrl( parent, IDC_MM_MD_TIME_STEP, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item35->Add( item39, 0, wxALIGN_CENTER|wxALL, 0 );

    item18->Add( item35, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item40 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item41 = new wxStaticText( parent, ID_TEXT_TEMP_CTRL_METH, wxT("Temperature Control Method:"), wxDefaultPosition, wxDefaultSize, 0 );
    item40->Add( item41, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs42 = (wxString*) NULL;
    wxChoice *item42 = new wxChoice( parent, IDC_TEMP_CONTROL_METHOD, wxDefaultPosition, wxSize(250,-1), 0, strs42, 0 );
    item40->Add( item42, 0, wxALIGN_CENTER|wxALL, 5 );

    item18->Add( item40, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item43 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item44 = new wxStaticText( parent, ID_TEXT_INIT_TEMP, wxT("Initial Temp (K):"), wxDefaultPosition, wxDefaultSize, 0 );
    item43->Add( item44, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item45 = new wxTextCtrl( parent, IDC_MM_INIT_TEMP, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item43->Add( item45, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item46 = new wxStaticText( parent, ID_TEXT_REF_TEMP, wxT("Reference Temp (K):"), wxDefaultPosition, wxDefaultSize, 0 );
    item43->Add( item46, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item47 = new wxTextCtrl( parent, IDC_MM_REF_TEMP, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item43->Add( item47, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item48 = new wxStaticText( parent, ID_TEXT_LANG_DUMP_CONST, wxT("Langevin Damping  (ps-1)"), wxDefaultPosition, wxDefaultSize, 0 );
    item43->Add( item48, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item49 = new wxTextCtrl( parent, IDC_LANGEVIN_DUMP_CONST, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item43->Add( item49, 0, wxALIGN_CENTER|wxALL, 5 );

    item18->Add( item43, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item50 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item51 = new wxStaticText( parent, ID_TEXT_INIT_INFO_READ, wxT("Init Info to read:"), wxDefaultPosition, wxDefaultSize, 0 );
    item50->Add( item51, 0, wxALIGN_CENTER|wxALL, 10 );

    wxString *strs52 = (wxString*) NULL;
    wxChoice *item52 = new wxChoice( parent, IDC_MM_INIT_READ_COORD, wxDefaultPosition, wxDefaultSize, 0, strs52, 0 );
    item50->Add( item52, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item53 = new wxStaticText( parent, ID_TEXT_START_VEL_METH, wxT("Start velocity method:"), wxDefaultPosition, wxDefaultSize, 0 );
    item50->Add( item53, 0, wxALIGN_CENTER|wxALL, 10 );

    wxString *strs54 = (wxString*) NULL;
    wxChoice *item54 = new wxChoice( parent, IDC_MM_START_VEL_METHOD, wxDefaultPosition, wxDefaultSize, 0, strs54, 0 );
    item50->Add( item54, 0, wxALIGN_CENTER|wxALL, 0 );

    item18->Add( item50, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item55 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item56 = new wxCheckBox( parent, IDC_MM_REMOVE_INIT_MOTION, wxT("Remove initial motion"), wxDefaultPosition, wxDefaultSize, 0 );
    item55->Add( item56, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item57 = new wxCheckBox( parent, IDC_MM_WRAP_COORD, wxT("Wrap crd to box"), wxDefaultPosition, wxDefaultSize, 0 );
    item55->Add( item57, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item58 = new wxStaticText( parent, ID_TEXT_REM_COM_MOTION_FREQ, wxT("Remove COM motion freq:"), wxDefaultPosition, wxDefaultSize, 0 );
    item55->Add( item58, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item59 = new wxTextCtrl( parent, IDC_MM_REMOVE_RB_MOTION_FREQ, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item55->Add( item59, 0, wxALIGN_CENTER|wxALL, 0 );

    item18->Add( item55, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item60 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item61 = new wxStaticText( parent, ID_TEXT, wxT("Boundary Conditions:"), wxDefaultPosition, wxDefaultSize, 0 );
    item61->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item60->Add( item61, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString *strs62 = (wxString*) NULL;
    wxChoice *item62 = new wxChoice( parent, IDC_MM_PERIOD_BCOND, wxDefaultPosition, wxSize(150,-1), 0, strs62, 0 );
    item60->Add( item62, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item63 = new wxStaticText( parent, ID_TEXT_PRESS_CTRL, wxT("Pressure control:"), wxDefaultPosition, wxDefaultSize, 0 );
    item60->Add( item63, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString *strs64 = (wxString*) NULL;
    wxChoice *item64 = new wxChoice( parent, IDC_MM_PRESSURE_REG_METHOD, wxDefaultPosition, wxDefaultSize, 0, strs64, 0 );
    item60->Add( item64, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item18->Add( item60, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item65 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item66 = new wxButton( parent, IDC_MM_EDIT_PERIODIC_BOX, wxT("Edit Periodic Box"), wxDefaultPosition, wxDefaultSize, 0 );
    item65->Add( item66, 0, wxALIGN_CENTER|wxALL, 5 );

    item18->Add( item65, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item1->Add( item18, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item67 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item68 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item69 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item70 = new wxStaticText( parent, ID_TEXT, wxT("Input/Output files:"), wxDefaultPosition, wxDefaultSize, 0 );
    item70->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item69->Add( item70, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item68->Add( item69, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item71 = new wxBoxSizer( wxHORIZONTAL );

    item71->Add( 80, 20, 2, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item72 = new wxStaticText( parent, ID_TEXT, wxT("Input Files:    "), wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE );
    item71->Add( item72, 5, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item73 = new wxStaticText( parent, ID_TEXT, wxT("Output files:        "), wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE );
    item71->Add( item73, 5, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item74 = new wxStaticText( parent, ID_TEXT, wxT("Output Freq:"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT );
    item71->Add( item74, 3, wxALIGN_CENTER|wxALL, 5 );

    item68->Add( item71, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 0 );

    wxBoxSizer *item75 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item76 = new wxButton( parent, IDC_MM_EDIT_AMBER_INP, wxT("Input Pars:"), wxDefaultPosition, wxDefaultSize, 0 );
    item75->Add( item76, 1, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item77 = new wxTextCtrl( parent, IDC_MM_INP_FILE, wxT(""), wxDefaultPosition, wxSize(140,-1), 0 );
    item75->Add( item77, 3, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item78 = new wxTextCtrl( parent, IDC_MM_LOG_FILE, wxT(""), wxDefaultPosition, wxSize(140,-1), 0 );
    item75->Add( item78, 3, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item79 = new wxButton( parent, IDC_MM_LOAD_LOG_FILE, wxT("Log File"), wxDefaultPosition, wxDefaultSize, 0 );
    item75->Add( item79, 1, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item80 = new wxTextCtrl( parent, IDC_MM_PRINT_FREQ, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item75->Add( item80, 0, wxALIGN_CENTER|wxALL, 5 );

    item68->Add( item75, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item81 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item82 = new wxButton( parent, IDC_MM_EDIT_AMBER_TOP, wxT("Top file:"), wxDefaultPosition, wxDefaultSize, 0 );
    item81->Add( item82, 1, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item83 = new wxTextCtrl( parent, IDC_MM_TOP_FILE, wxT(""), wxDefaultPosition, wxSize(140,-1), 0 );
    item81->Add( item83, 3, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item84 = new wxTextCtrl( parent, IDC_MM_CRD_TRAJ_FILE, wxT(""), wxDefaultPosition, wxSize(140,-1), 0 );
    item81->Add( item84, 3, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item85 = new wxButton( parent, IDC_MM_CHOOSE_MDCRD_FILE, wxT("Coordinates"), wxDefaultPosition, wxDefaultSize, 0 );
    item81->Add( item85, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item86 = new wxTextCtrl( parent, IDC_MM_WRT_COORD_FREQ, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item81->Add( item86, 0, wxALIGN_CENTER|wxALL, 5 );

    item68->Add( item81, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item87 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item88 = new wxStaticText( parent, ID_TEXT, wxT("Init crd file:     "), wxDefaultPosition, wxDefaultSize, 0 );
    item87->Add( item88, 1, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item89 = new wxTextCtrl( parent, IDC_MM_INIT_CRD_FILE, wxT(""), wxDefaultPosition, wxSize(140,-1), 0 );
    item87->Add( item89, 3, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item90 = new wxTextCtrl( parent, IDC_MM_VEL_TRAJ_FILE, wxT(""), wxDefaultPosition, wxSize(140,-1), 0 );
    item87->Add( item90, 3, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item91 = new wxButton( parent, IDC_MM_CHOOSE_MDVEL_FILE, wxT("Velocities"), wxDefaultPosition, wxDefaultSize, 0 );
    item87->Add( item91, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item92 = new wxTextCtrl( parent, IDC_MM_WRT_VEL_FREQ, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item87->Add( item92, 0, wxALIGN_CENTER|wxALL, 5 );

    item68->Add( item87, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item93 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item94 = new wxStaticText( parent, ID_TEXT, wxT("Restraints file:      "), wxDefaultPosition, wxDefaultSize, 0 );
    item93->Add( item94, 1, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item95 = new wxTextCtrl( parent, IDC_MM_CONSTR_CRD_FILE, wxT(""), wxDefaultPosition, wxSize(140,-1), 0 );
    item93->Add( item95, 3, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item96 = new wxTextCtrl( parent, IDC_MM_ENE_TRAJ_FILE, wxT(""), wxDefaultPosition, wxSize(140,-1), 0 );
    item93->Add( item96, 3, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item97 = new wxButton( parent, IDC_MM_CHOOSE_MDENE_FILE, wxT("Energy"), wxDefaultPosition, wxDefaultSize, 0 );
    item93->Add( item97, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item98 = new wxTextCtrl( parent, IDC_MM_WRT_ENER_FREQ, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item93->Add( item98, 0, wxALIGN_CENTER|wxALL, 5 );

    item68->Add( item93, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item99 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item100 = new wxButton( parent, IDC_MM_EDIT_AMBER_RUN, wxT("UNIX Run file"), wxDefaultPosition, wxDefaultSize, 0 );
    item99->Add( item100, 1, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item101 = new wxTextCtrl( parent, IDC_MM_AMBER_RUN_FILE, wxT(""), wxDefaultPosition, wxSize(140,-1), 0 );
    item99->Add( item101, 3, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item102 = new wxTextCtrl( parent, IDC_MM_RESTART_FILE, wxT(""), wxDefaultPosition, wxSize(140,-1), 0 );
    item99->Add( item102, 3, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item103 = new wxButton( parent, IDC_MM_EDIT_AMBER_RST, wxT("Restart File"), wxDefaultPosition, wxDefaultSize, 0 );
    item99->Add( item103, 1, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item104 = new wxTextCtrl( parent, IDC_MM_WRT_RSTRT_FREQ, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item99->Add( item104, 0, wxALIGN_CENTER|wxALL, 5 );

    item68->Add( item99, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item105 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item106 = new wxButton( parent, IDC_AMBER_LOAD_RESTART, wxT("Load Restart File"), wxDefaultPosition, wxDefaultSize, 0 );
    item105->Add( item106, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item107 = new wxButton( parent, IDC_AMBER_SAVE_RESTART, wxT("Save Restart File"), wxDefaultPosition, wxDefaultSize, 0 );
    item105->Add( item107, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item108 = new wxCheckBox( parent, IDC_AMBER_WRITE_BINARY, wxT("Binary output"), wxDefaultPosition, wxDefaultSize, 0 );
    item105->Add( item108, 0, wxALIGN_CENTER|wxALL, 5 );

    item68->Add( item105, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item109 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item110 = new wxTextCtrl( parent, IDC_MM_CONSTR_TRAJ_FILE, wxT(""), wxDefaultPosition, wxSize(210,-1), 0 );
    item109->Add( item110, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item111 = new wxButton( parent, IDC_MM_CHOOSE_CONSTR_TRAJ_FILE, wxT("Constraints Traj"), wxDefaultPosition, wxDefaultSize, 0 );
    item109->Add( item111, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item112 = new wxTextCtrl( parent, IDC_MM_WRT_CONSTR_FREQ, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item109->Add( item112, 0, wxALIGN_CENTER|wxALL, 5 );

    item68->Add( item109, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item67->Add( item68, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item67, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *load_qchem_data_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, wxT("Data To Load:"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item2 = new wxCheckBox( parent, IDC_QCDAT_MO, wxT("HF_MO_Coef and Energies"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item3 = new wxCheckBox( parent, IDC_QCDAT_GEOM, wxT("Geometry"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item4 = new wxCheckBox( parent, IDC_QCDAT_FCMAT, wxT("Force Constants Matrix"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item5 = new wxCheckBox( parent, IDC_QCDAT_NMODES, wxT("Normal Modes"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, wxT("Data File Name:"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, IDC_QCDAT_DAT_FNAME, wxT(""), wxDefaultPosition, wxSize(200,-1), 0 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item10 = new wxStaticText( parent, ID_TEXT, wxT("Data File Type: "), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs11 = (wxString*) NULL;
    wxChoice *item11 = new wxChoice( parent, IDC_QCDAT_FILE_TYPE, wxDefaultPosition, wxSize(200,40), 0, strs11, 0 );
    item9->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item12 = new wxButton( parent, IDC_SEL_DAT_FILE, wxT("Select File"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item13 = new wxButton( parent, IDC_QCDAT_LOAD_DATA, wxT("Load Data"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->SetDefault();
    item0->Add( item13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *solvate_mset_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, wxT("Solvent:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, IDC_SOLVENT, wxT(""), wxDefaultPosition, wxSize(140,-1), 0 );
    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, wxT("Solvent Buffer:"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, IDC_SOLV_BUF, wxT(""), wxDefaultPosition, wxSize(100,-1), 0 );
    item4->Add( item6, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item8 = new wxButton( parent, IDC_SOLV_MOL, wxT("Solvate Molecule"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *redirect_io_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, wxT("Log File:"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item2 = new wxTextCtrl( parent, IDC_IO_LOG_FILE_NAME, wxT(""), wxDefaultPosition, wxSize(200,-1), 0 );
    item0->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item3 = new wxButton( parent, IDC_IO_STDOUT_FILE, wxT("Redirect StdOut to File"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, IDC_IO_STDOUT_CONSOLE, wxT("Redirect StdOut to Console"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *wave_fun_anal_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, wxT("N alpha el:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, IDC_NALPHA_EL, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, wxT("N beta el:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, IDC_NBETA_EL, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item7 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, wxT("MO List:"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs9 = (wxString*) NULL;
    wxListBox *item9 = new wxListBox( parent, IDC_WFANAL_MO_LIST, wxDefaultPosition, wxSize(160,120), 0, strs9, wxLB_SINGLE );
    item7->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item10 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item11 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item12 = new wxButton( parent, IDC_MOVE_UP, wxT("Move UP"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item13 = new wxButton( parent, IDC_MOVE_DOWN, wxT("Move DOWN"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item14 = new wxButton( parent, IDC_PRT_MO_COEF, wxT("Print MO Coef"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item15 = new wxButton( parent, IDC_WFANAL_PLOT_MO, wxT("Plot MO"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item16 = new wxStaticText( parent, ID_TEXT, wxT("Contour Plot isolevel:"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item17 = new wxTextCtrl( parent, IDC_WFANAL_MO_ISOLVL, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item10->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item6->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item18 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item19 = new wxButton( parent, IDC_WFANAL_MO_REFRESH, wxT("MO Refresh"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    item18->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    item18->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    item18->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    item18->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item20 = new wxStaticText( parent, ID_TEXT, wxT("Grid Size:"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item21 = new wxTextCtrl( parent, IDC_WFANAL_GRID_SIZE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item18->Add( item21, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item18, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *pathways_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxButton *item3 = new wxButton( parent, IDC_COUPL_MAP, wxT("Compute ET Coupling Map"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, IDC_BEST_PATH, wxT("Compute Best Path"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item2, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item1->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, 
        wxT("Threshold coupling realative to \n")
        wxT("the best path:"),
        wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, IDC_PATH_SEL_THRESH, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item5->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item8 = new wxButton( parent, IDC_PATH_SEL_COUPLED, wxT("Select ET Coupled Atoms"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item10 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item11 = new wxCheckBox( parent, IDC_PATH_S_HBOND, wxT("Calculate Sulfur H-bonds"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item12 = new wxCheckBox( parent, IDC_PATH_HBOND, wxT("Use H-Bond coupling term"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item9->Add( item10, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    wxBoxSizer *item13 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item15 = new wxStaticText( parent, ID_TEXT, wxT("Non-bond Dist Decay:"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item16 = new wxTextCtrl( parent, IDC_PATH_NB_DECAY, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item14->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item13->Add( item14, 0, wxALIGN_CENTER, 5 );

    wxBoxSizer *item17 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item18 = new wxStaticText( parent, ID_TEXT, wxT("H-Bond Dist Decay:    "), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item18, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item19 = new wxTextCtrl( parent, IDC_PATH_HB_DECAY, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item17->Add( item19, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item13->Add( item17, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item21 = new wxStaticText( parent, ID_TEXT, wxT("Covalent Bond Decay:"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item21, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item22 = new wxTextCtrl( parent, IDC_PATH_COV_DECAY, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item20->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    item13->Add( item20, 0, wxALIGN_CENTER|wxALL, 0 );

    item9->Add( item13, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item23 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item24 = new wxButton( parent, IDC_SET_MODULE_DATA, wxT("Set Module Data From Controls"), wxDefaultPosition, wxDefaultSize, 0 );
    item23->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item25 = new wxButton( parent, IDC_DUTTON_CALC, wxT("Calculate HDA with Dutton Model"), wxDefaultPosition, wxDefaultSize, 0 );
    item23->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item26 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item27 = new wxButton( parent, IDC_COLOR_MOL_SURF_BY_COUPL, wxT("Color Molecular Surface by ET Coupling"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item26, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *cont_electr_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, wxT("Grid Size"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, IDC_DELPHI_NX, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item3->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item3, 0, wxALIGN_CENTER_VERTICAL, 0 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, wxT("Percent of the box filled:"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, IDC_DELPHI_PERFIL, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item6, 0, wxALIGN_CENTER_VERTICAL, 0 );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, wxT("Molecular Center:"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item11 = new wxTextCtrl( parent, IDC_DELPHI_OFFSET_X, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, IDC_DELPHI_OFFSET_Y, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item10->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item13 = new wxTextCtrl( parent, IDC_DELPHI_OFFSET_Z, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item10->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item10, 0, wxALIGN_CENTER, 0 );

    wxBoxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item15 = new wxStaticText( parent, ID_TEXT, wxT("Internal Dielectric Constant:"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item16 = new wxTextCtrl( parent, IDC_DELPHI_EPSI, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item14->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item17 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item18 = new wxStaticText( parent, ID_TEXT, wxT("Solvent Dielectric Constant:"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item19 = new wxTextCtrl( parent, IDC_DELPHI_EPSOUT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item17->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item21 = new wxStaticText( parent, ID_TEXT, wxT("Ionic Strength:"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item22 = new wxTextCtrl( parent, IDC_DELPHI_RIONST, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item20->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item20, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item23 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item24 = new wxStaticText( parent, ID_TEXT, wxT("Ion Exclusion Radius:"), wxDefaultPosition, wxDefaultSize, 0 );
    item23->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item25 = new wxTextCtrl( parent, IDC_DELPHI_ION_RAD, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item23->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item23, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item26 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item27 = new wxStaticText( parent, ID_TEXT, wxT("Solvent Probe Radius:"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item28 = new wxTextCtrl( parent, IDC_DELPHI_PROBE_RAD, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item26->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item26, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item29 = new wxStaticText( parent, ID_TEXT, wxT("Type of Boundary Conditions:"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item29, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString strs30[] = 
    {
        wxT("Zero Potential"), 
        wxT("Approximate Coulomb"), 
        wxT("Focus"), 
        wxT("Coulomb")
    };
    wxChoice *item30 = new wxChoice( parent, IDC_DELPHI_BOUNDARY, wxDefaultPosition, wxSize(160,-1), 4, strs30, 0 );
    item2->Add( item30, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item31 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item32 = new wxStaticText( parent, ID_TEXT, wxT("Perioidic Boundary Conditions Flags:"), wxDefaultPosition, wxDefaultSize, 0 );
    item31->Add( item32, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item33 = new wxCheckBox( parent, IDC_DELPHI_IPER_X, wxT("X"), wxDefaultPosition, wxDefaultSize, 0 );
    item31->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item34 = new wxCheckBox( parent, IDC_DELPHI_IPER_Y, wxT("Y"), wxDefaultPosition, wxDefaultSize, 0 );
    item31->Add( item34, 0, wxALIGN_CENTER|wxALL, 0 );

    wxCheckBox *item35 = new wxCheckBox( parent, IDC_DELPHI_IPER_Z, wxT("Z"), wxDefaultPosition, wxDefaultSize, 0 );
    item31->Add( item35, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item31, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item36 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item37 = new wxStaticText( parent, ID_TEXT, wxT("Number of Linear PB iterations:"), wxDefaultPosition, wxDefaultSize, 0 );
    item36->Add( item37, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item38 = new wxTextCtrl( parent, IDC_DELPHI_NLIT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item36->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item36, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item39 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item40 = new wxStaticText( parent, ID_TEXT, wxT("Number of non-linear PB iterations"), wxDefaultPosition, wxDefaultSize, 0 );
    item39->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item41 = new wxTextCtrl( parent, IDC_DELPHI_NNIT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item39->Add( item41, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item39, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item42 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item43 = new wxStaticText( parent, ID_TEXT, wxT("Total electr ene:"), wxDefaultPosition, wxDefaultSize, 0 );
    item42->Add( item43, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item44 = new wxTextCtrl( parent, IDC_TOT_ENE, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item42->Add( item44, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item42, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item45 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item46 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item47 = new wxStaticText( parent, ID_TEXT, wxT("Electrostatic Field File:"), wxDefaultPosition, wxDefaultSize, 0 );
    item46->Add( item47, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item48 = new wxTextCtrl( parent, IDC_ELFIELD_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item46->Add( item48, 0, wxALIGN_CENTER|wxALL, 5 );

    item45->Add( item46, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item49 = new wxBoxSizer( wxVERTICAL );

    wxButton *item50 = new wxButton( parent, IDC_ELFIELD_SAVE, wxT("Save El Pot to file"), wxDefaultPosition, wxDefaultSize, 0 );
    item49->Add( item50, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item51 = new wxButton( parent, IDC_ELFIELD_LOAD, wxT("Load El Pot from file"), wxDefaultPosition, wxDefaultSize, 0 );
    item49->Add( item51, 0, wxALIGN_CENTER|wxALL, 0 );

    item45->Add( item49, 0, wxALIGN_CENTER|wxALL, 0 );

    item2->Add( item45, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item52 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item53 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item54 = new wxStaticText( parent, ID_TEXT, wxT("Output Control Flag:"), wxDefaultPosition, wxDefaultSize, 0 );
    item53->Add( item54, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item55 = new wxCheckBox( parent, IDC_DELPHI_PHIWRT, wxT("Potential Field"), wxDefaultPosition, wxDefaultSize, 0 );
    item53->Add( item55, 0, wxALIGN_CENTER|wxALL, 5 );

    item52->Add( item53, 0, wxALIGN_CENTER|wxALL, 0 );

    item2->Add( item52, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item1->Add( item2, 0, wxALIGN_CENTER, 0 );

    wxBoxSizer *item56 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item57 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item58 = new wxStaticText( parent, ID_TEXT, wxT("Molecular Set Name:"), wxDefaultPosition, wxDefaultSize, 0 );
    item57->Add( item58, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item59 = new wxTextCtrl( parent, IDC_DELPHI_MSET_NAME, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item57->Add( item59, 0, wxALIGN_CENTER|wxALL, 5 );

    item56->Add( item57, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item60 = new wxButton( parent, IDC_EDIT_ATOM_PARAMS, wxT("Edit Atom Parameters"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item60, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item61 = new wxButton( parent, IDC_DELPHI_SETPAR, wxT("Set Module Parameters"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item61, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item62 = new wxButton( parent, IDC_DELPHI_SAVE_INPUT, wxT("Save Input Files"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item62, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item63 = new wxButton( parent, IDC_DELPHI_RUN, wxT("Run Single Calculation"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item63, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item64 = new wxStaticText( parent, ID_TEXT, wxT("Properties Calculations:"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item64, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item65 = new wxButton( parent, IDC_DELPHI_ET_REORG_ENE, wxT("Calculate ET Reorganization Energy"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item65, 0, wxALIGN_CENTER|wxALL, 0 );

    item56->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item66 = new wxButton( parent, IDC_AVG_POT_DON, wxT("Calculate average potential on donor"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item66, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item67 = new wxButton( parent, IDC_DELPHI_REDOX_POT, wxT("Calculate donor redox-potential shift"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item67, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item68 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item69 = new wxStaticText( parent, ID_TEXT, wxT("Reference State:"), wxDefaultPosition, wxDefaultSize, 0 );
    item68->Add( item69, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs70 = (wxString*) NULL;
    wxChoice *item70 = new wxChoice( parent, IDC_DELPHI_REF_STATE, wxDefaultPosition, wxSize(100,-1), 0, strs70, 0 );
    item68->Add( item70, 0, wxALIGN_CENTER|wxALL, 5 );

    item56->Add( item68, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item71 = new wxStaticText( parent, ID_TEXT, wxT("Display Results of Calculations:"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item71, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item72 = new wxButton( parent, IDC_DELPHI_POT_ISOLVL, wxT("Plot Isopotential  Surfaces:"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item72, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item73 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item74 = new wxStaticText( parent, ID_TEXT, wxT("IsoLevel  Value(kT):"), wxDefaultPosition, wxDefaultSize, 0 );
    item73->Add( item74, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item75 = new wxTextCtrl( parent, IDC_DELPHI_POT_VAL, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item73->Add( item75, 0, wxALIGN_CENTER|wxALL, 5 );

    item56->Add( item73, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item76 = new wxButton( parent, IDC_DELPHI_POT_VDWDOTS, wxT("Plot Potential on VdW Dot Surface"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item76, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item77 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item78 = new wxStaticText( parent, ID_TEXT, wxT("Number of Dots:"), wxDefaultPosition, wxDefaultSize, 0 );
    item77->Add( item78, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item79 = new wxTextCtrl( parent, IDC_DELPHI_DOTS_NUMB, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item77->Add( item79, 0, wxALIGN_CENTER|wxALL, 5 );

    item56->Add( item77, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item80 = new wxButton( parent, IDC_DELPHI_COLOR_SURF_POT, wxT("Color molecule Surface by El. Pot. "), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item80, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item81 = new wxStaticText( parent, ID_TEXT, wxT("Potential Color Scale (kT/e):"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item81, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item82 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item83 = new wxTextCtrl( parent, IDC_DELPHI_POT_LOW_VAL, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item83->SetForegroundColour( *wxWHITE );
    item83->SetBackgroundColour( *wxRED );
    item82->Add( item83, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item84 = new wxTextCtrl( parent, IDC_DELPHI_POT_HIGH_VAL, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item84->SetForegroundColour( *wxWHITE );
    item84->SetBackgroundColour( *wxBLUE );
    item82->Add( item84, 0, wxALIGN_CENTER|wxALL, 5 );

    item56->Add( item82, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item85 = new wxButton( parent, IDC_IND_CHARGE, wxT("Calculate Induced Charges"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item85, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item86 = new wxButton( parent, IDC_PLOT_IND_CHARGE, wxT("Plot Induced Charges"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item86, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item87 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item88 = new wxButton( parent, IDC_POTPLANEVIEW, wxT("Plane View of El. Pot"), wxDefaultPosition, wxDefaultSize, 0 );
    item87->Add( item88, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item89 = new wxButton( parent, IDC_CONCPLANEVIEW, wxT("Conc."), wxDefaultPosition, wxDefaultSize, 0 );
    item87->Add( item89, 0, wxALIGN_CENTER|wxALL, 5 );

    item56->Add( item87, 0, wxALIGN_CENTER, 0 );

    item1->Add( item56, 0, wxALIGN_CENTER_HORIZONTAL, 0 );

    item0->Add( item1, 0, wxALIGN_CENTER, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *qchem_param_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, wxT("Basis set:"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs4 = (wxString*) NULL;
    wxComboBox *item4 = new wxComboBox( parent, IDC_BASIS_SET, wxT(""), wxDefaultPosition, wxSize(160,-1), 0, strs4, wxCB_DROPDOWN );
    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, wxT("Active Orbitals:"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs7 = (wxString*) NULL;
    wxComboBox *item7 = new wxComboBox( parent, IDC_ACTIVE_ORB, wxT(""), wxDefaultPosition, wxSize(140,-1), 0, strs7, wxCB_DROPDOWN );
    item5->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, wxT("Charge:"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, IDC_QCPAR_EDIT_CHARGE, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item8->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, wxT("Multiplicity:"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, IDC_QCPAR_EDIT_MULT, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item8->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, wxT("Calc Method:"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs15 = (wxString*) NULL;
    wxChoice *item15 = new wxChoice( parent, IDC_COMBO_METHOD, wxDefaultPosition, wxSize(100,-1), 0, strs15, 0 );
    item13->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item16 = new wxCheckBox( parent, IDC_OPT_GEOM, wxT("Optimize geometry"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item16, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item17 = new wxCheckBox( parent, IDC_VIB_FREQ, wxT("Vibrational frequencies"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item18 = new wxCheckBox( parent, IDC_QCPAR_SOLV_CHRG_FLAG, wxT("Add Solvent Charges"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item19 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item20 = new wxStaticText( parent, ID_TEXT, wxT("Distributed Solvent Charge:"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item21 = new wxTextCtrl( parent, IDC_QCPAR_SOLV_CHRG_EDT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item19->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item19, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item22 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item23 = new wxCheckBox( parent, IDC_QC_SAVE_BASIS_GEN, wxT("Save Basis Set as Generic"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item24 = new wxCheckBox( parent, IDC_QC_NO_STD_ORIENT, wxT("No Std Orientation"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item25 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item26 = new wxButton( parent, IDC_QCPAR_SET_PAR, wxT("Set Module Parameters"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item27 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item28 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item29 = new wxStaticText( parent, ID_TEXT, wxT("Molecular Set:"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item30 = new wxTextCtrl( parent, IDC_MOLSET_NAME, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item28->Add( item30, 1, wxALIGN_CENTER|wxALL, 5 );

    item27->Add( item28, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item31 = new wxCheckBox( parent, IDC_UHF, wxT("UNF Calc"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString strs32[] = 
    {
        wxT("Foreground"), 
        wxT("Background")
    };
    wxRadioBox *item32 = new wxRadioBox( parent, IDC_FOREGROUND, wxT("Run Type"), wxDefaultPosition, wxDefaultSize, 2, strs32, 1, wxRA_SPECIFY_COLS );
    item27->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item33 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item34 = new wxStaticText( parent, ID_TEXT, wxT("Input File(s) Prefix:"), wxDefaultPosition, wxDefaultSize, 0 );
    item33->Add( item34, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item35 = new wxTextCtrl( parent, IDC_INP_FILE_PREFIX, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item33->Add( item35, 0, wxALIGN_CENTER|wxALL, 5 );

    item27->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item36 = new wxButton( parent, IDC_SAVE_INPFILE, wxT("Save Input Files"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item36, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item37 = new wxButton( parent, IDC_QC_RUN_CALC, wxT("Run Calculations"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item37, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item38 = new wxButton( parent, IDC_STOP_CALC, wxT("Stop Calculations"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item39 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item40 = new wxStaticText( parent, ID_TEXT, wxT("Num of Computational Nodes: "), wxDefaultPosition, wxDefaultSize, 0 );
    item39->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item41 = new wxTextCtrl( parent, IDC_QC_NUM_COMP_NODES, wxT(""), wxDefaultPosition, wxSize(20,-1), 0 );
    item39->Add( item41, 1, wxALIGN_CENTER|wxALL, 5 );

    item27->Add( item39, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item42 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item43 = new wxStaticText( parent, ID_TEXT, wxT("Num of Shared Mem Cores Per Node:"), wxDefaultPosition, wxDefaultSize, 0 );
    item42->Add( item43, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item44 = new wxTextCtrl( parent, IDC_QC_NUM_SH_MEM_CORES, wxT(""), wxDefaultPosition, wxSize(20,-1), 0 );
    item42->Add( item44, 0, wxALIGN_CENTER|wxALL, 5 );

    item27->Add( item42, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item27, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item45 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item46 = new wxStaticText( parent, ID_TEXT, wxT("SCF Parameters"), wxDefaultPosition, wxDefaultSize, 0 );
    item45->Add( item46, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item47 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item48 = new wxStaticText( parent, ID_TEXT, wxT("N Iter Tot:"), wxDefaultPosition, wxDefaultSize, 0 );
    item47->Add( item48, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item49 = new wxTextCtrl( parent, IDC_MAX_SCF_ITER, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item47->Add( item49, 0, wxALIGN_CENTER|wxALL, 5 );

    item45->Add( item47, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item50 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item51 = new wxStaticText( parent, ID_TEXT, wxT("N iter Avg:"), wxDefaultPosition, wxDefaultSize, 0 );
    item50->Add( item51, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item52 = new wxTextCtrl( parent, IDC_NITER_AVG_2, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item50->Add( item52, 0, wxALIGN_CENTER|wxALL, 5 );

    item45->Add( item50, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item53 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item54 = new wxStaticText( parent, ID_TEXT, wxT("Temp Fermi Distr"), wxDefaultPosition, wxDefaultSize, 0 );
    item53->Add( item54, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item55 = new wxTextCtrl( parent, IDC_FERMI_TEMP, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item53->Add( item55, 0, wxALIGN_CENTER|wxALL, 5 );

    item45->Add( item53, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item56 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item57 = new wxStaticText( parent, ID_TEXT, wxT("Den Mat Convg:"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item57, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item58 = new wxTextCtrl( parent, IDC_DMAT_CONV, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item56->Add( item58, 0, wxALIGN_CENTER|wxALL, 5 );

    item45->Add( item56, 0, wxALIGN_CENTER|wxALL, 0 );

    wxCheckBox *item59 = new wxCheckBox( parent, IDC_GUESS_ONLY, wxT("Guess Only"), wxDefaultPosition, wxDefaultSize, 0 );
    item45->Add( item59, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item60 = new wxCheckBox( parent, IDC_GUESS_FROM_MO, wxT("Guess from Current MOs"), wxDefaultPosition, wxDefaultSize, 0 );
    item45->Add( item60, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString strs61[] = 
    {
        wxT("Internal"), 
        wxT("Gaussian"), 
        wxT("Dalton"), 
        wxT("Zindo")
    };
    wxRadioBox *item61 = new wxRadioBox( parent, IDC_QCHEM_ENGINE, wxT("QChem Engine"), wxDefaultPosition, wxDefaultSize, 4, strs61, 1, wxRA_SPECIFY_COLS );
    item45->Add( item61, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item45, 0, wxALIGN_CENTER|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *da_coupl_calc_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, wxT("Tunneling Energy (au):"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, IDC_ETEFFH_TUN_ENER, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, wxT("Initial DA field:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, IDC_ETEFFH_DA_FIELD, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, wxT("Final field:"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, IDC_ETEFFH_FIN_FIELD, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item9 = new wxButton( parent, IDC_ETEFFH_SET_PAR, wxT("Set Module Parameters"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item9, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item10 = new wxButton( parent, IDC_ETEFFH_CALC_HEFF, wxT("Calculate Heff"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item11 = new wxButton( parent, IDC_ET_CALC_HEFF_HUCK, wxT("Set Huckel Heff"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item11, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item12 = new wxButton( parent, IDC_ETEFFH_DIAG, wxT("Diagonalize Heff"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item12, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item13 = new wxButton( parent, IDC_ETEFFH_CLEAR_HEFF, wxT("Clear Heff"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item13, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item14 = new wxButton( parent, IDC_HEFF_EDIT_DIAG, wxT("Edit Heff Diag"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item14, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item15 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item16 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, wxT("H_eff Eigen Values:"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item18 = new wxStaticText( parent, ID_TEXT, wxT("HOMO:"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item19 = new wxTextCtrl( parent, IDC_ET_HOMO, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item16->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    item15->Add( item16, 0, wxALIGN_CENTER|wxALL, 0 );

    wxString *strs20 = (wxString*) NULL;
    wxListBox *item20 = new wxListBox( parent, IDC_ETEFFH_EIGVAL_LIST, wxDefaultPosition, wxSize(180,80), 0, strs20, wxLB_MULTIPLE );
    item15->Add( item20, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item21 = new wxButton( parent, IDC_ET_SET_DONOR_TRUNC_MO, wxT("Set Redox Orbs Truncating MO"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item21, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item22 = new wxStaticText( parent, ID_TEXT, wxT("Donor Orbitals:"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item22, 0, wxALIGN_CENTER|wxALL, 0 );

    wxString *strs23 = (wxString*) NULL;
    wxListBox *item23 = new wxListBox( parent, IDC_DONOR_ORB, wxDefaultPosition, wxSize(180,80), 0, strs23, wxLB_SINGLE );
    item15->Add( item23, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item24 = new wxStaticText( parent, ID_TEXT, wxT("Acceptor Orbitals:"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item24, 0, wxALIGN_CENTER|wxALL, 0 );

    wxString *strs25 = (wxString*) NULL;
    wxListBox *item25 = new wxListBox( parent, IDC_ACC_ORB, wxDefaultPosition, wxSize(180,80), 0, strs25, wxLB_SINGLE );
    item15->Add( item25, 0, wxALIGN_CENTER|wxALL, 0 );

    wxCheckBox *item26 = new wxCheckBox( parent, IDC_ETEFFH_DAB_INT_HUCK, wxT("Set D/A - Bridge Inter Huckel"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item27 = new wxButton( parent, IDC_ETEFFH_CALC_GF_MO, wxT("Calc donor/acc GF elem from MO"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item27, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxButton *item28 = new wxButton( parent, IDC_ETEFFH_CALC_GF_HEFF, wxT("Calc donor/acc GF elem from Heff"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item28, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item15, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item29 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item30 = new wxStaticText( parent, ID_TEXT, wxT("Orbital Plotting:"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item31 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item32 = new wxStaticText( parent, ID_TEXT, wxT("Isolevel:"), wxDefaultPosition, wxDefaultSize, 0 );
    item31->Add( item32, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item33 = new wxTextCtrl( parent, IDC_ETEFFH_ISOLVL, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item31->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    item29->Add( item31, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item34 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item35 = new wxStaticText( parent, ID_TEXT, wxT("Grid Size:"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item35, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item36 = new wxTextCtrl( parent, IDC_ETEFFH_GRID_SIZE, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item34->Add( item36, 0, wxALIGN_CENTER|wxALL, 5 );

    item29->Add( item34, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item37 = new wxButton( parent, IDC_ETEFFH_PLOT_EIGVEC, wxT("Plot Eigenvectors"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item37, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item38 = new wxButton( parent, IDC_ETEFFH_PRINT_EIGVEC, wxT("Print Eigenvector"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item38, 0, wxALIGN_CENTER|wxALL, 0 );

    item29->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item39 = new wxButton( parent, IDC_CHOOSE_DONOR_ORB, wxT("Choose Donor Orbitals"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item39, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item40 = new wxButton( parent, IDC_ETEFFH_RESET_SRC_ORB, wxT("Reset Donor Orbs"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    item29->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item41 = new wxButton( parent, IDC_CHOOSE_ACC_ORB, wxT("Choose Acceptor Orbitals"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item41, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item42 = new wxButton( parent, IDC_ETEFFH_RESET_TGT_ORB, wxT("Reset Acc Orbs"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item42, 0, wxALIGN_CENTER|wxALL, 5 );

    item29->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item43 = new wxStaticText( parent, ID_TEXT, wxT("DB File of Heff submatricies"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item43, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item44 = new wxTextCtrl( parent, IDC_ETEFFH_DB_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item29->Add( item44, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item45 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item46 = new wxStaticText( parent, ID_TEXT, wxT("Compute D/A couping:"), wxDefaultPosition, wxDefaultSize, 0 );
    item45->Add( item46, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item47 = new wxButton( parent, IDC_MIN_SPLIT, wxT("Minimize DA Spliting"), wxDefaultPosition, wxDefaultSize, 0 );
    item45->Add( item47, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item48 = new wxButton( parent, IDC_ETEFFH_HDA_FROM_GF, wxT("Calc Hda from GF "), wxDefaultPosition, wxDefaultSize, 0 );
    item45->Add( item48, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item49 = new wxButton( parent, IDC_ETEFFH_HDA_PERT, wxT("Calc Hda Perturb"), wxDefaultPosition, wxDefaultSize, 0 );
    item45->Add( item49, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item50 = new wxStaticText( parent, ID_TEXT, wxT("D/A  orbitals couplings (au):"), wxDefaultPosition, wxDefaultSize, 0 );
    item45->Add( item50, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs51 = (wxString*) NULL;
    wxListBox *item51 = new wxListBox( parent, IDC_DA_COUPL, wxDefaultPosition, wxSize(140,80), 0, strs51, wxLB_SINGLE );
    item45->Add( item51, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item52 = new wxButton( parent, IDC_ETEFFH_SCAN_ENE, wxT("Scan Energy"), wxDefaultPosition, wxDefaultSize, 0 );
    item45->Add( item52, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item53 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item54 = new wxStaticText( parent, ID_TEXT, wxT("Step:"), wxDefaultPosition, wxDefaultSize, 0 );
    item53->Add( item54, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item55 = new wxTextCtrl( parent, IDC_ETEFFH_STEP, wxT(""), wxDefaultPosition, wxSize(90,-1), 0 );
    item53->Add( item55, 0, wxALIGN_CENTER|wxALL, 5 );

    item45->Add( item53, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item56 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item57 = new wxStaticText( parent, ID_TEXT, wxT("First Eigenv:"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item57, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item58 = new wxTextCtrl( parent, IDC_ETEFFH_FIRSTEIG, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item56->Add( item58, 0, wxALIGN_CENTER|wxALL, 5 );

    item45->Add( item56, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item59 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item60 = new wxStaticText( parent, ID_TEXT, wxT("Last Eigenv:"), wxDefaultPosition, wxDefaultSize, 0 );
    item59->Add( item60, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item61 = new wxTextCtrl( parent, IDC_ETEFFH_LASTEIG, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item59->Add( item61, 0, wxALIGN_CENTER|wxALL, 5 );

    item45->Add( item59, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item62 = new wxStaticText( parent, ID_TEXT, wxT("Cutoff Distance:"), wxDefaultPosition, wxDefaultSize, 0 );
    item45->Add( item62, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item63 = new wxTextCtrl( parent, IDC_ETEFFH_CUT_DIST, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item45->Add( item63, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item64 = new wxButton( parent, IDC_ETEFFH_ZERO_LONG, wxT("Zero Long Inter"), wxDefaultPosition, wxDefaultSize, 0 );
    item45->Add( item64, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item45, 0, wxALIGN_CENTER|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *choose_sel_orb_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, wxT("Local Orbitals List"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs2 = (wxString*) NULL;
    wxListBox *item2 = new wxListBox( parent, IDC_LORB_LIST, wxDefaultPosition, wxSize(350,100), 0, strs2, wxLB_MULTIPLE );
    item0->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item3 = new wxButton( parent, IDC_EXTRACT_SEL, wxT("Extract Selected"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *edit_fragm_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, wxT("Parent Molecular Set:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, IDC_PARENT_MOL_SET, wxT(""), wxDefaultPosition, wxSize(120,-1), wxTE_READONLY );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item5 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, wxT("New Fragment Name:"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, IDC_EDTFRG_FRAG_NAME, wxT(""), wxDefaultPosition, wxSize(120,-1), 0 );
    item5->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item8 = new wxButton( parent, IDC_EDTFRG_CREATE_FRAGM, wxT("Create Fragment"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item9 = new wxButton( parent, IDC_ATTACH_VIEW, wxT("Attach View To the Fragment"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item10 = new wxButton( parent, IDC_ADD_FRAGMENT, wxT("Add MolSet as Fragment"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item11 = new wxButton( parent, IDC_SELECT_ATOMS_MATCH_FRAG, wxT("Select Atoms Found In Fragment"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item12 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, wxT("Fragment List"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs14 = (wxString*) NULL;
    wxListBox *item14 = new wxListBox( parent, IDC_FRAGM_LIST, wxDefaultPosition, wxSize(120,100), 0, strs14, wxLB_SINGLE );
    item12->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    item4->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *build_film_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, wxT("Delt X:"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item4 = new wxTextCtrl( parent, IDC_FILM_DX, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, wxT("NX:"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, IDC_FILM_NX, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item2->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, wxT("Delt Y:"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, IDC_FILM_DY, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item7->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item10 = new wxStaticText( parent, ID_TEXT, wxT("NY:"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item11 = new wxTextCtrl( parent, IDC_FILM_NY, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item7->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item12 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, wxT("alpha:"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item14 = new wxTextCtrl( parent, IDC_FILM_ALPHA, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item12->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item16 = new wxStaticText( parent, ID_TEXT, wxT("tilt:"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item17 = new wxTextCtrl( parent, IDC_FILM_TILT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item15->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item18 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT, wxT("Number of units in alkane chain:"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item20 = new wxTextCtrl( parent, IDC_FILM_NUNIT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item18->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item21 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item22 = new wxBoxSizer( wxVERTICAL );

    wxButton *item23 = new wxButton( parent, IDC_CREATE_FILM, wxT("Create Film of Molecules"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item23, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item22->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item24 = new wxButton( parent, IDC_CLOSE, wxT("Close"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item24, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item21->Add( item22, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item25 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item26 = new wxCheckBox( parent, IDC_FILM_BLD_SURF_1, wxT("Build  surface below"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item26, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item27 = new wxCheckBox( parent, IDC_FILM_BLD_SURF_2, wxT("Build surface on top"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item27, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item28 = new wxCheckBox( parent, IDC_FILM_PUT_ATOM_TOP, wxT("Put atom on top"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item28, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item29 = new wxCheckBox( parent, IDC_FILM_PUT_ATOM_BELOW, wxT("Put atom below"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item29, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item21->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item21, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item30 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item31 = new wxStaticText( parent, ID_TEXT, wxT("Surface Parameters:"), wxDefaultPosition, wxDefaultSize, 0 );
    item30->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item32 = new wxTextCtrl( parent, IDC_FILM_NUM_SURF_LAYERS, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item30->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item33 = new wxButton( parent, IDC_FILM_CREATE_SURF, wxT("Create Surface"), wxDefaultPosition, wxDefaultSize, 0 );
    item30->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item30, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *atom_params_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxGrid *item2 = new wxGrid( parent, IDC_ATOM_LIST, wxDefaultPosition, wxSize(500,250), wxWANTS_CHARS );
    item2->CreateGrid( 10, 10, wxGrid::wxGridSelectCells );
    item1->Add( item2, 20, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticLine *item3 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, wxT("Properties Displayed:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item6 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item7 = new wxCheckBox( parent, IDC_EDTAT_NAME, wxT("Name"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item8 = new wxCheckBox( parent, IDC_EDTAT_ELEMENT, wxT("Element"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item9 = new wxCheckBox( parent, IDC_EDTAT_FF_SYMB, wxT("FF Symbol"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item10 = new wxCheckBox( parent, IDC_EDTAT_MASS, wxT("Mass"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item5->Add( item6, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item11 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item12 = new wxCheckBox( parent, IDC_EDTAT_CHARGE, wxT("Charge"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item13 = new wxCheckBox( parent, IDC_EDTAT_RADIUS, wxT("Radius"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item14 = new wxCheckBox( parent, IDC_EDTAT_TEMP, wxT("Temperature Field"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item15 = new wxCheckBox( parent, IDC_EDTAT_COORD, wxT("Coordinates"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item5->Add( item11, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item16 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item17 = new wxCheckBox( parent, IDC_EDTAT_HYBRID, wxT("Hybridization"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item18 = new wxCheckBox( parent, IDC_EDTAT_HB_STATUS, wxT("D/A H-Bond Status"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item19 = new wxCheckBox( parent, IDC_EDTAT_SOLV_ACCESS_AREA, wxT("Solvent Access Area"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item19, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item20 = new wxCheckBox( parent, IDC_EDTAT_VDWRAD, wxT("VdW Radius"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item20, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item21 = new wxCheckBox( parent, IDC_EDTAT_VDWENE, wxT("VdW Energy param"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item21, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item5->Add( item16, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item22 = new wxBoxSizer( wxVERTICAL );

    wxButton *item23 = new wxButton( parent, IDC_EDTAT_UPDATE_ATLIST, wxT("Update Atom List"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item23, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item24 = new wxButton( parent, IDC_EDTAT_TRANSFER_TO_WIN, wxT("Transfer Data To Window"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item24, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item25 = new wxButton( parent, IDC_EDTAT_TRANSFER_FROM_WIN, wxT("Transfer Data From Window"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item25, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item5->Add( item22, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item1->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item26 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item27 = new wxButton( parent, IDC_CLOSE, wxT("Close"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item26, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item1, 3, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item28 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item29 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item30 = new wxCheckBox( parent, IDC_CHECK_PER_BOX, wxT("Periodical Boundary Box"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    item28->Add( item29, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item31 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item32 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item33 = new wxStaticText( parent, ID_TEXT, wxT("A,B,C"), wxDefaultPosition, wxDefaultSize, 0 );
    item32->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item34 = new wxTextCtrl( parent, IDC_PER_BOX_A, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item32->Add( item34, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxTextCtrl *item35 = new wxTextCtrl( parent, IDC_PER_BOX_B, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item32->Add( item35, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxTextCtrl *item36 = new wxTextCtrl( parent, IDC_PER_BOX_C, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item32->Add( item36, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item31->Add( item32, 1, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item37 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item38 = new wxStaticText( parent, ID_TEXT, wxT("Alpha,Beta,Gamma"), wxDefaultPosition, wxDefaultSize, 0 );
    item37->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item39 = new wxTextCtrl( parent, IDC_PER_BOX_ALPHA, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item37->Add( item39, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxTextCtrl *item40 = new wxTextCtrl( parent, IDC_PER_BOX_BETA, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item37->Add( item40, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxTextCtrl *item41 = new wxTextCtrl( parent, IDC_PER_BOX_GAMMA, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item37->Add( item41, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item31->Add( item37, 1, wxALIGN_CENTER|wxALL, 5 );

    item28->Add( item31, 0, wxALIGN_CENTER|wxALL, 0 );

    item28->Add( 20, 20, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item42 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item43 = new wxStaticText( parent, ID_TEXT, wxT("Num Atoms:"), wxDefaultPosition, wxDefaultSize, 0 );
    item42->Add( item43, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item44 = new wxTextCtrl( parent, IDC_NUM_ATOMS, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item42->Add( item44, 1, wxALIGN_CENTER|wxALL, 5 );

    item28->Add( item42, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item45 = new wxStaticText( parent, ID_TEXT, wxT("Atom-Charge Maps:"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item45, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs46 = (wxString*) NULL;
    wxComboBox *item46 = new wxComboBox( parent, IDC_EDTAT_CHARGE_MAPS, wxT(""), wxDefaultPosition, wxSize(160,-1), 0, strs46, wxCB_DROPDOWN );
    item28->Add( item46, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item47 = new wxButton( parent, IDC_EDTAT_COPY_TO_CHMAP, wxT("Copy Charges to Charge Map"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item47, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item48 = new wxButton( parent, IDC_EDTAT_SET_FROM_CHMAP, wxT("Set Charges from Charge Map"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item48, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item49 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item50 = new wxStaticText( parent, ID_TEXT, wxT("pH:"), wxDefaultPosition, wxDefaultSize, 0 );
    item49->Add( item50, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item51 = new wxTextCtrl( parent, IDC_EDTAT_PH, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item49->Add( item51, 0, wxALIGN_CENTER|wxALL, 5 );

    item28->Add( item49, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item52 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item53 = new wxStaticText( parent, ID_TEXT, wxT("Radius:"), wxDefaultPosition, wxDefaultSize, 0 );
    item52->Add( item53, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item54 = new wxTextCtrl( parent, IDC_EDTAT_RAD, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item52->Add( item54, 0, wxALIGN_CENTER|wxALL, 5 );

    item28->Add( item52, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item28, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *res_params_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxGrid *item1 = new wxGrid( parent, IDC_RESIDUE_LIST, wxDefaultPosition, wxSize(550,250), wxWANTS_CHARS );
    item1->CreateGrid( 10, 10, wxGrid::wxGridSelectCells );
    item0->Add( item1, 1, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, wxT("Properties Displayed:"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item4 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item5 = new wxCheckBox( parent, IDC_EDTRES_NAME, wxT("Name"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item6 = new wxCheckBox( parent, IDC_EDTRES_MODIFIER, wxT("Name Modifier"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item7 = new wxCheckBox( parent, IDC_EDTRES_RES_NUM, wxT("Res Number"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item8 = new wxCheckBox( parent, IDC_EDTRES_CHAIN, wxT("Chain Symbol"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item3->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item9 = new wxBoxSizer( wxVERTICAL );

    wxButton *item10 = new wxButton( parent, IDC_EDTRES_UPDATE_RESLIST, wxT("Update Residue List"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item10, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item3->Add( item9, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item11 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item12 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item13 = new wxButton( parent, IDC_RESPAR_RENUM, wxT("Renumber Residue Selection Starting Num:"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item14 = new wxTextCtrl( parent, IDC_RESPAR_RENUM_START_NUM, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item12->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    item11->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    item3->Add( item11, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item16 = new wxButton( parent, IDC_CLOSE, wxT("Close"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *edit_geom_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, wxT("Atom 1:"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxAtomEdit *item5 = new wxAtomEdit( parent, IDC_EDTORS_AT1, wxT(""), wxDefaultPosition, wxSize(160,-1), 0 );
    item3->Add( item5, 1, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, wxT("Atom 2:"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxAtomEdit *item8 = new wxAtomEdit( parent, IDC_EDTORS_AT2, wxT(""), wxDefaultPosition, wxSize(160,-1), 0 );
    item6->Add( item8, 1, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item10 = new wxStaticText( parent, ID_TEXT, wxT("Atom 3:"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxAtomEdit *item11 = new wxAtomEdit( parent, IDC_EDTORS_AT3, wxT(""), wxDefaultPosition, wxSize(160,-1), 0 );
    item9->Add( item11, 1, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item9, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item12 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, wxT("Atom 4:"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxAtomEdit *item14 = new wxAtomEdit( parent, IDC_EDTORS_AT4, wxT(""), wxDefaultPosition, wxSize(160,-1), 0 );
    item12->Add( item14, 1, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item12, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item1->Add( item2, 1, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item15 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item16 = new wxStaticText( parent, ID_TEXT, wxT("Atom Dist:"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item17 = new wxTextCtrl( parent, IDC_EDTG_DIST12, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item15->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item18 = new wxTextCtrl( parent, IDC_EDTG_DIST23, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item15->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item19 = new wxTextCtrl( parent, IDC_EDTG_DIST34, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item15->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item15, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    wxBoxSizer *item20 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item21 = new wxStaticText( parent, ID_TEXT, 
        wxT("Valence\n")
        wxT("Angles"),
        wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item22 = new wxTextCtrl( parent, IDC_EDTG_ANG123, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item20->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item23 = new wxTextCtrl( parent, IDC_EDTG_ANG234, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item20->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item20, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item24 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item25 = new wxStaticText( parent, ID_TEXT, 
        wxT("\n")
        wxT("Torsional \n")
        wxT("Angle"),
        wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item26 = new wxTextCtrl( parent, IDC_EDTG_TORS_VAL, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item24->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item27 = new wxStaticText( parent, ID_TEXT, wxT("Increment"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item28 = new wxTextCtrl( parent, IDC_EDTG_TORS_INCR, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item24->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item29 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item30 = new wxBoxSizer( wxVERTICAL );

    wxButton *item31 = new wxButton( parent, IDC_CLOSE, wxT("Close"), wxDefaultPosition, wxDefaultSize, 0 );
    item30->Add( item31, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item29->Add( item30, 0, wxALIGN_BOTTOM|wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    wxBoxSizer *item32 = new wxBoxSizer( wxVERTICAL );

    wxButton *item33 = new wxButton( parent, IDC_EDTG_DEL_ATOM, wxT("Delete Atom 1"), wxDefaultPosition, wxDefaultSize, 0 );
    item32->Add( item33, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxButton *item34 = new wxButton( parent, IDC_EDTG_DEL_BOND, wxT("Delete Bond 1-2"), wxDefaultPosition, wxDefaultSize, 0 );
    item32->Add( item34, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxButton *item35 = new wxButton( parent, IDC_EDTG_CREATE_BOND, wxT("Create Bond 1-2"), wxDefaultPosition, wxDefaultSize, 0 );
    item32->Add( item35, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxButton *item36 = new wxButton( parent, IDC_EDTG_MERGE_MOL, wxT("Merge Molecules 1-2"), wxDefaultPosition, wxDefaultSize, 0 );
    item32->Add( item36, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxButton *item37 = new wxButton( parent, IDC_EDTG_ATTACH_MOL, wxT("Attach Molecule 2 to 1"), wxDefaultPosition, wxDefaultSize, 0 );
    item32->Add( item37, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item29->Add( item32, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item38 = new wxBoxSizer( wxVERTICAL );

    wxButton *item39 = new wxButton( parent, IDC_EDTG_CALC_GEOM, wxT("Calc Geom Params"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item39, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item40 = new wxButton( parent, IDC_EDTG_SET_GEOM, wxT("Set Geom Params"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item40, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item41 = new wxButton( parent, IDC_EDTG_INCREM_TORS, wxT("Increment Torsion"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item41, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item29->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item29, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *edit_groups_page( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxString strs2[] = 
    {
        wxT("Chemical Groups"), 
        wxT("Redox Centers"), 
        wxT("Named Atom Groups")
    };
    wxRadioBox *item2 = new wxRadioBox( parent, IDC_TYPE_GROUP, wxT("Atom Group Type"), wxDefaultPosition, wxDefaultSize, 3, strs2, 1, wxRA_SPECIFY_COLS );
    item1->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, wxT("List of Groups"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs4 = (wxString*) NULL;
    wxListBox *item4 = new wxListBox( parent, IDC_EDTGRP_LIST_GRP, wxDefaultPosition, wxSize(160,100), 0, strs4, wxLB_SINGLE );
    item1->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, wxT("Group ID:"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, IDC_GRP_ID, wxT(""), wxDefaultPosition, wxSize(140,-1), 0 );
    item5->Add( item7, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item9 = new wxButton( parent, IDC_EDTGRP_NEW_GRP, wxT("New Group"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item10 = new wxButton( parent, IDC_EDTGRP_RENAME_GRP, wxT("Rename"), wxDefaultPosition, wxSize(60,-1), 0 );
    item8->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item11 = new wxButton( parent, IDC_EDTGRP_DEL_GRP, wxT("Delete"), wxDefaultPosition, wxSize(60,-1), 0 );
    item8->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item12 = new wxButton( parent, IDC_EDTGRP_COPY_GRP, wxT("Copy"), wxDefaultPosition, wxSize(60,-1), 0 );
    item8->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    item1->Add( item13, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item15 = new wxStaticText( parent, ID_TEXT, wxT("Expr:"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item16 = new wxTextCtrl( parent, IDC_EDTGRP_EXPR_TXT, wxT(""), wxDefaultPosition, wxSize(80,40), wxTE_MULTILINE );
    item14->Add( item16, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item14, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item17 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item18 = new wxButton( parent, IDC_EDTGRP_SET_FROM_EXPR, wxT("Set From Expr"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item18, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item19 = new wxButton( parent, IDC_EDTGRP_ADD_FROM_EXPR, wxT("Add From Expr"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item19, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item17, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item21 = new wxButton( parent, IDC_EDTGRP_DEL_EXPR, wxT("Delete Atoms of Expr"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item21, 1, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item22 = new wxButton( parent, IDC_EDTGRP_KEEP_ONLY_EXPR, wxT("Keep only Atoms of Expr"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item22, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item20, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item23 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item24 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item25 = new wxStaticText( parent, ID_TEXT, wxT("Molecular Set:"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item26 = new wxTextCtrl( parent, IDC_EDTGRP_MOLSET_NAME, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item24->Add( item26, 1, wxALIGN_CENTER|wxALL, 5 );

    item23->Add( item24, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item27 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item28 = new wxStaticText( parent, ID_TEXT, wxT("Group Atoms:"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item28, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item27->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 0 );

    item27->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item29 = new wxStaticText( parent, ID_TEXT, wxT("Num Atoms:"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item30 = new wxTextCtrl( parent, IDC_EDTGRP_NATOMS, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item27->Add( item30, 1, wxALIGN_CENTER|wxALL, 5 );

    item23->Add( item27, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString *strs31 = (wxString*) NULL;
    wxListBox *item31 = new wxListBox( parent, IDC_EDTGRP_LIST_MEMB, wxDefaultPosition, wxSize(200,100), 0, strs31, wxLB_MULTIPLE );
    item23->Add( item31, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item32 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item33 = new wxButton( parent, IDC_EDTGRP_DELETE_MEMB, wxT("Delete Selected"), wxDefaultPosition, wxDefaultSize, 0 );
    item32->Add( item33, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item34 = new wxButton( parent, IDC_EDTGRP_RESET_MEMB, wxT("Reset"), wxDefaultPosition, wxDefaultSize, 0 );
    item32->Add( item34, 1, wxALIGN_CENTER|wxALL, 5 );

    item23->Add( item32, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxString strs35[] = 
    {
        wxT("Atom"), 
        wxT("Residue"), 
        wxT("Chem Group")
    };
    wxRadioBox *item35 = new wxRadioBox( parent, IDC_PICKING_LEVEL, wxT("Picking Level"), wxDefaultPosition, wxDefaultSize, 3, strs35, 1, wxRA_SPECIFY_COLS );
    item23->Add( item35, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item36 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item37 = new wxButton( parent, IDC_EDTGRP_SET_PROT, wxT("Set Protection:"), wxDefaultPosition, wxDefaultSize, 0 );
    item36->Add( item37, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item38 = new wxTextCtrl( parent, IDC_EDTGRP_EDT_PROT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item36->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    item23->Add( item36, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item39 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item40 = new wxButton( parent, IDC_EDTGRP_SAVE_XYZ_FILE, wxT("Save Group to XYZ File"), wxDefaultPosition, wxDefaultSize, 0 );
    item39->Add( item40, 1, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item41 = new wxButton( parent, IDC_EDTGRP_SAVE_NDX_FILE, wxT("Save Group to NDX file"), wxDefaultPosition, wxDefaultSize, 0 );
    item39->Add( item41, 1, wxALIGN_CENTER|wxALL, 5 );

    item23->Add( item39, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item42 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item43 = new wxButton( parent, IDC_EDTGRP_SORT_IDX, wxT("Sort Group by Index"), wxDefaultPosition, wxDefaultSize, 0 );
    item42->Add( item43, 0, wxALIGN_CENTER|wxALL, 5 );

    item23->Add( item42, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item23, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *edit_groups_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxNotebook *item2 = new wxNotebook( parent, IDC_EDT_GRP, wxDefaultPosition, wxDefaultSize, 0 );
#if !wxCHECK_VERSION(2,5,2)
    wxNotebookSizer *item1 = new wxNotebookSizer( item2 );
#else
    wxWindow *item1 = item2;
#endif

    wxPanel *item3 = new wxPanel( item2, -1 );
    edit_groups_page( item3, FALSE );
    item2->AddPage( item3, wxT("Edit Groups") );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *comp_acc_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxString *strs1 = (wxString*) NULL;
    wxListBox *item1 = new wxListBox( parent, IDC_ACCOUNTS_LIST, wxDefaultPosition, wxSize(200,100), 0, strs1, wxLB_SINGLE );
    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item2 = new wxButton( parent, IDC_ACC_SHOW_LOAD, wxT("Show Load"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item3 = new wxButton( parent, IDC_CLOSE, wxT("Close"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *res_db_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxString *strs1 = (wxString*) NULL;
    wxListBox *item1 = new wxListBox( parent, IDC_TEMPL_LIST, wxDefaultPosition, wxSize(200,100), 0, strs1, wxLB_SINGLE );
    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, wxT("Selected Res Template:"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, IDC_SELECTED_TEMPL, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item0->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, IDC_CLOSE, wxT("Close"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *mol_view_param_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, wxT("Rot Center:"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item4 = new wxTextCtrl( parent, IDC_MVPAR_CENX, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, IDC_MVPAR_CENY, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item2->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, IDC_MVPAR_CENZ, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item2->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item7 = new wxButton( parent, IDC_MVPAR_RESET_VIEW_ROT, wxT("Reset View Rotations"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item8 = new wxCheckBox( parent, IDC_MVPAR_USE_SLAB_PLANE, wxT("Use Slab Plane"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item10 = new wxStaticText( parent, ID_TEXT, wxT("Slab Mode"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item11 = new wxTextCtrl( parent, IDC_MVPAR_SLAB_MODE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item9->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item12 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, wxT("Slab Value"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item14 = new wxTextCtrl( parent, IDC_MVPAR_SLAB_VALUE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item12->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item16 = new wxStaticText( parent, ID_TEXT, wxT("Slab Intensity"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item17 = new wxTextCtrl( parent, IDC_MVPAR_SLAB_INTEN, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item15->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item18 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT, wxT("Slice Value"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item20 = new wxTextCtrl( parent, IDC_MVPAR_SLICE_VALUE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item18->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item21 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item22 = new wxStaticText( parent, ID_TEXT, wxT("Image Size"), wxDefaultPosition, wxDefaultSize, 0 );
    item21->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item23 = new wxTextCtrl( parent, IDC_MVPAR_IMAGE_SIZE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item21->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item24 = new wxStaticText( parent, ID_TEXT, wxT("Scale:"), wxDefaultPosition, wxDefaultSize, 0 );
    item21->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item25 = new wxTextCtrl( parent, IDC_MVPAR_DSCALE, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item21->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item21, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item26 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item27 = new wxStaticText( parent, ID_TEXT, wxT("Z Offset"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item28 = new wxTextCtrl( parent, IDC_MVPAR_ZOFFSET, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item26->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item29 = new wxStaticText( parent, ID_TEXT, wxT("Zoom:"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item30 = new wxTextCtrl( parent, IDC_MVPAR_ZOOM, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item26->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item26, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item31 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item32 = new wxCheckBox( parent, IDC_MVPAR_DRAW_BEST_PATH, wxT("Draw ET Best Path"), wxDefaultPosition, wxDefaultSize, 0 );
    item31->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item33 = new wxCheckBox( parent, IDC_MVPAR_DRAW_UNIT_CELL, wxT("Draw Unit Cell"), wxDefaultPosition, wxDefaultSize, 0 );
    item31->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item31, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item34 = new wxCheckBox( parent, IDC_MVPAR_DRAW_CONT_SURF, wxT("Draw Surfaces"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item34, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item35 = new wxCheckBox( parent, IDC_MVPAR_DRAW_SOLID_SURF, wxT("Draw Solid Surfaces"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item35, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item36 = new wxButton( parent, IDC_MVPAR_SETCNTR, wxT("Update Controls Values"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item36, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item37 = new wxButton( parent, IDC_MVPAR_SETVIEW, wxT("Set View Parameters From Current Controls Values"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item37, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item38 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item39 = new wxStaticText( parent, ID_TEXT, wxT("Std Transl:"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item39, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item40 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item41 = new wxTextCtrl( parent, IDC_MVPAR_ORIGX, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item40->Add( item41, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item42 = new wxTextCtrl( parent, IDC_MVPAR_ORIGY, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item40->Add( item42, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item43 = new wxTextCtrl( parent, IDC_MVPAR_ORIGZ, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item40->Add( item43, 0, wxALIGN_CENTER|wxALL, 5 );

    item38->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item44 = new wxStaticText( parent, ID_TEXT, wxT("Rotation Mat:"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item44, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item45 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item46 = new wxTextCtrl( parent, IDC_MVPAR_ROT11, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item45->Add( item46, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item47 = new wxTextCtrl( parent, IDC_MVPAR_ROT12, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item45->Add( item47, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item48 = new wxTextCtrl( parent, IDC_MVPAR_ROT13, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item45->Add( item48, 0, wxALIGN_CENTER|wxALL, 5 );

    item38->Add( item45, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item49 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item50 = new wxTextCtrl( parent, IDC_MVPAR_ROT21, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item49->Add( item50, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item51 = new wxTextCtrl( parent, IDC_MVPAR_ROT22, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item49->Add( item51, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item52 = new wxTextCtrl( parent, IDC_MVPAR_ROT23, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item49->Add( item52, 0, wxALIGN_CENTER|wxALL, 5 );

    item38->Add( item49, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item53 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item54 = new wxTextCtrl( parent, IDC_MVPAR_ROT31, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item53->Add( item54, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item55 = new wxTextCtrl( parent, IDC_MVPAR_ROT32, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item53->Add( item55, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item56 = new wxTextCtrl( parent, IDC_MVPAR_ROT33, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item53->Add( item56, 0, wxALIGN_CENTER|wxALL, 5 );

    item38->Add( item53, 0, wxALIGN_CENTER|wxALL, 0 );

    item38->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    item38->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item57 = new wxButton( parent, IDC_CLOSE, wxT("Close"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item57, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *mol_set_param_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxHORIZONTAL );

    wxString *strs3 = (wxString*) NULL;
    wxListBox *item3 = new wxListBox( parent, IDC_MSPAR_MOLSET_LIST, wxDefaultPosition, wxSize(80,100), 0, strs3, wxLB_SINGLE );
    item2->Add( item3, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, wxT("MolSet Name:"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, IDC_MSPAR_MSET_NAME, wxT(""), wxDefaultPosition, wxSize(200,-1), 0 );
    item4->Add( item6, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item1->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item8 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, wxT("Fragments:"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs10 = (wxString*) NULL;
    wxListBox *item10 = new wxListBox( parent, IDC_MSPAR_FRAGM_NAMES, wxDefaultPosition, wxSize(80,100), 0, strs10, wxLB_SINGLE );
    item8->Add( item10, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item7->Add( item8, 1, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item11 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item12 = new wxStaticText( parent, ID_TEXT, wxT("Molecules:"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs13 = (wxString*) NULL;
    wxListBox *item13 = new wxListBox( parent, IDC_MSPAR_MOL_NAMES, wxDefaultPosition, wxSize(80,100), 0, strs13, wxLB_SINGLE );
    item11->Add( item13, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item7->Add( item11, 1, wxALIGN_CENTER|wxALL, 0 );

    item1->Add( item7, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item15 = new wxButton( parent, IDC_MSPAR_SETCNTR, wxT("Update Dialog Controls"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item16 = new wxButton( parent, IDC_MSPAR_SETMOL, wxT("Set Molecular Set Parameters"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item17 = new wxButton( parent, IDC_MSPAR_MULT_MOL, wxT("Multiply Molecular Set"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item18 = new wxBoxSizer( wxHORIZONTAL );

    wxTreeCtrl *item19 = new wxTreeCtrl( parent, ID_TREECTRL, wxDefaultPosition, wxSize(120,160), wxTR_HAS_BUTTONS|wxTR_LINES_AT_ROOT|wxSUNKEN_BORDER );
    item18->Add( item19, 1, wxALIGN_CENTER|wxALL, 5 );

    wxString strs20[] = 
    {
        wxT("ListItem")
    };
    wxListBox *item20 = new wxListBox( parent, ID_LISTBOX, wxDefaultPosition, wxSize(80,100), 1, strs20, wxLB_SINGLE );
    item18->Add( item20, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item1->Add( item18, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *nucl_acid_mod_page_1( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, wxT("             "), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, IDC_RES_INDEX, wxT(""), wxDefaultPosition, wxSize(550,-1), wxTE_READONLY );
    item3->SetBackgroundColour( *wxLIGHT_GREY );
    item3->SetFont( wxFont( 11, wxMODERN, wxNORMAL, wxBOLD ) );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, wxT("chain 1:"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, IDC_CHAIN_1, wxT(""), wxDefaultPosition, wxSize(550,-1), 0 );
    item6->SetFont( wxFont( 11, wxMODERN, wxNORMAL, wxNORMAL ) );
    item4->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, wxT("chain 2:"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, IDC_CHAIN_2, wxT(""), wxDefaultPosition, wxSize(550,-1), 0 );
    item9->SetFont( wxFont( 11, wxMODERN, wxNORMAL, wxNORMAL ) );
    item7->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item11 = new wxBoxSizer( wxVERTICAL );

    wxButton *item12 = new wxButton( parent, IDC_GEN_COMPL_STR, wxT("Generate Complimentary strand"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, wxT("Force Field:"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString strs14[] = 
    {
        wxT("FLEX"), 
        wxT("AMBER91"), 
        wxT("AMBER94")
    };
    wxChoice *item14 = new wxChoice( parent, IDC_FF_TYPE, wxDefaultPosition, wxSize(100,-1), 3, strs14, 0 );
    item11->Add( item14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item16 = new wxButton( parent, IDC_BUILD_NUCL_ACID, wxT("Build Nucleic Acid"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item11->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxButton *item17 = new wxButton( parent, IDC_NA_CALC_ENE, wxT("Calculate Energy"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item18 = new wxButton( parent, IDC_MIN_ENE, wxT("Minimize Energy"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item19 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item20 = new wxButton( parent, IDC_UPDATE_CONTROLS, wxT("Update Controls"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item21 = new wxButton( parent, IDC_SAVE_CHANGES, wxT("Save Changes"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    item11->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item22 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item23 = new wxStaticText( parent, ID_TEXT, wxT("Phosph chrg:    "), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item24 = new wxTextCtrl( parent, IDC_PHOS_CHRG, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item22->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    item11->Add( item22, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item25 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item26 = new wxStaticText( parent, ID_TEXT, wxT("Slope Sigmoidal"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item27 = new wxTextCtrl( parent, IDC_SIGM_SLOPE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item25->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    item11->Add( item25, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item28 = new wxStaticText( parent, ID_TEXT, wxT("Dielectric func"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item28, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item29 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item30 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item31 = new wxStaticText( parent, ID_TEXT, wxT("Max iter:"), wxDefaultPosition, wxDefaultSize, 0 );
    item30->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item32 = new wxTextCtrl( parent, IDC_MAX_ITER, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item30->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    item29->Add( item30, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item33 = new wxStaticText( parent, ID_TEXT, wxT("Symmetry in DNA sections"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    wxGridSizer *item34 = new wxGridSizer( 5, 0, 0 );

    item34->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item35 = new wxStaticText( parent, ID_TEXT, 
        wxT("break\n")
        wxT("Res"),
        wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item35, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item36 = new wxStaticText( parent, ID_TEXT, 
        wxT("Period\n")
        wxT("Unit\n")
        wxT("Size"),
        wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item36, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item37 = new wxStaticText( parent, ID_TEXT, 
        wxT("Interstrand\n")
        wxT("Symmetry\n")
        wxT("on"),
        wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item37, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item38 = new wxStaticText( parent, ID_TEXT, 
        wxT("Symm\n")
        wxT("region\n")
        wxT("offset"),
        wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item39 = new wxStaticText( parent, ID_TEXT, wxT("1:"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item39, 0, wxALIGN_CENTER|wxALL, 5 );

    item34->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item40 = new wxTextCtrl( parent, IDC_SYMM_UNIT_1, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item34->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item41 = new wxCheckBox( parent, IDC_HOMO_SYMM_1, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item41, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item42 = new wxTextCtrl( parent, IDC_INTERS_SYMM_OFF_1, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item34->Add( item42, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item43 = new wxStaticText( parent, ID_TEXT, wxT("2:"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item43, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item44 = new wxTextCtrl( parent, IDC_BREAK_RES_1, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item34->Add( item44, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item45 = new wxTextCtrl( parent, IDC_SYMM_UNIT_2, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item34->Add( item45, 0, wxALIGN_CENTER|wxALL, 0 );

    wxCheckBox *item46 = new wxCheckBox( parent, IDC_HOMO_SYMM_2, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item46, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item47 = new wxTextCtrl( parent, IDC_INTERS_SYMM_OFF_2, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item34->Add( item47, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item48 = new wxStaticText( parent, ID_TEXT, wxT("3:"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item48, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item49 = new wxTextCtrl( parent, IDC_BREAK_RES_2, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item34->Add( item49, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item50 = new wxTextCtrl( parent, IDC_SYMM_UNIT_3, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item34->Add( item50, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item51 = new wxCheckBox( parent, IDC_HOMO_SYMM_3, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item51, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item52 = new wxTextCtrl( parent, IDC_INTERS_SYMM_OFF_3, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item34->Add( item52, 0, wxALIGN_CENTER|wxALL, 5 );

    item29->Add( item34, 0, wxALIGN_CENTER|wxALL, 0 );

    wxCheckBox *item53 = new wxCheckBox( parent, IDC_ENE_PER_UNIT, wxT("Calc Energy per unit cell"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item53, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item54 = new wxStaticText( parent, ID_TEXT, wxT("Superhelix:"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item54, 0, wxALIGN_CENTER|wxALL, 5 );

    wxGridSizer *item55 = new wxGridSizer( 3, 0, 0 );

    wxStaticText *item56 = new wxStaticText( parent, ID_TEXT, wxT("radius:"), wxDefaultPosition, wxDefaultSize, 0 );
    item55->Add( item56, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item57 = new wxStaticText( parent, ID_TEXT, wxT("pitch:"), wxDefaultPosition, wxDefaultSize, 0 );
    item55->Add( item57, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item58 = new wxStaticText( parent, ID_TEXT, wxT("1st twist:"), wxDefaultPosition, wxDefaultSize, 0 );
    item55->Add( item58, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item59 = new wxTextCtrl( parent, IDC_SUP_HELIX_RAD, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item55->Add( item59, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item60 = new wxTextCtrl( parent, IDC_SUP_HELIX_PIT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item55->Add( item60, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item61 = new wxTextCtrl( parent, IDC_FST_TWIST, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item55->Add( item61, 0, wxALIGN_CENTER|wxALL, 5 );

    item29->Add( item55, 0, wxALIGN_CENTER|wxALL, 0 );

    item10->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *nucl_acid_int_coord_page( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxGrid *item2 = new wxGrid( parent, IDC_GRID, wxDefaultPosition, wxSize(500,300), wxWANTS_CHARS );
    item2->CreateGrid( 10, 10, wxGrid::wxGridSelectCells );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item3 = new wxButton( parent, IDC_UPDATE_GRID, wxT("Update Grid"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, IDC_CLOSE, wxT("Close"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxVERTICAL );

    wxButton *item6 = new wxButton( parent, IDC_SET_FROM_JUMNA, wxT("Set From Jumna"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item7 = new wxButton( parent, IDC_SET_TO_JUMNA, wxT("Set To Jumna"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *nucl_acid_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxNotebook *item2 = new wxNotebook( parent, IDC_NUCL_ACID_NOTEB, wxDefaultPosition, wxDefaultSize, 0 );
#if !wxCHECK_VERSION(2,5,2)
    wxNotebookSizer *item1 = new wxNotebookSizer( item2 );
#else
    wxWindow *item1 = item2;
#endif

    wxPanel *item3 = new wxPanel( item2, -1 );
    nucl_acid_mod_page_1( item3, FALSE );
    item2->AddPage( item3, wxT("Simulate Nucleic Acid") );

    wxPanel *item4 = new wxPanel( item2, -1 );
    nucl_acid_int_coord_page( item4, FALSE );
    item2->AddPage( item4, wxT("Internal Coordinates") );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *scatter_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxButton *item2 = new wxButton( parent, IDC_PTGRID_CALC_PSP_AO, wxT("Calculate Pseudopotential on AOs"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item3 = new wxButton( parent, IDC_CALC_GRID_PSEUDOPOT, wxT("Calculate Grid Pseudopotential"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, wxT("Grid Dimensions:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxGridSizer *item5 = new wxGridSizer( 3, 0, 0 );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, wxT("Nx"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, wxT("Ny"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item7, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, wxT("Nz"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item8, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, IDC_PTGRID_NX, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item5->Add( item9, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, IDC_PTGRID_NY, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item5->Add( item10, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item11 = new wxTextCtrl( parent, IDC_PTGRID_NZ, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item5->Add( item11, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item12 = new wxStaticText( parent, ID_TEXT, wxT("Xmin"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item12, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, wxT("Ymin"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item13, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, wxT("Zmin"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item14, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, IDC_PTGRID_XMIN, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item5->Add( item15, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item16 = new wxTextCtrl( parent, IDC_PTGRID_YMIN, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item5->Add( item16, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item17 = new wxTextCtrl( parent, IDC_PTGRID_ZMIN, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item5->Add( item17, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item18 = new wxStaticText( parent, ID_TEXT, wxT("Xmax"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item18, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT, wxT("Ymax"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item19, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item20 = new wxStaticText( parent, ID_TEXT, wxT("Zmax"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item20, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item21 = new wxTextCtrl( parent, IDC_PTGRID_XMAX, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item5->Add( item21, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item22 = new wxTextCtrl( parent, IDC_PTGRID_YMAX, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item5->Add( item22, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item23 = new wxTextCtrl( parent, IDC_PTGRID_ZMAX, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item5->Add( item23, 0, wxALIGN_CENTER|wxALL, 0 );

    item1->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item24 = new wxButton( parent, IDC_PTGRIG_SAVE_PSP_FILE, wxT("Save Pseudopotential to file:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item25 = new wxTextCtrl( parent, IDC_PTGRID_PSP_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item26 = new wxBoxSizer( wxVERTICAL );

    wxButton *item27 = new wxButton( parent, IDC_PTGRID_CALC_PSP_XYZ, wxT("Calculate Pseudo Pot betw Points"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    wxGridSizer *item28 = new wxGridSizer( 3, 0, 0 );

    wxStaticText *item29 = new wxStaticText( parent, ID_TEXT, wxT("X1"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item29, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item30 = new wxStaticText( parent, ID_TEXT, wxT("Y1"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item30, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item31 = new wxStaticText( parent, ID_TEXT, wxT("Z1"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item31, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item32 = new wxTextCtrl( parent, IDC_PTGRID_X1, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item28->Add( item32, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item33 = new wxTextCtrl( parent, IDC_PTGRID_Y1, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item28->Add( item33, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item34 = new wxTextCtrl( parent, IDC_PTGRID_Z1, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item28->Add( item34, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item35 = new wxStaticText( parent, ID_TEXT, wxT("X2"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item35, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item36 = new wxStaticText( parent, ID_TEXT, wxT("Y2"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item36, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item37 = new wxStaticText( parent, ID_TEXT, wxT("Z2"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item37, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item38 = new wxTextCtrl( parent, IDC_PTGRID_X2, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item28->Add( item38, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item39 = new wxTextCtrl( parent, IDC_PTGRID_Y2, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item28->Add( item39, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item40 = new wxTextCtrl( parent, IDC_PTGRID_Z2, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item28->Add( item40, 0, wxALIGN_CENTER|wxALL, 0 );

    item26->Add( item28, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item41 = new wxButton( parent, IDC_PTGRID_PSP_AO_XYZ, wxT("Calculate PsP between Gaussians"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item41, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item42 = new wxButton( parent, IDC_PTGRID_KIN_ENE_XYZ, wxT("Calculate Kin Ene between Gaussians"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item42, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item43 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item44 = new wxStaticText( parent, ID_TEXT, wxT("Gaussian Exponent of grid basis "), wxDefaultPosition, wxDefaultSize, 0 );
    item43->Add( item44, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item45 = new wxTextCtrl( parent, IDC_PTGRID_GAUSS_EXP, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item43->Add( item45, 0, wxALIGN_CENTER|wxALL, 5 );

    item26->Add( item43, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item46 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item47 = new wxStaticText( parent, ID_TEXT, wxT("Pseudo Pot discard threshold"), wxDefaultPosition, wxDefaultSize, 0 );
    item46->Add( item47, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item48 = new wxTextCtrl( parent, IDC_PTGRID_PSP_THRESH, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item46->Add( item48, 0, wxALIGN_CENTER|wxALL, 5 );

    item26->Add( item46, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item49 = new wxButton( parent, IDC_PTGRID_SET_CORE_HAM, wxT("Set core hamiltonian on the grid"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item49, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item50 = new wxButton( parent, IDC_PTGRID_GRID_EIG, wxT("Find Eig states of the grid hamiltonian"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item50, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *mm_md_anal_page( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item3 = new wxButton( parent, IDC_MM_INDEX_TRAJ, wxT("Index Trajectory"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, wxT("N Pt:"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, IDC_MM_NPT_TRAJ, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item2->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, wxT("Curr Pt:"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, IDC_MM_CURR_PT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item9 = new wxButton( parent, IDC_MM_SET_CURR_PT, wxT("Set Curr Pt"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSlider *item10 = new wxSlider( parent, ID_MM_SLIDER_MD, 0, 0, 100, wxDefaultPosition, wxSize(100,-1), wxSL_HORIZONTAL|wxSL_LABELS );
    item10->Enable( false );
    item1->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item11 = new wxButton( parent, IDC_MM_PLAYBACK_TRJ, wxT("Playback Trajectory"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item12 = new wxButton( parent, IDC_MM_STOP, wxT("Stop Calculations"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, wxT("Script to run on MD points:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item14 = new wxTextCtrl( parent, IDC_MM_TRAJ_SCRIPT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item14, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item16 = new wxButton( parent, IDC_MM_CHOOSE_MDANAL_SCRIPT, wxT("Choose Script"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item17 = new wxButton( parent, IDC_MM_EDIT_MDANAL_SCRIPT, wxT("Edit Script"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item17, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item15, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item18 = new wxStaticText( parent, ID_TEXT, wxT("MD playback control:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item19 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item20 = new wxStaticText( parent, ID_TEXT, wxT("Delay time (s)"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item21 = new wxTextCtrl( parent, IDC_MM_DELAY, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item19->Add( item21, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item19, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item22 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item23 = new wxStaticText( parent, ID_TEXT, wxT("Minimal update view time(s)"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item24 = new wxTextCtrl( parent, IDC_MM_UPDATE_VIEW_INTERVAL, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item22->Add( item24, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item22, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item25 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item26 = new wxStaticText( parent, ID_TEXT, wxT("Index of the First Point to analyze:"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item27 = new wxTextCtrl( parent, IDC_MM_SKIP_INIT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item25->Add( item27, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item25, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item28 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item29 = new wxStaticText( parent, ID_TEXT, wxT(" Num Points to Step during analysis:"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item29, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item30 = new wxTextCtrl( parent, IDC_MM_SKIP_BETWEEN, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item28->Add( item30, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item28, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item31 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item32 = new wxStaticText( parent, ID_TEXT, wxT("Idx of the last point to analyze:"), wxDefaultPosition, wxDefaultSize, 0 );
    item31->Add( item32, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item33 = new wxTextCtrl( parent, IDC_MM_LAST_PT_IDX, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item31->Add( item33, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item31, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxCheckBox *item34 = new wxCheckBox( parent, IDC_MM_UPDATE_MOL_VIEW, wxT("Update Molecular View "), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item34, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item35 = new wxCheckBox( parent, IDC_MM_ANAL_RUN_IN_THREAD, wxT("Run in Separate Thread"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item35, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item36 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item37 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item38 = new wxStaticText( parent, ID_TEXT, wxT("MD Trajectory files:"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item37->Add( item38, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item36->Add( item37, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item39 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item40 = new wxButton( parent, IDC_MM_CHOOSE_MDCRD_FILE, wxT("Coordinates:"), wxDefaultPosition, wxDefaultSize, 0 );
    item39->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item41 = new wxTextCtrl( parent, IDC_MM_CRD_TRAJ_FILE_2, wxT(""), wxDefaultPosition, wxSize(250,-1), wxTE_READONLY );
    item39->Add( item41, 3, wxALIGN_CENTER|wxALL, 5 );

    item36->Add( item39, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item42 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item43 = new wxButton( parent, IDC_MM_CHOOSE_MDVEL_FILE, wxT("Velocities:"), wxDefaultPosition, wxDefaultSize, 0 );
    item42->Add( item43, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item44 = new wxTextCtrl( parent, IDC_MM_VEL_TRAJ_FILE_2, wxT(""), wxDefaultPosition, wxSize(140,-1), wxTE_READONLY );
    item42->Add( item44, 3, wxALIGN_CENTER|wxALL, 5 );

    item36->Add( item42, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item45 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item46 = new wxButton( parent, IDC_MM_CHOOSE_MDENE_FILE, wxT("Energy:"), wxDefaultPosition, wxDefaultSize, 0 );
    item45->Add( item46, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item47 = new wxTextCtrl( parent, IDC_MM_ENE_TRAJ_FILE_2, wxT(""), wxDefaultPosition, wxSize(140,-1), wxTE_READONLY );
    item45->Add( item47, 3, wxALIGN_CENTER|wxALL, 5 );

    item36->Add( item45, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item48 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item49 = new wxCheckBox( parent, IDC_MM_CHK_RMSD_ANAL, wxT("Atom RMSD Analysis:"), wxDefaultPosition, wxSize(250,20), 0 );
    item49->SetFont( wxFont( 11, wxROMAN, wxNORMAL, wxBOLD ) );
    item48->Add( item49, 0, wxALIGN_CENTER|wxALL, 5 );

    item36->Add( item48, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item50 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item51 = new wxButton( parent, IDC_MM_CHOOSE_FIT_ATOMS, wxT("Atoms to Fit:"), wxDefaultPosition, wxDefaultSize, 0 );
    item50->Add( item51, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item52 = new wxTextCtrl( parent, IDC_MM_FIT_ATOMS, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item50->Add( item52, 1, wxALIGN_CENTER|wxALL, 5 );

    item36->Add( item50, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item53 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item54 = new wxStaticText( parent, IDC_MM_REF_CRD_FIT_FILE_LBL, wxT("Ref Crd (Fit):"), wxDefaultPosition, wxDefaultSize, 0 );
    item53->Add( item54, 0, wxALIGN_CENTER|wxALL, 10 );

    wxString strs55[] = 
    {
        wxT("Current Coordinates"), 
        wxT("First Trajectory Point"), 
        wxT("XYZ Coordinates File")
    };
    wxComboBox *item55 = new wxComboBox( parent, IDC_MM_REF_CRD_FIT_TYPE, wxT(""), wxDefaultPosition, wxDefaultSize, 3, strs55, wxCB_DROPDOWN );
    item53->Add( item55, 1, wxALIGN_CENTER|wxALL, 5 );

    item36->Add( item53, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item56 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item57 = new wxButton( parent, IDC_MM_CHOOSE_REF_CRD_FIT, wxT("Ref Crd (Fit) File:"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item57, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item58 = new wxTextCtrl( parent, IDC_MM_REF_CRD_FIT_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item56->Add( item58, 1, wxALIGN_CENTER|wxALL, 5 );

    item36->Add( item56, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item59 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item60 = new wxButton( parent, IDC_MM_CHOOSE_RMSD_ATOMS, wxT("Atoms To Calc RMSD:"), wxDefaultPosition, wxDefaultSize, 0 );
    item59->Add( item60, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item61 = new wxTextCtrl( parent, IDC_MM_RMSD_ATOMS, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item59->Add( item61, 1, wxALIGN_CENTER|wxALL, 5 );

    item36->Add( item59, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item62 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item63 = new wxStaticText( parent, IDC_MM_REF_CRD_RMSD_FILE_LBL, wxT("Ref Crd (RMSD):"), wxDefaultPosition, wxDefaultSize, 0 );
    item62->Add( item63, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs64 = (wxString*) NULL;
    wxComboBox *item64 = new wxComboBox( parent, IDC_MM_REF_CRD_RMSD_TYPE, wxT(""), wxDefaultPosition, wxSize(100,-1), 0, strs64, wxCB_DROPDOWN );
    item62->Add( item64, 1, wxALIGN_CENTER|wxALL, 5 );

    item36->Add( item62, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item65 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item66 = new wxButton( parent, IDC_MM_CHOOSE_REF_CRD_RMSD, wxT("Ref Crd (RMSD) File:"), wxDefaultPosition, wxDefaultSize, 0 );
    item65->Add( item66, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item67 = new wxTextCtrl( parent, IDC_MM_REF_CRD_RMSD_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item65->Add( item67, 1, wxALIGN_CENTER|wxALL, 5 );

    item36->Add( item65, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item68 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item69 = new wxButton( parent, IDC_MM_CHOOSE_RMSD_FILE, wxT("File to Save RMSD:"), wxDefaultPosition, wxDefaultSize, 0 );
    item68->Add( item69, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item70 = new wxTextCtrl( parent, IDC_MM_RMSD_FILE_NAME, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item68->Add( item70, 1, wxALIGN_CENTER|wxALL, 5 );

    item36->Add( item68, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item71 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item72 = new wxCheckBox( parent, IDC_MM_CHK_RMSD_ATOM, wxT("RMSD Per Atom:"), wxDefaultPosition, wxDefaultSize, 0 );
    item71->Add( item72, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item73 = new wxButton( parent, IDC_MM_CHOOSE_RMSD_ATOM_FILE, wxT("File:"), wxDefaultPosition, wxSize(40,-1), 0 );
    item71->Add( item73, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item74 = new wxTextCtrl( parent, IDC_MM_RMSD_ATOM_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item71->Add( item74, 1, wxALIGN_CENTER|wxALL, 5 );

    item36->Add( item71, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item75 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item76 = new wxCheckBox( parent, IDC_MM_CHK_AVG_COORD, wxT("Average Coords:"), wxDefaultPosition, wxDefaultSize, 0 );
    item75->Add( item76, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item77 = new wxButton( parent, IDC_MM_CHOOSE_AVG_COORD_FILE, wxT("File:"), wxDefaultPosition, wxSize(40,-1), 0 );
    item75->Add( item77, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item78 = new wxTextCtrl( parent, IDC_MM_AVG_COORD_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item75->Add( item78, 1, wxALIGN_CENTER|wxALL, 5 );

    item36->Add( item75, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item79 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item80 = new wxCheckBox( parent, IDC_MM_CHK_RMSF_ATOM, wxT("RMSF Per Atom:"), wxDefaultPosition, wxDefaultSize, 0 );
    item79->Add( item80, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item81 = new wxButton( parent, IDC_MM_CHOOSE_RMSF_ATOM_FILE, wxT("File:"), wxDefaultPosition, wxSize(40,-1), 0 );
    item79->Add( item81, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item82 = new wxTextCtrl( parent, IDC_MM_RMSF_ATOM_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item79->Add( item82, 1, wxALIGN_CENTER|wxALL, 5 );

    item36->Add( item79, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item36, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *mm_info_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxGridSizer *item1 = new wxGridSizer( 6, 0, 0 );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, wxT("Step:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, IDC_MM_INFO_STEP, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, wxT("Total Energy:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, IDC_MM_INFO_TOT_ENE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, wxT("Potential Energy:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, IDC_MM_INFO_POT_ENE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, wxT("Electrostatic Ene:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, IDC_MM_INFO_ELECTR_ENE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item10 = new wxStaticText( parent, ID_TEXT, wxT("Electr Ene 1-4:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item11 = new wxTextCtrl( parent, IDC_MM_INFO_ELECTR_14_ENE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item12 = new wxStaticText( parent, ID_TEXT, wxT("Kinetic Energy:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item13 = new wxTextCtrl( parent, IDC_MM_INFO_KIN_ENE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, wxT("VdW Energy:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, IDC_MM_INFO_VDW_ENE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item16 = new wxStaticText( parent, ID_TEXT, wxT("VdW Energy 1-4:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item17 = new wxTextCtrl( parent, IDC_MM_INFO_VDW_14_ENE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item18 = new wxStaticText( parent, ID_TEXT, wxT("Temperature:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item19 = new wxTextCtrl( parent, IDC_MM_INFO_TEMP, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item20 = new wxStaticText( parent, ID_TEXT, wxT("Bond Energy:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item21 = new wxTextCtrl( parent, IDC_MM_INFO_BOND_ENE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item22 = new wxStaticText( parent, ID_TEXT, wxT("Val Angle Ene: "), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item23 = new wxTextCtrl( parent, IDC_MM_INFO_VANG_ENE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item24 = new wxStaticText( parent, ID_TEXT, wxT("Dihedral Energy:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item25 = new wxTextCtrl( parent, IDC_MM_INFO_DIH_ENE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item26 = new wxStaticText( parent, ID_TEXT, wxT("Gen Born Ene:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item27 = new wxTextCtrl( parent, IDC_MM_INFO_GB_ENE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item28 = new wxStaticText( parent, ID_TEXT, wxT("H-bond energy:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item29 = new wxTextCtrl( parent, IDC_MM_INFO_HBOND_ENE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item30 = new wxStaticText( parent, ID_TEXT, wxT("Pressure:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item31 = new wxTextCtrl( parent, IDC_MM_INFO_PRESS, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item32 = new wxStaticText( parent, ID_TEXT, wxT("Harm Constr Ene:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item33 = new wxTextCtrl( parent, IDC_MM_INFO_HARM_CONSTR_ENE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item34 = new wxStaticText( parent, ID_TEXT, wxT("Electr Polariz Ene:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item34, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item35 = new wxTextCtrl( parent, IDC_MM_INFO_ELECTR_POLAR_ENE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item35, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item36 = new wxStaticText( parent, ID_TEXT, wxT("Density:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item36, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item37 = new wxTextCtrl( parent, IDC_MM_INFO_DENSITY, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item37, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item38 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item39 = new wxButton( parent, IDC_MM_INFO_UPDATE, wxT("Update Info"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item39, 0, wxALIGN_CENTER|wxALL, 5 );

    item38->Add( 80, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item40 = new wxStaticText( parent, ID_TEXT, wxT("Format:"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item41 = new wxTextCtrl( parent, IDC_MM_INFO_DISPLAY_FORMAT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item38->Add( item41, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item42 = new wxButton( parent, IDC_MM_INFO_UPDATE_FORMAT, wxT("Update Format"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item42, 0, wxALIGN_CENTER|wxALL, 5 );

    item38->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item43 = new wxButton( parent, IDC_MM_INFO_CLOSE, wxT("Close MM Info"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item43, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item38, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *prot_redox_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxGrid *item2 = new wxGrid( parent, IDC_ALT_ST_GRID, wxDefaultPosition, wxSize(550,250), wxWANTS_CHARS );
    item2->CreateGrid( 10, 10, wxGrid::wxGridSelectCells );
    item1->Add( item2, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, wxT("Multi Site PKa Method: "), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs5 = (wxString*) NULL;
    wxChoice *item5 = new wxChoice( parent, IDC_PKA_MULTI_SITE_METHOD, wxDefaultPosition, wxSize(120,-1), 0, strs5, 0 );
    item3->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item6 = new wxCheckBox( parent, IDC_READ_INTER_MATRIX, wxT("Read Site Interaction Matrix"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item7 = new wxCheckBox( parent, IDC_SAVE_INTER_MATRIX, wxT("Save Site Interaction Matrix"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, wxT("Num Monte Carlo steps:"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, IDC_NUM_MC_STEPS, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item8->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item11 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item12 = new wxStaticText( parent, ID_TEXT, wxT("Current pH:"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item13 = new wxTextCtrl( parent, IDC_CURRENT_PH, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item11->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, wxT("Current E0:"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, IDC_CURRENT_E0, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item11->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item16 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, wxT("pH min:"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item18 = new wxTextCtrl( parent, IDC_PH_MIN, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item16->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT, wxT("pH max:"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item20 = new wxTextCtrl( parent, IDC_PH_MAX, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item16->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item21 = new wxStaticText( parent, ID_TEXT, wxT("pH step:"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item22 = new wxTextCtrl( parent, IDC_PH_STEP, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item16->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item16, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item23 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item24 = new wxStaticText( parent, ID_TEXT, wxT("E0 min:"), wxDefaultPosition, wxDefaultSize, 0 );
    item23->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item25 = new wxTextCtrl( parent, IDC_E0_MIN, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item23->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item26 = new wxStaticText( parent, ID_TEXT, wxT("E0 max:"), wxDefaultPosition, wxDefaultSize, 0 );
    item23->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item27 = new wxTextCtrl( parent, IDC_E0_MAX, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item23->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item28 = new wxStaticText( parent, ID_TEXT, wxT("E0 step:"), wxDefaultPosition, wxDefaultSize, 0 );
    item23->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item29 = new wxTextCtrl( parent, IDC_E0_STEP, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item23->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item23, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *crd_snapshot_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, wxT("Snapshots:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item2 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, wxT("Molecular Set:"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item4 = new wxTextCtrl( parent, IDC_SNAP_MSET_NAME, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item2->Add( item4, 1, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxGrid *item6 = new wxGrid( parent, IDC_LIST_SNAP, wxDefaultPosition, wxSize(200,160), wxWANTS_CHARS );
    item6->CreateGrid( 10, 10, wxGrid::wxGridSelectRows );
    item5->Add( item6, 1, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxGridSizer *item8 = new wxGridSizer( 4, 0, 0 );

    wxCheckBox *item9 = new wxCheckBox( parent, IDC_SNAP_EN_QM, wxT("EN_QM"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item10 = new wxCheckBox( parent, IDC_SNAP_EN_MM, wxT("EN_MM"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item11 = new wxCheckBox( parent, IDC_SNAP_ES_QM, wxT("ES_QM"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item12 = new wxCheckBox( parent, IDC_SNAP_ES_MM, wxT("ES_MM"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item13 = new wxCheckBox( parent, IDC_SNAP_DS_QM, wxT("DS_QM"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item14 = new wxCheckBox( parent, IDC_SNAP_DS_MM, wxT("DS_MM"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item15 = new wxCheckBox( parent, IDC_SNAP_EX_QM, wxT("EX_QM"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item16 = new wxCheckBox( parent, IDC_SNAP_EX_MM, wxT("EX_MM"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item17 = new wxCheckBox( parent, IDC_SNAP_IN_QM, wxT("IN_QM"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item18 = new wxCheckBox( parent, IDC_SNAP_IN_MM, wxT("IN_MM"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item19 = new wxCheckBox( parent, IDC_SNAP_CNT_DIST, wxT("CNT_DIST"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item20 = new wxCheckBox( parent, IDC_SNAP_TEMP, wxT("TEMP"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item21 = new wxCheckBox( parent, IDC_SNAP_EN_MM_QM_DIFF, wxT("EN_MM_QM_DIFF"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item22 = new wxCheckBox( parent, IDC_SNAP_ES_MM_QM_DIFF, wxT("ES_MM_QM_DIFF"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item23 = new wxCheckBox( parent, IDC_SNAP_DS_MM_QM_DIFF, wxT("DS_MM_QM_DIFF"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item24 = new wxCheckBox( parent, IDC_SNAP_EX_MM_QM_DIFF, wxT("EX_MM_QM_DIFF"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item25 = new wxCheckBox( parent, IDC_SNAP_IN_MM_QM_DIFF, wxT("IN_MM_QM_DIFF"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item26 = new wxCheckBox( parent, IDC_SNAP_BOND_ENE, wxT("BOND_ENE"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item27 = new wxCheckBox( parent, IDC_SNAP_ANG_ENE, wxT("ANG_ENE"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item28 = new wxCheckBox( parent, IDC_SNAP_TORS_ENE, wxT("TORS_ENE"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    item7->Add( item8, 1, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item29 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item30 = new wxStaticText( parent, ID_TEXT, wxT("Snapshot ID:"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item31 = new wxTextCtrl( parent, IDC_SEL_SNAP_ID, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item29->Add( item31, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item32 = new wxButton( parent, IDC_ADD_SNAPSHOT, wxT("Add Snapshot"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item33 = new wxButton( parent, IDC_DEL_SNAPSHOT, wxT("Delete Snapshot"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item34 = new wxButton( parent, IDC_DEL_ALL_SNAPSHOTS, wxT("Delete All Snapshots"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item34, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item29, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item35 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item36 = new wxButton( parent, IDC_SET_CRD_FROM_SNAPSHOT, wxT("Set Current Crd From Snapshot"), wxDefaultPosition, wxDefaultSize, 0 );
    item35->Add( item36, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item37 = new wxButton( parent, IDC_SAVE_CRD_TO_SNAPSHOT, wxT("Save Current Crd To Snapshot"), wxDefaultPosition, wxDefaultSize, 0 );
    item35->Add( item37, 1, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item35, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item38 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item39 = new wxButton( parent, IDC_LOAD_SNAP_FROM_MOL_FILE, wxT("Load Snapshot From Mol File"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item39, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item38, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item40 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item41 = new wxButton( parent, IDC_LOAD_SNAPS_FROM_XML_FILE, wxT("Load Snapshots From XML File"), wxDefaultPosition, wxDefaultSize, 0 );
    item40->Add( item41, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item42 = new wxButton( parent, IDC_SAVE_SNAPS_TO_XML_FILE, wxT("Save Snapshots to XML File"), wxDefaultPosition, wxDefaultSize, 0 );
    item40->Add( item42, 1, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item40, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *atom_prop_colors_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, wxT("Color Atoms By Property"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item2 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, wxT("Atom Property:"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString strs4[] = 
    {
        wxT("ChoiceItem")
    };
    wxChoice *item4 = new wxChoice( parent, IDC_CHOICE_ATOM_PROP, wxDefaultPosition, wxSize(100,-1), 1, strs4, 0 );
    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item5 = new wxButton( parent, IDC_COLOR_ATOMS_PROP, wxT("Color Selected Atoms By Property"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, wxT("Color Map:          "), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 1, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item8 = new wxButton( parent, IDC_CLEAR_COLOR_MAP, wxT("Clear Color Map"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item9 = new wxButton( parent, IDC_SAVE_COLOR_MAP_FILE, wxT("Save Color Map To File"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item10 = new wxButton( parent, IDC_LOAD_COLOR_MAP_FILE, wxT("Load Color Map From File"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item11 = new wxBoxSizer( wxHORIZONTAL );

    wxGrid *item12 = new wxGrid( parent, IDC_GRID_COLOR_MAP, wxDefaultPosition, wxSize(500,400), wxWANTS_CHARS );
    item12->CreateGrid( 10, 3, wxGrid::wxGridSelectCells );
    item11->Add( item12, 1, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item11, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item14 = new wxButton( parent, IDC_ADD_COLOR_BY_NAME, wxT("Add Color by Name:"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs15 = (wxString*) NULL;
    wxChoice *item15 = new wxChoice( parent, IDC_CHOICE_COLORS, wxDefaultPosition, wxSize(100,-1), 0, strs15, 0 );
    item13->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item16 = new wxStaticText( parent, ID_TEXT, wxT("Minimal Property Value:"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item17 = new wxTextCtrl( parent, IDC_MIN_PROP_VAL, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item13->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item13, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item18 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item19 = new wxButton( parent, IDC_ADD_COLOR_BY_RGB, wxT("Add Color By RGB:"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item20 = new wxStaticText( parent, ID_TEXT, wxT("R:"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item21 = new wxTextCtrl( parent, IDC_COLOR_R, wxT(""), wxDefaultPosition, wxSize(30,-1), 0 );
    item18->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item22 = new wxStaticText( parent, ID_TEXT, wxT("G:"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item23 = new wxTextCtrl( parent, IDC_COLOR_G, wxT(""), wxDefaultPosition, wxSize(30,-1), 0 );
    item18->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item24 = new wxStaticText( parent, ID_TEXT, wxT("B:"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item25 = new wxTextCtrl( parent, IDC_COLOR_B, wxT(""), wxDefaultPosition, wxSize(30,-1), 0 );
    item18->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item26 = new wxStaticText( parent, ID_TEXT, wxT("Number of Interpolated Colors To Add:"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item27 = new wxTextCtrl( parent, IDC_NUM_INTERPOL_COLORS, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item18->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item18, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *edit_mut_map_dlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item3 = new wxCheckBox( parent, IDC_VIEW_ATOM_MAP, wxT("View Atom Map"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item4 = new wxCheckBox( parent, IDC_COLOR_MAPPED_ATOMS, wxT("Color Mapped Atoms"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item6 = new wxButton( parent, IDC_SET_MOL_SHIFT, wxT("Set Molecular Shift (Ang):"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, IDC_MOL_SHIFT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item5->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item8 = new wxButton( parent, IDC_LOAD_MUTATION_MAP, wxT("Load Mutation Map"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item9 = new wxButton( parent, IDC_SAVE_MUTATION_MAP, wxT("Save Mutation Map"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item9, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    item2->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item2, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item11 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item12 = new wxStaticText( parent, ID_TEXT, wxT("Atom Pairs"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString strs13[] = 
    {
        wxT("ListItem")
    };
    wxListBox *item13 = new wxListBox( parent, IDC_LIST_ATOM_PAIRS, wxDefaultPosition, wxSize(160,110), 1, strs13, wxLB_SINGLE );
    item11->Add( item13, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item15 = new wxButton( parent, IDC_DELETE_ATOM_PAIR, wxT("Delete Atom Pair"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item16 = new wxButton( parent, IDC_ADD_ATOM_PAIR, wxT("Add Atom Pair"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item11->Add( item14, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item17 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item18 = new wxStaticText( parent, ID_TEXT, wxT("Atom 1:"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item18, 1, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT, wxT("Atom 2:"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item19, 1, wxALIGN_CENTER|wxALL, 5 );

    item11->Add( item17, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 0 );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item21 = new wxTextCtrl( parent, IDC_EDIT_ATOM_1, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item20->Add( item21, 1, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item22 = new wxTextCtrl( parent, IDC_EDIT_ATOM_2, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item20->Add( item22, 1, wxALIGN_CENTER|wxALL, 5 );

    item11->Add( item20, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item11, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

wxMenuBar *TestMenu()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item0->Append( item1, wxT("test1") );
    
    wxMenu* item2 = new wxMenu;
    item0->Append( item2, wxT("test2") );
    
    return item0;
}

wxMenuBar *MainMenu()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( ID_FILE_NEW_WX, wxT("New"), wxT("") );
    item1->Append( ID_FILE_OPEN_WX, wxT("Open Molecule\tCtrl-o"), wxT("") );
    item1->Append( IDM_MOL_SAVE_WX, wxT("Save Molecule\tCtrl-s"), wxT("") );
    item1->Append( IDM_MOL_SAVE_AS_WX, wxT("Save Molecule As"), wxT("") );
    item1->AppendSeparator();
    item1->Append( IDM_LOAD_SCRIPT_WX, wxT("Load Script\tAlt-Ctrl-s"), wxT("") );
    item1->Append( IDM_REDIRECT_IO_WX, wxT("Redirect IO"), wxT("") );
    item1->AppendSeparator();
    item1->Append( IDM_SAVE_IMAGE_WX, wxT("Save Image to File"), wxT("") );
    item1->Append( IDM_SAVE_IMAGE_CLIPBOARD_WX, wxT("Save Image to Clipboard"), wxT("") );
    item1->AppendSeparator();
    item1->Append( IDM_COMP_ACCOUNTS_WX, wxT("Computer Accounts"), wxT("") );
    item1->Append( IDM_INFO_WX, wxT("Information"), wxT("") );
    item1->Append( ID_FILE_CLOSE_WX, wxT("Close View"), wxT("") );
    item1->AppendSeparator();
    item1->Append( IDM_PRINT_WX, wxT("Print"), wxT("") );
    item1->Append( IDM_SETUP_WX, wxT("Print Setup..."), wxT("") );
    item1->AppendSeparator();
    item1->Append( IDM_EXIT_WX, wxT("Exit"), wxT("") );
    item0->Append( item1, wxT("File") );
    
    wxMenu* item2 = new wxMenu;
    item2->Append( IDM_SELECT_WX, wxT("Select All"), wxT("") );
    item2->AppendSeparator();
    item2->Append( IDM_EDIT_ATOM_PARAM_WX, wxT("Edit Atom Parameters"), wxT("") );
    item2->Append( IDM_EDIT_RES_PARAM_WX, wxT("Edit Residue Parameters"), wxT("") );
    item2->Append( IDM_EDIT_MOLSETS, wxT("Edit Molecular Sets"), wxT("") );
    item2->Append( IDM_EDIT_GROUPS_WX, wxT("Edit Groups"), wxT("") );
    item2->Append( IDM_EDIT_MUT_MAP, wxT("Edit Mutation Map"), wxT("") );
    item2->Append( IDM_CRD_SNAPSHOT, wxT("Edit Coordinate Snapshots"), wxT("") );
    item2->Append( IDM_EDIT_GEOM_WX, wxT("Edit Geometry"), wxT("") );
    item2->Append( IDM_FIND_HBONDS_WX, wxT("Find Hydrogen Bonds"), wxT("") );
    item2->Append( IDM_SOLVATE_WX, wxT("Solvate Molecules"), wxT("") );
    item2->Append( IDM_WRAP_UNIT_CELL, wxT("Wrap Into Unit Cell"), wxT("") );
    item2->Append( IDM_CENTER_SOLUTE, wxT("Center Solute in Solvent"), wxT("") );
    item2->Append( IDM_CENTER_MOL_PBOX, wxT("Center Molecules in Periodical Box"), wxT("") );
    
    wxMenu* item3 = new wxMenu;
    item3->Append( IDM_ADD_MISSING_ATOMS_WX, wxT("Add All Missing Atoms"), wxT("") );
    item3->Append( IDM_ADD_POLAR_HYDROGENS_WX, wxT("Add Polar Hydrogens"), wxT("") );
    item3->Append( IDM_ADD_H_HYBRID_WX, wxT("Add H Using Hybridization"), wxT("") );
    item3->Append( IDM_ADD_HYDROGENS_WX, wxT("Add Hydrogens"), wxT("") );
    item3->Append( IDM_DEL_SEL_ATOMS_WX, wxT("Delete Selected Atoms"), wxT("") );
    item3->Append( IDM_DEL_OVLP_MOLS, wxT("Delete Molecules Overlapping Selection"), wxT("") );
    item2->Append( ID_MENU, wxT("Add and Delete Atoms"), item3 );

    item2->Append( IDM_EDIT_FRAGM_WX, wxT("Fragments"), wxT("") );
    
    wxMenu* item4 = new wxMenu;
    item4->Append( IDM_BUILD_FILM_WX, wxT("Build Molecular Film"), wxT("") );
    item2->Append( ID_MENU, wxT("Construct Molecule"), item4 );

    
    wxMenu* item5 = new wxMenu;
    item5->Append( IDM_CLEAR_PICKED_WX, wxT("Clear Picked Atoms"), wxT("") );
    item5->Append( IDM_SEL_ATOMS_IN_BOUND_BOX, wxT("Select Atoms Within Boundary Box"), wxT("") );
    item5->Append( IDM_REVERT_SELECTION, wxT("Revert Atom Selection"), wxT("") );
    item2->Append( ID_MENU, wxT("Pick and Select"), item5 );

    
    wxMenu* item6 = new wxMenu;
    item6->Append( IDM_NUCL_ACID_WX, wxT("Nucleic Acids Manipulation"), wxT("") );
    item6->Append( IDM_DESCRIBE_SEC_STRUCT, wxT("Describe Secondary Structure"), wxT("") );
    item6->Append( IDM_PRINT_HBONDS, wxT("Print Hydrogen Bonds"), wxT("") );
    item6->Append( IDM_SET_ALPHA_HELIX, wxT("Set Selection To Alpha Helix"), wxT("") );
    item2->Append( ID_MENU, wxT("Biopolymers"), item6 );

    item2->Append( IDM_SHOW_RES_DB_WX, wxT("Show Residue DB"), wxT("") );
    
    wxMenu* item7 = new wxMenu;
    item7->Append( IDM_SHOW_ATOMID_WX, wxT("Atom ID"), wxT("") );
    item7->Append( IDM_MEASURE_DISTANCE_WX, wxT("Distance"), wxT("") );
    item7->Append( IDM_MEASURE_ANGLE_WX, wxT("Angle"), wxT("") );
    item7->Append( IDM_MEASURE_DIHEDRAL_WX, wxT("Dihedral"), wxT("") );
    item2->Append( ID_MENU, wxT("Measure"), item7 );

    item0->Append( item2, wxT("Edit") );
    
    wxMenu* item8 = new wxMenu;
    
    wxMenu* item9 = new wxMenu;
    item9->Append( IDM_WIREFRAME_WX, wxT("Wireframe"), wxT("") );
    item9->Append( IDM_STICKS_WX, wxT("Sticks"), wxT("") );
    item9->Append( IDM_SPHERES_WX, wxT("Spacefill"), wxT("") );
    item9->Append( IDM_BALLSTICK_WX, wxT("Ball & Stick"), wxT("") );
    item9->Append( IDM_RIBBONS_WX, wxT("Ribbons"), wxT("") );
    item9->Append( IDM_STRANDS_WX, wxT("Strands"), wxT("") );
    item9->Append( IDM_CARTOONS_WX, wxT("Cartoons"), wxT("") );
    item8->Append( ID_MENU, wxT("Display Mode"), item9 );

    
    wxMenu* item10 = new wxMenu;
    item10->Append( IDM_MONO_WX, wxT("Monochrome"), wxT("") );
    item10->Append( IDM_CPK_WX, wxT("CPK"), wxT("") );
    item10->Append( IDM_SHAPELY_WX, wxT("Shapely"), wxT("") );
    item10->Append( IDM_COL_GROUPS_WX, wxT("Groups"), wxT("") );
    item10->Append( IDM_COL_RESIDUES_WX, wxT("Residues"), wxT("") );
    item10->Append( IDM_CHAIN_WX, wxT("Chains"), wxT("") );
    item10->Append( IDM_TEMPER_WX, wxT("Temperature"), wxT("") );
    item10->Append( IDM_STRUCT_WX, wxT("Structure"), wxT("") );
    item10->Append( IDM_COL_DON_COUPL_WX, wxT("Coupling to Donor"), wxT("") );
    item10->Append( IDM_ATOM_PROP_COLORS, wxT("Atom Properties"), wxT("") );
    item8->Append( ID_MENU, wxT("Colours"), item10 );

    
    wxMenu* item11 = new wxMenu;
    item11->Append( IDM_SLAB_WX, wxT("Slab Mode"), wxT(""), wxITEM_CHECK );
    item11->Append( IDM_HYDROGEN_WX, wxT("Hydrogens"), wxT(""), wxITEM_CHECK );
    item11->Append( IDM_HETERO_WX, wxT("Hetero Atoms"), wxT(""), wxITEM_CHECK );
    item11->Append( IDM_SPECULAR_WX, wxT("Specular"), wxT(""), wxITEM_CHECK );
    item11->Append( IDM_STEREO_WX, wxT("Stereo"), wxT(""), wxITEM_CHECK );
    item11->Append( IDM_LABELS_WX, wxT("Labels"), wxT(""), wxITEM_CHECK );
    item11->Append( IDM_DISPLAY_PBOX, wxT("Periodical Boundary Box"), wxT(""), wxITEM_CHECK );
    item8->Append( ID_MENU, wxT("Options"), item11 );

    item8->Append( IDM_VIEW_PARAM_WX, wxT("Set View Parameters"), wxT("") );
    item8->Append( IDM_OBJECT3D_WX, wxT("3D Objects"), wxT("") );
    
    wxMenu* item12 = new wxMenu;
    item12->Append( IDM_LABELS_ATOM_ID_WX, wxT("Atom IDs"), wxT("") );
    item12->Append( IDM_LABELS_ATOM_NAMES_WX, wxT("Atom Names"), wxT("") );
    item12->Append( IDM_LABELS_ATOM_SEQNUM_WX, wxT("Atom Seq Numbers"), wxT("") );
    item12->Append( IDM_LABELS_ATOM_FF_SYMB, wxT("Force Field Symbols"), wxT("") );
    item12->Append( IDM_LABELS_OFF_WX, wxT("OFF"), wxT("") );
    item8->Append( ID_MENU, wxT("Labels"), item12 );

    
    wxMenu* item13 = new wxMenu;
    item13->Append( ID_WINDOW_CASCADE_WX, wxT("Cascade"), wxT("") );
    item13->Append( ID_WINDOW_TILE_VERT_WX, wxT("Tile"), wxT("") );
    item8->Append( ID_MENU, wxT("Windows"), item13 );

    item8->Append( IDM_CENTER_VIEW_SEL_WX, wxT("Center View Sel Atoms"), wxT("") );
    item0->Append( item8, wxT("Display") );
    
    wxMenu* item14 = new wxMenu;
    item14->Append( IDM_MM_PARAM_WX, wxT("Molecular Mechanics"), wxT("") );
    item14->Append( IDM_CONT_ELECTR_WX, wxT("Continuum Electrostatics"), wxT("") );
    
    wxMenu* item15 = new wxMenu;
    item15->Append( IDM_QCHEM_PARAM_WX, wxT("Parameters"), wxT("") );
    item15->Append( IDM_QCHEM_LOAD_DATA_WX, wxT("Load Data"), wxT("") );
    item15->Append( IDM_WAVEFUN_ANAL_WX, wxT("WaveFun Anal"), wxT("") );
    
    wxMenu* item16 = new wxMenu;
    item16->Append( IDM_CALC_POLAR_GCONTR_WX, wxT("Polar Grp Contr"), wxT("") );
    item16->Append( IDM_SAVE_GROUP_OPER_WX, wxT("Save Group Oper Mat"), wxT("") );
    item16->Append( IDM_POL_GRP_CONTR_F_WX, wxT("Calc Polarizability Group Contrib"), wxT("") );
    item16->Append( IDM_READ_POLAR_CONTR_WX, wxT("Read Polarizabilty Group Contr"), wxT("") );
    item16->Append( IDM_CALC_ROTANG_GRP_CONTR2_WX, wxT("Calc Rot Angle Group Contrib"), wxT("") );
    item16->Append( IDM_READ_ROTANG_GRP_CONTR2_WX, wxT("Read Rot Angle Group Contr"), wxT("") );
    item15->Append( ID_MENU, wxT("Optical Properties"), item16 );

    item14->Append( ID_MENU, wxT("Quantum Chemistry"), item15 );

    item0->Append( item14, wxT("Basic Models") );
    
    wxMenu* item17 = new wxMenu;
    item17->Append( IDM_INTER_MOL_WX, wxT("Inter Molecular Interactions"), wxT("") );
    item17->Append( IDM_PNP_SMLPNP, wxT("Poisson Nernst Planck"), wxT("") );
    item17->Append( IDM_PNP_RF, wxT("Potential of Mean Force"), wxT("") );
    
    wxMenu* item18 = new wxMenu;
    item18->Append( IDM_EDIT_REDOX_WX, wxT("Edit Redox Centers"), wxT("") );
    item18->Append( IDM_RUN_PATHWAYS_WX, wxT("Pathways Model"), wxT("") );
    item18->Append( IDM_ET_EFF_HAM_WX, wxT("Donor-Acceptor QChem Calculations"), wxT("") );
    item18->Append( IDM_RESET_ET_WX, wxT("Reset ET Module"), wxT("") );
    item18->Append( IDM_EL_SCATTER_WX, wxT("Electron Scattering Calc"), wxT("") );
    item17->Append( ID_MENU, wxT("ET"), item18 );

    item17->Append( ID_FLEX_MOD, wxT("Flexibility Analysis (FIRST)"), wxT("") );
    item17->Append( ID_MENU_ED, wxT("Essential Dynamics and Clustering Analysis"), wxT("") );
    item17->Append( IDM_PROT_REDOX, wxT("Protonation and Redox Equilibrium"), wxT("") );
    item0->Append( item17, wxT("Applications") );
    
    wxMenu* item19 = new wxMenu;
    item19->Append( IDM_ABOUT_WX, wxT("About HARLEM"), wxT("") );
    item19->Append( IDM_HELP_WX, wxT("Beginner's Manual"), wxT("") );
    item19->Append( IDM_MANUAL_WX, wxT("Advanced Manual"), wxT("") );
    item0->Append( item19, wxT("Help") );
    
    wxMenu* item20 = new wxMenu;
    item20->Append( IDM_TEST_OPER_1_WX, wxT("Test Operators 1"), wxT("") );
    item20->Append( IDM_TEST_OPER_2_WX, wxT("Test Operators 2"), wxT("") );
    item20->Append( IDM_TEST_QCMOD_1_WX, wxT("Test HaQCMod 1"), wxT("") );
    item20->Append( IDM_CALC_MATR_1_WX, wxT("Calc Matricies 1"), wxT("") );
    item20->Append( IDM_TEST_MAP_WX, wxT("Test STD Lib Map"), wxT("") );
    item20->Append( IDM_TEST_MIN_1_WX, wxT("Test Min 1"), wxT("") );
    item20->Append( IDM_TEST_GRAPH_1_WX, wxT("test_graph_1"), wxT("") );
    item20->Append( IDM_PNP, wxT("PNP Solver\tAlt-Ctrl-p"), wxT("") );
    item20->Append( IDM_CONT_ELECTR_WX, wxT("Continuum Electrostatics"), wxT("") );
    
    wxMenu* item21 = new wxMenu;
    item21->Append( IDC_TRANSFORM_CONNECT_WX, wxT("Connect"), wxT("") );
    item21->AppendSeparator();
    item21->Append( IDC_POSITION_WX, wxT("Position"), wxT("") );
    item21->Append( IDC_POSITION_RESET_WX, wxT("Reset"), wxT("") );
    item21->Append( IDC_POSITION_STORE_WX, wxT("Store"), wxT("") );
    item21->Append( IDC_POSITION_AXES_WX, wxT("Axis"), wxT("") );
    item20->Append( ID_MENU, wxT("Transform"), item21 );

    item20->Append( IDM_TEST_PYTHON_1, wxT("Test Python 1"), wxT("") );
    
    wxMenu* item22 = new wxMenu;
    item22->Append( IDM_MOL_INFO_WX, wxT("Molecule Info"), wxT("") );
    item22->Append( IDM_GAUSS_BCOMMON_WX, wxT("Gaussian basis common"), wxT("") );
    item22->Append( IDM_DUMP_OVERLAP, wxT("Overlap Matrix"), wxT("") );
    item22->Append( IDM_DUMP_OVERLAP2_WX, wxT("Overlap between bas sets"), wxT("") );
    item20->Append( ID_MENU, wxT("Dump"), item22 );

    
    wxMenu* item23 = new wxMenu;
    item23->Append( IDM_OPENVECFIELD_HAVIEW, wxT("Open VectorField3D in HMolView"), wxT("") );
    item23->Append( IDM_OPEN_QST_NIND, wxT("Open Qstatic Map From NodeIndex File"), wxT("") );
    item23->Append( IDM_OPEN_EPS_NIND, wxT("Open Diel.Conts. Maps From NodeIndex File"), wxT("") );
    item23->Append( IDM_OPEN_DIFF_NIND, wxT("Open Diff.Conts. Maps From NodeIndex File"), wxT("") );
    item20->Append( ID_MENU, wxT("PNPS"), item23 );

    item20->Append( IDM_TEST_MOLSET_HANDLER, wxT("Test Molset Handler"), wxT("") );
    
    wxMenu* item24 = new wxMenu;
    item24->Append( IDM_SAVE_AMOEBA_TOP_FILE_1, wxT("Save Amoeba Top File 1"), wxT("") );
    item24->Append( IDM_SAVE_AMOEBA_TOP_FILE_2, wxT("Save Amoeba Top File 2"), wxT("") );
    item20->Append( ID_MENU, wxT("MORT"), item24 );

    
    wxMenu* item25 = new wxMenu;
    item25->Append( IDM_TEST_FFT_1, wxT("Test FFT 1"), wxT("") );
    item20->Append( ID_MENU, wxT("MATH"), item25 );

    
    wxMenu* item26 = new wxMenu;
    item26->Append( IDM_TEST_AVG_POP_FUNC, wxT("Test Avg Population functions"), wxT("") );
    item20->Append( ID_MENU, wxT("PKA REDOX"), item26 );

    item0->Append( item20, wxT("Test") );
    
    return item0;
}

wxMenuBar *qchem_menu_1()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( IDC_IPACK_TEST_1, wxT("IPack Test 1"), wxT("") );
    item1->Append( IDC_IPACK_TEST_2, wxT("IPack Test 2"), wxT("") );
    item1->Append( IDC_TEST_RANDOM, wxT("Test Random Num Gen"), wxT("") );
    item1->Append( IDC_SET_INT_ENGINE_IPACK, wxT("Set int engine to IPACK"), wxT("") );
    item1->Append( IDC_SET_INT_ENGINE_GAUSS, wxT("Set int engine to GAUSSIAN"), wxT("") );
    item0->Append( item1, wxT("IPACK_TESTS") );
    
    wxMenu* item2 = new wxMenu;
    item2->Append( IDC_CONVERT_CHK_TO_FCHK, wxT("Convert CHK File to FCHK"), wxT("") );
    item0->Append( item2, wxT("Chk File Functions") );
    
    return item0;
}

wxMenuBar *et_menu_1()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( IDC_ETEFFH_PR_OVLP_EL, wxT("Print Overlap Elem"), wxT("") );
    item1->Append( IDC_ETEFFH_PR_HEFF_EL, wxT("Print Heff Elem"), wxT("") );
    item0->Append( item1, wxT("ORBITALS") );
    
    wxMenu* item2 = new wxMenu;
    item2->Append( IDC_ETEFFH_SAVE_DB, wxT("Save Heff to DB file"), wxT("") );
    item2->Append( IDC_ETEFFH_BUILD_DB, wxT("Build Heff form DB file"), wxT("") );
    item2->Append( IDC_ETEFFH_PROTECT_MAT, wxT("Print Protection Matrix"), wxT("") );
    item2->Append( IDC_ETEFFH_SEL_DB, wxT("Select Heff Submatrix DB"), wxT("") );
    item2->Append( IDC_SAVE_HEFF_XML, wxT("Save Heff to XML file"), wxT("") );
    item2->Append( IDC_LOAD_HEFF_XML, wxT("Load Heff SubMatrix From XML file"), wxT("") );
    item2->Append( IDC_SAVE_REDOX_ORBS_XML, wxT("Save Redox Orbitals to XML file"), wxT("") );
    item2->Append( IDC_LOAD_DONOR_ORBS_XML, wxT("Load Donor Orbitals From XML File"), wxT("") );
    item2->Append( IDC_LOAD_ACC_ORBS_XML, wxT("Load Acceptor Orbitals From XML File"), wxT("") );
    item0->Append( item2, wxT("Divide and Conque ") );
    
    return item0;
}

wxMenuBar *atom_params_menu()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( IDC_CALC_DIPOLE, wxT("Calc Charge and Dipole"), wxT("") );
    item1->Append( IDC_SET_TEMP_FROM_CH, wxT("Set Temp Field from Atom Charges"), wxT("") );
    item1->Append( IDC_SET_CH_FROM_TEMP, wxT("Set Atom Charges From Temp Field"), wxT("") );
    item1->Append( IDC_EDTAT_ZERO_CHARGES, wxT("Set Zero Charges"), wxT("") );
    item1->Append( IDC_SET_STD_CHARGES, wxT("Set  Amber All Atom Charges"), wxT("") );
    item1->Append( IDC_EDTAT_BACKBONE_CH, wxT("Set Backbone Only Charges"), wxT("") );
    item1->Append( IDC_EDTAT_PH_CH, wxT("Set Charges For Current PH"), wxT("") );
    item1->Append( IDC_EDTAT_FORM_CH_TEMPL, wxT("Set Formal Atom Charges from Templates"), wxT("") );
    item0->Append( item1, wxT("Charges") );
    
    wxMenu* item2 = new wxMenu;
    item2->Append( IDC_SET_VDW_RAD, wxT("Set Standard VdW Radii"), wxT("") );
    item2->Append( IDC_SET_PARSE_RAD, wxT("Set  PARSE Radii"), wxT("") );
    item2->Append( IDC_SET_HPP_RAD, wxT("Set  H++ Server Radii"), wxT("") );
    item2->Append( IDC_SET_SPEC_RAD, wxT("Set  Specified Radius Val"), wxT("") );
    item2->Append( IDC_MIN_DIST, wxT("Find Closest Atoms"), wxT("") );
    item0->Append( item2, wxT("Radii") );
    
    wxMenu* item3 = new wxMenu;
    item3->Append( IDC_EDTAT_AMBER_FF_SYMB, wxT("Set  Amber FF Symbols (All Atom)"), wxT("") );
    item3->Append( IDC_EDTAT_ELEM_MASS, wxT("Set Std Atom Masses "), wxT("") );
    item3->Append( IDC_EDTAT_SET_ATOM_ELEM_FROM_TEMPL, wxT("Set Atom Elements From Residue Templates"), wxT("") );
    item3->Append( IDC_EDTAT_CLEAR_ATOM_FF_PARAMS, wxT("Clear Atom FF Params"), wxT("") );
    item0->Append( item3, wxT("Force Field") );
    
    wxMenu* item4 = new wxMenu;
    item4->Append( IDM_LOAD_COORDS, wxT("Load Coords From File"), wxT("") );
    item4->Append( IDM_SET_STD_ZMAT, wxT("Set Standard Z-matrix"), wxT("") );
    item4->Append( IDM_PRINT_ZMAT, wxT("Print Z-Matrix"), wxT("") );
    item4->Append( IDM_SET_ATCRD_FROM_ZMAT, wxT("Set Atom Coords from Z-Matrix"), wxT("") );
    item4->Append( IDM_SET_ZMAT_INT_CRD_FROM_ATCRD, wxT("Set Z-Matrix Internal Coord from Atom Coords"), wxT("") );
    item0->Append( item4, wxT("Coordinates") );
    
    wxMenu* item5 = new wxMenu;
    item5->Append( IDC_CALC_SOLV_ACCESS_AREA, wxT("Calculate Solvent Access Area"), wxT("") );
    item5->Append( IDC_CALC_SOLV_ACCESS_AREA_GEOBALL, wxT("Calculate Solvent Access Area Geoball Method"), wxT("") );
    item5->Append( IDC_CREATE_EXCL_VOL_MOL, wxT("Create EXCLUDE_VOLUME Molecule"), wxT("") );
    item5->Append( IDC_SAVE_CRD_EXCL_VOL_ARB, wxT("Save EXCLUDE_VOLUME Coords In Arbalest Format"), wxT("") );
    item0->Append( item5, wxT("Molecular Surface & Volume") );
    
    wxMenu* item6 = new wxMenu;
    item6->Append( IDC_EDTAT_SET_HBDA_STATUS, wxT("Set H-Bond DA Status"), wxT("") );
    item0->Append( item6, wxT("Other Parameters") );
    
    return item0;
}

wxMenuBar *res_params_menu()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( IDC_RESPAR_CHECK_STRUCT, wxT("Check Res Struct"), wxT("") );
    item1->Append( IDC_RESPAR_DEL_EXTRA_AT, wxT("Delete Extra Atoms"), wxT("") );
    item1->Append( IDC_RESPAR_ADD_MISS_AT, wxT("Add All Missing Atoms"), wxT("") );
    item1->Append( IDC_FIX_BONDS_USING_TEMPL, wxT("Fix Bonds Using Residue Templates"), wxT("") );
    item1->Append( IDC_ORDER_ATOMS_RES, wxT("Order atoms in Residues"), wxT("") );
    item1->Append( IDC_RENAME_ATOMS_TO_AMBER, wxT("Rename Atoms to AMBER notation"), wxT("") );
    item1->Append( IDC_RENAME_ATOMS_TO_GROMACS, wxT("Rename Atoms to GROMACS notation"), wxT("") );
    item0->Append( item1, wxT("Edit") );
    
    wxMenu* item2 = new wxMenu;
    item2->Append( IDC_CONVERT_WAT_ARROW_VB, wxT("Convert Water to ARROW VB"), wxT("") );
    item0->Append( item2, wxT("Water") );
    
    return item0;
}

wxMenuBar *edit_groups_menu()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( IDC_SET_SEL_FROM_GRP, wxT("Set Selection From Group"), wxT("") );
    item1->Append( IDC_ADD_SEL_TO_GRP, wxT("Add Selection to Group"), wxT("") );
    item1->Append( IDC_DEL_SEL_FROM_GRP, wxT("Delete Selection from Group"), wxT("") );
    item0->Append( item1, wxT("Selection") );
    
    wxMenu* item2 = new wxMenu;
    item2->Append( IDC_STD_GROUPS, wxT("Set Standard Chem Groups"), wxT("") );
    item2->Append( IDC_RENUMBER_GRP, wxT("Renumber Chemical Groups"), wxT("") );
    item2->Append( IDC_STD_PROTEIN_GROUPS, wxT("Set Standard Protein Groups"), wxT("") );
    item0->Append( item2, wxT("ChemGroups") );
    
    wxMenu* item3 = new wxMenu;
    item3->Append( IDC_CALC_DON_ACC_DIST, wxT("Edge-to-Edge Donor/Acceptor Distance"), wxT("") );
    item0->Append( item3, wxT("Redox Centers") );
    
    wxMenu* item4 = new wxMenu;
    item4->Append( IDC_COLOR_RIGID_CLUSTERS, wxT("Color Rigid Clusters"), wxT("") );
    item0->Append( item4, wxT("View") );
    
    wxMenu* item5 = new wxMenu;
    item5->Append( IDC_CREATE_EXT_CH_MOL, wxT("Create External Chrs Molecule"), wxT("") );
    item0->Append( item5, wxT("Axx Mols") );
    
    return item0;
}

wxMenuBar *res_db_menu()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( IDC_RESDB_UPDATE_LIST, wxT("Update Template List"), wxT("") );
    item1->Append( IDC_RESDB_LOAD, wxT("Load Residue DB"), wxT("") );
    item0->Append( item1, wxT("Template List") );
    
    return item0;
}

wxMenuBar *nucl_acid_menu()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( IDC_UPDATE_XYZ, wxT("Update XYZ"), wxT("") );
    item1->Append( IDC_LOCK_SEL_CRD, wxT("Lock Select Crd"), wxT("") );
    item1->Append( IDC_BASE_BASE_PARS, wxT("Base-Base Params"), wxT("") );
    item0->Append( item1, wxT("DNA") );
    
    wxMenu* item2 = new wxMenu;
    item2->Append( IDC_PDIST_TO_CNT, wxT("P dist to Super Helix Center"), wxT("") );
    item2->Append( IDC_LOC_BASE_STEP_PARS, wxT("Local Helical Params for Bases"), wxT("") );
    item2->Append( IDC_LOC_HLX_PARS_BP, wxT("Local Helical Params for Base Pairs"), wxT("") );
    item2->Append( IDC_CALC_AXIS, wxT("Find Helical Axis"), wxT("") );
    item2->Append( IDC_GLOB_HLX_PAR, wxT("GLobal Helical Params"), wxT("") );
    item2->Append( IDC_CALC_BB_CRD, wxT("Compute Backbone Internal Coord"), wxT("") );
    item0->Append( item2, wxT("Analysis") );
    
    return item0;
}

wxMenuBar *prot_redox_menu()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( IDC_RESPAR_STD_PK, wxT("Set Std pKa"), wxT("") );
    item1->Append( IDC_RESPAR_STD_PK_1, wxT("Set most active Std pKa"), wxT("") );
    item1->Append( IDC_RESPAR_STD_PK_EP, wxT("Set Std pKa and Redox Pot"), wxT("") );
    item1->Append( IDC_STD_PK_EP_1, wxT("Set Most Active Std pKa and Redox Pot"), wxT("") );
    item1->Append( IDC_PROT_RDX_CALC_PKA, wxT("Calc Res pKa for Selection"), wxT("") );
    item1->Append( IDC_SET_ALTST_INACTIVE, wxT("Set Alt States Inactive"), wxT("") );
    item1->Append( IDC_SET_ALTST_ACTIVE, wxT("Set Alt States Active"), wxT("") );
    item0->Append( item1, wxT("Protonation") );
    
    return item0;
}

wxMenuBar *mm_menu()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( IDC_SAVE_RESFF_FROM_MORT, wxT("Save RESFF file from MORT"), wxT("") );
    item0->Append( item1, wxT("Force Field") );
    
    wxMenu* item2 = new wxMenu;
    item2->Append( IDM_SAVE_ATOM_IND_RESTR_ARB, wxT("Save Atom Individual Restr ARBALEST FORM"), wxT("") );
    item0->Append( item2, wxT("ARBALEST UTILS") );
    
    return item0;
}

// Implement toolbar functions

void MainToolBarFunc( wxToolBar *parent )
{
    parent->SetMargins( 2, 2 );
    
    parent->AddTool( ID_FILE_NEW_WX, wxT(""), MainToolBarBitmaps( 3 ), wxNullBitmap, wxITEM_NORMAL, wxT("Create New Molecular Set") );
    parent->AddTool( ID_FILE_OPEN_WX, wxT(""), MainToolBarBitmaps( 0 ), wxNullBitmap, wxITEM_NORMAL, wxT("Load New Molecules from a file") );
    parent->AddTool( IDM_MOL_SAVE_WX, wxT(""), MainToolBarBitmaps( 4 ), wxNullBitmap, wxITEM_NORMAL, wxT("Save Molecular Set to a file") );
    parent->AddSeparator();
    parent->AddTool( IDM_PRINT_WX, wxT(""), MainToolBarBitmaps( 5 ), wxNullBitmap, wxITEM_NORMAL, wxT("Print View") );
    parent->AddTool( IDM_MANUAL_WX, wxT("Show Program Manual"), MainToolBarBitmaps( 6 ), wxNullBitmap, wxITEM_NORMAL, wxT("") );
    parent->AddSeparator();
    parent->AddTool( IDM_MOL_CONNECT_WX, wxT(""), MainToolBarBitmaps( 2 ), wxNullBitmap, wxITEM_NORMAL, wxT("Move only a specific molecule") );
    parent->AddTool( IDM_WORLD_CONNECT_WX, wxT(""), MainToolBarBitmaps( 1 ), wxNullBitmap, wxITEM_NORMAL, wxT("Move all molecules") );
    
    parent->Realize();
}

// Implement bitmap functions

wxBitmap MainToolBarBitmaps( size_t index )
{
    if ((index == 0) ||
        (index == IDB_SAVE_MOL))
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 5 1",
        "  c None",
        "a c #FFFFFF",
        "b c #FFFF00",
        "c c #040404",
        "e c #808000",
        /* pixels */
        "          ccc   ",
        "         c   c c",
        "              cc",
        "  ccc        ccc",
        " cabaccccccc    ",
        " cbababababc    ",
        " cababababac    ",
        " cbabacccccccccc",
        " cabaceeeeeeeeec",
        " cbaceeeeeeeeec ",
        " caceeeeeeeeec  ",
        " cceeeeeeeeec   ",
        " ccccccccccc    ",
        "                ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if ((index == 1) ||
        (index == IDB_ALL_CON))
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 2 1",
        "a c #040404",
        "b c #C0C0C0",
        /* pixels */
        "bbabbbbbbbbbbabb",
        "baaaaaaaaaaaaaab",
        "bbabbbbbbbbbbabb",
        "bbbbbbbbbbbbbbbb",
        "babbbbbabbbbbbab",
        "baabbbaaabbbbaab",
        "bbaabaabaabbaabb",
        "bbbaaabbbaaaabbb",
        "bbbbabbbbbaabbbb",
        "bbbbbbbbbbbbbbbb",
        "babbbbbabbbbbbab",
        "baabbbaaabbbbaab",
        "bbaabaabaabbaabb",
        "bbbaaabbbaaaabbb",
        "bbbbabbbbbaabbbb"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if ((index == 2) ||
        (index == IDB_ALL_CON))
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 3 1",
        "a c #040404",
        "b c #FF0000",
        "c c #C0C0C0",
        /* pixels */
        "ccaccccccccccacc",
        "caaaaaaaaaaaaaac",
        "ccaccccccccccacc",
        "cccccccccccccccc",
        "cacccccaccccccac",
        "caacccaaaccccaac",
        "ccaacaacaaccaacc",
        "cccaaacccaaaaccc",
        "ccccacccccaacccc",
        "cccccccccccccccc",
        "cbcccccbccccccbc",
        "cbbcccbbbccccbbc",
        "ccbbcbbcbbccbbcc",
        "cccbbbcccbbbbccc",
        "ccccbcccccbbcccc"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if ((index == 3) ||
        (index == IDB_NEW_MOL))
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 3 1",
        "a c #FFFFFF",
        "b c #040404",
        "c c #C0C0C0",
        /* pixels */
        "cccbbbbbbbbccccc",
        "cccbaaaaaabbcccc",
        "cccbaaaaaababccc",
        "cccbaaaaaabbbbcc",
        "cccbaaaaaaaaabcc",
        "cccbaaaaaaaaabcc",
        "cccbaaaaaaaaabcc",
        "cccbaaaaaaaaabcc",
        "cccbaaaaaaaaabcc",
        "cccbaaaaaaaaabcc",
        "cccbaaaaaaaaabcc",
        "cccbaaaaaaaaabcc",
        "cccbbbbbbbbbbbcc",
        "cccccccccccccccc",
        "cccccccccccccccc"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if ((index == 4) ||
        (index == IDB_SAVE_MOL))
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 3 1",
        "a c #040404",
        "b c #C0C0C0",
        "c c #808000",
        /* pixels */
        "baaaaaaaaaaaaaab",
        "bacabbbbbbbbabab",
        "bacabbbbbbbbaaab",
        "bacabbbbbbbbacab",
        "bacabbbbbbbbacab",
        "bacabbbbbbbbacab",
        "bacabbbbbbbbacab",
        "baccaaaaaaaaccab",
        "baccccccccccccab",
        "baccaaaaaaaaacab",
        "baccaaaaaabbacab",
        "baccaaaaaabbacab",
        "baccaaaaaabbacab",
        "bbaaaaaaaaaaaaab",
        "bbbbbbbbbbbbbbbb"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 5)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 5 1",
        "a c #FFFFFF",
        "b c #FFFF00",
        "c c #040404",
        "d c #C0C0C0",
        "e c #868686",
        /* pixels */
        "dddddcccccccccdd",
        "ddddcaaaaaaaacdd",
        "ddddcacccccacddd",
        "dddcaaaaaaaacddd",
        "dddcacccccaccccd",
        "ddcaaaaaaaacdcdc",
        "dccccccccccdcdcc",
        "cddddddddddcdcdc",
        "cccccccccccccddc",
        "cddddddeeeddcdcd",
        "cddddddbbbddcccd",
        "cccccccccccccdcd",
        "dcdddddddddcdcdd",
        "ddcccccccccccddd",
        "dddddddddddddddd"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 6)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 3 1",
        "  c None",
        "a c #FFFF00",
        "b c #040404",
        /* pixels */
        "     bbbbbb     ",
        "    baaaaabb    ",
        "   baabbbaabb   ",
        "   babb  babb   ",
        "   babb baabb   ",
        "    bb baabb    ",
        "       aabb     ",
        "      babb      ",
        "      babb      ",
        "      babb      ",
        "       bb       ",
        "      baabb     ",
        "      baabb     ",
        "       bbb      ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}


// End of generated file
