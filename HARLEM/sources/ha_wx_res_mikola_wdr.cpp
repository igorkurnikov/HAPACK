//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: ha_wx_res_mikola.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "ha_wx_res_mikola_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "ha_wx_res_mikola_wdr.h"


// Implement window functions

wxSizer *PyModDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxTextCtrl *item1 = new wxTextCtrl( parent, IDT_PYMOD, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_PROCESS_ENTER|wxVSCROLL );
    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *wxPlaneViewOfHaField3DDlgF( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_PV_TEXT, wxT("Level"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item4 = new wxSpinCtrl( parent, IDSC_PV_LEVEL, wxT("0"), wxDefaultPosition, wxSize(100,-1), 0, 0, 100, 0 );
    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item5 = new wxStaticText( parent, ID_PV_TEXT, wxT("Level 2"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item6 = new wxSpinCtrl( parent, IDSC_PV_LEVEL2, wxT("0"), wxDefaultPosition, wxSize(100,-1), 0, 0, 100, 0 );
    item2->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item8 = new wxButton( parent, IDB_PV_CP1D1, wxT("Copy 1D, 1st Var"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item9 = new wxButton( parent, IDB_PV_CP1D2, wxT("Copy 1D, 2nd Var"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item10 = new wxButton( parent, IDB_PV_CP2D, wxT("Copy 2D"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item11 = new wxBoxSizer( wxHORIZONTAL );

    item1->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSlider *item12 = new wxSlider( parent, IDS_PV_LEVEL, 0, 0, 100, wxDefaultPosition, wxSize(100,-1), wxSL_HORIZONTAL );
    item1->Add( item12, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item14 = new wxStaticText( parent, ID_PV_TEXT, wxT("Values"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, IDT_PV_MIN, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_PROCESS_ENTER );
    item13->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item16 = new wxTextCtrl( parent, IDT_PV_MAX, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_PROCESS_ENTER );
    item13->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item17 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item18 = new wxStaticText( parent, ID_PV_TEXT, wxT("Plane"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString strs19[] = 
    {
        wxT("XY"), 
        wxT("YZ"), 
        wxT("ZX")
    };
    wxChoice *item19 = new wxChoice( parent, IDC_PV_PLANE, wxDefaultPosition, wxSize(100,-1), 3, strs19, 0 );
    item17->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item21 = new wxCheckBox( parent, IDCB_PV_HIDEZERO, wxT("Hide Zero Values"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item22 = new wxCheckBox( parent, IDCB_PV_HIDE, wxT("Hide"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item20, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

wxMenuBar *PyModMenuBarFunc()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( IDM_PYMOD_CLEAR, wxT("Clear"), wxT("") );
    item1->Append( IDM_PYMOD_OPEN, wxT("Open and Run Script"), wxT("") );
    item1->Append( IDM_PYMOD_SAVE, wxT("Save History"), wxT("") );
    item0->Append( item1, wxT("File") );
    
    return item0;
}

// Implement toolbar functions

// Implement bitmap functions


// End of generated file
