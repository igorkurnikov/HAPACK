  Saved Variables and arrays
  
  nonbond_constr.fpp(19):  integer, save                          :: cit_num_nb_constr
  nonbond_constr.fpp(21):  type(nb_constr_rec), allocatable, save     :: cit_nb_constr(:)

  angles.fpp(19):  integer, save                         :: cit_ntheth, cit_ntheta
  angles.fpp(21):  type(angle_rec), allocatable, save    :: cit_angle(:)
  
  axis_optimize.fpp(23):  integer, save :: longest_axis
  axis_optimize.fpp(28):  integer, save :: axis_flipback_ords(3)
  
  bintraj.fpp(17):  integer, save         :: mdcrd_ncid
  bintraj.fpp(18):  integer, save         :: coord_var_id
  bintraj.fpp(19):  integer, save         :: cell_length_var_id
  bintraj.fpp(20):  integer, save         :: cell_angle_var_id
  bintraj.fpp(21):  integer, save         :: mdcrd_time_var_id
  bintraj.fpp(22):  integer, save         :: mdcrd_veloc_var_id
  bintraj.fpp(23):  integer, save         :: mdcrd_frame
  bintraj.fpp(27):  integer, save         :: mdvel_ncid
  bintraj.fpp(28):  integer, save         :: mdvel_time_var_id
  bintraj.fpp(29):  integer, save         :: mdvel_veloc_var_id
  bintraj.fpp(30):  integer, save         :: mdvel_frame
  bintraj.fpp(34):  integer, save         :: atom_wrt_cnt
  bonds.fpp(19):  integer, save          :: cit_nbonh, cit_nbona
  
  bonds.fpp(21):  type(bond_rec), allocatable, save     :: cit_h_bond(:)
  bonds.fpp(22):  type(bond_rec), allocatable, save     :: cit_a_bond(:)
  
  cit.fpp(25):  integer, save         :: cit_tbl_x_dim
  cit.fpp(26):  integer, save         :: cit_tbl_y_dim
  cit.fpp(27):  integer, save         :: cit_tbl_z_dim
  constraints.fpp(26):  save  :: / constraints_dat_int /
  constraints.fpp(33):  integer,              allocatable, save       :: atm_igroup(:)
  constraints.fpp(37):  integer,              allocatable, save       :: atm_jrc(:)
  constraints.fpp(38):  double precision,     allocatable, save       :: atm_weight(:)
  constraints.fpp(39):  double precision,     allocatable, save       :: atm_xc(:,:)
  dihedrals.fpp(19):  integer, save                         :: cit_nphih, cit_nphia
  dihedrals.fpp(21):  type(dihed_rec), allocatable, save    :: cit_dihed(:)
  dynamics.fpp(63):  double precision, save        :: reduce_buf_in(3)
  dynamics.fpp(64):  double precision, save        :: reduce_buf_out(3)
  dynamics.fpp(199):  double precision, save        :: reduce_buf_in(3)
  dynamics.fpp(200):  double precision, save        :: reduce_buf_out(3)
  dynamics_dat.fpp(28):  save  :: / dynamics_dat_dbl /
  dynamics_dat.fpp(49):  save  :: / dynamics_dat_int /
  dynamics_dat.fpp(81):  integer, save         :: my_mol_cnt = 0
  dynamics_dat.fpp(82):  integer, save         :: my_frag_mol_cnt = 0
  dynamics_dat.fpp(100):  double precision,     allocatable, save       :: atm_rel_crd(:,:)
  dynamics_dat.fpp(101):  double precision,     allocatable, save       :: atm_mass_inv(:)
  dynamics_dat.fpp(102):  integer,              allocatable, save       :: gbl_mol_atms(:)
  dynamics_dat.fpp(103):  double precision,     allocatable, save       :: gbl_mol_mass_inv(:)
  dynamics_dat.fpp(104):  double precision,     allocatable, save       :: gbl_mol_com(:,:)
  dynamics_dat.fpp(106):  integer,              allocatable, save       :: gbl_my_mol_lst(:)
  dynamics_dat.fpp(108):  type(frag_mol_rec),   allocatable, save       :: gbl_frag_mols(:)
  dynamics_dat.fpp(109):  type(mol_frag_rec),   allocatable, save       :: gbl_mol_frags(:)
  dynamics_dat.fpp(110):  integer,              allocatable, save       :: gbl_my_frag_mol_lst(:)
  ene_frc_splines.fpp(29):  save  :: / ene_frc_splines_int /
  ene_frc_splines.fpp(37):  save  :: / ene_frc_splines_dbl /
  ene_frc_splines.fpp(43):  double precision, save                :: lowest_efs_delr2
  ene_frc_splines.fpp(45):  double precision, allocatable, save   :: efs_tbl(:)
  file_io_dat.fpp(17):  character(max_fn_len), save   :: mdin_name
  file_io_dat.fpp(18):  character(max_fn_len), save   :: mdout_name
  file_io_dat.fpp(19):  character(max_fn_len), save   :: mdinfo_name
  file_io_dat.fpp(20):  character(max_fn_len), save   :: prmtop_name
  file_io_dat.fpp(21):  character(max_fn_len), save   :: inpcrd_name
  file_io_dat.fpp(22):  character(max_fn_len), save   :: refc_name
  file_io_dat.fpp(23):  character(max_fn_len), save   :: mdcrd_name
  file_io_dat.fpp(24):  character(max_fn_len), save   :: mdvel_name
  file_io_dat.fpp(25):  character(max_fn_len), save   :: mden_name
  file_io_dat.fpp(26):  character(max_fn_len), save   :: restrt_name
  file_io_dat.fpp(27):  character(max_fn_len), save   :: logfile_name
  file_io_dat.fpp(28):  character(max_fn_len), save   :: infile_suffix
  file_io_dat.fpp(29):  character(max_fn_len), save   :: outfile_suffix
  file_io_dat.fpp(30):  character, save       :: owrite
  file_io_dat.fpp(32):  character(300), save   :: error_msg
  gb_ene.fpp(19):  double precision, allocatable, save           :: gbl_rbmax(:)
  gb_ene.fpp(20):  double precision, allocatable, save           :: gbl_rbmin(:)
  gb_ene.fpp(21):  double precision, allocatable, save           :: gbl_rbave(:)
  gb_ene.fpp(22):  double precision, allocatable, save           :: gbl_rbfluct(:)
  gb_ene.fpp(26):  double precision, allocatable, save, private  :: reff(:)
  gb_ene.fpp(27):  double precision, allocatable, save, private  :: psi(:)
  gb_ene.fpp(28):  double precision, allocatable, save, private  :: rjx(:)
  gb_ene.fpp(29):  double precision, allocatable, save, private  :: r2x(:)
  gb_ene.fpp(30):  double precision, allocatable, save, private  :: sumdeijda(:)
  gb_ene.fpp(31):  double precision, allocatable, save, private  :: vectmp1(:)
  gb_ene.fpp(32):  double precision, allocatable, save, private  :: vectmp2(:)
  gb_ene.fpp(33):  double precision, allocatable, save, private  :: vectmp3(:)
  gb_ene.fpp(34):  double precision, allocatable, save, private  :: vectmp4(:)
  gb_ene.fpp(35):  double precision, allocatable, save, private  :: vectmp5(:)
  gb_ene.fpp(37):  logical,          allocatable, save, private  :: skipv(:)
  gb_ene.fpp(39):  integer,          allocatable, save, private  :: jj(:)
  gb_ene.fpp(40):  integer,          allocatable, save, private  :: neck_idx(:)
  gb_ene.fpp(49):  ! maximum are already divided by 4*Pi to save time. Values are given
  gb_force.fpp(322):  type(gb_pot_ene_rec), save    :: dat_in, dat_out
  img.fpp(24):  integer, save, allocatable                    :: gbl_atm_img_map(:)
  img.fpp(25):  integer, save, allocatable                    :: gbl_img_atm_map(:)
  img.fpp(26):  type(img_rec), save, allocatable              :: gbl_img(:)
  img.fpp(27):  integer, save, allocatable                    :: gbl_img_iac(:)
  img.fpp(28):  integer, save, allocatable                    :: gbl_excl_img_flags(:)
  img.fpp(29):  double precision, save                        :: gbl_tranvec(1:3,0:17)
  img.fpp(37):  integer, save         :: my_img_lo, my_img_hi
  img.fpp(38):  integer, save         :: used_img_lo, used_img_hi
  img.fpp(41):  logical, save         :: used_img_range_wraps ! from lo through natom to hi
  inpcrd_dat.fpp(18):  double precision, allocatable, save   :: atm_crd(:,:)
  inpcrd_dat.fpp(19):  double precision, allocatable, save   :: atm_frc(:,:)
  inpcrd_dat.fpp(20):  double precision, allocatable, save   :: atm_vel(:,:)
  inpcrd_dat.fpp(21):  double precision, allocatable, save   :: atm_last_vel(:,:)
  loadbal.fpp(19):  integer, private, save        :: start_sec, start_usec
  loadbal.fpp(20):  integer, save                 :: elapsed_100usec_dirfrc = 0
  loadbal.fpp(21):  integer, save                 :: elapsed_100usec_recipfrc = 0
  loadbal.fpp(22):  integer, save                 :: elapsed_100usec_other = 0  ! bnd,ang,dihed,
  loadbal.fpp(24):  integer, save                 :: elapsed_100usec_listbld = 0 
  loadbal.fpp(28):  integer, private, save        :: img_redist_ctr = -1  
  loadbal.fpp(29):  integer, private, save        :: img_redist_trigger = 1 ! 1,2,4,8,16,32,64
  loadbal.fpp(34):  logical, save                 :: fft_slab_redist_enabled = .false.
  loadbal.fpp(35):  logical, save                 :: fft_slab_redist_needed = .false.
  loadbal.fpp(36):  integer, private, save        :: fft_slab_redist_ctr = -1
  loadbal.fpp(37):  integer, private, save        :: retry_fft_slab_redist = 0
  loadbal.fpp(38):  integer, private, save        :: retry_fft_slab_redist_step_ctr = 0
  loadbal.fpp(39):  integer, private, save        :: retry_fft_slab_redist_interval = 2000
  loadbal.fpp(42):  logical, save                 :: atm_redist_needed = .false.
  loadbal.fpp(43):  logical, save                 :: force_atm_redist = .false.
  loadbal.fpp(45):  integer, save, private        :: last_send_atm_cnts_total = 0
  loadbal.fpp(46):  logical, save, private        :: recalc_last_send_atm_cnts_total = .false.
  loadbal.fpp(48):  integer, save                 :: loadbal_step_ctr = 0
  loadbal.fpp(49):  integer, save                 :: last_loadbal_step_ctr = 0
  loadbal.fpp(51):  integer, allocatable, save    :: gbl_loadbal_node_dat(:,:)
  loadbal.fpp(53):  integer, save                 :: recip_numtasks = 0
  loadbal.fpp(216):                                                                                  integer, save         :: last_new_list_cnt = 0
  loadbal.fpp(217):  integer, save         :: last_new_list_limit = 16
  loadbal.fpp(261):  double precision, save        :: last_avg_recip_nodes_time = 0.d0
  loadbal.fpp(274):  integer, save                 :: my_node_dat(5)
  loadbal.fpp(275):  integer, save                 :: fft_slab_dat(6)
  loadbal.fpp(489):  logical, save         :: initial_img_div_logged = .false.
  loadbal.fpp(496):  integer, save :: my_node_dat(5)
  loadbal.fpp(591):        ! save a new value for last_send_atm_cnts_total.  We weight the value
  loadbal.fpp(598):        ! If the new value is lower than the old value, we just save it.
  loadbal.fpp(608):          last_send_atm_cnts_total = send_atm_cnts_total ! First save.
  loadbal.fpp(1073):  integer, save         :: distrib_cnt = 0
  mdin_ctrl_dat.fpp(42):  save  :: / mdin_ctrl_int /
  mdin_ctrl_dat.fpp(76):  save  :: /mdin_ctrl_dbl /
  mdin_ctrl_dat.fpp(84):  integer, save :: mdinfo_flush_interval        ! controls mdinfo flushing.
  mdin_ctrl_dat.fpp(85):  integer, save :: mdout_flush_interval         ! controls mdout flushing.
  mdin_ctrl_dat.fpp(89):  integer, save :: dbg_atom_redistribution      ! force more frequent atom
  mdin_ctrl_dat.fpp(93):  integer, save :: loadbal_verbose              ! loadbalancing verbosity.
  mdin_ctrl_dat.fpp(101):  logical, save :: using_gb_potential
  mdin_ctrl_dat.fpp(102):  logical, save :: using_pme_potential
  mdin_ctrl_dat.fpp(106):  double precision, save, private     :: original_t
  mdin_ctrl_dat.fpp(111):  double precision, save, private       :: cut  ! local use only, for clarity.
  mdin_ctrl_dat.fpp(115):  character(4), save, private           :: hwtnm1, hwtnm2, owtnm, watnam
  mdin_ewald_dat.fpp(33):  save  :: /mdin_ewald_int /
  mdin_ewald_dat.fpp(41):  save  :: /mdin_ewald_dbl /
  nb_pairlist.fpp(17):  double precision, save, allocatable   :: gbl_atm_saved_crd(:,:)
  nb_pairlist.fpp(18):  double precision, save, allocatable   :: gbl_saved_imgcrd(:,:)
  nb_pairlist.fpp(19):  integer, allocatable, save            :: gbl_ipairs(:)
  nb_pairlist.fpp(20):  double precision, save                :: gbl_saved_box(3)
  nb_pairlist.fpp(21):  integer, save                         :: ipairs_size
  nextprmtop_section.fpp(131):  character*80, save    :: nxtflg(mxnxfl)
  nextprmtop_section.fpp(132):  character*8, save     :: prdat, prtim
  nextprmtop_section.fpp(134):  integer, save         :: inxtfl(2, mxnxfl), iprvrr, numflg, iblock
  nextprmtop_section.fpp(135):  logical, save         :: first = .true.
  nextprmtop_section.fpp(136):  real, save            :: rpver
  nmr_calls.fpp(49):  save  :: / nmr_dat_int /
  nmr_calls.fpp(57):  save  :: / nmr_dat_dbl /
  nmr_calls.fpp(62):  double precision, private, allocatable, save  :: nmr_work(:)
  nmr_calls.fpp(63):  integer,          private, allocatable, save  :: nmr_iwork(:)
  nmr_calls.fpp(71):  character(80), save   :: redir(iredir_cnt)
  nmr_calls.fpp(76):  double precision, save        :: eadev = 0.d0
  nmr_calls.fpp(77):  double precision, save        :: ebdev = 0.d0
  nmr_calls.fpp(90):  double precision, save, private       :: dvdis(2, 4) = 0.d0
  nmr_calls.fpp(91):  double precision, save, private       :: dvang(2, 4) = 0.d0
  nmr_calls.fpp(92):  double precision, save, private       :: dvtor(2, 4) = 0.d0
  nmr_calls.fpp(93):  double precision, save, private       :: eenmr(2, 3) = 0.d0
  nmr_calls.fpp(469):!         save the values of these quantities on the last call to nmrnrg.
  nmr_calls.fpp(2381):  save weight, ichold
  nmr_calls.fpp(2969):  save itimes, small
  nmr_calls.fpp(3461):  save small
  parallel_dat.fpp(23):  logical, save         :: master      ! Is this task the mpi master task?
  parallel_dat.fpp(27):  integer, save         :: my_atm_cnt
  parallel_dat.fpp(39):  integer, save         :: mytaskid, numtasks, world_group, err_code_mpi   ! VGB
  parallel_dat.fpp(40):  integer, save         :: notdone                                         ! VGB
  parallel_dat.fpp(41):  logical, save         :: i_do_recip
  parallel_dat.fpp(43):  integer, save         :: my_send_atm_cnts_total = 0
  parallel_dat.fpp(44):  integer, save         :: my_send_atm_cnts_sums = 0
  parallel_dat.fpp(54):  integer, allocatable, save    :: gbl_taskmap(:)
  parallel_dat.fpp(55):  integer, allocatable, save    :: gbl_inv_taskmap(:)
  parallel_dat.fpp(57):  integer, allocatable, save    :: gbl_img_div_tbl(:)
  parallel_dat.fpp(65):  integer, save         :: extra_used_atm_cnt
  parallel_dat.fpp(67):  integer, allocatable, save    :: gbl_atm_offsets(:)                       !VGB
  parallel_dat.fpp(68):  integer, allocatable, save    :: gbl_vec_offsets(:)                       !VGB
  parallel_dat.fpp(69):  integer, allocatable, save    :: gbl_vec_rcvcnts(:)                       !VGB
  parallel_dat.fpp(71):  integer, allocatable, save    :: gbl_atm_owner_map(:)                     !VGB
  parallel_dat.fpp(73):  integer, allocatable, save    :: gbl_my_atm_lst(:)                        !VGB
  parallel_dat.fpp(75):  integer, allocatable, save    :: gbl_send_atm_lst(:)
  parallel_dat.fpp(76):  integer, allocatable, save    :: gbl_send_atm_cnts(:)
  parallel_dat.fpp(77):  integer, allocatable, save    :: gbl_recv_atm_lsts(:,:)
  parallel_dat.fpp(78):  integer, allocatable, save    :: gbl_recv_atm_cnts(:)
  parallel_dat.fpp(79):  integer, allocatable, save    :: gbl_extra_used_atms(:)
  parallel_dat.fpp(81):  integer, save :: siz_dbl_mpi_bufs = 0                                     !VGB
  parallel_dat.fpp(83):  double precision, allocatable, save   :: dbl_mpi_send_buf(:)              !VGB
  parallel_dat.fpp(84):  double precision, allocatable, save   :: dbl_mpi_recv_buf(:)              !VGB
  pbc.fpp(25):  save  :: / pbc_int /
  pbc.fpp(37):  save  :: / pbc_dbl /
  pbc.fpp(47):  double precision, save        :: last_recip(3, 3)
  pme_direct.fpp(24):  save  :: / pme_direct_int /
  pme_direct.fpp(26):  double precision, allocatable, save   :: gbl_eed_cub(:)
  pme_fft.fpp(20):  double precision, allocatable, save, private  :: rc_coefs(:,:)
  pme_fft.fpp(24):  type(fft1d_rec), pointer, save        :: fft_x_hdl => null()
  pme_fft.fpp(25):  type(fft1d_rec), pointer, save        :: fft_y_hdl => null()
  pme_fft.fpp(26):  type(fft1d_rec), pointer, save        :: fft_z_hdl => null()
  pme_fft.fpp(34):  integer, save         :: fft_x_dim
  pme_fft.fpp(35):  integer, save         :: fft_y_dim
  pme_fft.fpp(36):  integer, save         :: fft_z_dim
  pme_fft.fpp(38):  integer, save         :: max_xy_slab_cnt
  pme_fft.fpp(39):  integer, save         :: my_xy_slab_cnt
  pme_fft.fpp(40):  integer, save         :: my_xy_slab_start
  pme_fft.fpp(41):  integer, save         :: max_zx_slab_cnt
  pme_fft.fpp(42):  integer, save         :: my_zx_slab_cnt
  pme_fft.fpp(43):  integer, save         :: my_zx_slab_start
  pme_fft.fpp(44):  integer, save         :: xy_slab_dbl_cnt
  pme_fft.fpp(45):  integer, save         :: zx_slab_dbl_cnt
  pme_fft.fpp(49):  integer, save                 :: siz_fft_mpi_buf
  pme_fft.fpp(50):  integer, allocatable, save    :: xy_slab_cnt(:)
  pme_fft.fpp(51):  integer, allocatable, save    :: xy_slab_start(:)
  pme_fft.fpp(52):  integer, allocatable, save    :: zx_slab_cnt(:)
  pme_fft.fpp(53):  integer, allocatable, save    :: zx_slab_start(:)
  pme_fft.fpp(54):  integer, save                 :: fft_taskmap_entries
  pme_fft.fpp(55):  integer, allocatable, save    :: fft_taskmap(:)
  pme_fft.fpp(292):  integer, save         :: distrib_cnt = 0
  pme_force.fpp(68):  integer, allocatable, save            :: gbl_excl_img_pairlst(:)
  pme_force.fpp(69):  integer, allocatable, save            :: gbl_nvdwcls(:)
  pme_force.fpp(70):  type(maskdata_rec), allocatable, save :: atm_nb_maskdata(:)
  pme_force.fpp(71):  integer, allocatable, save            :: atm_nb_mask(:)
  pme_force.fpp(75):  integer, save         :: irespa = 0
  pme_force.fpp(79):  double precision, save, private       :: frcx, frcy, frcz
  pme_force.fpp(80):  double precision, save, private       :: molvir_netfrc_corr(3, 3)
  pme_force.fpp(928):  type(pme_dat), save           :: dat_in, dat_out
  pme_force.fpp(988):  logical, save                 :: setup_not_done = .true.
  pme_force.fpp(989):  double precision, save        :: factor
  pme_force.fpp(990):  double precision, save        :: sqrt_pi
  pme_force.fpp(991):  double precision, save        :: sumq
  pme_force.fpp(992):  double precision, save        :: sumq2
  pme_force.fpp(1053):  logical, save                 :: setup_not_done = .true.
  pme_force.fpp(1054):  double precision, save        :: ene_factor            ! Result of precalc.
  pme_recip.fpp(17):  double precision, allocatable, save, private  :: m1_exp_tbl(:)
  pme_recip.fpp(18):  double precision, allocatable, save, private  :: m2_exp_tbl(:)
  pme_recip.fpp(19):  double precision, allocatable, save, private  :: m3_exp_tbl(:)
  pme_recip.fpp(21):  double precision, allocatable, save, private  :: gbl_prefac1(:)
  pme_recip.fpp(22):  double precision, allocatable, save, private  :: gbl_prefac2(:)
  pme_recip.fpp(23):  double precision, allocatable, save, private  :: gbl_prefac3(:)
  pme_recip.fpp(25):  integer, save, private                        :: max_recip_imgs
  pme_recip.fpp(26):  integer, save, private                        :: recip_img_lo, recip_img_hi
  pme_recip.fpp(27):  logical, save, private                        :: recip_img_range_wraps
  pmemd.fpp(57):  double precision, save        :: run_start_cputime
  pmemd.fpp(58):  integer, save                 :: run_start_walltime
  pmemd.fpp(59):  integer, save                 :: run_setup_end_walltime
  pmemd.fpp(60):  integer, save                 :: run_end_walltime
  prmtop_dat.fpp(45):  save  :: / prmtop_int /
  prmtop_dat.fpp(68):  double precision,     allocatable, save       :: atm_charge(:)
  prmtop_dat.fpp(69):  double precision,     allocatable, save       :: atm_mass(:)
  prmtop_dat.fpp(70):  integer,                 allocatable, save       :: atm_iac(:)
  prmtop_dat.fpp(71):  integer,                 allocatable, save       :: typ_ico(:)
  prmtop_dat.fpp(72):  double precision,     allocatable, save       :: gbl_cn1(:)
  prmtop_dat.fpp(73):  double precision,     allocatable, save       :: gbl_cn2(:)
  prmtop_dat.fpp(74):  double precision,     allocatable, save       :: gbl_rk(:)
  prmtop_dat.fpp(75):  double precision,     allocatable, save       :: gbl_req(:)
  prmtop_dat.fpp(76):  double precision,     allocatable, save       :: gbl_tk(:)
  prmtop_dat.fpp(77):  double precision,     allocatable, save       :: gbl_teq(:)
  prmtop_dat.fpp(78):  double precision,     allocatable, save       :: gbl_asol(:)
  prmtop_dat.fpp(79):  double precision,     allocatable, save       :: gbl_bsol(:)
  prmtop_dat.fpp(80):  double precision,     allocatable, save       :: gbl_pk(:)
  prmtop_dat.fpp(81):  double precision,     allocatable, save       :: gbl_pn(:)
  prmtop_dat.fpp(82):  double precision,     allocatable, save       :: gbl_phase(:)
  prmtop_dat.fpp(86):  double precision,     allocatable, save       :: gbl_gamc(:)
  prmtop_dat.fpp(87):  double precision,     allocatable, save       :: gbl_gams(:)
  prmtop_dat.fpp(88):  double precision,     allocatable, save       :: gbl_fmn(:) 
  prmtop_dat.fpp(89):  integer,                 allocatable, save       :: gbl_ipn(:)
  prmtop_dat.fpp(91):  character(4),         allocatable, save       :: atm_igraph(:)
  prmtop_dat.fpp(92):  integer,                 allocatable, save       :: gbl_res_atms(:)
  prmtop_dat.fpp(93):  character(4),         allocatable, save       :: gbl_labres(:)
  prmtop_dat.fpp(94):  integer,                 allocatable, save       :: atm_nsp(:)
  prmtop_dat.fpp(98):  double precision,     allocatable, save       :: atm_gb_fs(:)
  prmtop_dat.fpp(99):  double precision,     allocatable, save       :: atm_gb_radii(:)
  prmtop_dat.fpp(107):  type(bond_rec),       allocatable, save       :: gbl_bond(:)
  prmtop_dat.fpp(108):  type(angle_rec),      allocatable, save       :: gbl_angle(:)
  prmtop_dat.fpp(109):  type(dihed_rec),      allocatable, save       :: gbl_dihed(:)
  prmtop_dat.fpp(110):  type(nb_constr_rec),  allocatable, save       :: gbl_nb_constr(:)
  prmtop_dat.fpp(120):  integer,                    allocatable, save       :: atm_numex(:)
  prmtop_dat.fpp(121):  integer,                    allocatable, save       :: gbl_natex(:)
  prmtop_dat.fpp(122):  character(4),            allocatable, save       :: atm_isymbl(:)
  prmtop_dat.fpp(123):  character(4),            allocatable, save       :: atm_itree(:)
  prmtop_dat.fpp(127):  character(80), save   :: prmtop_ititl
  
  
  prmtop_dat.fpp(780):! Pre-calculate and save some parameters for vector ephi:
  random.fpp(19):  double precision, private, save       :: u(97)
  random.fpp(20):  double precision, private, save       :: c
  random.fpp(21):  double precision, private, save       :: cd
  random.fpp(22):  double precision, private, save       :: cm
  random.fpp(26):  integer, private, save                :: i97
  random.fpp(27):  integer, private, save                :: j97
  random.fpp(31):  logical, private, save                :: set = .false.
  runfiles.fpp(126):  integer, save         :: imax = 0
  runfiles.fpp(276):! Consider whether to save 2ndary restrt:
  runfiles.fpp(341):  logical, save         :: first = .true.
  runfiles.fpp(342):  character(16), save   :: labs(41)
  runfiles.fpp(582):  logical, save         :: first_6call = .true.
  runfiles.fpp(583):  integer, save         :: next_6flush_sec
  runfiles.fpp(584):  logical, save         :: first_7call = .true.
  runfiles.fpp(585):  integer, save         :: next_7flush_sec
  runmd.fpp(92):  double precision, save        :: reduce_buf_in(7)
  runmd.fpp(93):  double precision, save        :: reduce_buf_out(7)
  runmin.fpp(926):  logical, save         :: first_6call = .true.
  runmin.fpp(927):  integer, save         :: next_6flush_sec
  runmin.fpp(928):  logical, save         :: first_7call = .true.
  runmin.fpp(929):  integer, save         :: next_7flush_sec
  
  
  shake.fpp(26):  integer, allocatable, save, private   :: fastwat_res_lst(:)
  shake.fpp(27):  integer, allocatable, save, private   :: nonfastwat_bond_lst(:)
  shake.fpp(30):  integer, save, private        :: fastwat_res_cnt
  shake.fpp(31):  integer, save, private        :: nonfastwat_bond_cnt
  shake.fpp(33):  integer, allocatable, save, private   :: my_fastwat_res_lst(:)
  shake.fpp(34):  integer, save, private        :: my_fastwat_res_cnt
  shake.fpp(36):  type(shake_bond_rec), allocatable, save, private :: my_nonfastwat_bond_dat(:)
  shake.fpp(37):  integer, save, private                           :: my_nonfastwat_bond_cnt
  shake.fpp(39):  integer, save, private                           :: atm_cnt, res_cnt
  shake.fpp(41):  integer, save, private                           :: iorwat
  shake.fpp(43):  double precision, save, private                  :: rbtarg(8)
  shake.fpp(44):  double precision, save, private                  :: box_half(3)
  shake.fpp(1320):  double precision, save :: zero = 0.0d0
  
  timers.fpp(19):  double precision, save        :: run_setup_end_cputime
  timers.fpp(20):  double precision, save        :: run_end_cputime
  timers.fpp(85):  double precision, save        :: time_stats(max_timer) = 0.d0
  timers.fpp(87):  double precision, private, save     :: generic_time1, generic_time2
  timers.fpp(88):  double precision, private, save     :: pme_time1, pme_time2
  timers.fpp(89):  double precision, private, save     :: gb_time1, gb_time2
  timers.fpp(99):  logical, save                 :: test_timers_enabled = .false.
  timers.fpp(101):  integer, save                 :: call_cnt(time_test_max_cnt)
  timers.fpp(102):  double precision, save        :: io_bytes(time_test_max_cnt)
  timers.fpp(103):  double precision, save        :: start_cpu(time_test_max_cnt)
  timers.fpp(104):  double precision, save        :: elapsed_cpu(time_test_max_cnt)
  timers.fpp(105):  integer, save                 :: start_wall_sec(time_test_max_cnt)
  timers.fpp(106):  integer, save                 :: elapsed_wall_sec(time_test_max_cnt)
  timers.fpp(107):  integer, save                 :: start_wall_usec(time_test_max_cnt)
  timers.fpp(108):  integer, save                 :: elapsed_wall_usec(time_test_max_cnt)
  timers.fpp(109):  character(len=50), save       :: tt_id_str(time_test_max_cnt)
  timers.fpp(604):  double precision, save        :: time_stats_mpi_buf(max_timer)