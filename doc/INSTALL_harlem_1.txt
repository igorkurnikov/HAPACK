LINUX:

LINUX distribution name and ID:  

UBUNTU(12.04) packages:

subversion
zlib1g-dev  
python-dev
mpich2
libgmp-dev

UBUNTU(18.04) packages:
sudo apt-get install libboost-all-dev
libgmp-dev
python3-dev
zlib1g-dev 
libmpich-dev   - may be this is better
libopenmpi2    - problems with fortran
subversion
libplplotwxwidgets1
libplplot-dev
swig 
libboost-dev
libboost-all-dev   compiled libraries installed in  /usr/lib/x86_64-linux-gnu

gfortran

link / to /export ( required for some 
links in /home/igor/local/bin ):!

GAUSSIAN util.a: 
unpack g98.tar in ../PROG_SRC

mortlib.a :
get AMBER11_IGOR:
got to gleap:
cmake CMakeLists.txt -DPYTHONINC=/share/apps/anaconda3/include/python3.7m -DPYTHONLIB=/share/apps/anaconda3/lib -DBOOSTPINC=/usr/include -DBOOSTPLIB=/usr/lib/x86_64-linux-gnu
make - it will make mortlib.a   although python bidings will not be finished

###MPI
AC_SUBST(MPI_INCLUDE,`mpicxx -showme:compile`)
AC_SUBST(MPI_LIBS,`mpicxx -showme:link`)

HAPACK compilation commands:

LINUX:
libtoolize                 --- create ltmain.sh  link
automake --add-missing     --create compile,missing and depcomp links
autoreconf    

failed to generate dependencies for the library
able to run compilation of the shared library with:
configure --disable-dependency-tracking

MKL install:

gzip -dc l_mkl_2019.5.281.tgz | tar -xvf -
cd l_mkl_2019.5.281
./install 
choose /share/apps/intel   for installation dir

// MPI:
// Problems with OPENMPI on linux:
// The easiest way to do this is to configure your Open MPI installation with --disable-dlopen.
//Open MPI uses a bunch of plugins for its functionality. When you dlopen libmpi in a private namespace (like Python does), and then libmpi tries to dlopen its plugins, the plugins can't find the symbols that they need in the main libmpi library (because they're in a private namespace).
// The workaround is to build Open MPI with all of its plugins slurped up into the libmpi library itself (i.e., so that Open MPI doesn't have to dlopen its plugins).
Fixed with explicit dlopen( openmpi.so ) call


LINUX NOGUI (IGOR CMU):

../HAPACK/configure --prefix /home/igor/HARLEM --with-wx-config=/home/igor/local/bin/wx-config --with-mpich=/usr/lib/mpich2 --with-mkl64=/opt/intel/mkl

LINUX NOGUI (INTERX cluster):
../HAPACK/configure --prefix /share/apps/HARLEM --with-wx-config=/share/apps/local/bin/wx-config --with-mpich=/opt/openmpi/ --with-mkl64=/share/apps/MOLPROLIBS/mkl

wxWidgets libraries on INTERX cluster:

/home/kurnikov/MYPROG/wxWidgets/wx-config

/share/apps/local/bin/wx-config

MKL libraries on INTERX cluster:

/share/apps/MOLPROLIBS/mkl/lib/intel64

MPI include flags (INTERX cluster):
mpicxx --showme:compile   :   -I/opt/openmpi/include -pthread
MPI link flags (INTERX cluster):
mpicxx --showme:link  :  -pthread -L/opt/openmpi/lib -lmpi_cxx -lmpi -libverbs -ldat -lrt -lnsl -lutil -lm -ldl -lm -Wl,--export-dynamic -lrt -lnsl -lutil -lm -ldl

taken from MMFitter install: 
c-make-run.sh:MPI_INCLUDE=$(mpicxx --showme:compile)
c-make-run.sh:MPI_LINK_FLAGS=$(mpicxx --showme:link)
-------------------------------------------------------------------------------
swig build configure params:
configure --prefix ${HOME}/local --without-prse 
----------------------------------------------------------------------------------
wxWidgets 2.8.10 flags:

make install --ignore  ( pass some errors during install)

with intel c++ 13 and python 2.7 needed to 
#include <cstddef>  to pnpmod_wrap.cpp,  hamolset_wrap.cpp and 
to resolve ptrdiff_t type

plugged 
 
%begin %{
#include <mpi.h>  
#include <cstddef>  
%}

into hamolset.i file and halib.i file   I hope it fixed the issue
--------------------------------------------------------------------------------------------
wxWidgets config on linux - now part of wxPython setup 
had to comment a couple of asserts in sizer.cpp 

also could do ( but didn't figure out how to do it iin python build.py build_wx )
./configure --disable-debug_flag

NOGUI:

mkdir wxWidgets/build_nogui:

Igor CMU Linux:
../configure --disable-gui --disable-shared --prefix=/export/home/igor/local    - 

InterX cluster:
export CC=/opt/centos/devtoolset-1.1/root/usr/bin/gcc
export CXX=/opt/centos/devtoolset-1.1/root/usr/bin/g++
../configure --disable-gui --disable-shared --prefix=/export/apps/local           - 
make

------------------------------------------------------------------------------------------
INTEL complilers and MKL on LINUX:

File to use: 
parallel_studio_xe_2013_update2_linux.tgz

Intel® Parallel Studio XE for Linux* 
Your product serial number is: N433-2DHW3DJL
Get new product updates and releases through: March 29, 2014

--------------------------------------------------------------------------------------------
mortlib in

~/MYPROG/AMBER11_IGOR/AmberTools/src/gleap/mortsrc
to compile go to 
~/MYPROG/AMBER11_IGOR/AmberTools/src/gleap 
cmake CMakeLists.txt
make
---------------------------------------------------------------------------------------------

MKL library needed to be present:

mkl_sequential.dll
mkl_core.dll
mkl_avx.dll    - (mkl_core.dll and mkl_sequential.dll depends on it but never complain....) 

may be for additional functions other MKL libraries are needed
In the currently used MKL version they are in :
c:\Program Files (x86)\Intel\Composer XE 2013\redist\ia32\mkl  
