LINUX:

LINUX distribution name and ID:  

UBUNTU(18.04) packages:

sudo apt-get install libboost-all-dev
libgmp-dev
python3-dev
zlib1g-dev 
libmpich-dev   - may be this is better  - not needed ??
libopenmpi2    - problems with fortran
libopenmpi-dev
openmpi-bin
openmpi-common
subversion
libplplotwxwidgets1
libplplot-dev
swig 
libboost-dev
libboost-all-dev   compiled libraries installed in  /usr/lib/x86_64-linux-gnu

gfortran

link / to /export ( required for some 
links in /home/igor/local/bin ):!

GAUSSIAN util.a: 
unpack g98.tar in ../PROG_SRC

cmake CMakeLists.txt -DPYTHONINC=/share/apps/anaconda3/include/python3.7m -DPYTHONLIB=/share/apps/anaconda3/lib -DBOOSTPINC=/usr/include -DBOOSTPLIB=/usr/lib/x86_64-linux-gnu
make - it will make mortlib.a   although python bidings will not be finished

###MPI
AC_SUBST(MPI_INCLUDE,`mpicxx -showme:compile`)
AC_SUBST(MPI_LIBS,`mpicxx -showme:link`)

HAPACK compilation commands:

LINUX:
libtoolize                 --- create ltmain.sh  link
automake --add-missing     --create compile,missing and depcomp links
autoreconf    

failed to generate dependencies for the library
able to run compilation of the shared library with:
configure --disable-dependency-tracking

MKL install:

gzip -dc l_mkl_2019.5.281.tgz | tar -xvf -
cd l_mkl_2019.5.281
./install 
choose /share/apps/intel   for installation dir

// MPI:
// Problems with OPENMPI on linux:
// The easiest way to do this is to configure your Open MPI installation with --disable-dlopen.
//Open MPI uses a bunch of plugins for its functionality. When you dlopen libmpi in a private namespace (like Python does), and then libmpi tries to dlopen its plugins, the plugins can't find the symbols that they need in the main libmpi library (because they're in a private namespace).
// The workaround is to build Open MPI with all of its plugins slurped up into the libmpi library itself (i.e., so that Open MPI doesn't have to dlopen its plugins).
Fixed with explicit dlopen( openmpi.so ) call


LINUX NOGUI (IGOR CMU):

../HAPACK/configure --prefix /home/igor/HARLEM --with-wx-config=/home/igor/local/bin/wx-config --with-mpich=/usr/lib/mpich2 --with-mkl64=/opt/intel/mkl

LINUX NOGUI (INTERX cluster):
../HAPACK/configure --prefix /share/apps/HARLEM --with-wx-config=/share/apps/local/bin/wx-config --with-mpich=/opt/openmpi/ --with-mkl64=/share/apps/MOLPROLIBS/mkl

wxWidgets libraries on INTERX cluster:

/home/kurnikov/MYPROG/wxWidgets/wx-config

/share/apps/local/bin/wx-config

MKL libraries on INTERX cluster:

/share/apps/MOLPROLIBS/mkl/lib/intel64

MPI include flags (INTERX cluster):
mpicxx --showme:compile   :   -I/opt/openmpi/include -pthread
MPI link flags (INTERX cluster):
mpicxx --showme:link  :  -pthread -L/opt/openmpi/lib -lmpi_cxx -lmpi -libverbs -ldat -lrt -lnsl -lutil -lm -ldl -lm -Wl,--export-dynamic -lrt -lnsl -lutil -lm -ldl

taken from MMFitter install: 
c-make-run.sh:MPI_INCLUDE=$(mpicxx --showme:compile)
c-make-run.sh:MPI_LINK_FLAGS=$(mpicxx --showme:link)
-------------------------------------------------------------------------------
swig build configure params:
configure --prefix ${HOME}/local --without-prse 
----------------------------------------------------------------------------------
wxWidgets 2.8.10 flags:

make install --ignore  ( pass some errors during install)

with intel c++ 13 and python 2.7 needed to 
#include <cstddef>  to pnpmod_wrap.cpp,  hamolset_wrap.cpp and 
to resolve ptrdiff_t type

plugged 
 
%begin %{
#include <mpi.h>  
#include <cstddef>  
%}

into hamolset.i file and halib.i file   I hope it fixed the issue
--------------------------------------------------------------------------------------------
wxWidgets config on linux - now part of wxPython setup 
had to comment a couple of asserts in sizer.cpp 

also could do ( but didn't figure out how to do it iin python build.py build_wx )
./configure --disable-debug_flag

NOGUI:

mkdir wxWidgets/build_nogui:

Igor CMU Linux:
../configure --disable-gui --disable-shared --prefix=/export/home/igor/local    - 

InterX cluster:
export CC=/opt/centos/devtoolset-1.1/root/usr/bin/gcc
export CXX=/opt/centos/devtoolset-1.1/root/usr/bin/g++
../configure --disable-gui --disable-shared --prefix=/export/apps/local           - 
make

------------------------------------------------------------------------------------------
INTEL complilers and MKL on LINUX:

File to use: 
parallel_studio_xe_2013_update2_linux.tgz

Intel® Parallel Studio XE for Linux* 
Your product serial number is: N433-2DHW3DJL
Get new product updates and releases through: March 29, 2014

--------------------------------------------------------------------------------------------
mortlib in

~/MYPROG/AMBER11_IGOR/AmberTools/src/gleap/mortsrc
to compile go to 
~/MYPROG/AMBER11_IGOR/AmberTools/src/gleap 
cmake CMakeLists.txt
make
---------------------------------------------------------------------------------------------

MKL library needed to be present:

mkl_sequential.dll
mkl_core.dll
mkl_avx.dll    - (mkl_core.dll and mkl_sequential.dll depends on it but never complain....) 

may be for additional functions other MKL libraries are needed
In the currently used MKL version they are in :
c:\Program Files (x86)\Intel\Composer XE 2013\redist\ia32\mkl  
-----------------------------------------------------------------------------------------------------------
wxPython4 - Phoenix install:
UBUNTU 18.04
sudo apt install make gcc libgtk-3-dev libwebkitgtk-dev libwebkitgtk-3.0-dev libgstreamer-gl1.0-0 freeglut3 freeglut3-dev python-gst-1.0 python3-gst-1.0 libglib2.0-dev ubuntu-restricted-extras libgstreamer-plugins-base1.0-dev
sudo pip3 install pathlib2
sudo pip3 install wxpython
worked on FRIEND!

may be I should install those first:
sudo apt-get install libwxgtk3.0-dev
sudo apt-get install wx3.0-examples
sudo apt-get install wx3.0-doc
----------------------------------------------------------------------------------------------------------
Python3 
Unzip: Phoenix_09_18_DOX_ETG_SIP.tar
cd Phoenix

for gcc 7.4 im ubuntu 18.04 and waf-2.0.17
add additional link file to compile python extentions:
export LDFLAGS="-fno-lto"

python build.py build --help         -- show options 
python build.py build --both         -- build both wxwidgets (build_wx ) and  wxPython library (build_py)  both release and debug versions

Anaconda additional pacakges to make wheel:
conda install -c conda-forge python-magic

make wheel file:
python3 build.py bdist_wheel  

--------------------------------------------------------------------------------------------------------
Windows:
python -m pip install requests

In C:\Python37_64\Lib\distutils>
or C:\Python37_32\Lib\distutils>

edit: msvc9compiler.py 
substitute: 
productdir = productdir = Reg.get_value(r"%s\Setup\VC" % vsbase, "productdir")
with: ( path to vcvarsall.bat)
VISUAL STUDIO 2019   ( path to dthe directory with vcvarsall.bat )
productdir = os.path.join("C:\\","Program Files (x86)","Microsoft Visual Studio","2019","Professional","VC","Auxiliary","Build")

in Phoenix\wscript    
        if msvc_version == "14.1" and sys.version_info >= (3,7):
            ##msvc_version = '15.0'

            # On the other hand, microsoft says that v141 and v140 (Visual
            # Studio 2015) are binary compatible, so for now let's just drop
            # it back to "14.0" until I get all the details worked out for
            # using VS 2017 everywhere for Python 3.7.
#            msvc_version = '14.0'              --  comment this line
             msvc_version = '16.2'              --  add this line to compile with Visual Studio 2019 cl compiler (16.2) ....  or 14.22.27905  - not sure on versions
			                                          


Unzip: Phoenix_09_18_DOX_ETG_SIP.tar
cd Phoenix
python build.py build --help         -- show options 
python build.py build --both         -- build both wxwidgets (build_wx ) and  wxPython library (build_py)  both release and debug versions
------------------------------------------------------------------------------------------------------------------------------------------------
WINDOWS :
Install VCPKG to:
c:\MYPROG\vcpkg

in c:\MYPROG\vcpkg install packages:
.\vcpkg install plplot[wxwidgets]:x64-windows   (plplot + wxWidgets)
.\vcpkg install boost:x64-windows               (boost libraries)
.\vcpkg install mpir:x64-windows                (muliprecision arithmetics)
.\vcpkg install msmpi:x64-windows               (Microsoft MPI)  



---------------------------------------------------------------------------------------------------------------------------------------------------

