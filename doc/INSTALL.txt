LINUX:

UBUNTU(16.04/18.04) packages:

sudo apt install gcc g++ python3-pip
sudo apt install libgtk-3-dev freeglut3 freeglut3-dev  ( may be but  libwebkitgtk-dev libwebkitgtk-3.0-dev  seems not needed on ubuntu 18.04 and 20.04)
sudo apt install gfortran gfortran-7
sudo apt install automake
sudo apt install libboost-dev libboost-all-dev
libgmp-dev
python3-dev
zlib1g-dev 
libopenmpi-dev
openmpi-bin
openmpi-common
libopenblas-dev
libplplot-dev
libplplotwxwidgets1       ( UBUNTU 18.04 and later )
plplot12-driver-wxwidgets ( UBUNTU 16.04 -installed with libplplot-dev ?? )sud
sudo apt install libwxgtk3.0-dev   ( for libplot wxwidgets driver  )
sudo apt install libshp-dev         ( for libplot shapelib connection   - already installed for UBUNTU 20.04 ) 
swig 
--------------------------------------------------------------------------------------
UBUNTU(20.04):
COMMENTED A LOT OF LINES in gextr.f !!  - restore! 

-------------------------------------------------------------------------------------------
GAUSSIAN util.a: 
unpack g98.tar in ../PROG_SRC
----------------------------------------------------------------------------------------------
#cmake CMakeLists.txt -DPYTHONINC=/share/apps/anaconda3/include/python3.7m -DPYTHONLIB=/share/apps/anaconda3/lib -DBOOSTPINC=/usr/include -DBOOSTPLIB=/usr/lib/x86_64-linux-gnu
#make - it will make mortlib.a   although python bidings will not be finished

libtoolize --force                 --- creates ltmain.sh link and files in ./config    need to delete ltmain.sh  if existed)  check! 
automake --add-missing             --- creates compile,missing and depcomp links  ( need to delete missing if existed ) - check!
autoreconf    

------------------------------------------------------------------------------------------
if we have the error: 
failed to generate dependencies for the library
able to run compilation of the shared library with:
configure --disable-dependency-tracking

Configure HAPACK:
mkdir BUILD_HARLEM
cd    BUILD HARLEM

../HAPACK/configure --prefix /share/apps/HARLEM --with-wx-config=/home/igor/MYPROG/Phoenix/build/wxbld/gtk3/wx-config 

Some Libraries are not still compiled automatically ( TODO ):
mkdir MORT_LIB
cd MORT_LIB
cmake ../../HAPACK/MORT_LIB/
make
cd .. ( BUILD_HARLEM dir )
cd PMEMD_LIB
make
cd ..
--------------------------------------------------------------------------------------------------------------------
Compilation on Berkeley cluster with conda compilers:

need to make a link  $CONDA_PREFIX/include/GL/glx.h  -> /usr/include/glx.h
                     $CONDA_PREFIX/include/GL/glxext.h  -> /usr/include/glxext.h
                     $CONDA_PREFIX/lib/librdmacm.so  -> /usr/lib64/librdmacm.so
                     $CONDA_PREFIX/lib/libibverbs.so  -> /usr/lib64/libibverbs.so
                     $CONDA_PREFIX/lib/libudev.so  -> /usr/lib64/libudev.so

hardcoded include dir to  MORT_LIB/CMakeLists.txt
include_directories( $CONDA_PREFIX/include )

This seems not needed anymore
// need to copy  /lib64/libboost*                to $CONDA_PREFIX/lib
//              /lib64/libxkbcommon.so.0        to $CONDA_PREFIX/lib
//			  /lib64/libwayland-cursor.so.0   to $CONDA_PREFIX/lib
//			  /lib64/libwayland-egl.so.1      to $CONDA_PREFIX/lib
			  
-------------------------------------------------------------------------------------------------------------------------
MKL: Right now is switched off on linux - has libraries not found problem for RMSD calculations:
currently we are using standard blas and lapack on UBUNTU :

   install INTEL MKL 64-bit library  
   get  l_mkl_2019.5.281.tgz from /share/apps/HARLEM/HARLEM_UBUNTU_18.04
   gzip -dc l_mkl_2019.5.281.tgz | tar -xvf -
   cd l_mkl_2019.5.281
   ./install 
   choose /share/apps/intel   for installation dir

additional flags to configure:
--with-mkl64=/share/apps/intel/mkl

-------------------------------------------------------------------------------------------------------------------
UBUNTU 16.04 ( gcc 5.4.0 )

CPPFLAGS=-std=c++11  ../HAPACK/configure --prefix /share/apps/HARLEM --with-wx-config=/home/igor/MYPROG/Phoenix/build/wxbld/gtk3/wx-config 

UBUNTU 18.04 ( gcc 7.4.0 ) ( may be needed LDFLAGS=-fno-lto  - for some python c++ interaction - right now seems ok without it )

LDFLAGS=-fno-lto ../HAPACK/configure --prefix /share/apps/HARLEM --with-wx-config=/home/igor/MYPROG/Phoenix/build/wxbld/gtk3/wx-config 
---------------------------------------------------------------------------------------------------------------
PLPLOT compilation ( if versions coming with LINUX are not working: )
cmake -DCMAKE_INSTALL_PREFIX=/home/kurnikov/local_GCC_7_4/ -DTEST_DYNDRIVERS=OFF ..
---------------------------------------------------------------------------------------------------------------------------------------------------
// MPI:
// Problems with OPENMPI on linux:
// The easiest way to do this is to configure your Open MPI installation with --disable-dlopen.
//Open MPI uses a bunch of plugins for its functionality. When you dlopen libmpi in a private namespace (like Python does), and then libmpi tries to dlopen its plugins, the plugins can't find the symbols that they need in the main libmpi library (because they're in a private namespace).
// The workaround is to build Open MPI with all of its plugins slurped up into the libmpi library itself (i.e., so that Open MPI doesn't have to dlopen its plugins).
Fixed with explicit dlopen( openmpi.so ) call

LINUX NOGUI (IGOR CMU):

../HAPACK/configure --prefix /home/igor/HARLEM --with-wx-config=/home/igor/local/bin/wx-config --with-mpich=/usr/lib/mpich2 --with-mkl64=/opt/intel/mkl

LINUX INTERX cluster02 GCC 4.8.5 - 05/22/2020:
Install OpenBLAS:
cd /home/kurnikov/PROG_SRC/OpenBLAS
make
make PREFIX=/home/kurnikov/local install

CXXFLAGS=-std=c++11 ../HAPACK/configure --with-wx-config=/home/kurnikov/PROG_SRC/wxPython-4.1.0_GCC_4.8/build/wxbld/gtk3/wx-config

wxWidgets libraries on INTERX cluster:

/home/kurnikov/MYPROG/wxWidgets/wx-config

/share/apps/local/bin/wx-config

MKL libraries on INTERX cluster:

/share/apps/MOLPROLIBS/mkl/lib/intel64

MPI include flags (INTERX cluster):
mpicxx --showme:compile   :   -I/opt/openmpi/include -pthread
MPI link flags (INTERX cluster):
mpicxx --showme:link  :  -pthread -L/opt/openmpi/lib -lmpi_cxx -lmpi -libverbs -ldat -lrt -lnsl -lutil -lm -ldl -lm -Wl,--export-dynamic -lrt -lnsl -lutil -lm -ldl

taken from MMFitter install: 
c-make-run.sh:MPI_INCLUDE=$(mpicxx --showme:compile)
c-make-run.sh:MPI_LINK_FLAGS=$(mpicxx --showme:link)
-------------------------------------------------------------------------------
swig build configure params:
configure --prefix ${HOME}/local --without-prse 
----------------------------------------------------------------------------------
wxWidgets config on linux - now part of wxPython setup 
had to comment a couple of asserts in sizer.cpp 

also could do ( but didn't figure out how to do it iin python build.py build_wx )
./configure --disable-debug_flag

NOGUI:

mkdir wxWidgets/build_nogui:

Igor CMU Linux:
../configure --disable-gui --disable-shared --prefix=/export/home/igor/local    - 

InterX cluster:
export CC=/opt/centos/devtoolset-1.1/root/usr/bin/gcc
export CXX=/opt/centos/devtoolset-1.1/root/usr/bin/g++
../configure --disable-gui --disable-shared --prefix=/export/apps/local           - 
make

----------------------------------------------------------------------------------------
Atomix hercules workstation (Centos 8):
Compile and install OpenBlas:
add to PKG_CONFIG_PATH environment variable the directory with openblas.pc:
export PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig:$PKG_CONFIG_PATH
Set alias pkg-config to pkgconf (new substitution for pkg-config) 
alias pkg-config=pkgconf
------------------------------------------------------------------------------------------
INTEL complilers and MKL on LINUX:

File to use: 
parallel_studio_xe_2013_update2_linux.tgz

Intel® Parallel Studio XE for Linux* 
Your product serial number is: N433-2DHW3DJL
Get new product updates and releases through: March 29, 2014

---------------------------------------------------------------------------------------------
MKL library needed to be present:

mkl_sequential.dll
mkl_core.dll
mkl_avx.dll    - (mkl_core.dll and mkl_sequential.dll depends on it but never complain....) 

may be for additional functions other MKL libraries are needed
In the currently used MKL version they are in :
c:\Program Files (x86)\Intel\Composer XE 2013\redist\ia32\mkl  
-----------------------------------------------------------------------------------------------------------
wxPython4 - Phoenix install:
UBUNTU 18.04
sudo apt install make gcc libgtk-3-dev libwebkitgtk-dev libwebkitgtk-3.0-dev libgstreamer-gl1.0-0 freeglut3 freeglut3-dev python-gst-1.0 python3-gst-1.0 libglib2.0-dev ubuntu-restricted-extras libgstreamer-plugins-base1.0-dev
sudo pip3 install pathlib2
sudo pip3 install wxpython
worked on FRIEND!

may be I should install those first:
sudo apt-get install libwxgtk3.0-dev
sudo apt-get install wx3.0-examples
sudo apt-get install wx3.0-doc
----------------------------------------------------------------------------------------------------------
Python3 
Unzip: Phoenix_09_18_DOX_ETG_SIP.tar
cd Phoenix

for gcc 7.4 im ubuntu 18.04 and waf-2.0.17
add additional link file to compile python extentions:
export LDFLAGS="-fno-lto"

python build.py build --help         -- show options 
python build.py build --both         -- build both wxwidgets (build_wx ) and  wxPython library (build_py)  both release and debug versions

Anaconda additional pacakges to make wheel:
conda install -c conda-forge python-magic

make wheel file:
python3 build.py bdist_wheel  

----------------------------------------------------------------------------------------------------------
Get Autotools ( and other progs: )
curl -L -O http://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.gz
or
wget http://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.gz
--------------------------------------------------------------------------------------------------------
Windows:
python -m pip install requests

In C:\Python37_64\Lib\distutils>

edit: msvc9compiler.py 
substitute: 
productdir = productdir = Reg.get_value(r"%s\Setup\VC" % vsbase, "productdir")
with: ( path to vcvarsall.bat)
VISUAL STUDIO 2019   ( path to dthe directory with vcvarsall.bat )
productdir = os.path.join("C:\\","Program Files (x86)","Microsoft Visual Studio","2019","Professional","VC","Auxiliary","Build")

in Phoenix\wscript    
        if msvc_version == "14.1" and sys.version_info >= (3,7):
            ##msvc_version = '15.0'

            # On the other hand, microsoft says that v141 and v140 (Visual
            # Studio 2015) are binary compatible, so for now let's just drop
            # it back to "14.0" until I get all the details worked out for
            # using VS 2017 everywhere for Python 3.7.
#            msvc_version = '14.0'              --  comment this line
             msvc_version = '16.2'              --  add this line to compile with Visual Studio 2019 cl compiler (16.2) ....  or 14.22.27905  - not sure on versions
			                                          

Unzip: Phoenix_09_18_DOX_ETG_SIP.tar
cd Phoenix
python build.py build --help         -- show options 
python build.py build --both         -- build both wxwidgets (build_wx ) and  wxPython library (build_py)  both release and debug versions
------------------------------------------------------------------------------------------------------------------------------------------------
WINDOWS :
Install VCPKG to:
c:\MYPROG\vcpkg

in c:\MYPROG\vcpkg install packages:
  
( for python 3.9.7 ( see more in VCPKG_PYTHON 
git checkout 2ed5383f7b88b23975f9cfd325f6451fd8716fb2 -- ports/python3
orts/python3/portfile.cmake  subsitute 
find_library(LZMA_DEBUG NAMES lzmad PATHS "${CURRENT_INSTALLED_DIR}/debug/lib" NO_DEFAULT_PATH) to:
find_library(LZMA_DEBUG NAMES lzma PATHS "${CURRENT_INSTALLED_DIR}/debug/lib" NO_DEFAULT_PATH) )

.\vcpkg install python3 
.\vcpkg install plplot[wxwidgets]:x64-windows   (plplot + wxWidgets)   not needed any more?? 
.\vcpkg install boost:x64-windows               (boost libraries)
.\vcpkg install mpir:x64-windows                (muliprecision arithmetics)
.\vcpkg install msmpi:x64-windows               (Microsoft MPI)  
---------------------------------------------------------------------------------------
conda packages to install with HARLEM:
conda install python=3.9
conda install matplotlib
conda install mdtraj
conda install openbabel
conda install rdkit 

---------------------------------------------------------------------------------------------------------------------------------------------------
BUILD HARLEM AND MOLSET CONDA PACKAGE:

conda build ./conda-recipe --output-folder ..\HARLEM_CONDA_CHANNEL

-----------------------------------------------------------------------------------------------




