#!/usr/bin/env python

from sys import argv
from sys import exit
from string import lower
from string import upper
from string import strip

def hash(str) :
    sum = 0
    if len(str) > 12 :
        raise "Error: string can not longer than 12"

    for l in xrange(len(str)-1, -1, -1):
        c = str[l]
        if c >= 'a' and c <= 'z' :
	    i = ord(c) - ord('a')
        elif c >= '0' and c <= '9' :
            i = ord(c) - ord('0') + 26
        elif c == '_':
            i = 36
	else :
	    raise "Error: string can only be lower cased charactor or digits"

        sum = 40*sum + i

    return sum

ifile = None
ofile = None

i = 1
while i < len(argv):
    if argv[i] == "-i" :
        i = i+1
	ifile = argv[i]
    elif argv[i] == "-op" :
        i = i+1
	ofile = argv[i]
    else :
        print "Error: unknown option " + argv[i]
	print "Usage: genhash -i ifile -op ofileprefix"
	exit(-1)

    i = i+1

if( ifile == None ):
    print "Error: no input file"
    exit(-1)

if( ofile == None ):
    print "Error: no output file"

words = []
codes = []
code2word={}
ifh = open( ifile, "r" )
line = ifh.readline()
while line:
    word = lower( strip(line) )
    code = hash(word)

    if( code2word.has_key(code) ) :
        print "Error: " + word + " collide with " + code2word[code]
	exit(-5);

    words.append(word)
    codes.append(code)

    line = ifh.readline()


ohpp = open( ofile+".hpp", "w" )

ohpp.write( "// generated by hashgen.py, using simple hash function\n" );
ohpp.write( "#ifndef MORT_COMMON_" + upper(ofile) + "_HPP\n" )
ohpp.write( "#define MORT_COMMON_" + upper(ofile) + "_HPP\n" )
ohpp.write( "\n" )
ohpp.write( "#include <map>\n" )
ohpp.write( "#include <string>\n" )
ohpp.write( "\n" )
ohpp.write( "namespace mort\n" )
ohpp.write( "{\n" )
ohpp.write( "    typedef long long hashid_t;\n")
ohpp.write( "    using std::string;\n" )
for i in xrange( len(words) ):
    ohpp.write( "    static const hashid_t %-15s = %-dLLU;\n" % ( upper(words[i]), codes[i] ) )

ohpp.write( "\n" )
ohpp.write( "    string unhash(const hashid_t& id);\n"  );
ohpp.write( "    hashid_t hash(const string& name);\n\n" )
ohpp.write( "} // namespace mort\n\n" );
ohpp.write( "#endif\n\n\n" )

opy = open( ofile+".py", "w" )
opy.write( "#generated by hashgen.py\n" )

for i in xrange( len(words) ):
    opy.write( "%-15s = %-d\n" % ( upper(words[i]), codes[i] ) )
opy.write("\n")

